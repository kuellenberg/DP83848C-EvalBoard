
Firmware-DP83848C-Evalboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014db0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003864  08014f40  08014f40  00024f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080187a4  080187a4  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080187a4  080187a4  000287a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080187ac  080187ac  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080187ac  080187ac  000287ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080187b0  080187b0  000287b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080187b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ce0  2000007c  08018830  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006d5c  08018830  00036d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037cc1  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000662c  00000000  00000000  00067d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af0  00000000  00000000  0006e3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a48  00000000  00000000  0006fe90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e9dc  00000000  00000000  000718d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b3ef  00000000  00000000  000a02b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5554  00000000  00000000  000cb6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b0bf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007928  00000000  00000000  001b0c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014f28 	.word	0x08014f28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08014f28 	.word	0x08014f28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <mqtt_connection_cb>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	4613      	mov	r3, r2
 8000584:	80fb      	strh	r3, [r7, #6]
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d10d      	bne.n	80005a8 <mqtt_connection_cb+0x30>
    printf("mqtt_connection_cb: Successfully connected\n");
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <mqtt_connection_cb+0x48>)
 800058e:	f013 fcc1 	bl	8013f14 <puts>
    //mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);

    /* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
    //err = mqtt_subscribe(client, "subtopic", 1, mqtt_sub_request_cb, arg);

    if(err != ERR_OK) {
 8000592:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00e      	beq.n	80005b8 <mqtt_connection_cb+0x40>
      printf("mqtt_subscribe return: %d\n", err);
 800059a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800059e:	4619      	mov	r1, r3
 80005a0:	4808      	ldr	r0, [pc, #32]	; (80005c4 <mqtt_connection_cb+0x4c>)
 80005a2:	f013 fc31 	bl	8013e08 <iprintf>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);

    /* Its more nice to be connected, so try to reconnect */
    example_do_connect(client);
  }
}
 80005a6:	e007      	b.n	80005b8 <mqtt_connection_cb+0x40>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	4619      	mov	r1, r3
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <mqtt_connection_cb+0x50>)
 80005ae:	f013 fc2b 	bl	8013e08 <iprintf>
    example_do_connect(client);
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f000 f80a 	bl	80005cc <example_do_connect>
}
 80005b8:	bf00      	nop
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	08014f40 	.word	0x08014f40
 80005c4:	08014f6c 	.word	0x08014f6c
 80005c8:	08014f88 	.word	0x08014f88

080005cc <example_do_connect>:


void example_do_connect(mqtt_client_t *client)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08e      	sub	sp, #56	; 0x38
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	6078      	str	r0, [r7, #4]
  struct mqtt_connect_client_info_t ci;
  err_t err;
  ip_addr_t broker;
  IP4_ADDR(&broker ,192,168,0,21);
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <example_do_connect+0x5c>)
 80005d6:	60fb      	str	r3, [r7, #12]

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	221c      	movs	r2, #28
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f013 fc09 	bl	8013df8 <memset>

  /* Minimal amount of information required is client identifier, so set it here */
  ci.client_id = "lwip_test";
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <example_do_connect+0x60>)
 80005e8:	613b      	str	r3, [r7, #16]
  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting
     to establish a connection with the server.
     For now MQTT version 3.1.1 is always used */

  err = mqtt_client_connect(client, &broker, 1883, mqtt_connection_cb, 0, &ci);
 80005ea:	f107 010c 	add.w	r1, r7, #12
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2300      	movs	r3, #0
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <example_do_connect+0x64>)
 80005fa:	f240 725b 	movw	r2, #1883	; 0x75b
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f006 fb84 	bl	8006d0c <mqtt_client_connect>
 8000604:	4603      	mov	r3, r0
 8000606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* For now just print the result code if something goes wrong */
  if(err != ERR_OK) {
 800060a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800060e:	2b00      	cmp	r3, #0
 8000610:	d005      	beq.n	800061e <example_do_connect+0x52>
    printf("mqtt_connect return %d\n", err);
 8000612:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000616:	4619      	mov	r1, r3
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <example_do_connect+0x68>)
 800061a:	f013 fbf5 	bl	8013e08 <iprintf>
  }
}
 800061e:	bf00      	nop
 8000620:	3730      	adds	r7, #48	; 0x30
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	1500a8c0 	.word	0x1500a8c0
 800062c:	08014fb8 	.word	0x08014fb8
 8000630:	08000579 	.word	0x08000579
 8000634:	08014fc4 	.word	0x08014fc4

08000638 <mqtt_pub_request_cb>:


/* Called when publish is complete either with sucess or failure */
static void mqtt_pub_request_cb(void *arg, err_t result)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
  if(result != ERR_OK) {
 8000644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d005      	beq.n	8000658 <mqtt_pub_request_cb+0x20>
    printf("Publish result: %d\n", result);
 800064c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000650:	4619      	mov	r1, r3
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <mqtt_pub_request_cb+0x28>)
 8000654:	f013 fbd8 	bl	8013e08 <iprintf>
  }
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	08014fdc 	.word	0x08014fdc

08000664 <example_publish>:




void example_publish(mqtt_client_t *client, void *arg)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af04      	add	r7, sp, #16
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  const char *pub_payload= "Moobert sagt moo!";
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <example_publish+0x5c>)
 8000670:	60fb      	str	r3, [r7, #12]
  err_t err;
  u8_t qos = 2; /* 0 1 or 2, see MQTT specification */
 8000672:	2302      	movs	r3, #2
 8000674:	72fb      	strb	r3, [r7, #11]
  u8_t retain = 0; /* No don't retain such crappy payload... */
 8000676:	2300      	movs	r3, #0
 8000678:	72bb      	strb	r3, [r7, #10]
  err = mqtt_publish(client, "test", pub_payload, strlen(pub_payload), qos, retain, mqtt_pub_request_cb, arg);
 800067a:	68f8      	ldr	r0, [r7, #12]
 800067c:	f7ff fda8 	bl	80001d0 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	9303      	str	r3, [sp, #12]
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <example_publish+0x60>)
 800068a:	9302      	str	r3, [sp, #8]
 800068c:	7abb      	ldrb	r3, [r7, #10]
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	7afb      	ldrb	r3, [r7, #11]
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	4613      	mov	r3, r2
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	490b      	ldr	r1, [pc, #44]	; (80006c8 <example_publish+0x64>)
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f006 fa58 	bl	8006b50 <mqtt_publish>
 80006a0:	4603      	mov	r3, r0
 80006a2:	727b      	strb	r3, [r7, #9]
  if(err != ERR_OK) {
 80006a4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d005      	beq.n	80006b8 <example_publish+0x54>
    printf("Publish err: %d\n", err);
 80006ac:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <example_publish+0x68>)
 80006b4:	f013 fba8 	bl	8013e08 <iprintf>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08014ff0 	.word	0x08014ff0
 80006c4:	08000639 	.word	0x08000639
 80006c8:	08015004 	.word	0x08015004
 80006cc:	0801500c 	.word	0x0801500c

080006d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM3) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d10e      	bne.n	8000700 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006e2:	2101      	movs	r1, #1
 80006e4:	4809      	ldr	r0, [pc, #36]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80006e6:	f002 f898 	bl	800281a <HAL_GPIO_TogglePin>
		example_do_connect(client);
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff6c 	bl	80005cc <example_do_connect>
		example_publish(client, NULL);
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffb2 	bl	8000664 <example_publish>
	}
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40000400 	.word	0x40000400
 800070c:	40020c00 	.word	0x40020c00
 8000710:	20000670 	.word	0x20000670

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 fb76 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f81c 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f000 f900 	bl	8000924 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000724:	f004 fd62 	bl	80051ec <MX_LWIP_Init>
  MX_TIM3_Init();
 8000728:	f000 f880 	bl	800082c <MX_TIM3_Init>
  MX_USB_OTG_FS_PCD_Init();
 800072c:	f000 f8cc 	bl	80008c8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8000730:	4807      	ldr	r0, [pc, #28]	; (8000750 <main+0x3c>)
 8000732:	f003 fc2d 	bl	8003f90 <HAL_TIM_Base_Start_IT>

  client = mqtt_client_new();
 8000736:	f006 fadf 	bl	8006cf8 <mqtt_client_new>
 800073a:	4603      	mov	r3, r0
 800073c:	4a05      	ldr	r2, [pc, #20]	; (8000754 <main+0x40>)
 800073e:	6013      	str	r3, [r2, #0]
  example_do_connect(client);
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <main+0x40>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff41 	bl	80005cc <example_do_connect>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  MX_LWIP_Process();
 800074a:	f004 fd95 	bl	8005278 <MX_LWIP_Process>
 800074e:	e7fc      	b.n	800074a <main+0x36>
 8000750:	20000628 	.word	0x20000628
 8000754:	20000670 	.word	0x20000670

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f013 fb46 	bl	8013df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a27      	ldr	r2, [pc, #156]	; (8000824 <SystemClock_Config+0xcc>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b25      	ldr	r3, [pc, #148]	; (8000824 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <SystemClock_Config+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <SystemClock_Config+0xd0>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b4:	2301      	movs	r3, #1
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80007c8:	230f      	movs	r3, #15
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80007cc:	2390      	movs	r3, #144	; 0x90
 80007ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007d4:	2305      	movs	r3, #5
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 ff67 	bl	80036b0 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e8:	f000 f908 	bl	80009fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2103      	movs	r1, #3
 800080a:	4618      	mov	r0, r3
 800080c:	f003 f9c8 	bl	8003ba0 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000816:	f000 f8f1 	bl	80009fc <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	; 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_TIM3_Init+0x94>)
 800084a:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <MX_TIM3_Init+0x98>)
 800084c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6000;
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_TIM3_Init+0x94>)
 8000850:	f241 7270 	movw	r2, #6000	; 0x1770
 8000854:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_TIM3_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_TIM3_Init+0x94>)
 800085e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000862:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_TIM3_Init+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_TIM3_Init+0x94>)
 800086c:	2280      	movs	r2, #128	; 0x80
 800086e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000870:	4813      	ldr	r0, [pc, #76]	; (80008c0 <MX_TIM3_Init+0x94>)
 8000872:	f003 fb3d 	bl	8003ef0 <HAL_TIM_Base_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800087c:	f000 f8be 	bl	80009fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000884:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_TIM3_Init+0x94>)
 800088e:	f003 fcf7 	bl	8004280 <HAL_TIM_ConfigClockSource>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000898:	f000 f8b0 	bl	80009fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089c:	2300      	movs	r3, #0
 800089e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_TIM3_Init+0x94>)
 80008aa:	f003 ff0f 	bl	80046cc <HAL_TIMEx_MasterConfigSynchronization>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008b4:	f000 f8a2 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000628 	.word	0x20000628
 80008c4:	40000400 	.word	0x40000400

080008c8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008dc:	2202      	movs	r2, #2
 80008de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090c:	f001 ff9f 	bl	800284e <HAL_PCD_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 f871 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000220 	.word	0x20000220

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a2c      	ldr	r2, [pc, #176]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a25      	ldr	r2, [pc, #148]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a1e      	ldr	r2, [pc, #120]	; (80009f4 <MX_GPIO_Init+0xd0>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_GPIO_Init+0xd0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_GPIO_Init+0xd0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <MX_GPIO_Init+0xd0>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_GPIO_Init+0xd0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2101      	movs	r1, #1
 80009ca:	480b      	ldr	r0, [pc, #44]	; (80009f8 <MX_GPIO_Init+0xd4>)
 80009cc:	f001 ff0c 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009d0:	2301      	movs	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0xd4>)
 80009e8:	f001 fd62 	bl	80024b0 <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020c00 	.word	0x40020c00

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_TIM_Base_MspInit+0x48>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d115      	bne.n	8000a96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_TIM_Base_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <HAL_TIM_Base_MspInit+0x4c>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_TIM_Base_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	201d      	movs	r0, #29
 8000a8c:	f000 fb2d 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a90:	201d      	movs	r0, #29
 8000a92:	f000 fb46 	bl	8001122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40000400 	.word	0x40000400
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ac8:	d13a      	bne.n	8000b40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <HAL_PCD_MspInit+0xa0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <HAL_PCD_MspInit+0xa0>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <HAL_PCD_MspInit+0xa0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ae6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af8:	230a      	movs	r3, #10
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4812      	ldr	r0, [pc, #72]	; (8000b4c <HAL_PCD_MspInit+0xa4>)
 8000b04:	f001 fcd4 	bl	80024b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_PCD_MspInit+0xa0>)
 8000b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_PCD_MspInit+0xa0>)
 8000b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b12:	6353      	str	r3, [r2, #52]	; 0x34
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_PCD_MspInit+0xa0>)
 8000b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_PCD_MspInit+0xa0>)
 8000b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b22:	6453      	str	r3, [r2, #68]	; 0x44
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_PCD_MspInit+0xa0>)
 8000b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2043      	movs	r0, #67	; 0x43
 8000b36:	f000 fad8 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000b3a:	2043      	movs	r0, #67	; 0x43
 8000b3c:	f000 faf1 	bl	8001122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f986 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM3_IRQHandler+0x10>)
 8000baa:	f003 fa61 	bl	8004070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000628 	.word	0x20000628

08000bb8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <ETH_IRQHandler+0x10>)
 8000bbe:	f000 feab 	bl	8001918 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20001f8c 	.word	0x20001f8c

08000bcc <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <ETH_WKUP_IRQHandler+0x10>)
 8000bd2:	f000 fea1 	bl	8001918 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20001f8c 	.word	0x20001f8c

08000be0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <OTG_FS_IRQHandler+0x10>)
 8000be6:	f001 ff4f 	bl	8002a88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000220 	.word	0x20000220

08000bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
	return 1;
 8000bf8:	2301      	movs	r3, #1
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_kill>:

int _kill(int pid, int sig)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <_kill+0x20>)
 8000c10:	2216      	movs	r2, #22
 8000c12:	601a      	str	r2, [r3, #0]
	return -1;
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	20006d4c 	.word	0x20006d4c

08000c28 <_exit>:

void _exit (int status)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffe5 	bl	8000c04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c3a:	e7fe      	b.n	8000c3a <_exit+0x12>

08000c3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e00a      	b.n	8000c64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c4e:	f3af 8000 	nop.w
 8000c52:	4601      	mov	r1, r0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	b2ca      	uxtb	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf0      	blt.n	8000c4e <_read+0x12>
	}

return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e009      	b.n	8000c9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	60ba      	str	r2, [r7, #8]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf1      	blt.n	8000c88 <_write+0x12>
	}
	return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_close>:

int _close(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	return -1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_isatty>:

int _isatty(int file)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
	return 1;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
	return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d205      	bcs.n	8000d54 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <_sbrk+0x6c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	20020000 	.word	0x20020000
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	20000098 	.word	0x20000098
 8000d80:	20006d60 	.word	0x20006d60
 8000d84:	20006d4c 	.word	0x20006d4c

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <SystemInit+0x28>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <SystemInit+0x28>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SystemInit+0x28>)
 8000d9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da2:	609a      	str	r2, [r3, #8]
#endif
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000db8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dba:	e003      	b.n	8000dc4 <LoopCopyDataInit>

08000dbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dc2:	3104      	adds	r1, #4

08000dc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dcc:	d3f6      	bcc.n	8000dbc <CopyDataInit>
  ldr  r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dd0:	e002      	b.n	8000dd8 <LoopFillZerobss>

08000dd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dd4:	f842 3b04 	str.w	r3, [r2], #4

08000dd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ddc:	d3f9      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dde:	f7ff ffd3 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f012 ffc9 	bl	8013d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fc95 	bl	8000714 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000df0:	080187b4 	.word	0x080187b4
  ldr  r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000df8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000dfc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000e00:	20006d5c 	.word	0x20006d5c

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f94f 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fde4 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f967 	bl	800113e <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f92f 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000674 	.word	0x20000674

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000674 	.word	0x20000674

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4907      	ldr	r1, [pc, #28]	; (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff29 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff3e 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff31 	bl	8000f98 <__NVIC_EnableIRQ>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffa2 	bl	8001090 <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001168:	4baa      	ldr	r3, [pc, #680]	; (8001414 <HAL_ETH_Init+0x2bc>)
 800116a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e183      	b.n	8001486 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d106      	bne.n	8001198 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f004 f87c 	bl	8005290 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b9e      	ldr	r3, [pc, #632]	; (8001418 <HAL_ETH_Init+0x2c0>)
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	4a9d      	ldr	r2, [pc, #628]	; (8001418 <HAL_ETH_Init+0x2c0>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a6:	6453      	str	r3, [r2, #68]	; 0x44
 80011a8:	4b9b      	ldr	r3, [pc, #620]	; (8001418 <HAL_ETH_Init+0x2c0>)
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011b4:	4b99      	ldr	r3, [pc, #612]	; (800141c <HAL_ETH_Init+0x2c4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a98      	ldr	r2, [pc, #608]	; (800141c <HAL_ETH_Init+0x2c4>)
 80011ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011be:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011c0:	4b96      	ldr	r3, [pc, #600]	; (800141c <HAL_ETH_Init+0x2c4>)
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4994      	ldr	r1, [pc, #592]	; (800141c <HAL_ETH_Init+0x2c4>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f042 0201 	orr.w	r2, r2, #1
 80011e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011e6:	f7ff fe75 	bl	8000ed4 <HAL_GetTick>
 80011ea:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011ec:	e011      	b.n	8001212 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011ee:	f7ff fe71 	bl	8000ed4 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011fc:	d909      	bls.n	8001212 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2203      	movs	r2, #3
 8001202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e139      	b.n	8001486 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e4      	bne.n	80011ee <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f023 031c 	bic.w	r3, r3, #28
 8001232:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001234:	f002 fe50 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 8001238:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4a78      	ldr	r2, [pc, #480]	; (8001420 <HAL_ETH_Init+0x2c8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d908      	bls.n	8001254 <HAL_ETH_Init+0xfc>
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4a77      	ldr	r2, [pc, #476]	; (8001424 <HAL_ETH_Init+0x2cc>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d804      	bhi.n	8001254 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	e027      	b.n	80012a4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	4a73      	ldr	r2, [pc, #460]	; (8001424 <HAL_ETH_Init+0x2cc>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d908      	bls.n	800126e <HAL_ETH_Init+0x116>
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	4a6d      	ldr	r2, [pc, #436]	; (8001414 <HAL_ETH_Init+0x2bc>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d204      	bcs.n	800126e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f043 030c 	orr.w	r3, r3, #12
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	e01a      	b.n	80012a4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4a68      	ldr	r2, [pc, #416]	; (8001414 <HAL_ETH_Init+0x2bc>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d303      	bcc.n	800127e <HAL_ETH_Init+0x126>
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4a6b      	ldr	r2, [pc, #428]	; (8001428 <HAL_ETH_Init+0x2d0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d911      	bls.n	80012a2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	4a69      	ldr	r2, [pc, #420]	; (8001428 <HAL_ETH_Init+0x2d0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d908      	bls.n	8001298 <HAL_ETH_Init+0x140>
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	4a68      	ldr	r2, [pc, #416]	; (800142c <HAL_ETH_Init+0x2d4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d804      	bhi.n	8001298 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	e005      	b.n	80012a4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f043 0310 	orr.w	r3, r3, #16
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	e000      	b.n	80012a4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80012a2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80012ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012b0:	2100      	movs	r1, #0
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fc1d 	bl	8001af2 <HAL_ETH_WritePHYRegister>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00b      	beq.n	80012d6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80012c2:	6939      	ldr	r1, [r7, #16]
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fdd3 	bl	8001e70 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e0d7      	b.n	8001486 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012d6:	20ff      	movs	r0, #255	; 0xff
 80012d8:	f7ff fe08 	bl	8000eec <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80a5 	beq.w	8001430 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012e6:	f7ff fdf5 	bl	8000ed4 <HAL_GetTick>
 80012ea:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	461a      	mov	r2, r3
 80012f2:	2101      	movs	r1, #1
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 fb94 	bl	8001a22 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012fa:	f7ff fdeb 	bl	8000ed4 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	f241 3288 	movw	r2, #5000	; 0x1388
 8001308:	4293      	cmp	r3, r2
 800130a:	d90f      	bls.n	800132c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001310:	6939      	ldr	r1, [r7, #16]
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fdac 	bl	8001e70 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e0ac      	b.n	8001486 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0da      	beq.n	80012ec <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001336:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800133a:	2100      	movs	r1, #0
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 fbd8 	bl	8001af2 <HAL_ETH_WritePHYRegister>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800134c:	6939      	ldr	r1, [r7, #16]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fd8e 	bl	8001e70 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800135c:	2301      	movs	r3, #1
 800135e:	e092      	b.n	8001486 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001360:	f7ff fdb8 	bl	8000ed4 <HAL_GetTick>
 8001364:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	461a      	mov	r2, r3
 800136c:	2101      	movs	r1, #1
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fb57 	bl	8001a22 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001374:	f7ff fdae 	bl	8000ed4 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001382:	4293      	cmp	r3, r2
 8001384:	d90f      	bls.n	80013a6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800138a:	6939      	ldr	r1, [r7, #16]
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fd6f 	bl	8001e70 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e06f      	b.n	8001486 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0da      	beq.n	8001366 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	461a      	mov	r2, r3
 80013b6:	2110      	movs	r1, #16
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 fb32 	bl	8001a22 <HAL_ETH_ReadPHYRegister>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00b      	beq.n	80013dc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013c8:	6939      	ldr	r1, [r7, #16]
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fd50 	bl	8001e70 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013d8:	2301      	movs	r3, #1
 80013da:	e054      	b.n	8001486 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d004      	beq.n	80013f0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	e002      	b.n	80013f6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	e035      	b.n	8001474 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	e030      	b.n	8001474 <HAL_ETH_Init+0x31c>
 8001412:	bf00      	nop
 8001414:	03938700 	.word	0x03938700
 8001418:	40023800 	.word	0x40023800
 800141c:	40013800 	.word	0x40013800
 8001420:	01312cff 	.word	0x01312cff
 8001424:	02160ebf 	.word	0x02160ebf
 8001428:	05f5e0ff 	.word	0x05f5e0ff
 800142c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	085b      	lsrs	r3, r3, #1
 800143e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001440:	4313      	orrs	r3, r2
 8001442:	b29b      	uxth	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	2100      	movs	r1, #0
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fb52 	bl	8001af2 <HAL_ETH_WritePHYRegister>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00b      	beq.n	800146c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001458:	6939      	ldr	r1, [r7, #16]
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 fd08 	bl	8001e70 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e00c      	b.n	8001486 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800146c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001470:	f7ff fd3c 	bl	8000eec <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001474:	6939      	ldr	r1, [r7, #16]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fcfa 	bl	8001e70 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop

08001490 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_ETH_DMATxDescListInit+0x20>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e052      	b.n	8001556 <HAL_ETH_DMATxDescListInit+0xc6>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e030      	b.n	800152e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	015b      	lsls	r3, r3, #5
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014dc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014e4:	fb02 f303 	mul.w	r3, r2, r3
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	3b01      	subs	r3, #1
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	429a      	cmp	r2, r3
 800150e:	d208      	bcs.n	8001522 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3301      	adds	r3, #1
 8001514:	015b      	lsls	r3, r3, #5
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	4413      	add	r3, r2
 800151a:	461a      	mov	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	e002      	b.n	8001528 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d3ca      	bcc.n	80014cc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001540:	3310      	adds	r3, #16
 8001542:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001562:	b480      	push	{r7}
 8001564:	b087      	sub	sp, #28
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_ETH_DMARxDescListInit+0x20>
 800157e:	2302      	movs	r3, #2
 8001580:	e056      	b.n	8001630 <HAL_ETH_DMARxDescListInit+0xce>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2202      	movs	r2, #2
 800158e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e034      	b.n	8001608 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	015b      	lsls	r3, r3, #5
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	4413      	add	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015ae:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80015b6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	461a      	mov	r2, r3
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d208      	bcs.n	80015fc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	015b      	lsls	r3, r3, #5
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	4413      	add	r3, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	e002      	b.n	8001602 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d3c6      	bcc.n	800159e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800161a:	330c      	adds	r3, #12
 800161c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	371c      	adds	r7, #28
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_ETH_TransmitFrame+0x24>
 800165c:	2302      	movs	r3, #2
 800165e:	e0cd      	b.n	80017fc <HAL_ETH_TransmitFrame+0x1c0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001686:	2301      	movs	r3, #1
 8001688:	e0b8      	b.n	80017fc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	da09      	bge.n	80016a8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2212      	movs	r2, #18
 8001698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0a9      	b.n	80017fc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d915      	bls.n	80016de <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	4a54      	ldr	r2, [pc, #336]	; (8001808 <HAL_ETH_TransmitFrame+0x1cc>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	0a9b      	lsrs	r3, r3, #10
 80016bc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	4b51      	ldr	r3, [pc, #324]	; (8001808 <HAL_ETH_TransmitFrame+0x1cc>)
 80016c2:	fba3 1302 	umull	r1, r3, r3, r2
 80016c6:	0a9b      	lsrs	r3, r3, #10
 80016c8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80016cc:	fb01 f303 	mul.w	r3, r1, r3
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e001      	b.n	80016e2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80016de:	2301      	movs	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d11c      	bne.n	8001722 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80016f6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001702:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001712:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	461a      	mov	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001720:	e04b      	b.n	80017ba <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	e044      	b.n	80017b2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001736:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d107      	bne.n	800174e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800174c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001756:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3b01      	subs	r3, #1
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	429a      	cmp	r2, r3
 8001760:	d116      	bne.n	8001790 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001770:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	4a25      	ldr	r2, [pc, #148]	; (800180c <HAL_ETH_TransmitFrame+0x1d0>)
 8001776:	fb02 f203 	mul.w	r2, r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001782:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800178e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800179e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	3301      	adds	r3, #1
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d3b6      	bcc.n	8001728 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c2:	3314      	adds	r3, #20
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00d      	beq.n	80017ea <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d6:	3314      	adds	r3, #20
 80017d8:	2204      	movs	r2, #4
 80017da:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e4:	3304      	adds	r3, #4
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	ac02b00b 	.word	0xac02b00b
 800180c:	fffffa0c 	.word	0xfffffa0c

08001810 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ETH_GetReceivedFrame+0x1a>
 8001826:	2302      	movs	r3, #2
 8001828:	e070      	b.n	800190c <HAL_ETH_GetReceivedFrame+0xfc>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2202      	movs	r2, #2
 8001836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db5a      	blt.n	80018fa <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d030      	beq.n	80018b4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001860:	2b01      	cmp	r3, #1
 8001862:	d103      	bne.n	800186c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	0c1b      	lsrs	r3, r3, #16
 800187c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001880:	3b04      	subs	r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	461a      	mov	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e02b      	b.n	800190c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d010      	beq.n	80018e4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	461a      	mov	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
 80018e2:	e00a      	b.n	80018fa <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	461a      	mov	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001928:	3314      	adds	r3, #20
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001930:	2b40      	cmp	r3, #64	; 0x40
 8001932:	d112      	bne.n	800195a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f860 	bl	80019fa <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001942:	3314      	adds	r3, #20
 8001944:	2240      	movs	r2, #64	; 0x40
 8001946:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001958:	e01b      	b.n	8001992 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001962:	3314      	adds	r3, #20
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b01      	cmp	r3, #1
 800196c:	d111      	bne.n	8001992 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f839 	bl	80019e6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197c:	3314      	adds	r3, #20
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199a:	3314      	adds	r3, #20
 800199c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019a0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019aa:	3314      	adds	r3, #20
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019b6:	d112      	bne.n	80019de <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f828 	bl	8001a0e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c6:	3314      	adds	r3, #20
 80019c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019cc:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b82      	cmp	r3, #130	; 0x82
 8001a42:	d101      	bne.n	8001a48 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a44:	2302      	movs	r3, #2
 8001a46:	e050      	b.n	8001aea <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2282      	movs	r2, #130	; 0x82
 8001a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 031c 	and.w	r3, r3, #28
 8001a5e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8a1b      	ldrh	r3, [r3, #16]
 8001a64:	02db      	lsls	r3, r3, #11
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001a6e:	897b      	ldrh	r3, [r7, #10]
 8001a70:	019b      	lsls	r3, r3, #6
 8001a72:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f023 0302 	bic.w	r3, r3, #2
 8001a82:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a94:	f7ff fa1e 	bl	8000ed4 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a9a:	e015      	b.n	8001ac8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001a9c:	f7ff fa1a 	bl	8000ed4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aaa:	d309      	bcc.n	8001ac0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e014      	b.n	8001aea <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1e4      	bne.n	8001a9c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	460b      	mov	r3, r1
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b42      	cmp	r3, #66	; 0x42
 8001b12:	d101      	bne.n	8001b18 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
 8001b16:	e04e      	b.n	8001bb6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2242      	movs	r2, #66	; 0x42
 8001b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 031c 	and.w	r3, r3, #28
 8001b2e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8a1b      	ldrh	r3, [r3, #16]
 8001b34:	02db      	lsls	r3, r3, #11
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001b3e:	897b      	ldrh	r3, [r7, #10]
 8001b40:	019b      	lsls	r3, r3, #6
 8001b42:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6e:	f7ff f9b1 	bl	8000ed4 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b74:	e015      	b.n	8001ba2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001b76:	f7ff f9ad 	bl	8000ed4 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d309      	bcc.n	8001b9a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e00d      	b.n	8001bb6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e4      	bne.n	8001b76 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_ETH_Start+0x16>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e01f      	b.n	8001c14 <HAL_ETH_Start+0x56>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fb45 	bl	8002274 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fb7c 	bl	80022e8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fc13 	bl	800241c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fbb0 	bl	800235c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 fbdd 	bl	80023bc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_ETH_Stop+0x16>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e01f      	b.n	8001c72 <HAL_ETH_Stop+0x56>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fba2 	bl	800238c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fbcf 	bl	80023ec <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fb67 	bl	8002322 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fbe1 	bl	800241c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 fb27 	bl	80022ae <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_ETH_ConfigMAC+0x1c>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e0e4      	b.n	8001e62 <HAL_ETH_ConfigMAC+0x1e6>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80b1 	beq.w	8001e12 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <HAL_ETH_ConfigMAC+0x1f0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001cc8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001cce:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001cd4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001cda:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ce0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001ce6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001cec:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001cf2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001cf8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001cfe:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001d04:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001d0a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7ff f8e2 	bl	8000eec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d38:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001d3e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001d44:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001d4a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001d50:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001d56:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001d62:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d64:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f7ff f8bc 	bl	8000eec <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d84:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d8e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001dac:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001db2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001db8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001dbe:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001dc4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f7ff f885 	bl	8000eec <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7ff f872 	bl	8000eec <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	61da      	str	r2, [r3, #28]
 8001e10:	e01e      	b.n	8001e50 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e20:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f7ff f852 	bl	8000eec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	ff20810f 	.word	0xff20810f

08001e70 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b0b0      	sub	sp, #192	; 0xc0
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e8c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e94:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d103      	bne.n	8001ebe <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eba:	663b      	str	r3, [r7, #96]	; 0x60
 8001ebc:	e001      	b.n	8001ec2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001edc:	2340      	movs	r3, #64	; 0x40
 8001ede:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f48:	4bac      	ldr	r3, [pc, #688]	; (80021fc <ETH_MACDMAConfig+0x38c>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f54:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f58:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f5c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f62:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f66:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f6a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f70:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f74:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f78:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f7c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f80:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f84:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f98:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7fe ffa1 	bl	8000eec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fb4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fb8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001fba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001fbc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001fbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001fc2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001fc8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001fca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001fce:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001fd4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001fd8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001fe0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fe2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f7fe ff7c 	bl	8000eec <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ffc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002006:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002010:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800201c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002020:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002024:	4013      	ands	r3, r2
 8002026:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800202a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800202e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002030:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002034:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800203a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800203c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002040:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002046:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002048:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800204c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800204e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002060:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800206c:	2001      	movs	r0, #1
 800206e:	f7fe ff3d 	bl	8000eec <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800207a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800207c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002080:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002096:	2001      	movs	r0, #1
 8002098:	f7fe ff28 	bl	8000eec <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80020aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ae:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80020b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020b8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80020ca:	2304      	movs	r3, #4
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80020ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80020d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020d8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fa:	3318      	adds	r3, #24
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002102:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002106:	4b3e      	ldr	r3, [pc, #248]	; (8002200 <ETH_MACDMAConfig+0x390>)
 8002108:	4013      	ands	r3, r2
 800210a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800210e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002110:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002112:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002114:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002116:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002118:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800211a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800211c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800211e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002120:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002122:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002124:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002126:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800212a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800212e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002130:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002142:	3318      	adds	r3, #24
 8002144:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002148:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002152:	3318      	adds	r3, #24
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800215a:	2001      	movs	r0, #1
 800215c:	f7fe fec6 	bl	8000eec <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002168:	3318      	adds	r3, #24
 800216a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002174:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002178:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800217c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800217e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002180:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002184:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002186:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800218a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002198:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7fe fe9f 	bl	8000eec <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ba:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d10f      	bne.n	80021e4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021cc:	331c      	adds	r3, #28
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e0:	331c      	adds	r3, #28
 80021e2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	461a      	mov	r2, r3
 80021ea:	2100      	movs	r1, #0
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f809 	bl	8002204 <ETH_MACAddressConfig>
}
 80021f2:	bf00      	nop
 80021f4:	37c0      	adds	r7, #192	; 0xc0
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	ff20810f 	.word	0xff20810f
 8002200:	f8de3f23 	.word	0xf8de3f23

08002204 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3305      	adds	r3, #5
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	3204      	adds	r2, #4
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <ETH_MACAddressConfig+0x68>)
 8002226:	4413      	add	r3, r2
 8002228:	461a      	mov	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3303      	adds	r3, #3
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	061a      	lsls	r2, r3, #24
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3302      	adds	r3, #2
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3301      	adds	r3, #1
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	4313      	orrs	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <ETH_MACAddressConfig+0x6c>)
 8002256:	4413      	add	r3, r2
 8002258:	461a      	mov	r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	6013      	str	r3, [r2, #0]
}
 800225e:	bf00      	nop
 8002260:	371c      	adds	r7, #28
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40028040 	.word	0x40028040
 8002270:	40028044 	.word	0x40028044

08002274 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0208 	orr.w	r2, r2, #8
 800228e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002298:	2001      	movs	r0, #1
 800229a:	f000 f8e9 	bl	8002470 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	601a      	str	r2, [r3, #0]
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0208 	bic.w	r2, r2, #8
 80022c8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022d2:	2001      	movs	r0, #1
 80022d4:	f000 f8cc 	bl	8002470 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	601a      	str	r2, [r3, #0]
}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0204 	orr.w	r2, r2, #4
 8002302:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800230c:	2001      	movs	r0, #1
 800230e:	f000 f8af 	bl	8002470 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	601a      	str	r2, [r3, #0]
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0204 	bic.w	r2, r2, #4
 800233c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002346:	2001      	movs	r0, #1
 8002348:	f000 f892 	bl	8002470 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236c:	3318      	adds	r3, #24
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237c:	3318      	adds	r3, #24
 800237e:	601a      	str	r2, [r3, #0]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239c:	3318      	adds	r3, #24
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ac:	3318      	adds	r3, #24
 80023ae:	601a      	str	r2, [r3, #0]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023cc:	3318      	adds	r3, #24
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0202 	orr.w	r2, r2, #2
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	3318      	adds	r3, #24
 80023de:	601a      	str	r2, [r3, #0]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023fc:	3318      	adds	r3, #24
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0202 	bic.w	r2, r2, #2
 8002408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240c:	3318      	adds	r3, #24
 800240e:	601a      	str	r2, [r3, #0]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002430:	3318      	adds	r3, #24
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800243c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002440:	3318      	adds	r3, #24
 8002442:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244c:	3318      	adds	r3, #24
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002452:	2001      	movs	r0, #1
 8002454:	f000 f80c 	bl	8002470 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002462:	3318      	adds	r3, #24
 8002464:	601a      	str	r2, [r3, #0]
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <ETH_Delay+0x38>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <ETH_Delay+0x3c>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	0a5b      	lsrs	r3, r3, #9
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800248c:	bf00      	nop
  } 
  while (Delay --);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1e5a      	subs	r2, r3, #1
 8002492:	60fa      	str	r2, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f9      	bne.n	800248c <ETH_Delay+0x1c>
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000
 80024ac:	10624dd3 	.word	0x10624dd3

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	e16b      	b.n	80027a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f040 815a 	bne.w	800279e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d005      	beq.n	8002502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d130      	bne.n	8002564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	2203      	movs	r2, #3
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 0201 	and.w	r2, r3, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b03      	cmp	r3, #3
 800256e:	d017      	beq.n	80025a0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d123      	bne.n	80025f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	220f      	movs	r2, #15
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	08da      	lsrs	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3208      	adds	r2, #8
 80025ee:	69b9      	ldr	r1, [r7, #24]
 80025f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0203 	and.w	r2, r3, #3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80b4 	beq.w	800279e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b60      	ldr	r3, [pc, #384]	; (80027bc <HAL_GPIO_Init+0x30c>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a5f      	ldr	r2, [pc, #380]	; (80027bc <HAL_GPIO_Init+0x30c>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b5d      	ldr	r3, [pc, #372]	; (80027bc <HAL_GPIO_Init+0x30c>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002652:	4a5b      	ldr	r2, [pc, #364]	; (80027c0 <HAL_GPIO_Init+0x310>)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a52      	ldr	r2, [pc, #328]	; (80027c4 <HAL_GPIO_Init+0x314>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d02b      	beq.n	80026d6 <HAL_GPIO_Init+0x226>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a51      	ldr	r2, [pc, #324]	; (80027c8 <HAL_GPIO_Init+0x318>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d025      	beq.n	80026d2 <HAL_GPIO_Init+0x222>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a50      	ldr	r2, [pc, #320]	; (80027cc <HAL_GPIO_Init+0x31c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01f      	beq.n	80026ce <HAL_GPIO_Init+0x21e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4f      	ldr	r2, [pc, #316]	; (80027d0 <HAL_GPIO_Init+0x320>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d019      	beq.n	80026ca <HAL_GPIO_Init+0x21a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <HAL_GPIO_Init+0x324>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0x216>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4d      	ldr	r2, [pc, #308]	; (80027d8 <HAL_GPIO_Init+0x328>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x212>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4c      	ldr	r2, [pc, #304]	; (80027dc <HAL_GPIO_Init+0x32c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x20e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4b      	ldr	r2, [pc, #300]	; (80027e0 <HAL_GPIO_Init+0x330>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x20a>
 80026b6:	2307      	movs	r3, #7
 80026b8:	e00e      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026ba:	2308      	movs	r3, #8
 80026bc:	e00c      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026be:	2306      	movs	r3, #6
 80026c0:	e00a      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026c2:	2305      	movs	r3, #5
 80026c4:	e008      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026c6:	2304      	movs	r3, #4
 80026c8:	e006      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026ca:	2303      	movs	r3, #3
 80026cc:	e004      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e002      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_GPIO_Init+0x228>
 80026d6:	2300      	movs	r3, #0
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	f002 0203 	and.w	r2, r2, #3
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	4093      	lsls	r3, r2
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e8:	4935      	ldr	r1, [pc, #212]	; (80027c0 <HAL_GPIO_Init+0x310>)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	3302      	adds	r3, #2
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f6:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <HAL_GPIO_Init+0x334>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271a:	4a32      	ldr	r2, [pc, #200]	; (80027e4 <HAL_GPIO_Init+0x334>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002720:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <HAL_GPIO_Init+0x334>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002744:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <HAL_GPIO_Init+0x334>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274a:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <HAL_GPIO_Init+0x334>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276e:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <HAL_GPIO_Init+0x334>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_GPIO_Init+0x334>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002798:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <HAL_GPIO_Init+0x334>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3301      	adds	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	f67f ae90 	bls.w	80024cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3724      	adds	r7, #36	; 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40013800 	.word	0x40013800
 80027c4:	40020000 	.word	0x40020000
 80027c8:	40020400 	.word	0x40020400
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40020c00 	.word	0x40020c00
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40021400 	.word	0x40021400
 80027dc:	40021800 	.word	0x40021800
 80027e0:	40021c00 	.word	0x40021c00
 80027e4:	40013c00 	.word	0x40013c00

080027e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
 80027f4:	4613      	mov	r3, r2
 80027f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002804:	e003      	b.n	800280e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	619a      	str	r2, [r3, #24]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800282c:	887a      	ldrh	r2, [r7, #2]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4013      	ands	r3, r2
 8002832:	041a      	lsls	r2, r3, #16
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	43d9      	mvns	r1, r3
 8002838:	887b      	ldrh	r3, [r7, #2]
 800283a:	400b      	ands	r3, r1
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800284e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002850:	b08f      	sub	sp, #60	; 0x3c
 8002852:	af0a      	add	r7, sp, #40	; 0x28
 8002854:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e10f      	b.n	8002a80 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe f914 	bl	8000aa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2203      	movs	r2, #3
 8002884:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 f8a8 	bl	80049f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	687e      	ldr	r6, [r7, #4]
 80028ac:	466d      	mov	r5, sp
 80028ae:	f106 0410 	add.w	r4, r6, #16
 80028b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028be:	e885 0003 	stmia.w	r5, {r0, r1}
 80028c2:	1d33      	adds	r3, r6, #4
 80028c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c6:	6838      	ldr	r0, [r7, #0]
 80028c8:	f001 ff90 	bl	80047ec <USB_CoreInit>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2202      	movs	r2, #2
 80028d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e0d0      	b.n	8002a80 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 f896 	bl	8004a16 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	e04a      	b.n	8002986 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	333d      	adds	r3, #61	; 0x3d
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002904:	7bfa      	ldrb	r2, [r7, #15]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	333c      	adds	r3, #60	; 0x3c
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	b298      	uxth	r0, r3
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3342      	adds	r3, #66	; 0x42
 800292c:	4602      	mov	r2, r0
 800292e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	333f      	adds	r3, #63	; 0x3f
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3344      	adds	r3, #68	; 0x44
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	3348      	adds	r3, #72	; 0x48
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	3350      	adds	r3, #80	; 0x50
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	3301      	adds	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	429a      	cmp	r2, r3
 800298e:	d3af      	bcc.n	80028f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002990:	2300      	movs	r3, #0
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	e044      	b.n	8002a20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d3b5      	bcc.n	8002996 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	687e      	ldr	r6, [r7, #4]
 8002a32:	466d      	mov	r5, sp
 8002a34:	f106 0410 	add.w	r4, r6, #16
 8002a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a44:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a48:	1d33      	adds	r3, r6, #4
 8002a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a4c:	6838      	ldr	r0, [r7, #0]
 8002a4e:	f002 f80d 	bl	8004a6c <USB_DevInit>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e00d      	b.n	8002a80 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f002 fa3f 	bl	8004efc <USB_DevDisconnect>

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a88 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b08d      	sub	sp, #52	; 0x34
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 fae0 	bl	8005064 <USB_GetMode>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 839d 	bne.w	80031e6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 fa44 	bl	8004f3e <USB_ReadInterrupts>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8393 	beq.w	80031e4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f002 fa3b 	bl	8004f3e <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d107      	bne.n	8002ae2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f002 0202 	and.w	r2, r2, #2
 8002ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f002 fa29 	bl	8004f3e <USB_ReadInterrupts>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d161      	bne.n	8002bba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0210 	bic.w	r2, r2, #16
 8002b04:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 020f 	and.w	r2, r3, #15
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	3304      	adds	r3, #4
 8002b24:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	0c5b      	lsrs	r3, r3, #17
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d124      	bne.n	8002b7c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d035      	beq.n	8002baa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	6a38      	ldr	r0, [r7, #32]
 8002b52:	f002 f9aa 	bl	8004eaa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b62:	441a      	add	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	699a      	ldr	r2, [r3, #24]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b74:	441a      	add	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	619a      	str	r2, [r3, #24]
 8002b7a:	e016      	b.n	8002baa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	0c5b      	lsrs	r3, r3, #17
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	2b06      	cmp	r3, #6
 8002b86:	d110      	bne.n	8002baa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b8e:	2208      	movs	r2, #8
 8002b90:	4619      	mov	r1, r3
 8002b92:	6a38      	ldr	r0, [r7, #32]
 8002b94:	f002 f989 	bl	8004eaa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ba4:	441a      	add	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0210 	orr.w	r2, r2, #16
 8002bb8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f002 f9bd 	bl	8004f3e <USB_ReadInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bce:	d16e      	bne.n	8002cae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f002 f9c3 	bl	8004f64 <USB_ReadDevAllOutEpInterrupt>
 8002bde:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002be0:	e062      	b.n	8002ca8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d057      	beq.n	8002c9c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 f9e8 	bl	8004fcc <USB_ReadDevOutEPInterrupt>
 8002bfc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00c      	beq.n	8002c22 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c14:	461a      	mov	r2, r3
 8002c16:	2301      	movs	r3, #1
 8002c18:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fbe9 	bl	80033f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00c      	beq.n	8002c46 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fce3 	bl	800360c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2310      	movs	r3, #16
 8002c60:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c94:	461a      	mov	r2, r3
 8002c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c9a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d199      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 f943 	bl	8004f3e <USB_ReadInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cc2:	f040 80c0 	bne.w	8002e46 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 f964 	bl	8004f98 <USB_ReadDevAllInEpInterrupt>
 8002cd0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002cd6:	e0b2      	b.n	8002e3e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80a7 	beq.w	8002e32 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f002 f98a 	bl	8005008 <USB_ReadDevInEPInterrupt>
 8002cf4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d057      	beq.n	8002db0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	2201      	movs	r2, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69f9      	ldr	r1, [r7, #28]
 8002d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d20:	4013      	ands	r3, r2
 8002d22:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d30:	461a      	mov	r2, r3
 8002d32:	2301      	movs	r3, #1
 8002d34:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d132      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3348      	adds	r3, #72	; 0x48
 8002d4e:	6819      	ldr	r1, [r3, #0]
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4403      	add	r3, r0
 8002d5e:	3344      	adds	r3, #68	; 0x44
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4419      	add	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4403      	add	r3, r0
 8002d72:	3348      	adds	r3, #72	; 0x48
 8002d74:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d113      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x31c>
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	3350      	adds	r3, #80	; 0x50
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d108      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2101      	movs	r1, #1
 8002da0:	f002 f992 	bl	80050c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa2a 	bl	8003204 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2308      	movs	r3, #8
 8002dca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de2:	461a      	mov	r2, r3
 8002de4:	2310      	movs	r3, #16
 8002de6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2340      	movs	r3, #64	; 0x40
 8002e02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fa53 	bl	80032d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	3301      	adds	r3, #1
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f47f af49 	bne.w	8002cd8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 f877 	bl	8004f3e <USB_ReadInterrupts>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e5a:	d122      	bne.n	8002ea2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d108      	bne.n	8002e8c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e82:	2100      	movs	r1, #0
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fc07 	bl	8003698 <HAL_PCDEx_LPM_Callback>
 8002e8a:	e002      	b.n	8002e92 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f9ed 	bl	800326c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f002 f849 	bl	8004f3e <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb6:	d112      	bne.n	8002ede <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d102      	bne.n	8002ece <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f9c5 	bl	8003258 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002edc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 f82b 	bl	8004f3e <USB_ReadInterrupts>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef2:	f040 80c7 	bne.w	8003084 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2110      	movs	r1, #16
 8002f10:	4618      	mov	r0, r3
 8002f12:	f001 ff0f 	bl	8004d34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f1a:	e056      	b.n	8002fca <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f40:	0151      	lsls	r1, r2, #5
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	440a      	add	r2, r1
 8002f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f4e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f60:	0151      	lsls	r1, r2, #5
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	440a      	add	r2, r1
 8002f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f82:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f94:	0151      	lsls	r1, r2, #5
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	440a      	add	r2, r1
 8002f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fa2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb4:	0151      	lsls	r1, r2, #5
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	440a      	add	r2, r1
 8002fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fc2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3a3      	bcc.n	8002f1c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002fe6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d016      	beq.n	800301e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003000:	f043 030b 	orr.w	r3, r3, #11
 8003004:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003016:	f043 030b 	orr.w	r3, r3, #11
 800301a:	6453      	str	r3, [r2, #68]	; 0x44
 800301c:	e015      	b.n	800304a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003030:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003034:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003044:	f043 030b 	orr.w	r3, r3, #11
 8003048:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003058:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800305c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800306e:	461a      	mov	r2, r3
 8003070:	f002 f82a 	bl	80050c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003082:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f001 ff58 	bl	8004f3e <USB_ReadInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003098:	d124      	bne.n	80030e4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 ffee 	bl	8005080 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 fea4 	bl	8004df6 <USB_GetDevSpeed>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681c      	ldr	r4, [r3, #0]
 80030ba:	f000 ff0d 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 80030be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	4620      	mov	r0, r4
 80030ca:	f001 fbf1 	bl	80048b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f8b8 	bl	8003244 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80030e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f001 ff28 	bl	8004f3e <USB_ReadInterrupts>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d10a      	bne.n	800310e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f899 	bl	8003230 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f002 0208 	and.w	r2, r2, #8
 800310c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f001 ff13 	bl	8004f3e <USB_ReadInterrupts>
 8003118:	4603      	mov	r3, r0
 800311a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003122:	d10f      	bne.n	8003144 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f8b2 	bl	8003298 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f001 fef8 	bl	8004f3e <USB_ReadInterrupts>
 800314e:	4603      	mov	r3, r0
 8003150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003158:	d10f      	bne.n	800317a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	b2db      	uxtb	r3, r3
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f88b 	bl	8003280 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003178:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f001 fedd 	bl	8004f3e <USB_ReadInterrupts>
 8003184:	4603      	mov	r3, r0
 8003186:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d10a      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f88d 	bl	80032b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 fec7 	bl	8004f3e <USB_ReadInterrupts>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d115      	bne.n	80031e6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f879 	bl	80032c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	e000      	b.n	80031e6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80031e4:	bf00      	nop
    }
  }
}
 80031e6:	3734      	adds	r7, #52	; 0x34
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}

080031ec <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af02      	add	r7, sp, #8
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	3338      	adds	r3, #56	; 0x38
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	699a      	ldr	r2, [r3, #24]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	429a      	cmp	r2, r3
 800330a:	d901      	bls.n	8003310 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e06c      	b.n	80033ea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	429a      	cmp	r2, r3
 8003324:	d902      	bls.n	800332c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	3303      	adds	r3, #3
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003334:	e02b      	b.n	800338e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	429a      	cmp	r2, r3
 800334a:	d902      	bls.n	8003352 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3303      	adds	r3, #3
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68d9      	ldr	r1, [r3, #12]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800336a:	b2db      	uxtb	r3, r3
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	4603      	mov	r3, r0
 8003370:	6978      	ldr	r0, [r7, #20]
 8003372:	f001 fd65 	bl	8004e40 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	441a      	add	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	441a      	add	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	b29b      	uxth	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d809      	bhi.n	80033b8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d203      	bcs.n	80033b8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1be      	bne.n	8003336 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d811      	bhi.n	80033e8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	2201      	movs	r2, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	43db      	mvns	r3, r3
 80033de:	6939      	ldr	r1, [r7, #16]
 80033e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033e4:	4013      	ands	r3, r2
 80033e6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	333c      	adds	r3, #60	; 0x3c
 800340c:	3304      	adds	r3, #4
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b01      	cmp	r3, #1
 8003428:	f040 80a0 	bne.w	800356c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d015      	beq.n	8003462 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a72      	ldr	r2, [pc, #456]	; (8003604 <PCD_EP_OutXfrComplete_int+0x210>)
 800343a:	4293      	cmp	r3, r2
 800343c:	f240 80dd 	bls.w	80035fa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80d7 	beq.w	80035fa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003458:	461a      	mov	r2, r3
 800345a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800345e:	6093      	str	r3, [r2, #8]
 8003460:	e0cb      	b.n	80035fa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d009      	beq.n	8003480 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003478:	461a      	mov	r2, r3
 800347a:	2320      	movs	r3, #32
 800347c:	6093      	str	r3, [r2, #8]
 800347e:	e0bc      	b.n	80035fa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 80b7 	bne.w	80035fa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4a5d      	ldr	r2, [pc, #372]	; (8003604 <PCD_EP_OutXfrComplete_int+0x210>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d90f      	bls.n	80034b4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034aa:	461a      	mov	r2, r3
 80034ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b0:	6093      	str	r3, [r2, #8]
 80034b2:	e0a2      	b.n	80035fa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034c6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	0159      	lsls	r1, r3, #5
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	440b      	add	r3, r1
 80034d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80034da:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4403      	add	r3, r0
 80034ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034ee:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003502:	6819      	ldr	r1, [r3, #0]
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4403      	add	r3, r0
 8003512:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4419      	add	r1, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4403      	add	r3, r0
 8003528:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800352c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d114      	bne.n	800355e <PCD_EP_OutXfrComplete_int+0x16a>
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d108      	bne.n	800355e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003556:	461a      	mov	r2, r3
 8003558:	2101      	movs	r1, #1
 800355a:	f001 fdb5 	bl	80050c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	4619      	mov	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff fe41 	bl	80031ec <HAL_PCD_DataOutStageCallback>
 800356a:	e046      	b.n	80035fa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a26      	ldr	r2, [pc, #152]	; (8003608 <PCD_EP_OutXfrComplete_int+0x214>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d124      	bne.n	80035be <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358a:	461a      	mov	r2, r3
 800358c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003590:	6093      	str	r3, [r2, #8]
 8003592:	e032      	b.n	80035fa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035aa:	461a      	mov	r2, r3
 80035ac:	2320      	movs	r3, #32
 80035ae:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	4619      	mov	r1, r3
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff fe18 	bl	80031ec <HAL_PCD_DataOutStageCallback>
 80035bc:	e01d      	b.n	80035fa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d114      	bne.n	80035ee <PCD_EP_OutXfrComplete_int+0x1fa>
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d108      	bne.n	80035ee <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035e6:	461a      	mov	r2, r3
 80035e8:	2100      	movs	r1, #0
 80035ea:	f001 fd6d 	bl	80050c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	4619      	mov	r1, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff fdf9 	bl	80031ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	4f54300a 	.word	0x4f54300a
 8003608:	4f54310a 	.word	0x4f54310a

0800360c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	333c      	adds	r3, #60	; 0x3c
 8003624:	3304      	adds	r3, #4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4a15      	ldr	r2, [pc, #84]	; (8003694 <PCD_EP_OutSetupPacket_int+0x88>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d90e      	bls.n	8003660 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003648:	2b00      	cmp	r3, #0
 800364a:	d009      	beq.n	8003660 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003658:	461a      	mov	r2, r3
 800365a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff fddb 	bl	800321c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <PCD_EP_OutSetupPacket_int+0x88>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d90c      	bls.n	8003688 <PCD_EP_OutSetupPacket_int+0x7c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d108      	bne.n	8003688 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003680:	461a      	mov	r2, r3
 8003682:	2101      	movs	r1, #1
 8003684:	f001 fd20 	bl	80050c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	4f54300a 	.word	0x4f54300a

08003698 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e264      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d075      	beq.n	80037ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ce:	4ba3      	ldr	r3, [pc, #652]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d00c      	beq.n	80036f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036da:	4ba0      	ldr	r3, [pc, #640]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d112      	bne.n	800370c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e6:	4b9d      	ldr	r3, [pc, #628]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f2:	d10b      	bne.n	800370c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	4b99      	ldr	r3, [pc, #612]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d05b      	beq.n	80037b8 <HAL_RCC_OscConfig+0x108>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d157      	bne.n	80037b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e23f      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x74>
 8003716:	4b91      	ldr	r3, [pc, #580]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a90      	ldr	r2, [pc, #576]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800371c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e01d      	b.n	8003760 <HAL_RCC_OscConfig+0xb0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800372c:	d10c      	bne.n	8003748 <HAL_RCC_OscConfig+0x98>
 800372e:	4b8b      	ldr	r3, [pc, #556]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a8a      	ldr	r2, [pc, #552]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	4b88      	ldr	r3, [pc, #544]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a87      	ldr	r2, [pc, #540]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e00b      	b.n	8003760 <HAL_RCC_OscConfig+0xb0>
 8003748:	4b84      	ldr	r3, [pc, #528]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a83      	ldr	r2, [pc, #524]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800374e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b81      	ldr	r3, [pc, #516]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a80      	ldr	r2, [pc, #512]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800375a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800375e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d013      	beq.n	8003790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fd fbb4 	bl	8000ed4 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003770:	f7fd fbb0 	bl	8000ed4 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	; 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e204      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b76      	ldr	r3, [pc, #472]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0xc0>
 800378e:	e014      	b.n	80037ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fd fba0 	bl	8000ed4 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003798:	f7fd fb9c 	bl	8000ed4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e1f0      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	4b6c      	ldr	r3, [pc, #432]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0xe8>
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d063      	beq.n	800388e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037c6:	4b65      	ldr	r3, [pc, #404]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d2:	4b62      	ldr	r3, [pc, #392]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d11c      	bne.n	8003818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037de:	4b5f      	ldr	r3, [pc, #380]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d116      	bne.n	8003818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	4b5c      	ldr	r3, [pc, #368]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_RCC_OscConfig+0x152>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e1c4      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003802:	4b56      	ldr	r3, [pc, #344]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4952      	ldr	r1, [pc, #328]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	e03a      	b.n	800388e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d020      	beq.n	8003862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003820:	4b4f      	ldr	r3, [pc, #316]	; (8003960 <HAL_RCC_OscConfig+0x2b0>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fd fb55 	bl	8000ed4 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382e:	f7fd fb51 	bl	8000ed4 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e1a5      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	4b46      	ldr	r3, [pc, #280]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b43      	ldr	r3, [pc, #268]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4940      	ldr	r1, [pc, #256]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]
 8003860:	e015      	b.n	800388e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003862:	4b3f      	ldr	r3, [pc, #252]	; (8003960 <HAL_RCC_OscConfig+0x2b0>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd fb34 	bl	8000ed4 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003870:	f7fd fb30 	bl	8000ed4 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e184      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	4b36      	ldr	r3, [pc, #216]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d030      	beq.n	80038fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a2:	4b30      	ldr	r3, [pc, #192]	; (8003964 <HAL_RCC_OscConfig+0x2b4>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fd fb14 	bl	8000ed4 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b0:	f7fd fb10 	bl	8000ed4 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e164      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	4b26      	ldr	r3, [pc, #152]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x200>
 80038ce:	e015      	b.n	80038fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d0:	4b24      	ldr	r3, [pc, #144]	; (8003964 <HAL_RCC_OscConfig+0x2b4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d6:	f7fd fafd 	bl	8000ed4 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038de:	f7fd faf9 	bl	8000ed4 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e14d      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	4b1a      	ldr	r3, [pc, #104]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80038f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f0      	bne.n	80038de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80a0 	beq.w	8003a4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	4b0f      	ldr	r3, [pc, #60]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a0e      	ldr	r2, [pc, #56]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_OscConfig+0x2b8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d121      	bne.n	800398a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <HAL_RCC_OscConfig+0x2b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a07      	ldr	r2, [pc, #28]	; (8003968 <HAL_RCC_OscConfig+0x2b8>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003952:	f7fd fabf 	bl	8000ed4 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	e011      	b.n	800397e <HAL_RCC_OscConfig+0x2ce>
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800
 8003960:	42470000 	.word	0x42470000
 8003964:	42470e80 	.word	0x42470e80
 8003968:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396c:	f7fd fab2 	bl	8000ed4 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e106      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397e:	4b85      	ldr	r3, [pc, #532]	; (8003b94 <HAL_RCC_OscConfig+0x4e4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d106      	bne.n	80039a0 <HAL_RCC_OscConfig+0x2f0>
 8003992:	4b81      	ldr	r3, [pc, #516]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	4a80      	ldr	r2, [pc, #512]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6713      	str	r3, [r2, #112]	; 0x70
 800399e:	e01c      	b.n	80039da <HAL_RCC_OscConfig+0x32a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b05      	cmp	r3, #5
 80039a6:	d10c      	bne.n	80039c2 <HAL_RCC_OscConfig+0x312>
 80039a8:	4b7b      	ldr	r3, [pc, #492]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	4a7a      	ldr	r2, [pc, #488]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 80039ae:	f043 0304 	orr.w	r3, r3, #4
 80039b2:	6713      	str	r3, [r2, #112]	; 0x70
 80039b4:	4b78      	ldr	r3, [pc, #480]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	4a77      	ldr	r2, [pc, #476]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6713      	str	r3, [r2, #112]	; 0x70
 80039c0:	e00b      	b.n	80039da <HAL_RCC_OscConfig+0x32a>
 80039c2:	4b75      	ldr	r3, [pc, #468]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a74      	ldr	r2, [pc, #464]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
 80039ce:	4b72      	ldr	r3, [pc, #456]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	4a71      	ldr	r2, [pc, #452]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d015      	beq.n	8003a0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fd fa77 	bl	8000ed4 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fd fa73 	bl	8000ed4 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e0c5      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a00:	4b65      	ldr	r3, [pc, #404]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ee      	beq.n	80039ea <HAL_RCC_OscConfig+0x33a>
 8003a0c:	e014      	b.n	8003a38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0e:	f7fd fa61 	bl	8000ed4 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a14:	e00a      	b.n	8003a2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a16:	f7fd fa5d 	bl	8000ed4 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e0af      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2c:	4b5a      	ldr	r3, [pc, #360]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1ee      	bne.n	8003a16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a3e:	4b56      	ldr	r3, [pc, #344]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4a55      	ldr	r2, [pc, #340]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 8003a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 809b 	beq.w	8003b8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a54:	4b50      	ldr	r3, [pc, #320]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d05c      	beq.n	8003b1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d141      	bne.n	8003aec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a68:	4b4c      	ldr	r3, [pc, #304]	; (8003b9c <HAL_RCC_OscConfig+0x4ec>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6e:	f7fd fa31 	bl	8000ed4 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a76:	f7fd fa2d 	bl	8000ed4 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e081      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a88:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	019b      	lsls	r3, r3, #6
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	085b      	lsrs	r3, r3, #1
 8003aac:	3b01      	subs	r3, #1
 8003aae:	041b      	lsls	r3, r3, #16
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	061b      	lsls	r3, r3, #24
 8003ab8:	4937      	ldr	r1, [pc, #220]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003abe:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <HAL_RCC_OscConfig+0x4ec>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fa06 	bl	8000ed4 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd fa02 	bl	8000ed4 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e056      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ade:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x41c>
 8003aea:	e04e      	b.n	8003b8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <HAL_RCC_OscConfig+0x4ec>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fd f9ef 	bl	8000ed4 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fd f9eb 	bl	8000ed4 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e03f      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0c:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCC_OscConfig+0x44a>
 8003b18:	e037      	b.n	8003b8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e032      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b26:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <HAL_RCC_OscConfig+0x4e8>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d028      	beq.n	8003b86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d121      	bne.n	8003b86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d11a      	bne.n	8003b86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b56:	4013      	ands	r3, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d111      	bne.n	8003b86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	085b      	lsrs	r3, r3, #1
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d107      	bne.n	8003b86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d001      	beq.n	8003b8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40007000 	.word	0x40007000
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	42470060 	.word	0x42470060

08003ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0cc      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb4:	4b68      	ldr	r3, [pc, #416]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d90c      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc2:	4b65      	ldr	r3, [pc, #404]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b63      	ldr	r3, [pc, #396]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0b8      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d020      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf4:	4b59      	ldr	r3, [pc, #356]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a58      	ldr	r2, [pc, #352]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c0c:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4a52      	ldr	r2, [pc, #328]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c18:	4b50      	ldr	r3, [pc, #320]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	494d      	ldr	r1, [pc, #308]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d044      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d119      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e07f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d003      	beq.n	8003c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5e:	4b3f      	ldr	r3, [pc, #252]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e06f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6e:	4b3b      	ldr	r3, [pc, #236]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e067      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c7e:	4b37      	ldr	r3, [pc, #220]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f023 0203 	bic.w	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4934      	ldr	r1, [pc, #208]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c90:	f7fd f920 	bl	8000ed4 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c98:	f7fd f91c 	bl	8000ed4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e04f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 020c 	and.w	r2, r3, #12
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d1eb      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d20c      	bcs.n	8003ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e032      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4916      	ldr	r1, [pc, #88]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d12:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	490e      	ldr	r1, [pc, #56]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d26:	f000 f821 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	490a      	ldr	r1, [pc, #40]	; (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	5ccb      	ldrb	r3, [r1, r3]
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd f880 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40023c00 	.word	0x40023c00
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	08018550 	.word	0x08018550
 8003d64:	20000000 	.word	0x20000000
 8003d68:	20000004 	.word	0x20000004

08003d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d72:	2100      	movs	r1, #0
 8003d74:	6079      	str	r1, [r7, #4]
 8003d76:	2100      	movs	r1, #0
 8003d78:	60f9      	str	r1, [r7, #12]
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d7e:	2100      	movs	r1, #0
 8003d80:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d82:	4952      	ldr	r1, [pc, #328]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x160>)
 8003d84:	6889      	ldr	r1, [r1, #8]
 8003d86:	f001 010c 	and.w	r1, r1, #12
 8003d8a:	2908      	cmp	r1, #8
 8003d8c:	d00d      	beq.n	8003daa <HAL_RCC_GetSysClockFreq+0x3e>
 8003d8e:	2908      	cmp	r1, #8
 8003d90:	f200 8094 	bhi.w	8003ebc <HAL_RCC_GetSysClockFreq+0x150>
 8003d94:	2900      	cmp	r1, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_RCC_GetSysClockFreq+0x32>
 8003d98:	2904      	cmp	r1, #4
 8003d9a:	d003      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0x38>
 8003d9c:	e08e      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d9e:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003da0:	60bb      	str	r3, [r7, #8]
       break;
 8003da2:	e08e      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003da4:	4b4b      	ldr	r3, [pc, #300]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003da6:	60bb      	str	r3, [r7, #8]
      break;
 8003da8:	e08b      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003daa:	4948      	ldr	r1, [pc, #288]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x160>)
 8003dac:	6849      	ldr	r1, [r1, #4]
 8003dae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003db2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003db4:	4945      	ldr	r1, [pc, #276]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x160>)
 8003db6:	6849      	ldr	r1, [r1, #4]
 8003db8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003dbc:	2900      	cmp	r1, #0
 8003dbe:	d024      	beq.n	8003e0a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc0:	4942      	ldr	r1, [pc, #264]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x160>)
 8003dc2:	6849      	ldr	r1, [r1, #4]
 8003dc4:	0989      	lsrs	r1, r1, #6
 8003dc6:	4608      	mov	r0, r1
 8003dc8:	f04f 0100 	mov.w	r1, #0
 8003dcc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003dd0:	f04f 0500 	mov.w	r5, #0
 8003dd4:	ea00 0204 	and.w	r2, r0, r4
 8003dd8:	ea01 0305 	and.w	r3, r1, r5
 8003ddc:	493d      	ldr	r1, [pc, #244]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003dde:	fb01 f003 	mul.w	r0, r1, r3
 8003de2:	2100      	movs	r1, #0
 8003de4:	fb01 f102 	mul.w	r1, r1, r2
 8003de8:	1844      	adds	r4, r0, r1
 8003dea:	493a      	ldr	r1, [pc, #232]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003dec:	fba2 0101 	umull	r0, r1, r2, r1
 8003df0:	1863      	adds	r3, r4, r1
 8003df2:	4619      	mov	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	461a      	mov	r2, r3
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	f7fc fa40 	bl	8000280 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4613      	mov	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e04a      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e0a:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x160>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	099b      	lsrs	r3, r3, #6
 8003e10:	461a      	mov	r2, r3
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e1a:	f04f 0100 	mov.w	r1, #0
 8003e1e:	ea02 0400 	and.w	r4, r2, r0
 8003e22:	ea03 0501 	and.w	r5, r3, r1
 8003e26:	4620      	mov	r0, r4
 8003e28:	4629      	mov	r1, r5
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	014b      	lsls	r3, r1, #5
 8003e34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e38:	0142      	lsls	r2, r0, #5
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	1b00      	subs	r0, r0, r4
 8003e40:	eb61 0105 	sbc.w	r1, r1, r5
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	018b      	lsls	r3, r1, #6
 8003e4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e52:	0182      	lsls	r2, r0, #6
 8003e54:	1a12      	subs	r2, r2, r0
 8003e56:	eb63 0301 	sbc.w	r3, r3, r1
 8003e5a:	f04f 0000 	mov.w	r0, #0
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	00d9      	lsls	r1, r3, #3
 8003e64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e68:	00d0      	lsls	r0, r2, #3
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	1912      	adds	r2, r2, r4
 8003e70:	eb45 0303 	adc.w	r3, r5, r3
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	f04f 0100 	mov.w	r1, #0
 8003e7c:	0299      	lsls	r1, r3, #10
 8003e7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e82:	0290      	lsls	r0, r2, #10
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	f7fc f9f4 	bl	8000280 <__aeabi_uldivmod>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x160>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	60bb      	str	r3, [r7, #8]
      break;
 8003eba:	e002      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ebc:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003ebe:	60bb      	str	r3, [r7, #8]
      break;
 8003ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bdb0      	pop	{r4, r5, r7, pc}
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	00f42400 	.word	0x00f42400
 8003ed4:	017d7840 	.word	0x017d7840

08003ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <HAL_RCC_GetHCLKFreq+0x14>)
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000000 	.word	0x20000000

08003ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e041      	b.n	8003f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fc fd9e 	bl	8000a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f000 fa92 	bl	8004458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d001      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e04e      	b.n	8004046 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d022      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d01d      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1f      	ldr	r2, [pc, #124]	; (8004058 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	; (800405c <HAL_TIM_Base_Start_IT+0xcc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a19      	ldr	r2, [pc, #100]	; (8004068 <HAL_TIM_Base_Start_IT+0xd8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a18      	ldr	r2, [pc, #96]	; (800406c <HAL_TIM_Base_Start_IT+0xdc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d111      	bne.n	8004034 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b06      	cmp	r3, #6
 8004020:	d010      	beq.n	8004044 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004032:	e007      	b.n	8004044 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40010400 	.word	0x40010400
 8004068:	40014000 	.word	0x40014000
 800406c:	40001800 	.word	0x40001800

08004070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b02      	cmp	r3, #2
 8004084:	d122      	bne.n	80040cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b02      	cmp	r3, #2
 8004092:	d11b      	bne.n	80040cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0202 	mvn.w	r2, #2
 800409c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f9b2 	bl	800441c <HAL_TIM_IC_CaptureCallback>
 80040b8:	e005      	b.n	80040c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f9a4 	bl	8004408 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f9b5 	bl	8004430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d122      	bne.n	8004120 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d11b      	bne.n	8004120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0204 	mvn.w	r2, #4
 80040f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2202      	movs	r2, #2
 80040f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f988 	bl	800441c <HAL_TIM_IC_CaptureCallback>
 800410c:	e005      	b.n	800411a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f97a 	bl	8004408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f98b 	bl	8004430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b08      	cmp	r3, #8
 800412c:	d122      	bne.n	8004174 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b08      	cmp	r3, #8
 800413a:	d11b      	bne.n	8004174 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0208 	mvn.w	r2, #8
 8004144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2204      	movs	r2, #4
 800414a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f95e 	bl	800441c <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f950 	bl	8004408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f961 	bl	8004430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	2b10      	cmp	r3, #16
 8004180:	d122      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b10      	cmp	r3, #16
 800418e:	d11b      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0210 	mvn.w	r2, #16
 8004198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2208      	movs	r2, #8
 800419e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f934 	bl	800441c <HAL_TIM_IC_CaptureCallback>
 80041b4:	e005      	b.n	80041c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f926 	bl	8004408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f937 	bl	8004430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d10e      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d107      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0201 	mvn.w	r2, #1
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fc fa6e 	bl	80006d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fe:	2b80      	cmp	r3, #128	; 0x80
 8004200:	d10e      	bne.n	8004220 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	d107      	bne.n	8004220 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fadc 	bl	80047d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d10e      	bne.n	800424c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d107      	bne.n	800424c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8fc 	bl	8004444 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b20      	cmp	r3, #32
 8004258:	d10e      	bne.n	8004278 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b20      	cmp	r3, #32
 8004266:	d107      	bne.n	8004278 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0220 	mvn.w	r2, #32
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 faa6 	bl	80047c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_TIM_ConfigClockSource+0x18>
 8004294:	2302      	movs	r3, #2
 8004296:	e0b3      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x180>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d0:	d03e      	beq.n	8004350 <HAL_TIM_ConfigClockSource+0xd0>
 80042d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d6:	f200 8087 	bhi.w	80043e8 <HAL_TIM_ConfigClockSource+0x168>
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042de:	f000 8085 	beq.w	80043ec <HAL_TIM_ConfigClockSource+0x16c>
 80042e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e6:	d87f      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x168>
 80042e8:	2b70      	cmp	r3, #112	; 0x70
 80042ea:	d01a      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0xa2>
 80042ec:	2b70      	cmp	r3, #112	; 0x70
 80042ee:	d87b      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x168>
 80042f0:	2b60      	cmp	r3, #96	; 0x60
 80042f2:	d050      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x116>
 80042f4:	2b60      	cmp	r3, #96	; 0x60
 80042f6:	d877      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x168>
 80042f8:	2b50      	cmp	r3, #80	; 0x50
 80042fa:	d03c      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0xf6>
 80042fc:	2b50      	cmp	r3, #80	; 0x50
 80042fe:	d873      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x168>
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d058      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x136>
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d86f      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x168>
 8004308:	2b30      	cmp	r3, #48	; 0x30
 800430a:	d064      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0x156>
 800430c:	2b30      	cmp	r3, #48	; 0x30
 800430e:	d86b      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x168>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d060      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0x156>
 8004314:	2b20      	cmp	r3, #32
 8004316:	d867      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x168>
 8004318:	2b00      	cmp	r3, #0
 800431a:	d05c      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0x156>
 800431c:	2b10      	cmp	r3, #16
 800431e:	d05a      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004320:	e062      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6899      	ldr	r1, [r3, #8]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f000 f9ab 	bl	800468c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004344:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	609a      	str	r2, [r3, #8]
      break;
 800434e:	e04e      	b.n	80043ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6899      	ldr	r1, [r3, #8]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f000 f994 	bl	800468c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004372:	609a      	str	r2, [r3, #8]
      break;
 8004374:	e03b      	b.n	80043ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6859      	ldr	r1, [r3, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	461a      	mov	r2, r3
 8004384:	f000 f908 	bl	8004598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2150      	movs	r1, #80	; 0x50
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f961 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 8004394:	e02b      	b.n	80043ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f000 f927 	bl	80045f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2160      	movs	r1, #96	; 0x60
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 f951 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 80043b4:	e01b      	b.n	80043ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f000 f8e8 	bl	8004598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2140      	movs	r1, #64	; 0x40
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f941 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 80043d4:	e00b      	b.n	80043ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4619      	mov	r1, r3
 80043e0:	4610      	mov	r0, r2
 80043e2:	f000 f938 	bl	8004656 <TIM_ITRx_SetConfig>
        break;
 80043e6:	e002      	b.n	80043ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043e8:	bf00      	nop
 80043ea:	e000      	b.n	80043ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a40      	ldr	r2, [pc, #256]	; (800456c <TIM_Base_SetConfig+0x114>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d013      	beq.n	8004498 <TIM_Base_SetConfig+0x40>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004476:	d00f      	beq.n	8004498 <TIM_Base_SetConfig+0x40>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a3d      	ldr	r2, [pc, #244]	; (8004570 <TIM_Base_SetConfig+0x118>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00b      	beq.n	8004498 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a3c      	ldr	r2, [pc, #240]	; (8004574 <TIM_Base_SetConfig+0x11c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d007      	beq.n	8004498 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a3b      	ldr	r2, [pc, #236]	; (8004578 <TIM_Base_SetConfig+0x120>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a3a      	ldr	r2, [pc, #232]	; (800457c <TIM_Base_SetConfig+0x124>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d108      	bne.n	80044aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2f      	ldr	r2, [pc, #188]	; (800456c <TIM_Base_SetConfig+0x114>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d02b      	beq.n	800450a <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b8:	d027      	beq.n	800450a <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2c      	ldr	r2, [pc, #176]	; (8004570 <TIM_Base_SetConfig+0x118>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d023      	beq.n	800450a <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2b      	ldr	r2, [pc, #172]	; (8004574 <TIM_Base_SetConfig+0x11c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01f      	beq.n	800450a <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <TIM_Base_SetConfig+0x120>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01b      	beq.n	800450a <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a29      	ldr	r2, [pc, #164]	; (800457c <TIM_Base_SetConfig+0x124>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d017      	beq.n	800450a <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a28      	ldr	r2, [pc, #160]	; (8004580 <TIM_Base_SetConfig+0x128>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a27      	ldr	r2, [pc, #156]	; (8004584 <TIM_Base_SetConfig+0x12c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00f      	beq.n	800450a <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a26      	ldr	r2, [pc, #152]	; (8004588 <TIM_Base_SetConfig+0x130>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00b      	beq.n	800450a <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a25      	ldr	r2, [pc, #148]	; (800458c <TIM_Base_SetConfig+0x134>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d007      	beq.n	800450a <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a24      	ldr	r2, [pc, #144]	; (8004590 <TIM_Base_SetConfig+0x138>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d003      	beq.n	800450a <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a23      	ldr	r2, [pc, #140]	; (8004594 <TIM_Base_SetConfig+0x13c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d108      	bne.n	800451c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a0a      	ldr	r2, [pc, #40]	; (800456c <TIM_Base_SetConfig+0x114>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_Base_SetConfig+0xf8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a0c      	ldr	r2, [pc, #48]	; (800457c <TIM_Base_SetConfig+0x124>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d103      	bne.n	8004558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	615a      	str	r2, [r3, #20]
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40010000 	.word	0x40010000
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40000c00 	.word	0x40000c00
 800457c:	40010400 	.word	0x40010400
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800
 800458c:	40001800 	.word	0x40001800
 8004590:	40001c00 	.word	0x40001c00
 8004594:	40002000 	.word	0x40002000

08004598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f023 0201 	bic.w	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 030a 	bic.w	r3, r3, #10
 80045d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b087      	sub	sp, #28
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0210 	bic.w	r2, r3, #16
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004632:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	f043 0307 	orr.w	r3, r3, #7
 8004678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	609a      	str	r2, [r3, #8]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	021a      	lsls	r2, r3, #8
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	609a      	str	r2, [r3, #8]
}
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e05a      	b.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a21      	ldr	r2, [pc, #132]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d022      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004730:	d01d      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1d      	ldr	r2, [pc, #116]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d018      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00e      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d009      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a17      	ldr	r2, [pc, #92]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a15      	ldr	r2, [pc, #84]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d10c      	bne.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4313      	orrs	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40010000 	.word	0x40010000
 80047ac:	40000400 	.word	0x40000400
 80047b0:	40000800 	.word	0x40000800
 80047b4:	40000c00 	.word	0x40000c00
 80047b8:	40010400 	.word	0x40010400
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40001800 	.word	0x40001800

080047c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047ec:	b084      	sub	sp, #16
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	f107 001c 	add.w	r0, r7, #28
 80047fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	2b01      	cmp	r3, #1
 8004802:	d122      	bne.n	800484a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800482c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482e:	2b01      	cmp	r3, #1
 8004830:	d105      	bne.n	800483e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fca0 	bl	8005184 <USB_CoreReset>
 8004844:	4603      	mov	r3, r0
 8004846:	73fb      	strb	r3, [r7, #15]
 8004848:	e01a      	b.n	8004880 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fc94 	bl	8005184 <USB_CoreReset>
 800485c:	4603      	mov	r3, r0
 800485e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
 8004872:	e005      	b.n	8004880 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	2b01      	cmp	r3, #1
 8004884:	d10b      	bne.n	800489e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f043 0206 	orr.w	r2, r3, #6
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f043 0220 	orr.w	r2, r3, #32
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048aa:	b004      	add	sp, #16
 80048ac:	4770      	bx	lr
	...

080048b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	4613      	mov	r3, r2
 80048bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d165      	bne.n	8004990 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4a41      	ldr	r2, [pc, #260]	; (80049cc <USB_SetTurnaroundTime+0x11c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d906      	bls.n	80048da <USB_SetTurnaroundTime+0x2a>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4a40      	ldr	r2, [pc, #256]	; (80049d0 <USB_SetTurnaroundTime+0x120>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d202      	bcs.n	80048da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048d4:	230f      	movs	r3, #15
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e062      	b.n	80049a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4a3c      	ldr	r2, [pc, #240]	; (80049d0 <USB_SetTurnaroundTime+0x120>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d306      	bcc.n	80048f0 <USB_SetTurnaroundTime+0x40>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4a3b      	ldr	r2, [pc, #236]	; (80049d4 <USB_SetTurnaroundTime+0x124>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d202      	bcs.n	80048f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048ea:	230e      	movs	r3, #14
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e057      	b.n	80049a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4a38      	ldr	r2, [pc, #224]	; (80049d4 <USB_SetTurnaroundTime+0x124>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d306      	bcc.n	8004906 <USB_SetTurnaroundTime+0x56>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4a37      	ldr	r2, [pc, #220]	; (80049d8 <USB_SetTurnaroundTime+0x128>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d202      	bcs.n	8004906 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004900:	230d      	movs	r3, #13
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e04c      	b.n	80049a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4a33      	ldr	r2, [pc, #204]	; (80049d8 <USB_SetTurnaroundTime+0x128>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d306      	bcc.n	800491c <USB_SetTurnaroundTime+0x6c>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4a32      	ldr	r2, [pc, #200]	; (80049dc <USB_SetTurnaroundTime+0x12c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d802      	bhi.n	800491c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004916:	230c      	movs	r3, #12
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e041      	b.n	80049a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4a2f      	ldr	r2, [pc, #188]	; (80049dc <USB_SetTurnaroundTime+0x12c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d906      	bls.n	8004932 <USB_SetTurnaroundTime+0x82>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4a2e      	ldr	r2, [pc, #184]	; (80049e0 <USB_SetTurnaroundTime+0x130>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d802      	bhi.n	8004932 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800492c:	230b      	movs	r3, #11
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e036      	b.n	80049a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4a2a      	ldr	r2, [pc, #168]	; (80049e0 <USB_SetTurnaroundTime+0x130>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d906      	bls.n	8004948 <USB_SetTurnaroundTime+0x98>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4a29      	ldr	r2, [pc, #164]	; (80049e4 <USB_SetTurnaroundTime+0x134>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d802      	bhi.n	8004948 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004942:	230a      	movs	r3, #10
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	e02b      	b.n	80049a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <USB_SetTurnaroundTime+0x134>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d906      	bls.n	800495e <USB_SetTurnaroundTime+0xae>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4a25      	ldr	r2, [pc, #148]	; (80049e8 <USB_SetTurnaroundTime+0x138>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d202      	bcs.n	800495e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004958:	2309      	movs	r3, #9
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e020      	b.n	80049a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <USB_SetTurnaroundTime+0x138>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d306      	bcc.n	8004974 <USB_SetTurnaroundTime+0xc4>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4a20      	ldr	r2, [pc, #128]	; (80049ec <USB_SetTurnaroundTime+0x13c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d802      	bhi.n	8004974 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800496e:	2308      	movs	r3, #8
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	e015      	b.n	80049a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <USB_SetTurnaroundTime+0x13c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d906      	bls.n	800498a <USB_SetTurnaroundTime+0xda>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <USB_SetTurnaroundTime+0x140>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d202      	bcs.n	800498a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004984:	2307      	movs	r3, #7
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	e00a      	b.n	80049a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800498a:	2306      	movs	r3, #6
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	e007      	b.n	80049a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004996:	2309      	movs	r3, #9
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	e001      	b.n	80049a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800499c:	2309      	movs	r3, #9
 800499e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	029b      	lsls	r3, r3, #10
 80049b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80049b8:	431a      	orrs	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	00d8acbf 	.word	0x00d8acbf
 80049d0:	00e4e1c0 	.word	0x00e4e1c0
 80049d4:	00f42400 	.word	0x00f42400
 80049d8:	01067380 	.word	0x01067380
 80049dc:	011a499f 	.word	0x011a499f
 80049e0:	01312cff 	.word	0x01312cff
 80049e4:	014ca43f 	.word	0x014ca43f
 80049e8:	016e3600 	.word	0x016e3600
 80049ec:	01a6ab1f 	.word	0x01a6ab1f
 80049f0:	01e84800 	.word	0x01e84800

080049f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f023 0201 	bic.w	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d106      	bne.n	8004a42 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	60da      	str	r2, [r3, #12]
 8004a40:	e00b      	b.n	8004a5a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]
 8004a54:	e001      	b.n	8004a5a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e003      	b.n	8004a62 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004a5a:	2032      	movs	r0, #50	; 0x32
 8004a5c:	f7fc fa46 	bl	8000eec <HAL_Delay>

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	e009      	b.n	8004aa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	3340      	adds	r3, #64	; 0x40
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	2200      	movs	r2, #0
 8004a98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b0e      	cmp	r3, #14
 8004aa4:	d9f2      	bls.n	8004a8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d11c      	bne.n	8004ae6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aba:	f043 0302 	orr.w	r3, r3, #2
 8004abe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ae4:	e00b      	b.n	8004afe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b04:	461a      	mov	r2, r3
 8004b06:	2300      	movs	r3, #0
 8004b08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b10:	4619      	mov	r1, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b18:	461a      	mov	r2, r3
 8004b1a:	680b      	ldr	r3, [r1, #0]
 8004b1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10c      	bne.n	8004b3e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d104      	bne.n	8004b34 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f949 	bl	8004dc4 <USB_SetDevSpeed>
 8004b32:	e008      	b.n	8004b46 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b34:	2101      	movs	r1, #1
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f944 	bl	8004dc4 <USB_SetDevSpeed>
 8004b3c:	e003      	b.n	8004b46 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b3e:	2103      	movs	r1, #3
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f93f 	bl	8004dc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b46:	2110      	movs	r1, #16
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f8f3 	bl	8004d34 <USB_FlushTxFifo>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f911 	bl	8004d80 <USB_FlushRxFifo>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2300      	movs	r3, #0
 8004b72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b86:	461a      	mov	r2, r3
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	e043      	b.n	8004c1a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ba8:	d118      	bne.n	8004bdc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e013      	b.n	8004bee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e008      	b.n	8004bee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	461a      	mov	r2, r3
 8004bea:	2300      	movs	r3, #0
 8004bec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	3301      	adds	r3, #1
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d3b7      	bcc.n	8004b92 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	e043      	b.n	8004cb0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c3e:	d118      	bne.n	8004c72 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10a      	bne.n	8004c5c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	461a      	mov	r2, r3
 8004c54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e013      	b.n	8004c84 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	e008      	b.n	8004c84 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	461a      	mov	r2, r3
 8004c80:	2300      	movs	r3, #0
 8004c82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	461a      	mov	r2, r3
 8004c92:	2300      	movs	r3, #0
 8004c94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ca8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	3301      	adds	r3, #1
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d3b7      	bcc.n	8004c28 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004cd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f043 0210 	orr.w	r2, r3, #16
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <USB_DevInit+0x2c4>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f043 0208 	orr.w	r2, r3, #8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d107      	bne.n	8004d20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d18:	f043 0304 	orr.w	r3, r3, #4
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d2c:	b004      	add	sp, #16
 8004d2e:	4770      	bx	lr
 8004d30:	803c3800 	.word	0x803c3800

08004d34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	019b      	lsls	r3, r3, #6
 8004d46:	f043 0220 	orr.w	r2, r3, #32
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3301      	adds	r3, #1
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <USB_FlushTxFifo+0x48>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d901      	bls.n	8004d60 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e006      	b.n	8004d6e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d0f0      	beq.n	8004d4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	00030d40 	.word	0x00030d40

08004d80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2210      	movs	r2, #16
 8004d90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <USB_FlushRxFifo+0x40>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e006      	b.n	8004db2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d0f0      	beq.n	8004d92 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	00030d40 	.word	0x00030d40

08004dc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	68f9      	ldr	r1, [r7, #12]
 8004de0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b087      	sub	sp, #28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0306 	and.w	r3, r3, #6
 8004e0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e16:	2300      	movs	r3, #0
 8004e18:	75fb      	strb	r3, [r7, #23]
 8004e1a:	e00a      	b.n	8004e32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d002      	beq.n	8004e28 <USB_GetDevSpeed+0x32>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b06      	cmp	r3, #6
 8004e26:	d102      	bne.n	8004e2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	75fb      	strb	r3, [r7, #23]
 8004e2c:	e001      	b.n	8004e32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e2e:	230f      	movs	r3, #15
 8004e30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b089      	sub	sp, #36	; 0x24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	460b      	mov	r3, r1
 8004e50:	71fb      	strb	r3, [r7, #7]
 8004e52:	4613      	mov	r3, r2
 8004e54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004e5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d11a      	bne.n	8004e9c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e66:	88bb      	ldrh	r3, [r7, #4]
 8004e68:	3303      	adds	r3, #3
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	e00f      	b.n	8004e94 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	031a      	lsls	r2, r3, #12
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e80:	461a      	mov	r2, r3
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	3301      	adds	r3, #1
 8004e92:	61bb      	str	r3, [r7, #24]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d3eb      	bcc.n	8004e74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3724      	adds	r7, #36	; 0x24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b089      	sub	sp, #36	; 0x24
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	3303      	adds	r3, #3
 8004ec4:	089b      	lsrs	r3, r3, #2
 8004ec6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	e00b      	b.n	8004ee6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	601a      	str	r2, [r3, #0]
    pDest++;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3304      	adds	r3, #4
 8004ede:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d3ef      	bcc.n	8004ece <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004eee:	69fb      	ldr	r3, [r7, #28]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3724      	adds	r7, #36	; 0x24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f2a:	f043 0302 	orr.w	r3, r3, #2
 8004f2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4013      	ands	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f56:	68fb      	ldr	r3, [r7, #12]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	0c1b      	lsrs	r3, r3, #16
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	b29b      	uxth	r3, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
 8005038:	01db      	lsls	r3, r3, #7
 800503a:	b2db      	uxtb	r3, r3
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005056:	68bb      	ldr	r3, [r7, #8]
}
 8005058:	4618      	mov	r0, r3
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0301 	and.w	r3, r3, #1
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800509e:	f023 0307 	bic.w	r3, r3, #7
 80050a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	460b      	mov	r3, r1
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	333c      	adds	r3, #60	; 0x3c
 80050de:	3304      	adds	r3, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4a26      	ldr	r2, [pc, #152]	; (8005180 <USB_EP0_OutStart+0xb8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d90a      	bls.n	8005102 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050fc:	d101      	bne.n	8005102 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e037      	b.n	8005172 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	461a      	mov	r2, r3
 800510a:	2300      	movs	r3, #0
 800510c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005120:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005130:	f043 0318 	orr.w	r3, r3, #24
 8005134:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005144:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005148:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800514a:	7afb      	ldrb	r3, [r7, #11]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d10f      	bne.n	8005170 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005156:	461a      	mov	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800516a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800516e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	4f54300a 	.word	0x4f54300a

08005184 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3301      	adds	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <USB_CoreReset+0x64>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d901      	bls.n	80051a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e01b      	b.n	80051da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	daf2      	bge.n	8005190 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f043 0201 	orr.w	r2, r3, #1
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3301      	adds	r3, #1
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4a09      	ldr	r2, [pc, #36]	; (80051e8 <USB_CoreReset+0x64>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d901      	bls.n	80051cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e006      	b.n	80051da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d0f0      	beq.n	80051ba <USB_CoreReset+0x36>

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	00030d40 	.word	0x00030d40

080051ec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80051f2:	f002 f835 	bl	8007260 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80051f6:	4b19      	ldr	r3, [pc, #100]	; (800525c <MX_LWIP_Init+0x70>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80051fc:	4b18      	ldr	r3, [pc, #96]	; (8005260 <MX_LWIP_Init+0x74>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8005202:	4b18      	ldr	r3, [pc, #96]	; (8005264 <MX_LWIP_Init+0x78>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005208:	4b17      	ldr	r3, [pc, #92]	; (8005268 <MX_LWIP_Init+0x7c>)
 800520a:	9302      	str	r3, [sp, #8]
 800520c:	4b17      	ldr	r3, [pc, #92]	; (800526c <MX_LWIP_Init+0x80>)
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	2300      	movs	r3, #0
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	4b13      	ldr	r3, [pc, #76]	; (8005264 <MX_LWIP_Init+0x78>)
 8005216:	4a12      	ldr	r2, [pc, #72]	; (8005260 <MX_LWIP_Init+0x74>)
 8005218:	4910      	ldr	r1, [pc, #64]	; (800525c <MX_LWIP_Init+0x70>)
 800521a:	4815      	ldr	r0, [pc, #84]	; (8005270 <MX_LWIP_Init+0x84>)
 800521c:	f002 fcee 	bl	8007bfc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005220:	4813      	ldr	r0, [pc, #76]	; (8005270 <MX_LWIP_Init+0x84>)
 8005222:	f002 fea5 	bl	8007f70 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005226:	4b12      	ldr	r3, [pc, #72]	; (8005270 <MX_LWIP_Init+0x84>)
 8005228:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800522c:	089b      	lsrs	r3, r3, #2
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005238:	480d      	ldr	r0, [pc, #52]	; (8005270 <MX_LWIP_Init+0x84>)
 800523a:	f002 fea9 	bl	8007f90 <netif_set_up>
 800523e:	e002      	b.n	8005246 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005240:	480b      	ldr	r0, [pc, #44]	; (8005270 <MX_LWIP_Init+0x84>)
 8005242:	f002 ff11 	bl	8008068 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005246:	490b      	ldr	r1, [pc, #44]	; (8005274 <MX_LWIP_Init+0x88>)
 8005248:	4809      	ldr	r0, [pc, #36]	; (8005270 <MX_LWIP_Init+0x84>)
 800524a:	f002 ff3f 	bl	80080cc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800524e:	4808      	ldr	r0, [pc, #32]	; (8005270 <MX_LWIP_Init+0x84>)
 8005250:	f00a ffd6 	bl	8010200 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200006b0 	.word	0x200006b0
 8005260:	200006b4 	.word	0x200006b4
 8005264:	200006b8 	.word	0x200006b8
 8005268:	08013bcd 	.word	0x08013bcd
 800526c:	08005851 	.word	0x08005851
 8005270:	20000678 	.word	0x20000678
 8005274:	080058bd 	.word	0x080058bd

08005278 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800527c:	4803      	ldr	r0, [pc, #12]	; (800528c <MX_LWIP_Process+0x14>)
 800527e:	f000 fac7 	bl	8005810 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005282:	f009 ff43 	bl	800f10c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000678 	.word	0x20000678

08005290 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08e      	sub	sp, #56	; 0x38
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	60da      	str	r2, [r3, #12]
 80052a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a4e      	ldr	r2, [pc, #312]	; (80053e8 <HAL_ETH_MspInit+0x158>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	f040 8095 	bne.w	80053de <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80052b4:	2300      	movs	r3, #0
 80052b6:	623b      	str	r3, [r7, #32]
 80052b8:	4b4c      	ldr	r3, [pc, #304]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	4a4b      	ldr	r2, [pc, #300]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052c2:	6313      	str	r3, [r2, #48]	; 0x30
 80052c4:	4b49      	ldr	r3, [pc, #292]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052cc:	623b      	str	r3, [r7, #32]
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	4b45      	ldr	r3, [pc, #276]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	4a44      	ldr	r2, [pc, #272]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052de:	6313      	str	r3, [r2, #48]	; 0x30
 80052e0:	4b42      	ldr	r3, [pc, #264]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	2300      	movs	r3, #0
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	4b3e      	ldr	r3, [pc, #248]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	4a3d      	ldr	r2, [pc, #244]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052fa:	6313      	str	r3, [r2, #48]	; 0x30
 80052fc:	4b3b      	ldr	r3, [pc, #236]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005304:	61bb      	str	r3, [r7, #24]
 8005306:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	4b37      	ldr	r3, [pc, #220]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	4a36      	ldr	r2, [pc, #216]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 8005312:	f043 0304 	orr.w	r3, r3, #4
 8005316:	6313      	str	r3, [r2, #48]	; 0x30
 8005318:	4b34      	ldr	r3, [pc, #208]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005324:	2300      	movs	r3, #0
 8005326:	613b      	str	r3, [r7, #16]
 8005328:	4b30      	ldr	r3, [pc, #192]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	4a2f      	ldr	r2, [pc, #188]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	6313      	str	r3, [r2, #48]	; 0x30
 8005334:	4b2d      	ldr	r3, [pc, #180]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	4b29      	ldr	r3, [pc, #164]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	4a28      	ldr	r2, [pc, #160]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 800534a:	f043 0302 	orr.w	r3, r3, #2
 800534e:	6313      	str	r3, [r2, #48]	; 0x30
 8005350:	4b26      	ldr	r3, [pc, #152]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800535c:	2332      	movs	r3, #50	; 0x32
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005360:	2302      	movs	r3, #2
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005364:	2300      	movs	r3, #0
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005368:	2303      	movs	r3, #3
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800536c:	230b      	movs	r3, #11
 800536e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005374:	4619      	mov	r1, r3
 8005376:	481e      	ldr	r0, [pc, #120]	; (80053f0 <HAL_ETH_MspInit+0x160>)
 8005378:	f7fd f89a 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800537c:	2386      	movs	r3, #134	; 0x86
 800537e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005380:	2302      	movs	r3, #2
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005384:	2300      	movs	r3, #0
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005388:	2303      	movs	r3, #3
 800538a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800538c:	230b      	movs	r3, #11
 800538e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005394:	4619      	mov	r1, r3
 8005396:	4817      	ldr	r0, [pc, #92]	; (80053f4 <HAL_ETH_MspInit+0x164>)
 8005398:	f7fd f88a 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800539c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a2:	2302      	movs	r3, #2
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053aa:	2303      	movs	r3, #3
 80053ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053ae:	230b      	movs	r3, #11
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053b6:	4619      	mov	r1, r3
 80053b8:	480f      	ldr	r0, [pc, #60]	; (80053f8 <HAL_ETH_MspInit+0x168>)
 80053ba:	f7fd f879 	bl	80024b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80053be:	2200      	movs	r2, #0
 80053c0:	2100      	movs	r1, #0
 80053c2:	203d      	movs	r0, #61	; 0x3d
 80053c4:	f7fb fe91 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80053c8:	203d      	movs	r0, #61	; 0x3d
 80053ca:	f7fb feaa 	bl	8001122 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2100      	movs	r1, #0
 80053d2:	203e      	movs	r0, #62	; 0x3e
 80053d4:	f7fb fe89 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80053d8:	203e      	movs	r0, #62	; 0x3e
 80053da:	f7fb fea2 	bl	8001122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80053de:	bf00      	nop
 80053e0:	3738      	adds	r7, #56	; 0x38
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40028000 	.word	0x40028000
 80053ec:	40023800 	.word	0x40023800
 80053f0:	40020800 	.word	0x40020800
 80053f4:	40020000 	.word	0x40020000
 80053f8:	40020400 	.word	0x40020400

080053fc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005408:	4b52      	ldr	r3, [pc, #328]	; (8005554 <low_level_init+0x158>)
 800540a:	4a53      	ldr	r2, [pc, #332]	; (8005558 <low_level_init+0x15c>)
 800540c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 800540e:	4b51      	ldr	r3, [pc, #324]	; (8005554 <low_level_init+0x158>)
 8005410:	2200      	movs	r2, #0
 8005412:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_10M;
 8005414:	4b4f      	ldr	r3, [pc, #316]	; (8005554 <low_level_init+0x158>)
 8005416:	2200      	movs	r2, #0
 8005418:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800541a:	4b4e      	ldr	r3, [pc, #312]	; (8005554 <low_level_init+0x158>)
 800541c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005420:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8005422:	4b4c      	ldr	r3, [pc, #304]	; (8005554 <low_level_init+0x158>)
 8005424:	2201      	movs	r2, #1
 8005426:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005428:	2300      	movs	r3, #0
 800542a:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005430:	23e1      	movs	r3, #225	; 0xe1
 8005432:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005434:	2300      	movs	r3, #0
 8005436:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005438:	2300      	movs	r3, #0
 800543a:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800543c:	2300      	movs	r3, #0
 800543e:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005440:	4a44      	ldr	r2, [pc, #272]	; (8005554 <low_level_init+0x158>)
 8005442:	f107 0308 	add.w	r3, r7, #8
 8005446:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005448:	4b42      	ldr	r3, [pc, #264]	; (8005554 <low_level_init+0x158>)
 800544a:	2200      	movs	r2, #0
 800544c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800544e:	4b41      	ldr	r3, [pc, #260]	; (8005554 <low_level_init+0x158>)
 8005450:	2200      	movs	r2, #0
 8005452:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005454:	4b3f      	ldr	r3, [pc, #252]	; (8005554 <low_level_init+0x158>)
 8005456:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800545a:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800545c:	483d      	ldr	r0, [pc, #244]	; (8005554 <low_level_init+0x158>)
 800545e:	f7fb fe7b 	bl	8001158 <HAL_ETH_Init>
 8005462:	4603      	mov	r3, r0
 8005464:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005466:	7dfb      	ldrb	r3, [r7, #23]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d108      	bne.n	800547e <low_level_init+0x82>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005472:	f043 0304 	orr.w	r3, r3, #4
 8005476:	b2da      	uxtb	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800547e:	2304      	movs	r3, #4
 8005480:	4a36      	ldr	r2, [pc, #216]	; (800555c <low_level_init+0x160>)
 8005482:	4937      	ldr	r1, [pc, #220]	; (8005560 <low_level_init+0x164>)
 8005484:	4833      	ldr	r0, [pc, #204]	; (8005554 <low_level_init+0x158>)
 8005486:	f7fc f803 	bl	8001490 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800548a:	2304      	movs	r3, #4
 800548c:	4a35      	ldr	r2, [pc, #212]	; (8005564 <low_level_init+0x168>)
 800548e:	4936      	ldr	r1, [pc, #216]	; (8005568 <low_level_init+0x16c>)
 8005490:	4830      	ldr	r0, [pc, #192]	; (8005554 <low_level_init+0x158>)
 8005492:	f7fc f866 	bl	8001562 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2206      	movs	r2, #6
 800549a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800549e:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <low_level_init+0x158>)
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	781a      	ldrb	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80054aa:	4b2a      	ldr	r3, [pc, #168]	; (8005554 <low_level_init+0x158>)
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	785a      	ldrb	r2, [r3, #1]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80054b6:	4b27      	ldr	r3, [pc, #156]	; (8005554 <low_level_init+0x158>)
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	789a      	ldrb	r2, [r3, #2]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80054c2:	4b24      	ldr	r3, [pc, #144]	; (8005554 <low_level_init+0x158>)
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	78da      	ldrb	r2, [r3, #3]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80054ce:	4b21      	ldr	r3, [pc, #132]	; (8005554 <low_level_init+0x158>)
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	791a      	ldrb	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80054da:	4b1e      	ldr	r3, [pc, #120]	; (8005554 <low_level_init+0x158>)
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	795a      	ldrb	r2, [r3, #5]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80054ec:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054f4:	f043 030a 	orr.w	r3, r3, #10
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005500:	4814      	ldr	r0, [pc, #80]	; (8005554 <low_level_init+0x158>)
 8005502:	f7fc fb5c 	bl	8001bbe <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8005506:	f107 0310 	add.w	r3, r7, #16
 800550a:	461a      	mov	r2, r3
 800550c:	2111      	movs	r1, #17
 800550e:	4811      	ldr	r0, [pc, #68]	; (8005554 <low_level_init+0x158>)
 8005510:	f7fc fa87 	bl	8001a22 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f043 0303 	orr.w	r3, r3, #3
 800551a:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	461a      	mov	r2, r3
 8005520:	2111      	movs	r1, #17
 8005522:	480c      	ldr	r0, [pc, #48]	; (8005554 <low_level_init+0x158>)
 8005524:	f7fc fae5 	bl	8001af2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8005528:	f107 0310 	add.w	r3, r7, #16
 800552c:	461a      	mov	r2, r3
 800552e:	2112      	movs	r1, #18
 8005530:	4808      	ldr	r0, [pc, #32]	; (8005554 <low_level_init+0x158>)
 8005532:	f7fc fa76 	bl	8001a22 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f043 0320 	orr.w	r3, r3, #32
 800553c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	461a      	mov	r2, r3
 8005542:	2112      	movs	r1, #18
 8005544:	4803      	ldr	r0, [pc, #12]	; (8005554 <low_level_init+0x158>)
 8005546:	f7fc fad4 	bl	8001af2 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800554a:	bf00      	nop
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20001f8c 	.word	0x20001f8c
 8005558:	40028000 	.word	0x40028000
 800555c:	20001fd4 	.word	0x20001fd4
 8005560:	200006bc 	.word	0x200006bc
 8005564:	2000073c 	.word	0x2000073c
 8005568:	20001f0c 	.word	0x20001f0c

0800556c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	; 0x28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005576:	4b4b      	ldr	r3, [pc, #300]	; (80056a4 <low_level_output+0x138>)
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005582:	2300      	movs	r3, #0
 8005584:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800558a:	2300      	movs	r3, #0
 800558c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800558e:	4b45      	ldr	r3, [pc, #276]	; (80056a4 <low_level_output+0x138>)
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	623b      	str	r3, [r7, #32]
 800559c:	e05a      	b.n	8005654 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	da03      	bge.n	80055ae <low_level_output+0x42>
      {
        errval = ERR_USE;
 80055a6:	23f8      	movs	r3, #248	; 0xf8
 80055a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80055ac:	e05c      	b.n	8005668 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	895b      	ldrh	r3, [r3, #10]
 80055b2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80055b8:	e02f      	b.n	800561a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	18d0      	adds	r0, r2, r3
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	18d1      	adds	r1, r2, r3
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80055ce:	3304      	adds	r3, #4
 80055d0:	461a      	mov	r2, r3
 80055d2:	f00e fc03 	bl	8013ddc <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	da03      	bge.n	80055ec <low_level_output+0x80>
        {
          errval = ERR_USE;
 80055e4:	23f8      	movs	r3, #248	; 0xf8
 80055e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80055ea:	e03d      	b.n	8005668 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80055fc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005608:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005614:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005624:	4293      	cmp	r3, r2
 8005626:	d8c8      	bhi.n	80055ba <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	18d0      	adds	r0, r2, r3
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4413      	add	r3, r2
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4619      	mov	r1, r3
 800563a:	f00e fbcf 	bl	8013ddc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	623b      	str	r3, [r7, #32]
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1a1      	bne.n	800559e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800565a:	6979      	ldr	r1, [r7, #20]
 800565c:	4811      	ldr	r0, [pc, #68]	; (80056a4 <low_level_output+0x138>)
 800565e:	f7fb ffed 	bl	800163c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005668:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <low_level_output+0x138>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005670:	3314      	adds	r3, #20
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800567c:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <low_level_output+0x138>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005684:	3314      	adds	r3, #20
 8005686:	2220      	movs	r2, #32
 8005688:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800568a:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <low_level_output+0x138>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005692:	3304      	adds	r3, #4
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005698:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800569c:	4618      	mov	r0, r3
 800569e:	3728      	adds	r7, #40	; 0x28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20001f8c 	.word	0x20001f8c

080056a8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08c      	sub	sp, #48	; 0x30
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80056b4:	2300      	movs	r3, #0
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80056cc:	484f      	ldr	r0, [pc, #316]	; (800580c <low_level_input+0x164>)
 80056ce:	f7fc f89f 	bl	8001810 <HAL_ETH_GetReceivedFrame>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <low_level_input+0x34>

    return NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	e092      	b.n	8005802 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80056dc:	4b4b      	ldr	r3, [pc, #300]	; (800580c <low_level_input+0x164>)
 80056de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80056e2:	4b4a      	ldr	r3, [pc, #296]	; (800580c <low_level_input+0x164>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80056e8:	89fb      	ldrh	r3, [r7, #14]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80056ee:	89fb      	ldrh	r3, [r7, #14]
 80056f0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80056f4:	4619      	mov	r1, r3
 80056f6:	2000      	movs	r0, #0
 80056f8:	f002 fd84 	bl	8008204 <pbuf_alloc>
 80056fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	2b00      	cmp	r3, #0
 8005702:	d04b      	beq.n	800579c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005704:	4b41      	ldr	r3, [pc, #260]	; (800580c <low_level_input+0x164>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
 8005712:	e040      	b.n	8005796 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	895b      	ldrh	r3, [r3, #10]
 8005718:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800571e:	e021      	b.n	8005764 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	18d0      	adds	r0, r2, r3
 8005728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	18d1      	adds	r1, r2, r3
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005734:	3304      	adds	r3, #4
 8005736:	461a      	mov	r2, r3
 8005738:	f00e fb50 	bl	8013ddc <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	4413      	add	r3, r2
 800574e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005752:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800575e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800576e:	4293      	cmp	r3, r2
 8005770:	d8d6      	bhi.n	8005720 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	18d0      	adds	r0, r2, r3
 800577a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4619      	mov	r1, r3
 8005784:	f00e fb2a 	bl	8013ddc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	4413      	add	r3, r2
 800578e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1bb      	bne.n	8005714 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <low_level_input+0x164>)
 800579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	e00b      	b.n	80057c0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	3301      	adds	r3, #1
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	4b12      	ldr	r3, [pc, #72]	; (800580c <low_level_input+0x164>)
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d3ee      	bcc.n	80057a8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80057ca:	4b10      	ldr	r3, [pc, #64]	; (800580c <low_level_input+0x164>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80057d0:	4b0e      	ldr	r3, [pc, #56]	; (800580c <low_level_input+0x164>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d8:	3314      	adds	r3, #20
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00d      	beq.n	8005800 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80057e4:	4b09      	ldr	r3, [pc, #36]	; (800580c <low_level_input+0x164>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ec:	3314      	adds	r3, #20
 80057ee:	2280      	movs	r2, #128	; 0x80
 80057f0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <low_level_input+0x164>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057fa:	3308      	adds	r3, #8
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005802:	4618      	mov	r0, r3
 8005804:	3730      	adds	r7, #48	; 0x30
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20001f8c 	.word	0x20001f8c

08005810 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff ff45 	bl	80056a8 <low_level_input>
 800581e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d010      	beq.n	8005848 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	4798      	blx	r3
 8005830:	4603      	mov	r3, r0
 8005832:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8005834:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d006      	beq.n	800584a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f002 ffc5 	bl	80087cc <pbuf_free>
    p = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	e000      	b.n	800584a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005848:	bf00      	nop
  }
}
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <ethernetif_init+0x1c>
 800585e:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <ethernetif_init+0x48>)
 8005860:	f44f 7206 	mov.w	r2, #536	; 0x218
 8005864:	490d      	ldr	r1, [pc, #52]	; (800589c <ethernetif_init+0x4c>)
 8005866:	480e      	ldr	r0, [pc, #56]	; (80058a0 <ethernetif_init+0x50>)
 8005868:	f00e face 	bl	8013e08 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2273      	movs	r2, #115	; 0x73
 8005870:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2274      	movs	r2, #116	; 0x74
 8005878:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a09      	ldr	r2, [pc, #36]	; (80058a4 <ethernetif_init+0x54>)
 8005880:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a08      	ldr	r2, [pc, #32]	; (80058a8 <ethernetif_init+0x58>)
 8005886:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fdb7 	bl	80053fc <low_level_init>

  return ERR_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	08015020 	.word	0x08015020
 800589c:	0801503c 	.word	0x0801503c
 80058a0:	0801504c 	.word	0x0801504c
 80058a4:	08012055 	.word	0x08012055
 80058a8:	0800556d 	.word	0x0800556d

080058ac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80058b0:	f7fb fb10 	bl	8000ed4 <HAL_GetTick>
 80058b4:	4603      	mov	r3, r0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058d2:	089b      	lsrs	r3, r3, #2
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d05d      	beq.n	800599a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80058de:	4b34      	ldr	r3, [pc, #208]	; (80059b0 <ethernetif_update_config+0xf4>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d03f      	beq.n	8005966 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80058e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058ea:	2100      	movs	r1, #0
 80058ec:	4830      	ldr	r0, [pc, #192]	; (80059b0 <ethernetif_update_config+0xf4>)
 80058ee:	f7fc f900 	bl	8001af2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80058f2:	f7fb faef 	bl	8000ed4 <HAL_GetTick>
 80058f6:	4603      	mov	r3, r0
 80058f8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80058fa:	f107 0308 	add.w	r3, r7, #8
 80058fe:	461a      	mov	r2, r3
 8005900:	2101      	movs	r1, #1
 8005902:	482b      	ldr	r0, [pc, #172]	; (80059b0 <ethernetif_update_config+0xf4>)
 8005904:	f7fc f88d 	bl	8001a22 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005908:	f7fb fae4 	bl	8000ed4 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005916:	d828      	bhi.n	800596a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0eb      	beq.n	80058fa <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005922:	f107 0308 	add.w	r3, r7, #8
 8005926:	461a      	mov	r2, r3
 8005928:	2110      	movs	r1, #16
 800592a:	4821      	ldr	r0, [pc, #132]	; (80059b0 <ethernetif_update_config+0xf4>)
 800592c:	f7fc f879 	bl	8001a22 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800593a:	4b1d      	ldr	r3, [pc, #116]	; (80059b0 <ethernetif_update_config+0xf4>)
 800593c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005940:	60da      	str	r2, [r3, #12]
 8005942:	e002      	b.n	800594a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005944:	4b1a      	ldr	r3, [pc, #104]	; (80059b0 <ethernetif_update_config+0xf4>)
 8005946:	2200      	movs	r2, #0
 8005948:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005954:	4b16      	ldr	r3, [pc, #88]	; (80059b0 <ethernetif_update_config+0xf4>)
 8005956:	2200      	movs	r2, #0
 8005958:	609a      	str	r2, [r3, #8]
 800595a:	e016      	b.n	800598a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800595c:	4b14      	ldr	r3, [pc, #80]	; (80059b0 <ethernetif_update_config+0xf4>)
 800595e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	e011      	b.n	800598a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005966:	bf00      	nop
 8005968:	e000      	b.n	800596c <ethernetif_update_config+0xb0>
          goto error;
 800596a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800596c:	4b10      	ldr	r3, [pc, #64]	; (80059b0 <ethernetif_update_config+0xf4>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	08db      	lsrs	r3, r3, #3
 8005972:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005974:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <ethernetif_update_config+0xf4>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800597c:	4313      	orrs	r3, r2
 800597e:	b29b      	uxth	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	2100      	movs	r1, #0
 8005984:	480a      	ldr	r0, [pc, #40]	; (80059b0 <ethernetif_update_config+0xf4>)
 8005986:	f7fc f8b4 	bl	8001af2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800598a:	2100      	movs	r1, #0
 800598c:	4808      	ldr	r0, [pc, #32]	; (80059b0 <ethernetif_update_config+0xf4>)
 800598e:	f7fc f975 	bl	8001c7c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005992:	4807      	ldr	r0, [pc, #28]	; (80059b0 <ethernetif_update_config+0xf4>)
 8005994:	f7fc f913 	bl	8001bbe <HAL_ETH_Start>
 8005998:	e002      	b.n	80059a0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800599a:	4805      	ldr	r0, [pc, #20]	; (80059b0 <ethernetif_update_config+0xf4>)
 800599c:	f7fc f93e 	bl	8001c1c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f807 	bl	80059b4 <ethernetif_notify_conn_changed>
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20001f8c 	.word	0x20001f8c

080059b4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	88db      	ldrh	r3, [r3, #6]
 80059d4:	3301      	adds	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	88db      	ldrh	r3, [r3, #6]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d105      	bne.n	80059f0 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	88db      	ldrh	r3, [r3, #6]
 80059e8:	3301      	adds	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	88db      	ldrh	r3, [r3, #6]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4413      	add	r3, r2
 8005a16:	78fa      	ldrb	r2, [r7, #3]
 8005a18:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	2bff      	cmp	r3, #255	; 0xff
 8005a2c:	d902      	bls.n	8005a34 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	801a      	strh	r2, [r3, #0]
  }
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	885b      	ldrh	r3, [r3, #2]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4413      	add	r3, r2
 8005a52:	3304      	adds	r3, #4
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8005a6c:	887b      	ldrh	r3, [r7, #2]
 8005a6e:	2bff      	cmp	r3, #255	; 0xff
 8005a70:	d905      	bls.n	8005a7e <mqtt_ringbuf_advance_get_idx+0x1e>
 8005a72:	4b0e      	ldr	r3, [pc, #56]	; (8005aac <mqtt_ringbuf_advance_get_idx+0x4c>)
 8005a74:	22cb      	movs	r2, #203	; 0xcb
 8005a76:	490e      	ldr	r1, [pc, #56]	; (8005ab0 <mqtt_ringbuf_advance_get_idx+0x50>)
 8005a78:	480e      	ldr	r0, [pc, #56]	; (8005ab4 <mqtt_ringbuf_advance_get_idx+0x54>)
 8005a7a:	f00e f9c5 	bl	8013e08 <iprintf>

  rb->get += len;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	885a      	ldrh	r2, [r3, #2]
 8005a82:	887b      	ldrh	r3, [r7, #2]
 8005a84:	4413      	add	r3, r2
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	885b      	ldrh	r3, [r3, #2]
 8005a90:	2bff      	cmp	r3, #255	; 0xff
 8005a92:	d906      	bls.n	8005aa2 <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	885b      	ldrh	r3, [r3, #2]
 8005a98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	805a      	strh	r2, [r3, #2]
  }
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	08015074 	.word	0x08015074
 8005ab0:	080150ac 	.word	0x080150ac
 8005ab4:	080150ec 	.word	0x080150ec

08005ab8 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	885b      	ldrh	r3, [r3, #2]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad4:	d303      	bcc.n	8005ade <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005adc:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	b29b      	uxth	r3, r3
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8005af0:	b590      	push	{r4, r7, lr}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7ff ffda 	bl	8005ab8 <mqtt_ringbuf_len>
 8005b04:	4603      	mov	r3, r0
 8005b06:	461a      	mov	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	885b      	ldrh	r3, [r3, #2]
 8005b0c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005b10:	429a      	cmp	r2, r3
 8005b12:	da04      	bge.n	8005b1e <mqtt_output_send+0x2e>
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff ffcf 	bl	8005ab8 <mqtt_ringbuf_len>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	e004      	b.n	8005b28 <mqtt_output_send+0x38>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	885b      	ldrh	r3, [r3, #2]
 8005b22:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005b30:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d105      	bne.n	8005b44 <mqtt_output_send+0x54>
 8005b38:	4b44      	ldr	r3, [pc, #272]	; (8005c4c <mqtt_output_send+0x15c>)
 8005b3a:	22f0      	movs	r2, #240	; 0xf0
 8005b3c:	4944      	ldr	r1, [pc, #272]	; (8005c50 <mqtt_output_send+0x160>)
 8005b3e:	4845      	ldr	r0, [pc, #276]	; (8005c54 <mqtt_output_send+0x164>)
 8005b40:	f00e f962 	bl	8013e08 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8005b44:	89bb      	ldrh	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d07c      	beq.n	8005c44 <mqtt_output_send+0x154>
 8005b4a:	897b      	ldrh	r3, [r7, #10]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d079      	beq.n	8005c44 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8005b50:	89ba      	ldrh	r2, [r7, #12]
 8005b52:	897b      	ldrh	r3, [r7, #10]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d90d      	bls.n	8005b74 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8005b58:	897b      	ldrh	r3, [r7, #10]
 8005b5a:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff ffab 	bl	8005ab8 <mqtt_ringbuf_len>
 8005b62:	4603      	mov	r3, r0
 8005b64:	461a      	mov	r2, r3
 8005b66:	897b      	ldrh	r3, [r7, #10]
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	bf34      	ite	cc
 8005b6c:	2301      	movcc	r3, #1
 8005b6e:	2300      	movcs	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff ff63 	bl	8005a40 <mqtt_ringbuf_get_ptr>
 8005b7a:	4601      	mov	r1, r0
 8005b7c:	7bbb      	ldrb	r3, [r7, #14]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <mqtt_output_send+0x96>
 8005b82:	2303      	movs	r3, #3
 8005b84:	e000      	b.n	8005b88 <mqtt_output_send+0x98>
 8005b86:	2301      	movs	r3, #1
 8005b88:	89ba      	ldrh	r2, [r7, #12]
 8005b8a:	6838      	ldr	r0, [r7, #0]
 8005b8c:	f007 fc1c 	bl	800d3c8 <tcp_write>
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8005b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d146      	bne.n	8005c2a <mqtt_output_send+0x13a>
 8005b9c:	7bbb      	ldrb	r3, [r7, #14]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d043      	beq.n	8005c2a <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8005ba2:	89bb      	ldrh	r3, [r7, #12]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff ff5a 	bl	8005a60 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005bb2:	461c      	mov	r4, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff ff7f 	bl	8005ab8 <mqtt_ringbuf_len>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	885b      	ldrh	r3, [r3, #2]
 8005bc2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	da04      	bge.n	8005bd4 <mqtt_output_send+0xe4>
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff ff74 	bl	8005ab8 <mqtt_ringbuf_len>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	e003      	b.n	8005bdc <mqtt_output_send+0xec>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	885b      	ldrh	r3, [r3, #2]
 8005bd8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	dd03      	ble.n	8005be8 <mqtt_output_send+0xf8>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005be6:	e014      	b.n	8005c12 <mqtt_output_send+0x122>
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff ff65 	bl	8005ab8 <mqtt_ringbuf_len>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	885b      	ldrh	r3, [r3, #2]
 8005bf6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	da04      	bge.n	8005c08 <mqtt_output_send+0x118>
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff ff5a 	bl	8005ab8 <mqtt_ringbuf_len>
 8005c04:	4603      	mov	r3, r0
 8005c06:	e004      	b.n	8005c12 <mqtt_output_send+0x122>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	885b      	ldrh	r3, [r3, #2]
 8005c0c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff ff13 	bl	8005a40 <mqtt_ringbuf_get_ptr>
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	89ba      	ldrh	r2, [r7, #12]
 8005c1e:	2301      	movs	r3, #1
 8005c20:	6838      	ldr	r0, [r7, #0]
 8005c22:	f007 fbd1 	bl	800d3c8 <tcp_write>
 8005c26:	4603      	mov	r3, r0
 8005c28:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8005c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d109      	bne.n	8005c46 <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8005c32:	89bb      	ldrh	r3, [r7, #12]
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff ff12 	bl	8005a60 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8005c3c:	6838      	ldr	r0, [r7, #0]
 8005c3e:	f008 f9ad 	bl	800df9c <tcp_output>
 8005c42:	e000      	b.n	8005c46 <mqtt_output_send+0x156>
    return;
 8005c44:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd90      	pop	{r4, r7, pc}
 8005c4c:	08015074 	.word	0x08015074
 8005c50:	08015114 	.word	0x08015114
 8005c54:	080150ec 	.word	0x080150ec

08005c58 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	4613      	mov	r3, r2
 8005c66:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <mqtt_create_request+0x28>
 8005c72:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <mqtt_create_request+0x80>)
 8005c74:	f240 1223 	movw	r2, #291	; 0x123
 8005c78:	4918      	ldr	r1, [pc, #96]	; (8005cdc <mqtt_create_request+0x84>)
 8005c7a:	4819      	ldr	r0, [pc, #100]	; (8005ce0 <mqtt_create_request+0x88>)
 8005c7c:	f00e f8c4 	bl	8013e08 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8005c80:	2300      	movs	r3, #0
 8005c82:	74fb      	strb	r3, [r7, #19]
 8005c84:	e01f      	b.n	8005cc6 <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8005c86:	7cfb      	ldrb	r3, [r7, #19]
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	7cfb      	ldrb	r3, [r7, #19]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	68f9      	ldr	r1, [r7, #12]
 8005c96:	440b      	add	r3, r1
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d111      	bne.n	8005cc0 <mqtt_create_request+0x68>
      r = &r_objs[n];
 8005c9c:	7cfb      	ldrb	r3, [r7, #19]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	6a3a      	ldr	r2, [r7, #32]
 8005cb6:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	88fa      	ldrh	r2, [r7, #6]
 8005cbc:	819a      	strh	r2, [r3, #12]
      break;
 8005cbe:	e006      	b.n	8005cce <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	74fb      	strb	r3, [r7, #19]
 8005cc6:	7cfb      	ldrb	r3, [r7, #19]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d8db      	bhi.n	8005c86 <mqtt_create_request+0x2e>
    }
  }
  return r;
 8005cce:	697b      	ldr	r3, [r7, #20]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	08015074 	.word	0x08015074
 8005cdc:	08015134 	.word	0x08015134
 8005ce0:	080150ec 	.word	0x080150ec

08005ce4 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d106      	bne.n	8005d0a <mqtt_append_request+0x26>
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <mqtt_append_request+0x88>)
 8005cfe:	f240 123f 	movw	r2, #319	; 0x13f
 8005d02:	491b      	ldr	r1, [pc, #108]	; (8005d70 <mqtt_append_request+0x8c>)
 8005d04:	481b      	ldr	r0, [pc, #108]	; (8005d74 <mqtt_append_request+0x90>)
 8005d06:	f00e f87f 	bl	8013e08 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e00a      	b.n	8005d28 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	89da      	ldrh	r2, [r3, #14]
 8005d16:	8a7b      	ldrh	r3, [r7, #18]
 8005d18:	4413      	add	r3, r2
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	827b      	strh	r3, [r7, #18]
    head = iter;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1f1      	bne.n	8005d12 <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8005d2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d32:	2b1e      	cmp	r3, #30
 8005d34:	dd06      	ble.n	8005d44 <mqtt_append_request+0x60>
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <mqtt_append_request+0x88>)
 8005d38:	f240 1247 	movw	r2, #327	; 0x147
 8005d3c:	490e      	ldr	r1, [pc, #56]	; (8005d78 <mqtt_append_request+0x94>)
 8005d3e:	480d      	ldr	r0, [pc, #52]	; (8005d74 <mqtt_append_request+0x90>)
 8005d40:	f00e f862 	bl	8013e08 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8005d44:	8a7b      	ldrh	r3, [r7, #18]
 8005d46:	f1c3 031e 	rsb	r3, r3, #30
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <mqtt_append_request+0x7a>
    *tail = r;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8005d5c:	e002      	b.n	8005d64 <mqtt_append_request+0x80>
    head->next = r;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	601a      	str	r2, [r3, #0]
}
 8005d64:	bf00      	nop
 8005d66:	3718      	adds	r7, #24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	08015074 	.word	0x08015074
 8005d70:	08015158 	.word	0x08015158
 8005d74:	080150ec 	.word	0x080150ec
 8005d78:	0801517c 	.word	0x0801517c

08005d7c <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <mqtt_delete_request+0x14>
    r->next = r;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	601a      	str	r2, [r3, #0]
  }
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	2300      	movs	r3, #0
 8005dae:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <mqtt_take_request+0x28>
 8005db6:	4b1f      	ldr	r3, [pc, #124]	; (8005e34 <mqtt_take_request+0x98>)
 8005db8:	f240 1267 	movw	r2, #359	; 0x167
 8005dbc:	491e      	ldr	r1, [pc, #120]	; (8005e38 <mqtt_take_request+0x9c>)
 8005dbe:	481f      	ldr	r0, [pc, #124]	; (8005e3c <mqtt_take_request+0xa0>)
 8005dc0:	f00e f822 	bl	8013e08 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	e009      	b.n	8005de0 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	899b      	ldrh	r3, [r3, #12]
 8005dd0:	887a      	ldrh	r2, [r7, #2]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d008      	beq.n	8005de8 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f2      	bne.n	8005dcc <mqtt_take_request+0x30>
 8005de6:	e000      	b.n	8005dea <mqtt_take_request+0x4e>
      break;
 8005de8:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01c      	beq.n	8005e2a <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <mqtt_take_request+0x64>
      *tail = iter->next;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e003      	b.n	8005e08 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d009      	beq.n	8005e24 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	89d9      	ldrh	r1, [r3, #14]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	89da      	ldrh	r2, [r3, #14]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	440a      	add	r2, r1
 8005e20:	b292      	uxth	r2, r2
 8005e22:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	08015074 	.word	0x08015074
 8005e38:	080151b4 	.word	0x080151b4
 8005e3c:	080150ec 	.word	0x080150ec

08005e40 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <mqtt_request_time_elapsed+0x20>
 8005e52:	4b21      	ldr	r3, [pc, #132]	; (8005ed8 <mqtt_request_time_elapsed+0x98>)
 8005e54:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8005e58:	4920      	ldr	r1, [pc, #128]	; (8005edc <mqtt_request_time_elapsed+0x9c>)
 8005e5a:	4821      	ldr	r0, [pc, #132]	; (8005ee0 <mqtt_request_time_elapsed+0xa0>)
 8005e5c:	f00d ffd4 	bl	8013e08 <iprintf>
  r = *tail;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8005e66:	e02c      	b.n	8005ec2 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	89db      	ldrh	r3, [r3, #14]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d31c      	bcc.n	8005eae <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	89db      	ldrh	r3, [r3, #14]
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	78fa      	ldrb	r2, [r7, #3]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d007      	beq.n	8005ea0 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	6892      	ldr	r2, [r2, #8]
 8005e98:	f06f 0102 	mvn.w	r1, #2
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff ff6b 	bl	8005d7c <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	e009      	b.n	8005ec2 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	89da      	ldrh	r2, [r3, #14]
 8005eb2:	78fb      	ldrb	r3, [r7, #3]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	81da      	strh	r2, [r3, #14]
      t = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <mqtt_request_time_elapsed+0x8e>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1cc      	bne.n	8005e68 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8005ece:	bf00      	nop
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	08015074 	.word	0x08015074
 8005edc:	080151d4 	.word	0x080151d4
 8005ee0:	080150ec 	.word	0x080150ec

08005ee4 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <mqtt_clear_requests+0x1c>
 8005ef2:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <mqtt_clear_requests+0x48>)
 8005ef4:	f240 12a7 	movw	r2, #423	; 0x1a7
 8005ef8:	490d      	ldr	r1, [pc, #52]	; (8005f30 <mqtt_clear_requests+0x4c>)
 8005efa:	480e      	ldr	r0, [pc, #56]	; (8005f34 <mqtt_clear_requests+0x50>)
 8005efc:	f00d ff84 	bl	8013e08 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	e007      	b.n	8005f18 <mqtt_clear_requests+0x34>
    next = iter->next;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f7ff ff34 	bl	8005d7c <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f4      	bne.n	8005f08 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	08015074 	.word	0x08015074
 8005f30:	080151fc 	.word	0x080151fc
 8005f34:	080150ec 	.word	0x080150ec

08005f38 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <mqtt_init_requests+0x1e>
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <mqtt_init_requests+0x50>)
 8005f4a:	f240 12b7 	movw	r2, #439	; 0x1b7
 8005f4e:	490f      	ldr	r1, [pc, #60]	; (8005f8c <mqtt_init_requests+0x54>)
 8005f50:	480f      	ldr	r0, [pc, #60]	; (8005f90 <mqtt_init_requests+0x58>)
 8005f52:	f00d ff59 	bl	8013e08 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
 8005f5a:	e00b      	b.n	8005f74 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	011a      	lsls	r2, r3, #4
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	440b      	add	r3, r1
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	3301      	adds	r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d8ef      	bhi.n	8005f5c <mqtt_init_requests+0x24>
  }
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	08015074 	.word	0x08015074
 8005f8c:	08015220 	.word	0x08015220
 8005f90:	080150ec 	.word	0x080150ec

08005f94 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff fd2b 	bl	8005a00 <mqtt_ringbuf_put>
}
 8005faa:	bf00      	nop
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8005fbe:	887b      	ldrh	r3, [r7, #2]
 8005fc0:	0a1b      	lsrs	r3, r3, #8
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fd19 	bl	8005a00 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8005fce:	887b      	ldrh	r3, [r7, #2]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff fd13 	bl	8005a00 <mqtt_ringbuf_put>
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b086      	sub	sp, #24
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	4613      	mov	r3, r2
 8005fee:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	82fb      	strh	r3, [r7, #22]
 8005ff4:	e00a      	b.n	800600c <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8005ff6:	8afb      	ldrh	r3, [r7, #22]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	4619      	mov	r1, r3
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff fcfd 	bl	8005a00 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8006006:	8afb      	ldrh	r3, [r7, #22]
 8006008:	3301      	adds	r3, #1
 800600a:	82fb      	strh	r3, [r7, #22]
 800600c:	8afa      	ldrh	r2, [r7, #22]
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	429a      	cmp	r2, r3
 8006012:	d3f0      	bcc.n	8005ff6 <mqtt_output_append_buf+0x14>
  }
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b086      	sub	sp, #24
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	4613      	mov	r3, r2
 800602a:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 800602c:	88fb      	ldrh	r3, [r7, #6]
 800602e:	0a1b      	lsrs	r3, r3, #8
 8006030:	b29b      	uxth	r3, r3
 8006032:	b2db      	uxtb	r3, r3
 8006034:	4619      	mov	r1, r3
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7ff fce2 	bl	8005a00 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	4619      	mov	r1, r3
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff fcdc 	bl	8005a00 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8006048:	2300      	movs	r3, #0
 800604a:	82fb      	strh	r3, [r7, #22]
 800604c:	e00a      	b.n	8006064 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 800604e:	8afb      	ldrh	r3, [r7, #22]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	4413      	add	r3, r2
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	4619      	mov	r1, r3
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff fcd1 	bl	8005a00 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800605e:	8afb      	ldrh	r3, [r7, #22]
 8006060:	3301      	adds	r3, #1
 8006062:	82fb      	strh	r3, [r7, #22]
 8006064:	8afa      	ldrh	r2, [r7, #22]
 8006066:	88fb      	ldrh	r3, [r7, #6]
 8006068:	429a      	cmp	r2, r3
 800606a:	d3f0      	bcc.n	800604e <mqtt_output_append_string+0x30>
  }
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b082      	sub	sp, #8
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	4608      	mov	r0, r1
 8006080:	4611      	mov	r1, r2
 8006082:	461a      	mov	r2, r3
 8006084:	4603      	mov	r3, r0
 8006086:	70fb      	strb	r3, [r7, #3]
 8006088:	460b      	mov	r3, r1
 800608a:	70bb      	strb	r3, [r7, #2]
 800608c:	4613      	mov	r3, r2
 800608e:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	b25a      	sxtb	r2, r3
 8006096:	78bb      	ldrb	r3, [r7, #2]
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	b25b      	sxtb	r3, r3
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	b25b      	sxtb	r3, r3
 80060a2:	4313      	orrs	r3, r2
 80060a4:	b25a      	sxtb	r2, r3
 80060a6:	787b      	ldrb	r3, [r7, #1]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	b25b      	sxtb	r3, r3
 80060ac:	f003 0306 	and.w	r3, r3, #6
 80060b0:	b25b      	sxtb	r3, r3
 80060b2:	4313      	orrs	r3, r2
 80060b4:	b25a      	sxtb	r2, r3
 80060b6:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	b25b      	sxtb	r3, r3
 80060c0:	4313      	orrs	r3, r2
 80060c2:	b25b      	sxtb	r3, r3
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff ff63 	bl	8005f94 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 80060ce:	8abb      	ldrh	r3, [r7, #20]
 80060d0:	b25b      	sxtb	r3, r3
 80060d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d6:	b25b      	sxtb	r3, r3
 80060d8:	8aba      	ldrh	r2, [r7, #20]
 80060da:	2a7f      	cmp	r2, #127	; 0x7f
 80060dc:	d902      	bls.n	80060e4 <mqtt_output_append_fixed_header+0x6e>
 80060de:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80060e2:	e000      	b.n	80060e6 <mqtt_output_append_fixed_header+0x70>
 80060e4:	2200      	movs	r2, #0
 80060e6:	4313      	orrs	r3, r2
 80060e8:	b25b      	sxtb	r3, r3
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff ff50 	bl	8005f94 <mqtt_output_append_u8>
    r_length >>= 7;
 80060f4:	8abb      	ldrh	r3, [r7, #20]
 80060f6:	09db      	lsrs	r3, r3, #7
 80060f8:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 80060fa:	8abb      	ldrh	r3, [r7, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e6      	bne.n	80060ce <mqtt_output_append_fixed_header+0x58>
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 800610c:	b590      	push	{r4, r7, lr}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8006118:	887b      	ldrh	r3, [r7, #2]
 800611a:	3301      	adds	r3, #1
 800611c:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <mqtt_output_check_space+0x26>
 8006124:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <mqtt_output_check_space+0x58>)
 8006126:	f240 2207 	movw	r2, #519	; 0x207
 800612a:	490f      	ldr	r1, [pc, #60]	; (8006168 <mqtt_output_check_space+0x5c>)
 800612c:	480f      	ldr	r0, [pc, #60]	; (800616c <mqtt_output_check_space+0x60>)
 800612e:	f00d fe6b 	bl	8013e08 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8006132:	89fb      	ldrh	r3, [r7, #14]
 8006134:	3301      	adds	r3, #1
 8006136:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8006138:	887b      	ldrh	r3, [r7, #2]
 800613a:	09db      	lsrs	r3, r3, #7
 800613c:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 800613e:	887b      	ldrh	r3, [r7, #2]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1f6      	bne.n	8006132 <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 8006144:	89fc      	ldrh	r4, [r7, #14]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7ff fcb6 	bl	8005ab8 <mqtt_ringbuf_len>
 800614c:	4603      	mov	r3, r0
 800614e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006152:	429c      	cmp	r4, r3
 8006154:	bfd4      	ite	le
 8006156:	2301      	movle	r3, #1
 8006158:	2300      	movgt	r3, #0
 800615a:	b2db      	uxtb	r3, r3
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	bd90      	pop	{r4, r7, pc}
 8006164:	08015074 	.word	0x08015074
 8006168:	08015244 	.word	0x08015244
 800616c:	080150ec 	.word	0x080150ec

08006170 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <mqtt_close+0x20>
 8006182:	4b27      	ldr	r3, [pc, #156]	; (8006220 <mqtt_close+0xb0>)
 8006184:	f240 221b 	movw	r2, #539	; 0x21b
 8006188:	4926      	ldr	r1, [pc, #152]	; (8006224 <mqtt_close+0xb4>)
 800618a:	4827      	ldr	r0, [pc, #156]	; (8006228 <mqtt_close+0xb8>)
 800618c:	f00d fe3c 	bl	8013e08 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d024      	beq.n	80061e2 <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	2100      	movs	r1, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f004 f9fe 	bl	800a5a0 <tcp_recv>
    altcp_err(client->conn,  NULL);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f004 fa3c 	bl	800a628 <tcp_err>
    altcp_sent(client->conn, NULL);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f004 fa14 	bl	800a5e4 <tcp_sent>
    res = altcp_close(client->conn);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f003 f815 	bl	80091f0 <tcp_close>
 80061c6:	4603      	mov	r3, r0
 80061c8:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 80061ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <mqtt_close+0x6c>
      altcp_abort(client->conn);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f003 f8f4 	bl	80093c4 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3318      	adds	r3, #24
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fe7c 	bl	8005ee4 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	480f      	ldr	r0, [pc, #60]	; (800622c <mqtt_close+0xbc>)
 80061f0:	f008 ff52 	bl	800f098 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	7a9b      	ldrb	r3, [r3, #10]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00d      	beq.n	8006218 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d006      	beq.n	8006218 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6911      	ldr	r1, [r2, #16]
 8006212:	887a      	ldrh	r2, [r7, #2]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
    }
  }
}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	08015074 	.word	0x08015074
 8006224:	08015268 	.word	0x08015268
 8006228:	080150ec 	.word	0x080150ec
 800622c:	08006231 	.word	0x08006231

08006230 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af02      	add	r7, sp, #8
 8006236:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8006238:	2301      	movs	r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <mqtt_cyclic_timer+0x24>
 8006246:	4b42      	ldr	r3, [pc, #264]	; (8006350 <mqtt_cyclic_timer+0x120>)
 8006248:	f44f 7211 	mov.w	r2, #580	; 0x244
 800624c:	4941      	ldr	r1, [pc, #260]	; (8006354 <mqtt_cyclic_timer+0x124>)
 800624e:	4842      	ldr	r0, [pc, #264]	; (8006358 <mqtt_cyclic_timer+0x128>)
 8006250:	f00d fdda 	bl	8013e08 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	7a9b      	ldrb	r3, [r3, #10]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d115      	bne.n	8006288 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	3301      	adds	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	2b63      	cmp	r3, #99	; 0x63
 8006276:	dd5e      	ble.n	8006336 <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8006278:	f240 1101 	movw	r1, #257	; 0x101
 800627c:	68b8      	ldr	r0, [r7, #8]
 800627e:	f7ff ff77 	bl	8006170 <mqtt_close>
      restart_timer = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
 8006286:	e056      	b.n	8006336 <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	7a9b      	ldrb	r3, [r3, #10]
 800628c:	2b03      	cmp	r3, #3
 800628e:	d150      	bne.n	8006332 <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	3318      	adds	r3, #24
 8006294:	2105      	movs	r1, #5
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff fdd2 	bl	8005e40 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	885b      	ldrh	r3, [r3, #2]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d048      	beq.n	8006336 <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	889b      	ldrh	r3, [r3, #4]
 80062a8:	3301      	adds	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	889b      	ldrh	r3, [r3, #4]
 80062b4:	461a      	mov	r2, r3
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	441a      	add	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	885b      	ldrh	r3, [r3, #2]
 80062c0:	4619      	mov	r1, r3
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	885b      	ldrh	r3, [r3, #2]
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	440b      	add	r3, r1
 80062cc:	429a      	cmp	r2, r3
 80062ce:	dd06      	ble.n	80062de <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80062d0:	f240 1101 	movw	r1, #257	; 0x101
 80062d4:	68b8      	ldr	r0, [r7, #8]
 80062d6:	f7ff ff4b 	bl	8006170 <mqtt_close>
        restart_timer = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	8852      	ldrh	r2, [r2, #2]
 80062ee:	4293      	cmp	r3, r2
 80062f0:	db18      	blt.n	8006324 <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	33ec      	adds	r3, #236	; 0xec
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff ff07 	bl	800610c <mqtt_output_check_space>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d018      	beq.n	8006336 <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800630a:	2300      	movs	r3, #0
 800630c:	9301      	str	r3, [sp, #4]
 800630e:	2300      	movs	r3, #0
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	2300      	movs	r3, #0
 8006314:	2200      	movs	r2, #0
 8006316:	210c      	movs	r1, #12
 8006318:	f7ff fead 	bl	8006076 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2200      	movs	r2, #0
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	e008      	b.n	8006336 <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	3301      	adds	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	801a      	strh	r2, [r3, #0]
 8006330:	e001      	b.n	8006336 <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	4907      	ldr	r1, [pc, #28]	; (800635c <mqtt_cyclic_timer+0x12c>)
 8006340:	f241 3088 	movw	r0, #5000	; 0x1388
 8006344:	f008 fe82 	bl	800f04c <sys_timeout>
  }
}
 8006348:	bf00      	nop
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	08015074 	.word	0x08015074
 8006354:	08015284 	.word	0x08015284
 8006358:	080150ec 	.word	0x080150ec
 800635c:	08006231 	.word	0x08006231

08006360 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af02      	add	r7, sp, #8
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	4608      	mov	r0, r1
 800636a:	4611      	mov	r1, r2
 800636c:	461a      	mov	r2, r3
 800636e:	4603      	mov	r3, r0
 8006370:	70fb      	strb	r3, [r7, #3]
 8006372:	460b      	mov	r3, r1
 8006374:	803b      	strh	r3, [r7, #0]
 8006376:	4613      	mov	r3, r2
 8006378:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	33ec      	adds	r3, #236	; 0xec
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fec1 	bl	800610c <mqtt_output_check_space>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01c      	beq.n	80063ca <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8006396:	78bb      	ldrb	r3, [r7, #2]
 8006398:	78f9      	ldrb	r1, [r7, #3]
 800639a:	2202      	movs	r2, #2
 800639c:	9201      	str	r2, [sp, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	9200      	str	r2, [sp, #0]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f7ff fe67 	bl	8006076 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	33ec      	adds	r3, #236	; 0xec
 80063ac:	883a      	ldrh	r2, [r7, #0]
 80063ae:	4611      	mov	r1, r2
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fdfe 	bl	8005fb2 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	4619      	mov	r1, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	f7ff fb94 	bl	8005af0 <mqtt_output_send>
 80063c8:	e001      	b.n	80063ce <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 80063ca:	23ff      	movs	r3, #255	; 0xff
 80063cc:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 80063ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	460b      	mov	r3, r1
 80063e4:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00c      	beq.n	8006408 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6890      	ldr	r0, [r2, #8]
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	2a02      	cmp	r2, #2
 80063fa:	d801      	bhi.n	8006400 <mqtt_incomming_suback+0x26>
 80063fc:	2200      	movs	r2, #0
 80063fe:	e001      	b.n	8006404 <mqtt_incomming_suback+0x2a>
 8006400:	f06f 020c 	mvn.w	r2, #12
 8006404:	4611      	mov	r1, r2
 8006406:	4798      	blx	r3
  }
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 8006410:	b590      	push	{r4, r7, lr}
 8006412:	b08f      	sub	sp, #60	; 0x3c
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	607b      	str	r3, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	72fb      	strb	r3, [r7, #11]
 800641e:	4613      	mov	r3, r2
 8006420:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8006422:	2300      	movs	r3, #0
 8006424:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800642c:	7afb      	ldrb	r3, [r7, #11]
 800642e:	4413      	add	r3, r2
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 8006432:	7afb      	ldrb	r3, [r7, #11]
 8006434:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8006440:	091b      	lsrs	r3, r3, #4
 8006442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800644e:	2b7f      	cmp	r3, #127	; 0x7f
 8006450:	d906      	bls.n	8006460 <mqtt_message_received+0x50>
 8006452:	4b9c      	ldr	r3, [pc, #624]	; (80066c4 <mqtt_message_received+0x2b4>)
 8006454:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006458:	499b      	ldr	r1, [pc, #620]	; (80066c8 <mqtt_message_received+0x2b8>)
 800645a:	489c      	ldr	r0, [pc, #624]	; (80066cc <mqtt_message_received+0x2bc>)
 800645c:	f00d fcd4 	bl	8013e08 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 8006460:	7afa      	ldrb	r2, [r7, #11]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006466:	429a      	cmp	r2, r3
 8006468:	d906      	bls.n	8006478 <mqtt_message_received+0x68>
 800646a:	4b96      	ldr	r3, [pc, #600]	; (80066c4 <mqtt_message_received+0x2b4>)
 800646c:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8006470:	4997      	ldr	r1, [pc, #604]	; (80066d0 <mqtt_message_received+0x2c0>)
 8006472:	4896      	ldr	r0, [pc, #600]	; (80066cc <mqtt_message_received+0x2bc>)
 8006474:	f00d fcc8 	bl	8013e08 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8006478:	7afa      	ldrb	r2, [r7, #11]
 800647a:	893b      	ldrh	r3, [r7, #8]
 800647c:	4413      	add	r3, r2
 800647e:	2b80      	cmp	r3, #128	; 0x80
 8006480:	dd09      	ble.n	8006496 <mqtt_message_received+0x86>
 8006482:	4b90      	ldr	r3, [pc, #576]	; (80066c4 <mqtt_message_received+0x2b4>)
 8006484:	f240 22ad 	movw	r2, #685	; 0x2ad
 8006488:	4992      	ldr	r1, [pc, #584]	; (80066d4 <mqtt_message_received+0x2c4>)
 800648a:	4890      	ldr	r0, [pc, #576]	; (80066cc <mqtt_message_received+0x2bc>)
 800648c:	f00d fcbc 	bl	8013e08 <iprintf>
 8006490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006494:	e16e      	b.n	8006774 <mqtt_message_received+0x364>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8006496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800649a:	2b02      	cmp	r3, #2
 800649c:	d123      	bne.n	80064e6 <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	7a9b      	ldrb	r3, [r3, #10]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	f040 8151 	bne.w	800674a <mqtt_message_received+0x33a>
      if (length < 2) {
 80064a8:	893b      	ldrh	r3, [r7, #8]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	f240 814f 	bls.w	800674e <mqtt_message_received+0x33e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	3301      	adds	r3, #1
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 80064b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 8145 	bne.w	800674a <mqtt_message_received+0x33a>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2203      	movs	r2, #3
 80064ca:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 813a 	beq.w	800674a <mqtt_message_received+0x33a>
          client->connect_cb(client, client->connect_arg, res);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	6911      	ldr	r1, [r2, #16]
 80064de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	4798      	blx	r3
 80064e4:	e131      	b.n	800674a <mqtt_message_received+0x33a>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 80064e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064ea:	2b0d      	cmp	r3, #13
 80064ec:	f000 812d 	beq.w	800674a <mqtt_message_received+0x33a>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 80064f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	f040 80c0 	bne.w	800667a <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 80064fe:	893b      	ldrh	r3, [r7, #8]
 8006500:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8006508:	105b      	asrs	r3, r3, #1
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006516:	2b80      	cmp	r3, #128	; 0x80
 8006518:	d87d      	bhi.n	8006616 <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 800651a:	7ffb      	ldrb	r3, [r7, #31]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <mqtt_message_received+0x114>
 8006520:	2302      	movs	r3, #2
 8006522:	e000      	b.n	8006526 <mqtt_message_received+0x116>
 8006524:	2300      	movs	r3, #0
 8006526:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8006528:	8bbb      	ldrh	r3, [r7, #28]
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	893b      	ldrh	r3, [r7, #8]
 800652e:	429a      	cmp	r2, r3
 8006530:	f280 810f 	bge.w	8006752 <mqtt_message_received+0x342>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800653a:	8b7b      	ldrh	r3, [r7, #26]
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	b29a      	uxth	r2, r3
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	3301      	adds	r3, #1
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	4413      	add	r3, r2
 800654a:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 800654c:	8b7a      	ldrh	r2, [r7, #26]
 800654e:	8939      	ldrh	r1, [r7, #8]
 8006550:	8bbb      	ldrh	r3, [r7, #28]
 8006552:	3302      	adds	r3, #2
 8006554:	1acb      	subs	r3, r1, r3
 8006556:	429a      	cmp	r2, r3
 8006558:	f300 80fd 	bgt.w	8006756 <mqtt_message_received+0x346>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800655c:	8b7a      	ldrh	r2, [r7, #26]
 800655e:	8bbb      	ldrh	r3, [r7, #28]
 8006560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006562:	1acb      	subs	r3, r1, r3
 8006564:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 8006566:	429a      	cmp	r2, r3
 8006568:	f200 80f5 	bhi.w	8006756 <mqtt_message_received+0x346>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	3302      	adds	r3, #2
 8006570:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 8006572:	8b7b      	ldrh	r3, [r7, #26]
 8006574:	3302      	adds	r3, #2
 8006576:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8006578:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800657a:	7ffa      	ldrb	r2, [r7, #31]
 800657c:	2a00      	cmp	r2, #0
 800657e:	d001      	beq.n	8006584 <mqtt_message_received+0x174>
 8006580:	2202      	movs	r2, #2
 8006582:	e000      	b.n	8006586 <mqtt_message_received+0x176>
 8006584:	2201      	movs	r2, #1
 8006586:	4413      	add	r3, r2
 8006588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800658a:	429a      	cmp	r2, r3
 800658c:	f0c0 80e5 	bcc.w	800675a <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8006590:	7ffb      	ldrb	r3, [r7, #31]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01a      	beq.n	80065cc <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 8006596:	893a      	ldrh	r2, [r7, #8]
 8006598:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800659a:	3302      	adds	r3, #2
 800659c:	429a      	cmp	r2, r3
 800659e:	f0c0 80de 	bcc.w	800675e <mqtt_message_received+0x34e>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 80065a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80065a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a6:	4413      	add	r3, r2
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80065b2:	3301      	adds	r3, #1
 80065b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065b6:	440b      	add	r3, r1
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4413      	add	r3, r2
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 80065c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80065c6:	3302      	adds	r3, #2
 80065c8:	863b      	strh	r3, [r7, #48]	; 0x30
 80065ca:	e002      	b.n	80065d2 <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 80065d2:	8b7b      	ldrh	r3, [r7, #26]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4413      	add	r3, r2
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 80065dc:	8b7b      	ldrh	r3, [r7, #26]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	4413      	add	r3, r2
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 80065e6:	893a      	ldrh	r2, [r7, #8]
 80065e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 80065ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80065f0:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d008      	beq.n	800660c <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8006602:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	440a      	add	r2, r1
 8006608:	6979      	ldr	r1, [r7, #20]
 800660a:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800660c:	8b7b      	ldrh	r3, [r7, #26]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4413      	add	r3, r2
 8006612:	7cfa      	ldrb	r2, [r7, #19]
 8006614:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8006616:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d103      	bne.n	8006624 <mqtt_message_received+0x214>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f040 8093 	bne.w	800674a <mqtt_message_received+0x33a>
      if (length < (size_t)(payload_offset + payload_length)) {
 8006624:	893b      	ldrh	r3, [r7, #8]
 8006626:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8006628:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800662a:	440a      	add	r2, r1
 800662c:	4293      	cmp	r3, r2
 800662e:	f0c0 8098 	bcc.w	8006762 <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800663a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800663c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800663e:	18d1      	adds	r1, r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	bf0c      	ite	eq
 8006646:	2301      	moveq	r3, #1
 8006648:	2300      	movne	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800664e:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d179      	bne.n	800674a <mqtt_message_received+0x33a>
 8006656:	7ffb      	ldrb	r3, [r7, #31]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d076      	beq.n	800674a <mqtt_message_received+0x33a>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800665c:	7ffb      	ldrb	r3, [r7, #31]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <mqtt_message_received+0x256>
 8006662:	2304      	movs	r3, #4
 8006664:	e000      	b.n	8006668 <mqtt_message_received+0x258>
 8006666:	2305      	movs	r3, #5
 8006668:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	891a      	ldrh	r2, [r3, #8]
 800666e:	7cb9      	ldrb	r1, [r7, #18]
 8006670:	2300      	movs	r3, #0
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7ff fe74 	bl	8006360 <pub_ack_rec_rel_response>
 8006678:	e067      	b.n	800674a <mqtt_message_received+0x33a>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	3301      	adds	r3, #1
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	b29a      	uxth	r2, r3
 800668c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800668e:	4313      	orrs	r3, r2
 8006690:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 8006692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006694:	2b00      	cmp	r3, #0
 8006696:	d066      	beq.n	8006766 <mqtt_message_received+0x356>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8006698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800669c:	2b05      	cmp	r3, #5
 800669e:	d106      	bne.n	80066ae <mqtt_message_received+0x29e>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 80066a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80066a2:	2301      	movs	r3, #1
 80066a4:	2106      	movs	r1, #6
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7ff fe5a 	bl	8006360 <pub_ack_rec_rel_response>
 80066ac:	e04d      	b.n	800674a <mqtt_message_received+0x33a>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 80066ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b2:	2b06      	cmp	r3, #6
 80066b4:	d110      	bne.n	80066d8 <mqtt_message_received+0x2c8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 80066b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80066b8:	2300      	movs	r3, #0
 80066ba:	2107      	movs	r1, #7
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7ff fe4f 	bl	8006360 <pub_ack_rec_rel_response>
 80066c2:	e042      	b.n	800674a <mqtt_message_received+0x33a>
 80066c4:	08015074 	.word	0x08015074
 80066c8:	080152a8 	.word	0x080152a8
 80066cc:	080150ec 	.word	0x080150ec
 80066d0:	080152d8 	.word	0x080152d8
 80066d4:	080152fc 	.word	0x080152fc

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 80066d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066dc:	2b09      	cmp	r3, #9
 80066de:	d00b      	beq.n	80066f8 <mqtt_message_received+0x2e8>
 80066e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066e4:	2b0b      	cmp	r3, #11
 80066e6:	d007      	beq.n	80066f8 <mqtt_message_received+0x2e8>
 80066e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ec:	2b07      	cmp	r3, #7
 80066ee:	d003      	beq.n	80066f8 <mqtt_message_received+0x2e8>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80066f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d138      	bne.n	800676a <mqtt_message_received+0x35a>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3318      	adds	r3, #24
 80066fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80066fe:	4611      	mov	r1, r2
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff fb4b 	bl	8005d9c <mqtt_take_request>
 8006706:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01c      	beq.n	8006748 <mqtt_message_received+0x338>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800670e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006712:	2b09      	cmp	r3, #9
 8006714:	d10a      	bne.n	800672c <mqtt_message_received+0x31c>
          if (length < 3) {
 8006716:	893b      	ldrh	r3, [r7, #8]
 8006718:	2b02      	cmp	r3, #2
 800671a:	d928      	bls.n	800676e <mqtt_message_received+0x35e>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	3302      	adds	r3, #2
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	4619      	mov	r1, r3
 8006724:	6a38      	ldr	r0, [r7, #32]
 8006726:	f7ff fe58 	bl	80063da <mqtt_incomming_suback>
 800672a:	e00a      	b.n	8006742 <mqtt_message_received+0x332>
          }
        } else if (r->cb != NULL) {
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <mqtt_message_received+0x332>
          r->cb(r->arg, ERR_OK);
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	6a3a      	ldr	r2, [r7, #32]
 800673a:	6892      	ldr	r2, [r2, #8]
 800673c:	2100      	movs	r1, #0
 800673e:	4610      	mov	r0, r2
 8006740:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8006742:	6a38      	ldr	r0, [r7, #32]
 8006744:	f7ff fb1a 	bl	8005d7c <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8006748:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800674a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800674c:	e012      	b.n	8006774 <mqtt_message_received+0x364>
        goto out_disconnect;
 800674e:	bf00      	nop
 8006750:	e00e      	b.n	8006770 <mqtt_message_received+0x360>
        goto out_disconnect;
 8006752:	bf00      	nop
 8006754:	e00c      	b.n	8006770 <mqtt_message_received+0x360>
        goto out_disconnect;
 8006756:	bf00      	nop
 8006758:	e00a      	b.n	8006770 <mqtt_message_received+0x360>
        goto out_disconnect;
 800675a:	bf00      	nop
 800675c:	e008      	b.n	8006770 <mqtt_message_received+0x360>
          goto out_disconnect;
 800675e:	bf00      	nop
 8006760:	e006      	b.n	8006770 <mqtt_message_received+0x360>
        goto out_disconnect;
 8006762:	bf00      	nop
 8006764:	e004      	b.n	8006770 <mqtt_message_received+0x360>
      goto out_disconnect;
 8006766:	bf00      	nop
 8006768:	e002      	b.n	8006770 <mqtt_message_received+0x360>
      goto out_disconnect;
 800676a:	bf00      	nop
 800676c:	e000      	b.n	8006770 <mqtt_message_received+0x360>
            goto out_disconnect;
 800676e:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8006770:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8006774:	4618      	mov	r0, r3
 8006776:	373c      	adds	r7, #60	; 0x3c
 8006778:	46bd      	mov	sp, r7
 800677a:	bd90      	pop	{r4, r7, pc}

0800677c <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8006796:	e0bc      	b.n	8006912 <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d903      	bls.n	80067a6 <mqtt_parse_incoming+0x2a>
 800679e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	da4d      	bge.n	8006842 <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 80067a6:	7dfa      	ldrb	r2, [r7, #23]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d206      	bcs.n	80067be <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	4413      	add	r3, r2
 80067b6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80067ba:	75bb      	strb	r3, [r7, #22]
 80067bc:	e012      	b.n	80067e4 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 80067be:	8bfb      	ldrh	r3, [r7, #30]
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	83fa      	strh	r2, [r7, #30]
 80067c4:	4619      	mov	r1, r3
 80067c6:	6838      	ldr	r0, [r7, #0]
 80067c8:	f002 fac8 	bl	8008d5c <pbuf_get_at>
 80067cc:	4603      	mov	r3, r0
 80067ce:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067d4:	1c59      	adds	r1, r3, #1
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6691      	str	r1, [r2, #104]	; 0x68
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4413      	add	r3, r2
 80067de:	7dba      	ldrb	r2, [r7, #22]
 80067e0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
 80067e6:	3301      	adds	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	f240 8090 	bls.w	8006912 <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 80067f2:	7dbb      	ldrb	r3, [r7, #22]
 80067f4:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
 80067fa:	1e9a      	subs	r2, r3, #2
 80067fc:	4613      	mov	r3, r2
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	fa01 f303 	lsl.w	r3, r1, r3
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	4313      	orrs	r3, r2
 800680a:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800680c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006810:	2b00      	cmp	r3, #0
 8006812:	db7e      	blt.n	8006912 <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800681a:	7df9      	ldrb	r1, [r7, #23]
 800681c:	2300      	movs	r3, #0
 800681e:	2200      	movs	r2, #0
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff fdf5 	bl	8006410 <mqtt_message_received>
            client->msg_idx = 0;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	75fb      	strb	r3, [r7, #23]
 8006830:	e06f      	b.n	8006912 <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8006832:	7dfa      	ldrb	r2, [r7, #23]
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	441a      	add	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8006840:	e067      	b.n	8006912 <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	7dfa      	ldrb	r2, [r7, #23]
 800684c:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 8006850:	fbb3 f1f2 	udiv	r1, r3, r2
 8006854:	fb02 f201 	mul.w	r2, r2, r1
 8006858:	1a9b      	subs	r3, r3, r2
 800685a:	b29a      	uxth	r2, r3
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	b29b      	uxth	r3, r3
 8006860:	4413      	add	r3, r2
 8006862:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	891a      	ldrh	r2, [r3, #8]
 8006868:	8bfb      	ldrh	r3, [r7, #30]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	b29b      	uxth	r3, r3
 800686e:	461a      	mov	r2, r3
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	4293      	cmp	r3, r2
 8006874:	d905      	bls.n	8006882 <mqtt_parse_incoming+0x106>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	891a      	ldrh	r2, [r3, #8]
 800687a:	8bfb      	ldrh	r3, [r7, #30]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	b29b      	uxth	r3, r3
 8006880:	e001      	b.n	8006886 <mqtt_parse_incoming+0x10a>
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	b29b      	uxth	r3, r3
 8006886:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8006888:	8a7b      	ldrh	r3, [r7, #18]
 800688a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800688e:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 8006890:	8aba      	ldrh	r2, [r7, #20]
 8006892:	8a3b      	ldrh	r3, [r7, #16]
 8006894:	429a      	cmp	r2, r3
 8006896:	d901      	bls.n	800689c <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 8006898:	8a3b      	ldrh	r3, [r7, #16]
 800689a:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80068a2:	8a7b      	ldrh	r3, [r7, #18]
 80068a4:	18d1      	adds	r1, r2, r3
 80068a6:	8bfb      	ldrh	r3, [r7, #30]
 80068a8:	8aba      	ldrh	r2, [r7, #20]
 80068aa:	6838      	ldr	r0, [r7, #0]
 80068ac:	f002 f988 	bl	8008bc0 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80068b4:	8abb      	ldrh	r3, [r7, #20]
 80068b6:	441a      	add	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 80068bc:	8bfa      	ldrh	r2, [r7, #30]
 80068be:	8abb      	ldrh	r3, [r7, #20]
 80068c0:	4413      	add	r3, r2
 80068c2:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 80068c4:	8abb      	ldrh	r3, [r7, #20]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <mqtt_parse_incoming+0x15e>
 80068d2:	8aba      	ldrh	r2, [r7, #20]
 80068d4:	8a3b      	ldrh	r3, [r7, #16]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d11b      	bne.n	8006912 <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 80068da:	8a7a      	ldrh	r2, [r7, #18]
 80068dc:	8abb      	ldrh	r3, [r7, #20]
 80068de:	4413      	add	r3, r2
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	7df9      	ldrb	r1, [r7, #23]
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff fd8e 	bl	8006410 <mqtt_message_received>
 80068f4:	4603      	mov	r3, r0
 80068f6:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 80068f8:	89fb      	ldrh	r3, [r7, #14]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <mqtt_parse_incoming+0x186>
          return res;
 80068fe:	89fb      	ldrh	r3, [r7, #14]
 8006900:	e00e      	b.n	8006920 <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d104      	bne.n	8006912 <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	891b      	ldrh	r3, [r3, #8]
 8006916:	8bfa      	ldrh	r2, [r7, #30]
 8006918:	429a      	cmp	r2, r3
 800691a:	f4ff af3d 	bcc.w	8006798 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3720      	adds	r7, #32
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d106      	bne.n	800694e <mqtt_tcp_recv_cb+0x26>
 8006940:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <mqtt_tcp_recv_cb+0xac>)
 8006942:	f240 32a7 	movw	r2, #935	; 0x3a7
 8006946:	4924      	ldr	r1, [pc, #144]	; (80069d8 <mqtt_tcp_recv_cb+0xb0>)
 8006948:	4824      	ldr	r0, [pc, #144]	; (80069dc <mqtt_tcp_recv_cb+0xb4>)
 800694a:	f00d fa5d 	bl	8013e08 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	429a      	cmp	r2, r3
 8006956:	d006      	beq.n	8006966 <mqtt_tcp_recv_cb+0x3e>
 8006958:	4b1e      	ldr	r3, [pc, #120]	; (80069d4 <mqtt_tcp_recv_cb+0xac>)
 800695a:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800695e:	4920      	ldr	r1, [pc, #128]	; (80069e0 <mqtt_tcp_recv_cb+0xb8>)
 8006960:	481e      	ldr	r0, [pc, #120]	; (80069dc <mqtt_tcp_recv_cb+0xb4>)
 8006962:	f00d fa51 	bl	8013e08 <iprintf>

  if (p == NULL) {
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d105      	bne.n	8006978 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800696c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006970:	6978      	ldr	r0, [r7, #20]
 8006972:	f7ff fbfd 	bl	8006170 <mqtt_close>
 8006976:	e027      	b.n	80069c8 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8006978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 ff23 	bl	80087cc <pbuf_free>
      return err;
 8006986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800698a:	e01e      	b.n	80069ca <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	891b      	ldrh	r3, [r3, #8]
 8006990:	4619      	mov	r1, r3
 8006992:	68b8      	ldr	r0, [r7, #8]
 8006994:	f002 fe14 	bl	80095c0 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8006998:	6879      	ldr	r1, [r7, #4]
 800699a:	6978      	ldr	r0, [r7, #20]
 800699c:	f7ff feee 	bl	800677c <mqtt_parse_incoming>
 80069a0:	4603      	mov	r3, r0
 80069a2:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 ff11 	bl	80087cc <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 80069aa:	8a7b      	ldrh	r3, [r7, #18]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 80069b0:	8a7b      	ldrh	r3, [r7, #18]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6978      	ldr	r0, [r7, #20]
 80069b6:	f7ff fbdb 	bl	8006170 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	885b      	ldrh	r3, [r3, #2]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2200      	movs	r2, #0
 80069c6:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	08015074 	.word	0x08015074
 80069d8:	08015314 	.word	0x08015314
 80069dc:	080150ec 	.word	0x080150ec
 80069e0:	08015338 	.word	0x08015338

080069e4 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	7a9b      	ldrb	r3, [r3, #10]
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d127      	bne.n	8006a4e <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2200      	movs	r2, #0
 8006a02:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	2200      	movs	r2, #0
 8006a08:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8006a0a:	e00d      	b.n	8006a28 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	6892      	ldr	r2, [r2, #8]
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4610      	mov	r0, r2
 8006a20:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8006a22:	6938      	ldr	r0, [r7, #16]
 8006a24:	f7ff f9aa 	bl	8005d7c <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	3318      	adds	r3, #24
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff f9b4 	bl	8005d9c <mqtt_take_request>
 8006a34:	6138      	str	r0, [r7, #16]
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e7      	bne.n	8006a0c <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	4619      	mov	r1, r3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	f7ff f851 	bl	8005af0 <mqtt_output_send>
  }
  return ERR_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <mqtt_tcp_err_cb+0x24>
 8006a6e:	4b09      	ldr	r3, [pc, #36]	; (8006a94 <mqtt_tcp_err_cb+0x3c>)
 8006a70:	f240 32f6 	movw	r2, #1014	; 0x3f6
 8006a74:	4908      	ldr	r1, [pc, #32]	; (8006a98 <mqtt_tcp_err_cb+0x40>)
 8006a76:	4809      	ldr	r0, [pc, #36]	; (8006a9c <mqtt_tcp_err_cb+0x44>)
 8006a78:	f00d f9c6 	bl	8013e08 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8006a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7ff fb72 	bl	8006170 <mqtt_close>
}
 8006a8c:	bf00      	nop
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	08015074 	.word	0x08015074
 8006a98:	08015360 	.word	0x08015360
 8006a9c:	080150ec 	.word	0x080150ec

08006aa0 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	7a9b      	ldrb	r3, [r3, #10]
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d105      	bne.n	8006ac2 <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	33ec      	adds	r3, #236	; 0xec
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff f817 	bl	8005af0 <mqtt_output_send>
  }
  return ERR_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 8006ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8006ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aea:	e025      	b.n	8006b38 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2200      	movs	r2, #0
 8006af0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8006af2:	4913      	ldr	r1, [pc, #76]	; (8006b40 <mqtt_tcp_connect_cb+0x74>)
 8006af4:	68b8      	ldr	r0, [r7, #8]
 8006af6:	f003 fd53 	bl	800a5a0 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8006afa:	4912      	ldr	r1, [pc, #72]	; (8006b44 <mqtt_tcp_connect_cb+0x78>)
 8006afc:	68b8      	ldr	r0, [r7, #8]
 8006afe:	f003 fd71 	bl	800a5e4 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8006b02:	2202      	movs	r2, #2
 8006b04:	4910      	ldr	r1, [pc, #64]	; (8006b48 <mqtt_tcp_connect_cb+0x7c>)
 8006b06:	68b8      	ldr	r0, [r7, #8]
 8006b08:	f003 fdb0 	bl	800a66c <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	490d      	ldr	r1, [pc, #52]	; (8006b4c <mqtt_tcp_connect_cb+0x80>)
 8006b16:	f241 3088 	movw	r0, #5000	; 0x1388
 8006b1a:	f008 fa97 	bl	800f04c <sys_timeout>
  client->cyclic_tick = 0;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2200      	movs	r2, #0
 8006b22:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f7fe ffdd 	bl	8005af0 <mqtt_output_send>

  return ERR_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	08006929 	.word	0x08006929
 8006b44:	080069e5 	.word	0x080069e5
 8006b48:	08006aa1 	.word	0x08006aa1
 8006b4c:	08006231 	.word	0x08006231

08006b50 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08c      	sub	sp, #48	; 0x30
 8006b54:	af02      	add	r7, sp, #8
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d106      	bne.n	8006b72 <mqtt_publish+0x22>
 8006b64:	4b5d      	ldr	r3, [pc, #372]	; (8006cdc <mqtt_publish+0x18c>)
 8006b66:	f240 4254 	movw	r2, #1108	; 0x454
 8006b6a:	495d      	ldr	r1, [pc, #372]	; (8006ce0 <mqtt_publish+0x190>)
 8006b6c:	485d      	ldr	r0, [pc, #372]	; (8006ce4 <mqtt_publish+0x194>)
 8006b6e:	f00d f94b 	bl	8013e08 <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d106      	bne.n	8006b86 <mqtt_publish+0x36>
 8006b78:	4b58      	ldr	r3, [pc, #352]	; (8006cdc <mqtt_publish+0x18c>)
 8006b7a:	f240 4255 	movw	r2, #1109	; 0x455
 8006b7e:	495a      	ldr	r1, [pc, #360]	; (8006ce8 <mqtt_publish+0x198>)
 8006b80:	4858      	ldr	r0, [pc, #352]	; (8006ce4 <mqtt_publish+0x194>)
 8006b82:	f00d f941 	bl	8013e08 <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	7a9b      	ldrb	r3, [r3, #10]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d109      	bne.n	8006ba2 <mqtt_publish+0x52>
 8006b8e:	4b53      	ldr	r3, [pc, #332]	; (8006cdc <mqtt_publish+0x18c>)
 8006b90:	f240 4256 	movw	r2, #1110	; 0x456
 8006b94:	4955      	ldr	r1, [pc, #340]	; (8006cec <mqtt_publish+0x19c>)
 8006b96:	4853      	ldr	r0, [pc, #332]	; (8006ce4 <mqtt_publish+0x194>)
 8006b98:	f00d f936 	bl	8013e08 <iprintf>
 8006b9c:	f06f 030a 	mvn.w	r3, #10
 8006ba0:	e097      	b.n	8006cd2 <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 8006ba2:	68b8      	ldr	r0, [r7, #8]
 8006ba4:	f7f9 fb14 	bl	80001d0 <strlen>
 8006ba8:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d909      	bls.n	8006bc8 <mqtt_publish+0x78>
 8006bb4:	4b49      	ldr	r3, [pc, #292]	; (8006cdc <mqtt_publish+0x18c>)
 8006bb6:	f240 4259 	movw	r2, #1113	; 0x459
 8006bba:	494d      	ldr	r1, [pc, #308]	; (8006cf0 <mqtt_publish+0x1a0>)
 8006bbc:	4849      	ldr	r0, [pc, #292]	; (8006ce4 <mqtt_publish+0x194>)
 8006bbe:	f00d f923 	bl	8013e08 <iprintf>
 8006bc2:	f06f 030f 	mvn.w	r3, #15
 8006bc6:	e084      	b.n	8006cd2 <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8006bcc:	8b7b      	ldrh	r3, [r7, #26]
 8006bce:	1c9a      	adds	r2, r3, #2
 8006bd0:	887b      	ldrh	r3, [r7, #2]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8006bd6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d008      	beq.n	8006bf0 <mqtt_publish+0xa0>
    total_len += 2;
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	3302      	adds	r3, #2
 8006be2:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7fe feef 	bl	80059c8 <msg_generate_packet_id>
 8006bea:	4603      	mov	r3, r0
 8006bec:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bee:	e001      	b.n	8006bf4 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfa:	d309      	bcc.n	8006c10 <mqtt_publish+0xc0>
 8006bfc:	4b37      	ldr	r3, [pc, #220]	; (8006cdc <mqtt_publish+0x18c>)
 8006bfe:	f240 4265 	movw	r2, #1125	; 0x465
 8006c02:	493c      	ldr	r1, [pc, #240]	; (8006cf4 <mqtt_publish+0x1a4>)
 8006c04:	4837      	ldr	r0, [pc, #220]	; (8006ce4 <mqtt_publish+0x194>)
 8006c06:	f00d f8ff 	bl	8013e08 <iprintf>
 8006c0a:	f06f 030f 	mvn.w	r3, #15
 8006c0e:	e060      	b.n	8006cd2 <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f103 001c 	add.w	r0, r3, #28
 8006c1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	2104      	movs	r1, #4
 8006c24:	f7ff f818 	bl	8005c58 <mqtt_create_request>
 8006c28:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <mqtt_publish+0xe6>
    return ERR_MEM;
 8006c30:	f04f 33ff 	mov.w	r3, #4294967295
 8006c34:	e04d      	b.n	8006cd2 <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	33ec      	adds	r3, #236	; 0xec
 8006c3a:	8b3a      	ldrh	r2, [r7, #24]
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff fa64 	bl	800610c <mqtt_output_check_space>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d105      	bne.n	8006c56 <mqtt_publish+0x106>
    mqtt_delete_request(r);
 8006c4a:	6978      	ldr	r0, [r7, #20]
 8006c4c:	f7ff f896 	bl	8005d7c <mqtt_delete_request>
    return ERR_MEM;
 8006c50:	f04f 33ff 	mov.w	r3, #4294967295
 8006c54:	e03d      	b.n	8006cd2 <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8006c5c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006c60:	8b3b      	ldrh	r3, [r7, #24]
 8006c62:	9301      	str	r3, [sp, #4]
 8006c64:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2103      	movs	r1, #3
 8006c70:	f7ff fa01 	bl	8006076 <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	33ec      	adds	r3, #236	; 0xec
 8006c78:	8b7a      	ldrh	r2, [r7, #26]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7ff f9ce 	bl	800601e <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8006c82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d006      	beq.n	8006c98 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	33ec      	adds	r3, #236	; 0xec
 8006c8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c90:	4611      	mov	r1, r2
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff f98d 	bl	8005fb2 <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d009      	beq.n	8006cb2 <mqtt_publish+0x162>
 8006c9e:	887b      	ldrh	r3, [r7, #2]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d006      	beq.n	8006cb2 <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	33ec      	adds	r3, #236	; 0xec
 8006ca8:	887a      	ldrh	r2, [r7, #2]
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff f998 	bl	8005fe2 <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3318      	adds	r3, #24
 8006cb6:	6979      	ldr	r1, [r7, #20]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff f813 	bl	8005ce4 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f7fe ff10 	bl	8005af0 <mqtt_output_send>
  return ERR_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3728      	adds	r7, #40	; 0x28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	08015074 	.word	0x08015074
 8006ce0:	08015380 	.word	0x08015380
 8006ce4:	080150ec 	.word	0x080150ec
 8006ce8:	080153a0 	.word	0x080153a0
 8006cec:	080153bc 	.word	0x080153bc
 8006cf0:	080153dc 	.word	0x080153dc
 8006cf4:	08015400 	.word	0x08015400

08006cf8 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8006cfc:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8006d00:	2001      	movs	r0, #1
 8006d02:	f000 fe61 	bl	80079c8 <mem_calloc>
 8006d06:	4603      	mov	r3, r0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08c      	sub	sp, #48	; 0x30
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8006d1c:	230a      	movs	r3, #10
 8006d1e:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d26:	2300      	movs	r3, #0
 8006d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	83fb      	strh	r3, [r7, #30]
 8006d36:	2300      	movs	r3, #0
 8006d38:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <mqtt_client_connect+0x42>
 8006d40:	4bac      	ldr	r3, [pc, #688]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006d42:	f240 520f 	movw	r2, #1295	; 0x50f
 8006d46:	49ac      	ldr	r1, [pc, #688]	; (8006ff8 <mqtt_client_connect+0x2ec>)
 8006d48:	48ac      	ldr	r0, [pc, #688]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006d4a:	f00d f85d 	bl	8013e08 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d106      	bne.n	8006d62 <mqtt_client_connect+0x56>
 8006d54:	4ba7      	ldr	r3, [pc, #668]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006d56:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8006d5a:	49a9      	ldr	r1, [pc, #676]	; (8007000 <mqtt_client_connect+0x2f4>)
 8006d5c:	48a7      	ldr	r0, [pc, #668]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006d5e:	f00d f853 	bl	8013e08 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d106      	bne.n	8006d76 <mqtt_client_connect+0x6a>
 8006d68:	4ba2      	ldr	r3, [pc, #648]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006d6a:	f240 5211 	movw	r2, #1297	; 0x511
 8006d6e:	49a5      	ldr	r1, [pc, #660]	; (8007004 <mqtt_client_connect+0x2f8>)
 8006d70:	48a2      	ldr	r0, [pc, #648]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006d72:	f00d f849 	bl	8013e08 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8006d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <mqtt_client_connect+0x80>
 8006d7e:	4b9d      	ldr	r3, [pc, #628]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006d80:	f240 5212 	movw	r2, #1298	; 0x512
 8006d84:	49a0      	ldr	r1, [pc, #640]	; (8007008 <mqtt_client_connect+0x2fc>)
 8006d86:	489d      	ldr	r0, [pc, #628]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006d88:	f00d f83e 	bl	8013e08 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	7a9b      	ldrb	r3, [r3, #10]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8006d94:	f06f 0309 	mvn.w	r3, #9
 8006d98:	e221      	b.n	80071de <mqtt_client_connect+0x4d2>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8006d9a:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8006d9e:	2100      	movs	r1, #0
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f00d f829 	bl	8013df8 <memset>
  client->connect_arg = arg;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006daa:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8006db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db4:	899a      	ldrh	r2, [r3, #12]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	331c      	adds	r3, #28
 8006dbe:	2104      	movs	r1, #4
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff f8b9 	bl	8005f38 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8006dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d073      	beq.n	8006eb6 <mqtt_client_connect+0x1aa>
 8006dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d06f      	beq.n	8006eb6 <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8006dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dda:	f043 0304 	orr.w	r3, r3, #4
 8006dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 8006de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de4:	7e1b      	ldrb	r3, [r3, #24]
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	b25b      	sxtb	r3, r3
 8006dea:	f003 0318 	and.w	r3, r3, #24
 8006dee:	b25a      	sxtb	r2, r3
 8006df0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006df4:	4313      	orrs	r3, r2
 8006df6:	b25b      	sxtb	r3, r3
 8006df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfe:	7e5b      	ldrb	r3, [r3, #25]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8006e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e08:	f043 0320 	orr.w	r3, r3, #32
 8006e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 8006e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7f9 f9db 	bl	80001d0 <strlen>
 8006e1a:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	2bff      	cmp	r3, #255	; 0xff
 8006e20:	d909      	bls.n	8006e36 <mqtt_client_connect+0x12a>
 8006e22:	4b74      	ldr	r3, [pc, #464]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006e24:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8006e28:	4978      	ldr	r1, [pc, #480]	; (800700c <mqtt_client_connect+0x300>)
 8006e2a:	4874      	ldr	r0, [pc, #464]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006e2c:	f00c ffec 	bl	8013e08 <iprintf>
 8006e30:	f06f 0305 	mvn.w	r3, #5
 8006e34:	e1d3      	b.n	80071de <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d109      	bne.n	8006e50 <mqtt_client_connect+0x144>
 8006e3c:	4b6d      	ldr	r3, [pc, #436]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006e3e:	f240 5229 	movw	r2, #1321	; 0x529
 8006e42:	4973      	ldr	r1, [pc, #460]	; (8007010 <mqtt_client_connect+0x304>)
 8006e44:	486d      	ldr	r0, [pc, #436]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006e46:	f00c ffdf 	bl	8013e08 <iprintf>
 8006e4a:	f06f 0305 	mvn.w	r3, #5
 8006e4e:	e1c6      	b.n	80071de <mqtt_client_connect+0x4d2>
    will_topic_len = (u8_t)len;
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7f9 f9b8 	bl	80001d0 <strlen>
 8006e60:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2bff      	cmp	r3, #255	; 0xff
 8006e66:	d909      	bls.n	8006e7c <mqtt_client_connect+0x170>
 8006e68:	4b62      	ldr	r3, [pc, #392]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006e6a:	f240 522c 	movw	r2, #1324	; 0x52c
 8006e6e:	4969      	ldr	r1, [pc, #420]	; (8007014 <mqtt_client_connect+0x308>)
 8006e70:	4862      	ldr	r0, [pc, #392]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006e72:	f00c ffc9 	bl	8013e08 <iprintf>
 8006e76:	f06f 0305 	mvn.w	r3, #5
 8006e7a:	e1b0      	b.n	80071de <mqtt_client_connect+0x4d2>
    will_msg_len = (u8_t)len;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8006e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e84:	1c9a      	adds	r2, r3, #2
 8006e86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006e8a:	4413      	add	r3, r2
 8006e8c:	1c9a      	adds	r2, r3, #2
 8006e8e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006e92:	4413      	add	r3, r2
 8006e94:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e9c:	d309      	bcc.n	8006eb2 <mqtt_client_connect+0x1a6>
 8006e9e:	4b55      	ldr	r3, [pc, #340]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006ea0:	f240 522f 	movw	r2, #1327	; 0x52f
 8006ea4:	495c      	ldr	r1, [pc, #368]	; (8007018 <mqtt_client_connect+0x30c>)
 8006ea6:	4855      	ldr	r0, [pc, #340]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006ea8:	f00c ffae 	bl	8013e08 <iprintf>
 8006eac:	f06f 0305 	mvn.w	r3, #5
 8006eb0:	e195      	b.n	80071de <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d03d      	beq.n	8006f3a <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8006ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ec2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 8006eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7f9 f97e 	bl	80001d0 <strlen>
 8006ed4:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006edc:	d309      	bcc.n	8006ef2 <mqtt_client_connect+0x1e6>
 8006ede:	4b45      	ldr	r3, [pc, #276]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006ee0:	f240 5235 	movw	r2, #1333	; 0x535
 8006ee4:	494d      	ldr	r1, [pc, #308]	; (800701c <mqtt_client_connect+0x310>)
 8006ee6:	4845      	ldr	r0, [pc, #276]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006ee8:	f00c ff8e 	bl	8013e08 <iprintf>
 8006eec:	f06f 0305 	mvn.w	r3, #5
 8006ef0:	e175      	b.n	80071de <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d109      	bne.n	8006f0c <mqtt_client_connect+0x200>
 8006ef8:	4b3e      	ldr	r3, [pc, #248]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006efa:	f240 5236 	movw	r2, #1334	; 0x536
 8006efe:	4948      	ldr	r1, [pc, #288]	; (8007020 <mqtt_client_connect+0x314>)
 8006f00:	483e      	ldr	r0, [pc, #248]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006f02:	f00c ff81 	bl	8013e08 <iprintf>
 8006f06:	f06f 0305 	mvn.w	r3, #5
 8006f0a:	e168      	b.n	80071de <mqtt_client_connect+0x4d2>
    client_user_len = (u16_t)len;
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 8006f10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f12:	1c9a      	adds	r2, r3, #2
 8006f14:	8bfb      	ldrh	r3, [r7, #30]
 8006f16:	4413      	add	r3, r2
 8006f18:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f20:	d309      	bcc.n	8006f36 <mqtt_client_connect+0x22a>
 8006f22:	4b34      	ldr	r3, [pc, #208]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006f24:	f240 5239 	movw	r2, #1337	; 0x539
 8006f28:	493b      	ldr	r1, [pc, #236]	; (8007018 <mqtt_client_connect+0x30c>)
 8006f2a:	4834      	ldr	r0, [pc, #208]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006f2c:	f00c ff6c 	bl	8013e08 <iprintf>
 8006f30:	f06f 0305 	mvn.w	r3, #5
 8006f34:	e153      	b.n	80071de <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d03d      	beq.n	8006fbe <mqtt_client_connect+0x2b2>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8006f42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7f9 f93c 	bl	80001d0 <strlen>
 8006f58:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f60:	d309      	bcc.n	8006f76 <mqtt_client_connect+0x26a>
 8006f62:	4b24      	ldr	r3, [pc, #144]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006f64:	f240 523f 	movw	r2, #1343	; 0x53f
 8006f68:	492e      	ldr	r1, [pc, #184]	; (8007024 <mqtt_client_connect+0x318>)
 8006f6a:	4824      	ldr	r0, [pc, #144]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006f6c:	f00c ff4c 	bl	8013e08 <iprintf>
 8006f70:	f06f 0305 	mvn.w	r3, #5
 8006f74:	e133      	b.n	80071de <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d109      	bne.n	8006f90 <mqtt_client_connect+0x284>
 8006f7c:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006f7e:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8006f82:	4929      	ldr	r1, [pc, #164]	; (8007028 <mqtt_client_connect+0x31c>)
 8006f84:	481d      	ldr	r0, [pc, #116]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006f86:	f00c ff3f 	bl	8013e08 <iprintf>
 8006f8a:	f06f 0305 	mvn.w	r3, #5
 8006f8e:	e126      	b.n	80071de <mqtt_client_connect+0x4d2>
    client_pass_len = (u16_t)len;
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 8006f94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f96:	1c9a      	adds	r2, r3, #2
 8006f98:	8bbb      	ldrh	r3, [r7, #28]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa4:	d309      	bcc.n	8006fba <mqtt_client_connect+0x2ae>
 8006fa6:	4b13      	ldr	r3, [pc, #76]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006fa8:	f240 5243 	movw	r2, #1347	; 0x543
 8006fac:	491a      	ldr	r1, [pc, #104]	; (8007018 <mqtt_client_connect+0x30c>)
 8006fae:	4813      	ldr	r0, [pc, #76]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006fb0:	f00c ff2a 	bl	8013e08 <iprintf>
 8006fb4:	f06f 0305 	mvn.w	r3, #5
 8006fb8:	e111      	b.n	80071de <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8006fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fc2:	f043 0302 	orr.w	r3, r3, #2
 8006fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 8006fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7f9 f8fe 	bl	80001d0 <strlen>
 8006fd4:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fdc:	d328      	bcc.n	8007030 <mqtt_client_connect+0x324>
 8006fde:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <mqtt_client_connect+0x2e8>)
 8006fe0:	f240 524b 	movw	r2, #1355	; 0x54b
 8006fe4:	4911      	ldr	r1, [pc, #68]	; (800702c <mqtt_client_connect+0x320>)
 8006fe6:	4805      	ldr	r0, [pc, #20]	; (8006ffc <mqtt_client_connect+0x2f0>)
 8006fe8:	f00c ff0e 	bl	8013e08 <iprintf>
 8006fec:	f06f 0305 	mvn.w	r3, #5
 8006ff0:	e0f5      	b.n	80071de <mqtt_client_connect+0x4d2>
 8006ff2:	bf00      	nop
 8006ff4:	08015074 	.word	0x08015074
 8006ff8:	080154f4 	.word	0x080154f4
 8006ffc:	080150ec 	.word	0x080150ec
 8007000:	08015518 	.word	0x08015518
 8007004:	08015540 	.word	0x08015540
 8007008:	0801556c 	.word	0x0801556c
 800700c:	080155a0 	.word	0x080155a0
 8007010:	080155e0 	.word	0x080155e0
 8007014:	08015620 	.word	0x08015620
 8007018:	0801565c 	.word	0x0801565c
 800701c:	0801568c 	.word	0x0801568c
 8007020:	080156cc 	.word	0x080156cc
 8007024:	08015710 	.word	0x08015710
 8007028:	08015750 	.word	0x08015750
 800702c:	08015794 	.word	0x08015794
  client_id_length = (u16_t)len;
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 8007034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007036:	1c9a      	adds	r2, r3, #2
 8007038:	8afb      	ldrh	r3, [r7, #22]
 800703a:	4413      	add	r3, r2
 800703c:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007044:	d309      	bcc.n	800705a <mqtt_client_connect+0x34e>
 8007046:	4b68      	ldr	r3, [pc, #416]	; (80071e8 <mqtt_client_connect+0x4dc>)
 8007048:	f240 524e 	movw	r2, #1358	; 0x54e
 800704c:	4967      	ldr	r1, [pc, #412]	; (80071ec <mqtt_client_connect+0x4e0>)
 800704e:	4868      	ldr	r0, [pc, #416]	; (80071f0 <mqtt_client_connect+0x4e4>)
 8007050:	f00c feda 	bl	8013e08 <iprintf>
 8007054:	f06f 0305 	mvn.w	r3, #5
 8007058:	e0c1      	b.n	80071de <mqtt_client_connect+0x4d2>
  remaining_length = (u16_t)len;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	33ec      	adds	r3, #236	; 0xec
 8007062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007064:	4611      	mov	r1, r2
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff f850 	bl	800610c <mqtt_output_check_space>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d102      	bne.n	8007078 <mqtt_client_connect+0x36c>
    return ERR_MEM;
 8007072:	f04f 33ff 	mov.w	r3, #4294967295
 8007076:	e0b2      	b.n	80071de <mqtt_client_connect+0x4d2>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8007078:	2000      	movs	r0, #0
 800707a:	f003 fa71 	bl	800a560 <tcp_new_ip_type>
 800707e:	4602      	mov	r2, r0
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d102      	bne.n	8007092 <mqtt_client_connect+0x386>
    return ERR_MEM;
 800708c:	f04f 33ff 	mov.w	r3, #4294967295
 8007090:	e0a5      	b.n	80071de <mqtt_client_connect+0x4d2>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	68f9      	ldr	r1, [r7, #12]
 8007098:	4618      	mov	r0, r3
 800709a:	f003 fa6f 	bl	800a57c <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	4953      	ldr	r1, [pc, #332]	; (80071f4 <mqtt_client_connect+0x4e8>)
 80070a6:	4618      	mov	r0, r3
 80070a8:	f002 f998 	bl	80093dc <tcp_bind>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 80070b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f040 8084 	bne.w	80071c4 <mqtt_client_connect+0x4b8>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	68d8      	ldr	r0, [r3, #12]
 80070c0:	88fa      	ldrh	r2, [r7, #6]
 80070c2:	4b4d      	ldr	r3, [pc, #308]	; (80071f8 <mqtt_client_connect+0x4ec>)
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	f002 fb11 	bl	80096ec <tcp_connect>
 80070ca:	4603      	mov	r3, r0
 80070cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 80070d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d177      	bne.n	80071c8 <mqtt_client_connect+0x4bc>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	4947      	ldr	r1, [pc, #284]	; (80071fc <mqtt_client_connect+0x4f0>)
 80070de:	4618      	mov	r0, r3
 80070e0:	f003 faa2 	bl	800a628 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80070f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	2300      	movs	r3, #0
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	2300      	movs	r3, #0
 80070fa:	2200      	movs	r2, #0
 80070fc:	2101      	movs	r1, #1
 80070fe:	f7fe ffba 	bl	8006076 <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	33ec      	adds	r3, #236	; 0xec
 8007106:	2204      	movs	r2, #4
 8007108:	493d      	ldr	r1, [pc, #244]	; (8007200 <mqtt_client_connect+0x4f4>)
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe ff87 	bl	800601e <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	33ec      	adds	r3, #236	; 0xec
 8007114:	2104      	movs	r1, #4
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe ff3c 	bl	8005f94 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	33ec      	adds	r3, #236	; 0xec
 8007120:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007124:	4611      	mov	r1, r2
 8007126:	4618      	mov	r0, r3
 8007128:	f7fe ff34 	bl	8005f94 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8007132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007134:	899b      	ldrh	r3, [r3, #12]
 8007136:	4619      	mov	r1, r3
 8007138:	4610      	mov	r0, r2
 800713a:	f7fe ff3a 	bl	8005fb2 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8007144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	8afa      	ldrh	r2, [r7, #22]
 800714a:	4619      	mov	r1, r3
 800714c:	f7fe ff67 	bl	800601e <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8007150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	d015      	beq.n	8007188 <mqtt_client_connect+0x47c>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8007162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800716a:	b292      	uxth	r2, r2
 800716c:	4619      	mov	r1, r3
 800716e:	f7fe ff56 	bl	800601e <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8007178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007180:	b292      	uxth	r2, r2
 8007182:	4619      	mov	r1, r3
 8007184:	f7fe ff4b 	bl	800601e <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8007188:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800718c:	2b00      	cmp	r3, #0
 800718e:	da08      	bge.n	80071a2 <mqtt_client_connect+0x496>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8007196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	8bfa      	ldrh	r2, [r7, #30]
 800719c:	4619      	mov	r1, r3
 800719e:	f7fe ff3e 	bl	800601e <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 80071a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d008      	beq.n	80071c0 <mqtt_client_connect+0x4b4>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80071b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	8bba      	ldrh	r2, [r7, #28]
 80071ba:	4619      	mov	r1, r3
 80071bc:	f7fe ff2f 	bl	800601e <mqtt_output_append_string>
  }
  return ERR_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e00c      	b.n	80071de <mqtt_client_connect+0x4d2>
    goto tcp_fail;
 80071c4:	bf00      	nop
 80071c6:	e000      	b.n	80071ca <mqtt_client_connect+0x4be>
    goto tcp_fail;
 80071c8:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f002 f8f8 	bl	80093c4 <tcp_abort>
  client->conn = NULL;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	60da      	str	r2, [r3, #12]
  return err;
 80071da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3728      	adds	r7, #40	; 0x28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	08015074 	.word	0x08015074
 80071ec:	0801565c 	.word	0x0801565c
 80071f0:	080150ec 	.word	0x080150ec
 80071f4:	08018640 	.word	0x08018640
 80071f8:	08006acd 	.word	0x08006acd
 80071fc:	08006a59 	.word	0x08006a59
 8007200:	080157d0 	.word	0x080157d0

08007204 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800720e:	88fb      	ldrh	r3, [r7, #6]
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	b21a      	sxth	r2, r3
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	0a1b      	lsrs	r3, r3, #8
 8007218:	b29b      	uxth	r3, r3
 800721a:	b21b      	sxth	r3, r3
 800721c:	4313      	orrs	r3, r2
 800721e:	b21b      	sxth	r3, r3
 8007220:	b29b      	uxth	r3, r3
}
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	061a      	lsls	r2, r3, #24
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	0a1b      	lsrs	r3, r3, #8
 8007248:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	0e1b      	lsrs	r3, r3, #24
 8007252:	4313      	orrs	r3, r2
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800726a:	f000 f8d5 	bl	8007418 <mem_init>
  memp_init();
 800726e:	f000 fc03 	bl	8007a78 <memp_init>
  pbuf_init();
  netif_init();
 8007272:	f000 fcbb 	bl	8007bec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007276:	f007 ff8b 	bl	800f190 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800727a:	f001 fda9 	bl	8008dd0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800727e:	f007 fec3 	bl	800f008 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <ptr_to_mem+0x20>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	88fb      	ldrh	r3, [r7, #6]
 800729c:	4413      	add	r3, r2
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	2000009c 	.word	0x2000009c

080072b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <mem_to_ptr+0x20>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	b29b      	uxth	r3, r3
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	2000009c 	.word	0x2000009c

080072d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80072d4:	b590      	push	{r4, r7, lr}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80072dc:	4b45      	ldr	r3, [pc, #276]	; (80073f4 <plug_holes+0x120>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d206      	bcs.n	80072f4 <plug_holes+0x20>
 80072e6:	4b44      	ldr	r3, [pc, #272]	; (80073f8 <plug_holes+0x124>)
 80072e8:	f240 12df 	movw	r2, #479	; 0x1df
 80072ec:	4943      	ldr	r1, [pc, #268]	; (80073fc <plug_holes+0x128>)
 80072ee:	4844      	ldr	r0, [pc, #272]	; (8007400 <plug_holes+0x12c>)
 80072f0:	f00c fd8a 	bl	8013e08 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80072f4:	4b43      	ldr	r3, [pc, #268]	; (8007404 <plug_holes+0x130>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d306      	bcc.n	800730c <plug_holes+0x38>
 80072fe:	4b3e      	ldr	r3, [pc, #248]	; (80073f8 <plug_holes+0x124>)
 8007300:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007304:	4940      	ldr	r1, [pc, #256]	; (8007408 <plug_holes+0x134>)
 8007306:	483e      	ldr	r0, [pc, #248]	; (8007400 <plug_holes+0x12c>)
 8007308:	f00c fd7e 	bl	8013e08 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	791b      	ldrb	r3, [r3, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d006      	beq.n	8007322 <plug_holes+0x4e>
 8007314:	4b38      	ldr	r3, [pc, #224]	; (80073f8 <plug_holes+0x124>)
 8007316:	f240 12e1 	movw	r2, #481	; 0x1e1
 800731a:	493c      	ldr	r1, [pc, #240]	; (800740c <plug_holes+0x138>)
 800731c:	4838      	ldr	r0, [pc, #224]	; (8007400 <plug_holes+0x12c>)
 800731e:	f00c fd73 	bl	8013e08 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800732a:	d906      	bls.n	800733a <plug_holes+0x66>
 800732c:	4b32      	ldr	r3, [pc, #200]	; (80073f8 <plug_holes+0x124>)
 800732e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007332:	4937      	ldr	r1, [pc, #220]	; (8007410 <plug_holes+0x13c>)
 8007334:	4832      	ldr	r0, [pc, #200]	; (8007400 <plug_holes+0x12c>)
 8007336:	f00c fd67 	bl	8013e08 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff ffa4 	bl	800728c <ptr_to_mem>
 8007344:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	429a      	cmp	r2, r3
 800734c:	d024      	beq.n	8007398 <plug_holes+0xc4>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	791b      	ldrb	r3, [r3, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d120      	bne.n	8007398 <plug_holes+0xc4>
 8007356:	4b2b      	ldr	r3, [pc, #172]	; (8007404 <plug_holes+0x130>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	429a      	cmp	r2, r3
 800735e:	d01b      	beq.n	8007398 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007360:	4b2c      	ldr	r3, [pc, #176]	; (8007414 <plug_holes+0x140>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	429a      	cmp	r2, r3
 8007368:	d102      	bne.n	8007370 <plug_holes+0x9c>
      lfree = mem;
 800736a:	4a2a      	ldr	r2, [pc, #168]	; (8007414 <plug_holes+0x140>)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	881a      	ldrh	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007380:	d00a      	beq.n	8007398 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff ff80 	bl	800728c <ptr_to_mem>
 800738c:	4604      	mov	r4, r0
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff ff8e 	bl	80072b0 <mem_to_ptr>
 8007394:	4603      	mov	r3, r0
 8007396:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	885b      	ldrh	r3, [r3, #2]
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff ff75 	bl	800728c <ptr_to_mem>
 80073a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d01f      	beq.n	80073ec <plug_holes+0x118>
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	791b      	ldrb	r3, [r3, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d11b      	bne.n	80073ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80073b4:	4b17      	ldr	r3, [pc, #92]	; (8007414 <plug_holes+0x140>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d102      	bne.n	80073c4 <plug_holes+0xf0>
      lfree = pmem;
 80073be:	4a15      	ldr	r2, [pc, #84]	; (8007414 <plug_holes+0x140>)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	881a      	ldrh	r2, [r3, #0]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80073d4:	d00a      	beq.n	80073ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff ff56 	bl	800728c <ptr_to_mem>
 80073e0:	4604      	mov	r4, r0
 80073e2:	68b8      	ldr	r0, [r7, #8]
 80073e4:	f7ff ff64 	bl	80072b0 <mem_to_ptr>
 80073e8:	4603      	mov	r3, r0
 80073ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80073ec:	bf00      	nop
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd90      	pop	{r4, r7, pc}
 80073f4:	2000009c 	.word	0x2000009c
 80073f8:	08015824 	.word	0x08015824
 80073fc:	08015854 	.word	0x08015854
 8007400:	0801586c 	.word	0x0801586c
 8007404:	200000a0 	.word	0x200000a0
 8007408:	08015894 	.word	0x08015894
 800740c:	080158b0 	.word	0x080158b0
 8007410:	080158cc 	.word	0x080158cc
 8007414:	200000a4 	.word	0x200000a4

08007418 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800741e:	4b18      	ldr	r3, [pc, #96]	; (8007480 <mem_init+0x68>)
 8007420:	3303      	adds	r3, #3
 8007422:	f023 0303 	bic.w	r3, r3, #3
 8007426:	461a      	mov	r2, r3
 8007428:	4b16      	ldr	r3, [pc, #88]	; (8007484 <mem_init+0x6c>)
 800742a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800742c:	4b15      	ldr	r3, [pc, #84]	; (8007484 <mem_init+0x6c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007438:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007446:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800744a:	f7ff ff1f 	bl	800728c <ptr_to_mem>
 800744e:	4603      	mov	r3, r0
 8007450:	4a0d      	ldr	r2, [pc, #52]	; (8007488 <mem_init+0x70>)
 8007452:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <mem_init+0x70>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2201      	movs	r2, #1
 800745a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800745c:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <mem_init+0x70>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007464:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007466:	4b08      	ldr	r3, [pc, #32]	; (8007488 <mem_init+0x70>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800746e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <mem_init+0x6c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a05      	ldr	r2, [pc, #20]	; (800748c <mem_init+0x74>)
 8007476:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	200037bc 	.word	0x200037bc
 8007484:	2000009c 	.word	0x2000009c
 8007488:	200000a0 	.word	0x200000a0
 800748c:	200000a4 	.word	0x200000a4

08007490 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff ff09 	bl	80072b0 <mem_to_ptr>
 800749e:	4603      	mov	r3, r0
 80074a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff fef0 	bl	800728c <ptr_to_mem>
 80074ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	885b      	ldrh	r3, [r3, #2]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff feea 	bl	800728c <ptr_to_mem>
 80074b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80074c2:	d818      	bhi.n	80074f6 <mem_link_valid+0x66>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	885b      	ldrh	r3, [r3, #2]
 80074c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80074cc:	d813      	bhi.n	80074f6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80074d2:	8afa      	ldrh	r2, [r7, #22]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d004      	beq.n	80074e2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	8afa      	ldrh	r2, [r7, #22]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d109      	bne.n	80074f6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80074e2:	4b08      	ldr	r3, [pc, #32]	; (8007504 <mem_link_valid+0x74>)
 80074e4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d006      	beq.n	80074fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	885b      	ldrh	r3, [r3, #2]
 80074f0:	8afa      	ldrh	r2, [r7, #22]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d001      	beq.n	80074fa <mem_link_valid+0x6a>
    return 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	e000      	b.n	80074fc <mem_link_valid+0x6c>
  }
  return 1;
 80074fa:	2301      	movs	r3, #1
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	200000a0 	.word	0x200000a0

08007508 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d04c      	beq.n	80075b0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f003 0303 	and.w	r3, r3, #3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007520:	4b25      	ldr	r3, [pc, #148]	; (80075b8 <mem_free+0xb0>)
 8007522:	f240 2273 	movw	r2, #627	; 0x273
 8007526:	4925      	ldr	r1, [pc, #148]	; (80075bc <mem_free+0xb4>)
 8007528:	4825      	ldr	r0, [pc, #148]	; (80075c0 <mem_free+0xb8>)
 800752a:	f00c fc6d 	bl	8013e08 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800752e:	e040      	b.n	80075b2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3b08      	subs	r3, #8
 8007534:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007536:	4b23      	ldr	r3, [pc, #140]	; (80075c4 <mem_free+0xbc>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	429a      	cmp	r2, r3
 800753e:	d306      	bcc.n	800754e <mem_free+0x46>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f103 020c 	add.w	r2, r3, #12
 8007546:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <mem_free+0xc0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d907      	bls.n	800755e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800754e:	4b1a      	ldr	r3, [pc, #104]	; (80075b8 <mem_free+0xb0>)
 8007550:	f240 227f 	movw	r2, #639	; 0x27f
 8007554:	491d      	ldr	r1, [pc, #116]	; (80075cc <mem_free+0xc4>)
 8007556:	481a      	ldr	r0, [pc, #104]	; (80075c0 <mem_free+0xb8>)
 8007558:	f00c fc56 	bl	8013e08 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800755c:	e029      	b.n	80075b2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	791b      	ldrb	r3, [r3, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d107      	bne.n	8007576 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <mem_free+0xb0>)
 8007568:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800756c:	4918      	ldr	r1, [pc, #96]	; (80075d0 <mem_free+0xc8>)
 800756e:	4814      	ldr	r0, [pc, #80]	; (80075c0 <mem_free+0xb8>)
 8007570:	f00c fc4a 	bl	8013e08 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007574:	e01d      	b.n	80075b2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f7ff ff8a 	bl	8007490 <mem_link_valid>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d107      	bne.n	8007592 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <mem_free+0xb0>)
 8007584:	f240 2295 	movw	r2, #661	; 0x295
 8007588:	4912      	ldr	r1, [pc, #72]	; (80075d4 <mem_free+0xcc>)
 800758a:	480d      	ldr	r0, [pc, #52]	; (80075c0 <mem_free+0xb8>)
 800758c:	f00c fc3c 	bl	8013e08 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007590:	e00f      	b.n	80075b2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007598:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <mem_free+0xd0>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d202      	bcs.n	80075a8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80075a2:	4a0d      	ldr	r2, [pc, #52]	; (80075d8 <mem_free+0xd0>)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f7ff fe93 	bl	80072d4 <plug_holes>
 80075ae:	e000      	b.n	80075b2 <mem_free+0xaa>
    return;
 80075b0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	08015824 	.word	0x08015824
 80075bc:	080158f8 	.word	0x080158f8
 80075c0:	0801586c 	.word	0x0801586c
 80075c4:	2000009c 	.word	0x2000009c
 80075c8:	200000a0 	.word	0x200000a0
 80075cc:	0801591c 	.word	0x0801591c
 80075d0:	08015938 	.word	0x08015938
 80075d4:	08015960 	.word	0x08015960
 80075d8:	200000a4 	.word	0x200000a4

080075dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80075e8:	887b      	ldrh	r3, [r7, #2]
 80075ea:	3303      	adds	r3, #3
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f023 0303 	bic.w	r3, r3, #3
 80075f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80075f4:	8bfb      	ldrh	r3, [r7, #30]
 80075f6:	2b0b      	cmp	r3, #11
 80075f8:	d801      	bhi.n	80075fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80075fa:	230c      	movs	r3, #12
 80075fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80075fe:	8bfb      	ldrh	r3, [r7, #30]
 8007600:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007604:	d803      	bhi.n	800760e <mem_trim+0x32>
 8007606:	8bfa      	ldrh	r2, [r7, #30]
 8007608:	887b      	ldrh	r3, [r7, #2]
 800760a:	429a      	cmp	r2, r3
 800760c:	d201      	bcs.n	8007612 <mem_trim+0x36>
    return NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	e0cc      	b.n	80077ac <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007612:	4b68      	ldr	r3, [pc, #416]	; (80077b4 <mem_trim+0x1d8>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	429a      	cmp	r2, r3
 800761a:	d304      	bcc.n	8007626 <mem_trim+0x4a>
 800761c:	4b66      	ldr	r3, [pc, #408]	; (80077b8 <mem_trim+0x1dc>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	429a      	cmp	r2, r3
 8007624:	d306      	bcc.n	8007634 <mem_trim+0x58>
 8007626:	4b65      	ldr	r3, [pc, #404]	; (80077bc <mem_trim+0x1e0>)
 8007628:	f240 22d1 	movw	r2, #721	; 0x2d1
 800762c:	4964      	ldr	r1, [pc, #400]	; (80077c0 <mem_trim+0x1e4>)
 800762e:	4865      	ldr	r0, [pc, #404]	; (80077c4 <mem_trim+0x1e8>)
 8007630:	f00c fbea 	bl	8013e08 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007634:	4b5f      	ldr	r3, [pc, #380]	; (80077b4 <mem_trim+0x1d8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	429a      	cmp	r2, r3
 800763c:	d304      	bcc.n	8007648 <mem_trim+0x6c>
 800763e:	4b5e      	ldr	r3, [pc, #376]	; (80077b8 <mem_trim+0x1dc>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d301      	bcc.n	800764c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	e0af      	b.n	80077ac <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3b08      	subs	r3, #8
 8007650:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007652:	69b8      	ldr	r0, [r7, #24]
 8007654:	f7ff fe2c 	bl	80072b0 <mem_to_ptr>
 8007658:	4603      	mov	r3, r0
 800765a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	881a      	ldrh	r2, [r3, #0]
 8007660:	8afb      	ldrh	r3, [r7, #22]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	b29b      	uxth	r3, r3
 8007666:	3b08      	subs	r3, #8
 8007668:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800766a:	8bfa      	ldrh	r2, [r7, #30]
 800766c:	8abb      	ldrh	r3, [r7, #20]
 800766e:	429a      	cmp	r2, r3
 8007670:	d906      	bls.n	8007680 <mem_trim+0xa4>
 8007672:	4b52      	ldr	r3, [pc, #328]	; (80077bc <mem_trim+0x1e0>)
 8007674:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007678:	4953      	ldr	r1, [pc, #332]	; (80077c8 <mem_trim+0x1ec>)
 800767a:	4852      	ldr	r0, [pc, #328]	; (80077c4 <mem_trim+0x1e8>)
 800767c:	f00c fbc4 	bl	8013e08 <iprintf>
  if (newsize > size) {
 8007680:	8bfa      	ldrh	r2, [r7, #30]
 8007682:	8abb      	ldrh	r3, [r7, #20]
 8007684:	429a      	cmp	r2, r3
 8007686:	d901      	bls.n	800768c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007688:	2300      	movs	r3, #0
 800768a:	e08f      	b.n	80077ac <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800768c:	8bfa      	ldrh	r2, [r7, #30]
 800768e:	8abb      	ldrh	r3, [r7, #20]
 8007690:	429a      	cmp	r2, r3
 8007692:	d101      	bne.n	8007698 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	e089      	b.n	80077ac <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff fdf5 	bl	800728c <ptr_to_mem>
 80076a2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	791b      	ldrb	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d13f      	bne.n	800772c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80076b4:	d106      	bne.n	80076c4 <mem_trim+0xe8>
 80076b6:	4b41      	ldr	r3, [pc, #260]	; (80077bc <mem_trim+0x1e0>)
 80076b8:	f240 22f5 	movw	r2, #757	; 0x2f5
 80076bc:	4943      	ldr	r1, [pc, #268]	; (80077cc <mem_trim+0x1f0>)
 80076be:	4841      	ldr	r0, [pc, #260]	; (80077c4 <mem_trim+0x1e8>)
 80076c0:	f00c fba2 	bl	8013e08 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80076ca:	8afa      	ldrh	r2, [r7, #22]
 80076cc:	8bfb      	ldrh	r3, [r7, #30]
 80076ce:	4413      	add	r3, r2
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3308      	adds	r3, #8
 80076d4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80076d6:	4b3e      	ldr	r3, [pc, #248]	; (80077d0 <mem_trim+0x1f4>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d106      	bne.n	80076ee <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80076e0:	89fb      	ldrh	r3, [r7, #14]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fdd2 	bl	800728c <ptr_to_mem>
 80076e8:	4603      	mov	r3, r0
 80076ea:	4a39      	ldr	r2, [pc, #228]	; (80077d0 <mem_trim+0x1f4>)
 80076ec:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80076ee:	89fb      	ldrh	r3, [r7, #14]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7ff fdcb 	bl	800728c <ptr_to_mem>
 80076f6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2200      	movs	r2, #0
 80076fc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	89ba      	ldrh	r2, [r7, #12]
 8007702:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	8afa      	ldrh	r2, [r7, #22]
 8007708:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	89fa      	ldrh	r2, [r7, #14]
 800770e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007718:	d047      	beq.n	80077aa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff fdb4 	bl	800728c <ptr_to_mem>
 8007724:	4602      	mov	r2, r0
 8007726:	89fb      	ldrh	r3, [r7, #14]
 8007728:	8053      	strh	r3, [r2, #2]
 800772a:	e03e      	b.n	80077aa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800772c:	8bfb      	ldrh	r3, [r7, #30]
 800772e:	f103 0214 	add.w	r2, r3, #20
 8007732:	8abb      	ldrh	r3, [r7, #20]
 8007734:	429a      	cmp	r2, r3
 8007736:	d838      	bhi.n	80077aa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007738:	8afa      	ldrh	r2, [r7, #22]
 800773a:	8bfb      	ldrh	r3, [r7, #30]
 800773c:	4413      	add	r3, r2
 800773e:	b29b      	uxth	r3, r3
 8007740:	3308      	adds	r3, #8
 8007742:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800774c:	d106      	bne.n	800775c <mem_trim+0x180>
 800774e:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <mem_trim+0x1e0>)
 8007750:	f240 3216 	movw	r2, #790	; 0x316
 8007754:	491d      	ldr	r1, [pc, #116]	; (80077cc <mem_trim+0x1f0>)
 8007756:	481b      	ldr	r0, [pc, #108]	; (80077c4 <mem_trim+0x1e8>)
 8007758:	f00c fb56 	bl	8013e08 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800775c:	89fb      	ldrh	r3, [r7, #14]
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff fd94 	bl	800728c <ptr_to_mem>
 8007764:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007766:	4b1a      	ldr	r3, [pc, #104]	; (80077d0 <mem_trim+0x1f4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	429a      	cmp	r2, r3
 800776e:	d202      	bcs.n	8007776 <mem_trim+0x19a>
      lfree = mem2;
 8007770:	4a17      	ldr	r2, [pc, #92]	; (80077d0 <mem_trim+0x1f4>)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	2200      	movs	r2, #0
 800777a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	881a      	ldrh	r2, [r3, #0]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	8afa      	ldrh	r2, [r7, #22]
 8007788:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	89fa      	ldrh	r2, [r7, #14]
 800778e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007798:	d007      	beq.n	80077aa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff fd74 	bl	800728c <ptr_to_mem>
 80077a4:	4602      	mov	r2, r0
 80077a6:	89fb      	ldrh	r3, [r7, #14]
 80077a8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80077aa:	687b      	ldr	r3, [r7, #4]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3720      	adds	r7, #32
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	2000009c 	.word	0x2000009c
 80077b8:	200000a0 	.word	0x200000a0
 80077bc:	08015824 	.word	0x08015824
 80077c0:	08015994 	.word	0x08015994
 80077c4:	0801586c 	.word	0x0801586c
 80077c8:	080159ac 	.word	0x080159ac
 80077cc:	080159cc 	.word	0x080159cc
 80077d0:	200000a4 	.word	0x200000a4

080077d4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b088      	sub	sp, #32
 80077d8:	af00      	add	r7, sp, #0
 80077da:	4603      	mov	r3, r0
 80077dc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <mem_malloc+0x14>
    return NULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	e0d9      	b.n	800799c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	3303      	adds	r3, #3
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	f023 0303 	bic.w	r3, r3, #3
 80077f2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80077f4:	8bbb      	ldrh	r3, [r7, #28]
 80077f6:	2b0b      	cmp	r3, #11
 80077f8:	d801      	bhi.n	80077fe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80077fa:	230c      	movs	r3, #12
 80077fc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80077fe:	8bbb      	ldrh	r3, [r7, #28]
 8007800:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007804:	d803      	bhi.n	800780e <mem_malloc+0x3a>
 8007806:	8bba      	ldrh	r2, [r7, #28]
 8007808:	88fb      	ldrh	r3, [r7, #6]
 800780a:	429a      	cmp	r2, r3
 800780c:	d201      	bcs.n	8007812 <mem_malloc+0x3e>
    return NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	e0c4      	b.n	800799c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007812:	4b64      	ldr	r3, [pc, #400]	; (80079a4 <mem_malloc+0x1d0>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fd4a 	bl	80072b0 <mem_to_ptr>
 800781c:	4603      	mov	r3, r0
 800781e:	83fb      	strh	r3, [r7, #30]
 8007820:	e0b4      	b.n	800798c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007822:	8bfb      	ldrh	r3, [r7, #30]
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff fd31 	bl	800728c <ptr_to_mem>
 800782a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	791b      	ldrb	r3, [r3, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 80a4 	bne.w	800797e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	8bfb      	ldrh	r3, [r7, #30]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	f1a3 0208 	sub.w	r2, r3, #8
 8007844:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007846:	429a      	cmp	r2, r3
 8007848:	f0c0 8099 	bcc.w	800797e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	8bfb      	ldrh	r3, [r7, #30]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	f1a3 0208 	sub.w	r2, r3, #8
 800785a:	8bbb      	ldrh	r3, [r7, #28]
 800785c:	3314      	adds	r3, #20
 800785e:	429a      	cmp	r2, r3
 8007860:	d333      	bcc.n	80078ca <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007862:	8bfa      	ldrh	r2, [r7, #30]
 8007864:	8bbb      	ldrh	r3, [r7, #28]
 8007866:	4413      	add	r3, r2
 8007868:	b29b      	uxth	r3, r3
 800786a:	3308      	adds	r3, #8
 800786c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800786e:	8a7b      	ldrh	r3, [r7, #18]
 8007870:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007874:	d106      	bne.n	8007884 <mem_malloc+0xb0>
 8007876:	4b4c      	ldr	r3, [pc, #304]	; (80079a8 <mem_malloc+0x1d4>)
 8007878:	f240 3287 	movw	r2, #903	; 0x387
 800787c:	494b      	ldr	r1, [pc, #300]	; (80079ac <mem_malloc+0x1d8>)
 800787e:	484c      	ldr	r0, [pc, #304]	; (80079b0 <mem_malloc+0x1dc>)
 8007880:	f00c fac2 	bl	8013e08 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007884:	8a7b      	ldrh	r3, [r7, #18]
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff fd00 	bl	800728c <ptr_to_mem>
 800788c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	881a      	ldrh	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8bfa      	ldrh	r2, [r7, #30]
 80078a0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	8a7a      	ldrh	r2, [r7, #18]
 80078a6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2201      	movs	r2, #1
 80078ac:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80078b6:	d00b      	beq.n	80078d0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff fce5 	bl	800728c <ptr_to_mem>
 80078c2:	4602      	mov	r2, r0
 80078c4:	8a7b      	ldrh	r3, [r7, #18]
 80078c6:	8053      	strh	r3, [r2, #2]
 80078c8:	e002      	b.n	80078d0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2201      	movs	r2, #1
 80078ce:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80078d0:	4b34      	ldr	r3, [pc, #208]	; (80079a4 <mem_malloc+0x1d0>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d127      	bne.n	800792a <mem_malloc+0x156>
          struct mem *cur = lfree;
 80078da:	4b32      	ldr	r3, [pc, #200]	; (80079a4 <mem_malloc+0x1d0>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80078e0:	e005      	b.n	80078ee <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff fcd0 	bl	800728c <ptr_to_mem>
 80078ec:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	791b      	ldrb	r3, [r3, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d004      	beq.n	8007900 <mem_malloc+0x12c>
 80078f6:	4b2f      	ldr	r3, [pc, #188]	; (80079b4 <mem_malloc+0x1e0>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d1f0      	bne.n	80078e2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8007900:	4a28      	ldr	r2, [pc, #160]	; (80079a4 <mem_malloc+0x1d0>)
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007906:	4b27      	ldr	r3, [pc, #156]	; (80079a4 <mem_malloc+0x1d0>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	4b2a      	ldr	r3, [pc, #168]	; (80079b4 <mem_malloc+0x1e0>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	429a      	cmp	r2, r3
 8007910:	d00b      	beq.n	800792a <mem_malloc+0x156>
 8007912:	4b24      	ldr	r3, [pc, #144]	; (80079a4 <mem_malloc+0x1d0>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	791b      	ldrb	r3, [r3, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d006      	beq.n	800792a <mem_malloc+0x156>
 800791c:	4b22      	ldr	r3, [pc, #136]	; (80079a8 <mem_malloc+0x1d4>)
 800791e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007922:	4925      	ldr	r1, [pc, #148]	; (80079b8 <mem_malloc+0x1e4>)
 8007924:	4822      	ldr	r0, [pc, #136]	; (80079b0 <mem_malloc+0x1dc>)
 8007926:	f00c fa6f 	bl	8013e08 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800792a:	8bba      	ldrh	r2, [r7, #28]
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	4413      	add	r3, r2
 8007930:	3308      	adds	r3, #8
 8007932:	4a20      	ldr	r2, [pc, #128]	; (80079b4 <mem_malloc+0x1e0>)
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	4293      	cmp	r3, r2
 8007938:	d906      	bls.n	8007948 <mem_malloc+0x174>
 800793a:	4b1b      	ldr	r3, [pc, #108]	; (80079a8 <mem_malloc+0x1d4>)
 800793c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007940:	491e      	ldr	r1, [pc, #120]	; (80079bc <mem_malloc+0x1e8>)
 8007942:	481b      	ldr	r0, [pc, #108]	; (80079b0 <mem_malloc+0x1dc>)
 8007944:	f00c fa60 	bl	8013e08 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d006      	beq.n	8007960 <mem_malloc+0x18c>
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <mem_malloc+0x1d4>)
 8007954:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007958:	4919      	ldr	r1, [pc, #100]	; (80079c0 <mem_malloc+0x1ec>)
 800795a:	4815      	ldr	r0, [pc, #84]	; (80079b0 <mem_malloc+0x1dc>)
 800795c:	f00c fa54 	bl	8013e08 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d006      	beq.n	8007978 <mem_malloc+0x1a4>
 800796a:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <mem_malloc+0x1d4>)
 800796c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007970:	4914      	ldr	r1, [pc, #80]	; (80079c4 <mem_malloc+0x1f0>)
 8007972:	480f      	ldr	r0, [pc, #60]	; (80079b0 <mem_malloc+0x1dc>)
 8007974:	f00c fa48 	bl	8013e08 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	3308      	adds	r3, #8
 800797c:	e00e      	b.n	800799c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800797e:	8bfb      	ldrh	r3, [r7, #30]
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff fc83 	bl	800728c <ptr_to_mem>
 8007986:	4603      	mov	r3, r0
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800798c:	8bfa      	ldrh	r2, [r7, #30]
 800798e:	8bbb      	ldrh	r3, [r7, #28]
 8007990:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007994:	429a      	cmp	r2, r3
 8007996:	f4ff af44 	bcc.w	8007822 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3720      	adds	r7, #32
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	200000a4 	.word	0x200000a4
 80079a8:	08015824 	.word	0x08015824
 80079ac:	080159cc 	.word	0x080159cc
 80079b0:	0801586c 	.word	0x0801586c
 80079b4:	200000a0 	.word	0x200000a0
 80079b8:	080159e0 	.word	0x080159e0
 80079bc:	080159fc 	.word	0x080159fc
 80079c0:	08015a2c 	.word	0x08015a2c
 80079c4:	08015a5c 	.word	0x08015a5c

080079c8 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	460a      	mov	r2, r1
 80079d2:	80fb      	strh	r3, [r7, #6]
 80079d4:	4613      	mov	r3, r2
 80079d6:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 80079d8:	88fb      	ldrh	r3, [r7, #6]
 80079da:	88ba      	ldrh	r2, [r7, #4]
 80079dc:	fb02 f303 	mul.w	r3, r2, r3
 80079e0:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	461a      	mov	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d001      	beq.n	80079f2 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e00e      	b.n	8007a10 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff feec 	bl	80077d4 <mem_malloc>
 80079fc:	60b8      	str	r0, [r7, #8]
  if (p) {
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d004      	beq.n	8007a0e <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	2100      	movs	r1, #0
 8007a08:	68b8      	ldr	r0, [r7, #8]
 8007a0a:	f00c f9f5 	bl	8013df8 <memset>
  }
  return p;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	3303      	adds	r3, #3
 8007a2e:	f023 0303 	bic.w	r3, r3, #3
 8007a32:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	e011      	b.n	8007a5e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	461a      	mov	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	4413      	add	r3, r2
 8007a56:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	461a      	mov	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4293      	cmp	r3, r2
 8007a68:	dbe7      	blt.n	8007a3a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007a6a:	bf00      	nop
 8007a6c:	bf00      	nop
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007a7e:	2300      	movs	r3, #0
 8007a80:	80fb      	strh	r3, [r7, #6]
 8007a82:	e009      	b.n	8007a98 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	4a08      	ldr	r2, [pc, #32]	; (8007aa8 <memp_init+0x30>)
 8007a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7ff ffc3 	bl	8007a18 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007a92:	88fb      	ldrh	r3, [r7, #6]
 8007a94:	3301      	adds	r3, #1
 8007a96:	80fb      	strh	r3, [r7, #6]
 8007a98:	88fb      	ldrh	r3, [r7, #6]
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	d9f2      	bls.n	8007a84 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007a9e:	bf00      	nop
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	080185cc 	.word	0x080185cc

08007aac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d012      	beq.n	8007ae8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d006      	beq.n	8007ae4 <do_memp_malloc_pool+0x38>
 8007ad6:	4b07      	ldr	r3, [pc, #28]	; (8007af4 <do_memp_malloc_pool+0x48>)
 8007ad8:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007adc:	4906      	ldr	r1, [pc, #24]	; (8007af8 <do_memp_malloc_pool+0x4c>)
 8007ade:	4807      	ldr	r0, [pc, #28]	; (8007afc <do_memp_malloc_pool+0x50>)
 8007ae0:	f00c f992 	bl	8013e08 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	e000      	b.n	8007aea <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	08015a80 	.word	0x08015a80
 8007af8:	08015ab0 	.word	0x08015ab0
 8007afc:	08015ad4 	.word	0x08015ad4

08007b00 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d908      	bls.n	8007b22 <memp_malloc+0x22>
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <memp_malloc+0x3c>)
 8007b12:	f240 1257 	movw	r2, #343	; 0x157
 8007b16:	490a      	ldr	r1, [pc, #40]	; (8007b40 <memp_malloc+0x40>)
 8007b18:	480a      	ldr	r0, [pc, #40]	; (8007b44 <memp_malloc+0x44>)
 8007b1a:	f00c f975 	bl	8013e08 <iprintf>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e008      	b.n	8007b34 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	4a08      	ldr	r2, [pc, #32]	; (8007b48 <memp_malloc+0x48>)
 8007b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff ffbe 	bl	8007aac <do_memp_malloc_pool>
 8007b30:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007b32:	68fb      	ldr	r3, [r7, #12]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	08015a80 	.word	0x08015a80
 8007b40:	08015b10 	.word	0x08015b10
 8007b44:	08015ad4 	.word	0x08015ad4
 8007b48:	080185cc 	.word	0x080185cc

08007b4c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	f003 0303 	and.w	r3, r3, #3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d006      	beq.n	8007b6e <do_memp_free_pool+0x22>
 8007b60:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <do_memp_free_pool+0x40>)
 8007b62:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007b66:	490a      	ldr	r1, [pc, #40]	; (8007b90 <do_memp_free_pool+0x44>)
 8007b68:	480a      	ldr	r0, [pc, #40]	; (8007b94 <do_memp_free_pool+0x48>)
 8007b6a:	f00c f94d 	bl	8013e08 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	08015a80 	.word	0x08015a80
 8007b90:	08015b30 	.word	0x08015b30
 8007b94:	08015ad4 	.word	0x08015ad4

08007b98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	6039      	str	r1, [r7, #0]
 8007ba2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	2b08      	cmp	r3, #8
 8007ba8:	d907      	bls.n	8007bba <memp_free+0x22>
 8007baa:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <memp_free+0x44>)
 8007bac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007bb0:	490b      	ldr	r1, [pc, #44]	; (8007be0 <memp_free+0x48>)
 8007bb2:	480c      	ldr	r0, [pc, #48]	; (8007be4 <memp_free+0x4c>)
 8007bb4:	f00c f928 	bl	8013e08 <iprintf>
 8007bb8:	e00c      	b.n	8007bd4 <memp_free+0x3c>

  if (mem == NULL) {
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d008      	beq.n	8007bd2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	4a09      	ldr	r2, [pc, #36]	; (8007be8 <memp_free+0x50>)
 8007bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7ff ffbe 	bl	8007b4c <do_memp_free_pool>
 8007bd0:	e000      	b.n	8007bd4 <memp_free+0x3c>
    return;
 8007bd2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	08015a80 	.word	0x08015a80
 8007be0:	08015b50 	.word	0x08015b50
 8007be4:	08015ad4 	.word	0x08015ad4
 8007be8:	080185cc 	.word	0x080185cc

08007bec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007bf0:	bf00      	nop
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
	...

08007bfc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d108      	bne.n	8007c22 <netif_add+0x26>
 8007c10:	4b5b      	ldr	r3, [pc, #364]	; (8007d80 <netif_add+0x184>)
 8007c12:	f240 1227 	movw	r2, #295	; 0x127
 8007c16:	495b      	ldr	r1, [pc, #364]	; (8007d84 <netif_add+0x188>)
 8007c18:	485b      	ldr	r0, [pc, #364]	; (8007d88 <netif_add+0x18c>)
 8007c1a:	f00c f8f5 	bl	8013e08 <iprintf>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e0a9      	b.n	8007d76 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d108      	bne.n	8007c3a <netif_add+0x3e>
 8007c28:	4b55      	ldr	r3, [pc, #340]	; (8007d80 <netif_add+0x184>)
 8007c2a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007c2e:	4957      	ldr	r1, [pc, #348]	; (8007d8c <netif_add+0x190>)
 8007c30:	4855      	ldr	r0, [pc, #340]	; (8007d88 <netif_add+0x18c>)
 8007c32:	f00c f8e9 	bl	8013e08 <iprintf>
 8007c36:	2300      	movs	r3, #0
 8007c38:	e09d      	b.n	8007d76 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007c40:	4b53      	ldr	r3, [pc, #332]	; (8007d90 <netif_add+0x194>)
 8007c42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007c4a:	4b51      	ldr	r3, [pc, #324]	; (8007d90 <netif_add+0x194>)
 8007c4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007c54:	4b4e      	ldr	r3, [pc, #312]	; (8007d90 <netif_add+0x194>)
 8007c56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4a49      	ldr	r2, [pc, #292]	; (8007d94 <netif_add+0x198>)
 8007c6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3324      	adds	r3, #36	; 0x24
 8007c82:	2204      	movs	r2, #4
 8007c84:	2100      	movs	r1, #0
 8007c86:	4618      	mov	r0, r3
 8007c88:	f00c f8b6 	bl	8013df8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a3a      	ldr	r2, [r7, #32]
 8007c96:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007c98:	4b3f      	ldr	r3, [pc, #252]	; (8007d98 <netif_add+0x19c>)
 8007c9a:	781a      	ldrb	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ca6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	68b9      	ldr	r1, [r7, #8]
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 f914 	bl	8007edc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	4798      	blx	r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <netif_add+0xc8>
    return NULL;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	e058      	b.n	8007d76 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cca:	2bff      	cmp	r3, #255	; 0xff
 8007ccc:	d103      	bne.n	8007cd6 <netif_add+0xda>
        netif->num = 0;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007cda:	4b30      	ldr	r3, [pc, #192]	; (8007d9c <netif_add+0x1a0>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	617b      	str	r3, [r7, #20]
 8007ce0:	e02b      	b.n	8007d3a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d106      	bne.n	8007cf8 <netif_add+0xfc>
 8007cea:	4b25      	ldr	r3, [pc, #148]	; (8007d80 <netif_add+0x184>)
 8007cec:	f240 128b 	movw	r2, #395	; 0x18b
 8007cf0:	492b      	ldr	r1, [pc, #172]	; (8007da0 <netif_add+0x1a4>)
 8007cf2:	4825      	ldr	r0, [pc, #148]	; (8007d88 <netif_add+0x18c>)
 8007cf4:	f00c f888 	bl	8013e08 <iprintf>
        num_netifs++;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	2bff      	cmp	r3, #255	; 0xff
 8007d02:	dd06      	ble.n	8007d12 <netif_add+0x116>
 8007d04:	4b1e      	ldr	r3, [pc, #120]	; (8007d80 <netif_add+0x184>)
 8007d06:	f240 128d 	movw	r2, #397	; 0x18d
 8007d0a:	4926      	ldr	r1, [pc, #152]	; (8007da4 <netif_add+0x1a8>)
 8007d0c:	481e      	ldr	r0, [pc, #120]	; (8007d88 <netif_add+0x18c>)
 8007d0e:	f00c f87b 	bl	8013e08 <iprintf>
        if (netif2->num == netif->num) {
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d108      	bne.n	8007d34 <netif_add+0x138>
          netif->num++;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d28:	3301      	adds	r3, #1
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8007d32:	e005      	b.n	8007d40 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1d0      	bne.n	8007ce2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1be      	bne.n	8007cc4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d4c:	2bfe      	cmp	r3, #254	; 0xfe
 8007d4e:	d103      	bne.n	8007d58 <netif_add+0x15c>
    netif_num = 0;
 8007d50:	4b11      	ldr	r3, [pc, #68]	; (8007d98 <netif_add+0x19c>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	e006      	b.n	8007d66 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d5e:	3301      	adds	r3, #1
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	4b0d      	ldr	r3, [pc, #52]	; (8007d98 <netif_add+0x19c>)
 8007d64:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007d66:	4b0d      	ldr	r3, [pc, #52]	; (8007d9c <netif_add+0x1a0>)
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007d6e:	4a0b      	ldr	r2, [pc, #44]	; (8007d9c <netif_add+0x1a0>)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007d74:	68fb      	ldr	r3, [r7, #12]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	08015b6c 	.word	0x08015b6c
 8007d84:	08015c00 	.word	0x08015c00
 8007d88:	08015bbc 	.word	0x08015bbc
 8007d8c:	08015c1c 	.word	0x08015c1c
 8007d90:	08018640 	.word	0x08018640
 8007d94:	080080ef 	.word	0x080080ef
 8007d98:	200000cc 	.word	0x200000cc
 8007d9c:	20006cf8 	.word	0x20006cf8
 8007da0:	08015c40 	.word	0x08015c40
 8007da4:	08015c54 	.word	0x08015c54

08007da8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f002 fdff 	bl	800a9b8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f007 fe73 	bl	800faa8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d106      	bne.n	8007dec <netif_do_set_ipaddr+0x20>
 8007dde:	4b1d      	ldr	r3, [pc, #116]	; (8007e54 <netif_do_set_ipaddr+0x88>)
 8007de0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007de4:	491c      	ldr	r1, [pc, #112]	; (8007e58 <netif_do_set_ipaddr+0x8c>)
 8007de6:	481d      	ldr	r0, [pc, #116]	; (8007e5c <netif_do_set_ipaddr+0x90>)
 8007de8:	f00c f80e 	bl	8013e08 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d106      	bne.n	8007e00 <netif_do_set_ipaddr+0x34>
 8007df2:	4b18      	ldr	r3, [pc, #96]	; (8007e54 <netif_do_set_ipaddr+0x88>)
 8007df4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007df8:	4917      	ldr	r1, [pc, #92]	; (8007e58 <netif_do_set_ipaddr+0x8c>)
 8007dfa:	4818      	ldr	r0, [pc, #96]	; (8007e5c <netif_do_set_ipaddr+0x90>)
 8007dfc:	f00c f804 	bl	8013e08 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3304      	adds	r3, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d01c      	beq.n	8007e48 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3304      	adds	r3, #4
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007e1e:	f107 0314 	add.w	r3, r7, #20
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff ffbf 	bl	8007da8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <netif_do_set_ipaddr+0x6a>
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	e000      	b.n	8007e38 <netif_do_set_ipaddr+0x6c>
 8007e36:	2300      	movs	r3, #0
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 f8d2 	bl	8007fe8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007e44:	2301      	movs	r3, #1
 8007e46:	e000      	b.n	8007e4a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	08015b6c 	.word	0x08015b6c
 8007e58:	08015c84 	.word	0x08015c84
 8007e5c:	08015bbc 	.word	0x08015bbc

08007e60 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3308      	adds	r3, #8
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d00a      	beq.n	8007e90 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <netif_do_set_netmask+0x26>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	e000      	b.n	8007e88 <netif_do_set_netmask+0x28>
 8007e86:	2300      	movs	r3, #0
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	60b9      	str	r1, [r7, #8]
 8007ea8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	330c      	adds	r3, #12
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d00a      	beq.n	8007ece <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <netif_do_set_gw+0x26>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	e000      	b.n	8007ec6 <netif_do_set_gw+0x28>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e000      	b.n	8007ed0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007ef8:	4b1c      	ldr	r3, [pc, #112]	; (8007f6c <netif_set_addr+0x90>)
 8007efa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007f02:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <netif_set_addr+0x90>)
 8007f04:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007f0c:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <netif_set_addr+0x90>)
 8007f0e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <netif_set_addr+0x42>
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <netif_set_addr+0x46>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <netif_set_addr+0x48>
 8007f22:	2300      	movs	r3, #0
 8007f24:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d006      	beq.n	8007f3a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007f2c:	f107 0310 	add.w	r3, r7, #16
 8007f30:	461a      	mov	r2, r3
 8007f32:	68b9      	ldr	r1, [r7, #8]
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f7ff ff49 	bl	8007dcc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007f3a:	69fa      	ldr	r2, [r7, #28]
 8007f3c:	6879      	ldr	r1, [r7, #4]
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7ff ff8e 	bl	8007e60 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff ffa8 	bl	8007e9e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d106      	bne.n	8007f62 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007f54:	f107 0310 	add.w	r3, r7, #16
 8007f58:	461a      	mov	r2, r3
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff ff35 	bl	8007dcc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007f62:	bf00      	nop
 8007f64:	3720      	adds	r7, #32
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	08018640 	.word	0x08018640

08007f70 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007f78:	4a04      	ldr	r2, [pc, #16]	; (8007f8c <netif_set_default+0x1c>)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	20006cfc 	.word	0x20006cfc

08007f90 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d107      	bne.n	8007fae <netif_set_up+0x1e>
 8007f9e:	4b0f      	ldr	r3, [pc, #60]	; (8007fdc <netif_set_up+0x4c>)
 8007fa0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007fa4:	490e      	ldr	r1, [pc, #56]	; (8007fe0 <netif_set_up+0x50>)
 8007fa6:	480f      	ldr	r0, [pc, #60]	; (8007fe4 <netif_set_up+0x54>)
 8007fa8:	f00b ff2e 	bl	8013e08 <iprintf>
 8007fac:	e013      	b.n	8007fd6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10c      	bne.n	8007fd6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007fc2:	f043 0301 	orr.w	r3, r3, #1
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007fce:	2103      	movs	r1, #3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f809 	bl	8007fe8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	08015b6c 	.word	0x08015b6c
 8007fe0:	08015cf4 	.word	0x08015cf4
 8007fe4:	08015bbc 	.word	0x08015bbc

08007fe8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <netif_issue_reports+0x20>
 8007ffa:	4b18      	ldr	r3, [pc, #96]	; (800805c <netif_issue_reports+0x74>)
 8007ffc:	f240 326d 	movw	r2, #877	; 0x36d
 8008000:	4917      	ldr	r1, [pc, #92]	; (8008060 <netif_issue_reports+0x78>)
 8008002:	4818      	ldr	r0, [pc, #96]	; (8008064 <netif_issue_reports+0x7c>)
 8008004:	f00b ff00 	bl	8013e08 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	d01e      	beq.n	8008054 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800801c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008020:	2b00      	cmp	r3, #0
 8008022:	d017      	beq.n	8008054 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d013      	beq.n	8008056 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3304      	adds	r3, #4
 8008032:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00e      	beq.n	8008056 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800803e:	f003 0308 	and.w	r3, r3, #8
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f00a faef 	bl	8012630 <etharp_request>
 8008052:	e000      	b.n	8008056 <netif_issue_reports+0x6e>
    return;
 8008054:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	08015b6c 	.word	0x08015b6c
 8008060:	08015d10 	.word	0x08015d10
 8008064:	08015bbc 	.word	0x08015bbc

08008068 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d107      	bne.n	8008086 <netif_set_down+0x1e>
 8008076:	4b12      	ldr	r3, [pc, #72]	; (80080c0 <netif_set_down+0x58>)
 8008078:	f240 329b 	movw	r2, #923	; 0x39b
 800807c:	4911      	ldr	r1, [pc, #68]	; (80080c4 <netif_set_down+0x5c>)
 800807e:	4812      	ldr	r0, [pc, #72]	; (80080c8 <netif_set_down+0x60>)
 8008080:	f00b fec2 	bl	8013e08 <iprintf>
 8008084:	e019      	b.n	80080ba <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	d012      	beq.n	80080ba <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800809a:	f023 0301 	bic.w	r3, r3, #1
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80080ac:	f003 0308 	and.w	r3, r3, #8
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f009 fe75 	bl	8011da4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	08015b6c 	.word	0x08015b6c
 80080c4:	08015d34 	.word	0x08015d34
 80080c8:	08015bbc 	.word	0x08015bbc

080080cc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	61da      	str	r2, [r3, #28]
  }
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b085      	sub	sp, #20
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80080fa:	f06f 030b 	mvn.w	r3, #11
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d013      	beq.n	8008144 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800811c:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <netif_get_by_index+0x48>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	e00c      	b.n	800813e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800812a:	3301      	adds	r3, #1
 800812c:	b2db      	uxtb	r3, r3
 800812e:	79fa      	ldrb	r2, [r7, #7]
 8008130:	429a      	cmp	r2, r3
 8008132:	d101      	bne.n	8008138 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	e006      	b.n	8008146 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1ef      	bne.n	8008124 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20006cf8 	.word	0x20006cf8

08008158 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800815e:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <pbuf_free_ooseq+0x38>)
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008164:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <pbuf_free_ooseq+0x3c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	607b      	str	r3, [r7, #4]
 800816a:	e00a      	b.n	8008182 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f002 fc5d 	bl	800aa34 <tcp_free_ooseq>
      return;
 800817a:	e005      	b.n	8008188 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	607b      	str	r3, [r7, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1f1      	bne.n	800816c <pbuf_free_ooseq+0x14>
    }
  }
}
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20006d00 	.word	0x20006d00
 8008194:	20006d08 	.word	0x20006d08

08008198 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800819c:	4b03      	ldr	r3, [pc, #12]	; (80081ac <pbuf_pool_is_empty+0x14>)
 800819e:	2201      	movs	r2, #1
 80081a0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80081a2:	bf00      	nop
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	20006d00 	.word	0x20006d00

080081b0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	4611      	mov	r1, r2
 80081bc:	461a      	mov	r2, r3
 80081be:	460b      	mov	r3, r1
 80081c0:	80fb      	strh	r3, [r7, #6]
 80081c2:	4613      	mov	r3, r2
 80081c4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	88fa      	ldrh	r2, [r7, #6]
 80081d6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	88ba      	ldrh	r2, [r7, #4]
 80081dc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80081de:	8b3b      	ldrh	r3, [r7, #24]
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	7f3a      	ldrb	r2, [r7, #28]
 80081ea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2201      	movs	r2, #1
 80081f0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	73da      	strb	r2, [r3, #15]
}
 80081f8:	bf00      	nop
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08c      	sub	sp, #48	; 0x30
 8008208:	af02      	add	r7, sp, #8
 800820a:	4603      	mov	r3, r0
 800820c:	71fb      	strb	r3, [r7, #7]
 800820e:	460b      	mov	r3, r1
 8008210:	80bb      	strh	r3, [r7, #4]
 8008212:	4613      	mov	r3, r2
 8008214:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800821a:	887b      	ldrh	r3, [r7, #2]
 800821c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008220:	d07f      	beq.n	8008322 <pbuf_alloc+0x11e>
 8008222:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008226:	f300 80c8 	bgt.w	80083ba <pbuf_alloc+0x1b6>
 800822a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800822e:	d010      	beq.n	8008252 <pbuf_alloc+0x4e>
 8008230:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008234:	f300 80c1 	bgt.w	80083ba <pbuf_alloc+0x1b6>
 8008238:	2b01      	cmp	r3, #1
 800823a:	d002      	beq.n	8008242 <pbuf_alloc+0x3e>
 800823c:	2b41      	cmp	r3, #65	; 0x41
 800823e:	f040 80bc 	bne.w	80083ba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008242:	887a      	ldrh	r2, [r7, #2]
 8008244:	88bb      	ldrh	r3, [r7, #4]
 8008246:	4619      	mov	r1, r3
 8008248:	2000      	movs	r0, #0
 800824a:	f000 f8d1 	bl	80083f0 <pbuf_alloc_reference>
 800824e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008250:	e0bd      	b.n	80083ce <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008252:	2300      	movs	r3, #0
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800825a:	88bb      	ldrh	r3, [r7, #4]
 800825c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800825e:	2008      	movs	r0, #8
 8008260:	f7ff fc4e 	bl	8007b00 <memp_malloc>
 8008264:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d109      	bne.n	8008280 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800826c:	f7ff ff94 	bl	8008198 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <pbuf_alloc+0x78>
            pbuf_free(p);
 8008276:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008278:	f000 faa8 	bl	80087cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800827c:	2300      	movs	r3, #0
 800827e:	e0a7      	b.n	80083d0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008280:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008282:	3303      	adds	r3, #3
 8008284:	b29b      	uxth	r3, r3
 8008286:	f023 0303 	bic.w	r3, r3, #3
 800828a:	b29b      	uxth	r3, r3
 800828c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008290:	b29b      	uxth	r3, r3
 8008292:	8b7a      	ldrh	r2, [r7, #26]
 8008294:	4293      	cmp	r3, r2
 8008296:	bf28      	it	cs
 8008298:	4613      	movcs	r3, r2
 800829a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800829c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800829e:	3310      	adds	r3, #16
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	4413      	add	r3, r2
 80082a4:	3303      	adds	r3, #3
 80082a6:	f023 0303 	bic.w	r3, r3, #3
 80082aa:	4618      	mov	r0, r3
 80082ac:	89f9      	ldrh	r1, [r7, #14]
 80082ae:	8b7a      	ldrh	r2, [r7, #26]
 80082b0:	2300      	movs	r3, #0
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	887b      	ldrh	r3, [r7, #2]
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	460b      	mov	r3, r1
 80082ba:	4601      	mov	r1, r0
 80082bc:	6938      	ldr	r0, [r7, #16]
 80082be:	f7ff ff77 	bl	80081b0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d006      	beq.n	80082dc <pbuf_alloc+0xd8>
 80082ce:	4b42      	ldr	r3, [pc, #264]	; (80083d8 <pbuf_alloc+0x1d4>)
 80082d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082d4:	4941      	ldr	r1, [pc, #260]	; (80083dc <pbuf_alloc+0x1d8>)
 80082d6:	4842      	ldr	r0, [pc, #264]	; (80083e0 <pbuf_alloc+0x1dc>)
 80082d8:	f00b fd96 	bl	8013e08 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80082dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082de:	3303      	adds	r3, #3
 80082e0:	f023 0303 	bic.w	r3, r3, #3
 80082e4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80082e8:	d106      	bne.n	80082f8 <pbuf_alloc+0xf4>
 80082ea:	4b3b      	ldr	r3, [pc, #236]	; (80083d8 <pbuf_alloc+0x1d4>)
 80082ec:	f44f 7281 	mov.w	r2, #258	; 0x102
 80082f0:	493c      	ldr	r1, [pc, #240]	; (80083e4 <pbuf_alloc+0x1e0>)
 80082f2:	483b      	ldr	r0, [pc, #236]	; (80083e0 <pbuf_alloc+0x1dc>)
 80082f4:	f00b fd88 	bl	8013e08 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d102      	bne.n	8008304 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	627b      	str	r3, [r7, #36]	; 0x24
 8008302:	e002      	b.n	800830a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800830e:	8b7a      	ldrh	r2, [r7, #26]
 8008310:	89fb      	ldrh	r3, [r7, #14]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800831a:	8b7b      	ldrh	r3, [r7, #26]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d19e      	bne.n	800825e <pbuf_alloc+0x5a>
      break;
 8008320:	e055      	b.n	80083ce <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008324:	3303      	adds	r3, #3
 8008326:	b29b      	uxth	r3, r3
 8008328:	f023 0303 	bic.w	r3, r3, #3
 800832c:	b29a      	uxth	r2, r3
 800832e:	88bb      	ldrh	r3, [r7, #4]
 8008330:	3303      	adds	r3, #3
 8008332:	b29b      	uxth	r3, r3
 8008334:	f023 0303 	bic.w	r3, r3, #3
 8008338:	b29b      	uxth	r3, r3
 800833a:	4413      	add	r3, r2
 800833c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800833e:	8b3b      	ldrh	r3, [r7, #24]
 8008340:	3310      	adds	r3, #16
 8008342:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008344:	8b3a      	ldrh	r2, [r7, #24]
 8008346:	88bb      	ldrh	r3, [r7, #4]
 8008348:	3303      	adds	r3, #3
 800834a:	f023 0303 	bic.w	r3, r3, #3
 800834e:	429a      	cmp	r2, r3
 8008350:	d306      	bcc.n	8008360 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008352:	8afa      	ldrh	r2, [r7, #22]
 8008354:	88bb      	ldrh	r3, [r7, #4]
 8008356:	3303      	adds	r3, #3
 8008358:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800835c:	429a      	cmp	r2, r3
 800835e:	d201      	bcs.n	8008364 <pbuf_alloc+0x160>
        return NULL;
 8008360:	2300      	movs	r3, #0
 8008362:	e035      	b.n	80083d0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008364:	8afb      	ldrh	r3, [r7, #22]
 8008366:	4618      	mov	r0, r3
 8008368:	f7ff fa34 	bl	80077d4 <mem_malloc>
 800836c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <pbuf_alloc+0x174>
        return NULL;
 8008374:	2300      	movs	r3, #0
 8008376:	e02b      	b.n	80083d0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008378:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800837a:	3310      	adds	r3, #16
 800837c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837e:	4413      	add	r3, r2
 8008380:	3303      	adds	r3, #3
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	4618      	mov	r0, r3
 8008388:	88b9      	ldrh	r1, [r7, #4]
 800838a:	88ba      	ldrh	r2, [r7, #4]
 800838c:	2300      	movs	r3, #0
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	887b      	ldrh	r3, [r7, #2]
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	460b      	mov	r3, r1
 8008396:	4601      	mov	r1, r0
 8008398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800839a:	f7ff ff09 	bl	80081b0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f003 0303 	and.w	r3, r3, #3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d010      	beq.n	80083cc <pbuf_alloc+0x1c8>
 80083aa:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <pbuf_alloc+0x1d4>)
 80083ac:	f44f 7291 	mov.w	r2, #290	; 0x122
 80083b0:	490d      	ldr	r1, [pc, #52]	; (80083e8 <pbuf_alloc+0x1e4>)
 80083b2:	480b      	ldr	r0, [pc, #44]	; (80083e0 <pbuf_alloc+0x1dc>)
 80083b4:	f00b fd28 	bl	8013e08 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80083b8:	e008      	b.n	80083cc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80083ba:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <pbuf_alloc+0x1d4>)
 80083bc:	f240 1227 	movw	r2, #295	; 0x127
 80083c0:	490a      	ldr	r1, [pc, #40]	; (80083ec <pbuf_alloc+0x1e8>)
 80083c2:	4807      	ldr	r0, [pc, #28]	; (80083e0 <pbuf_alloc+0x1dc>)
 80083c4:	f00b fd20 	bl	8013e08 <iprintf>
      return NULL;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e001      	b.n	80083d0 <pbuf_alloc+0x1cc>
      break;
 80083cc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3728      	adds	r7, #40	; 0x28
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	08015d9c 	.word	0x08015d9c
 80083dc:	08015dcc 	.word	0x08015dcc
 80083e0:	08015dfc 	.word	0x08015dfc
 80083e4:	08015e24 	.word	0x08015e24
 80083e8:	08015e58 	.word	0x08015e58
 80083ec:	08015e84 	.word	0x08015e84

080083f0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af02      	add	r7, sp, #8
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	807b      	strh	r3, [r7, #2]
 80083fc:	4613      	mov	r3, r2
 80083fe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008400:	883b      	ldrh	r3, [r7, #0]
 8008402:	2b41      	cmp	r3, #65	; 0x41
 8008404:	d009      	beq.n	800841a <pbuf_alloc_reference+0x2a>
 8008406:	883b      	ldrh	r3, [r7, #0]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d006      	beq.n	800841a <pbuf_alloc_reference+0x2a>
 800840c:	4b0f      	ldr	r3, [pc, #60]	; (800844c <pbuf_alloc_reference+0x5c>)
 800840e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008412:	490f      	ldr	r1, [pc, #60]	; (8008450 <pbuf_alloc_reference+0x60>)
 8008414:	480f      	ldr	r0, [pc, #60]	; (8008454 <pbuf_alloc_reference+0x64>)
 8008416:	f00b fcf7 	bl	8013e08 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800841a:	2007      	movs	r0, #7
 800841c:	f7ff fb70 	bl	8007b00 <memp_malloc>
 8008420:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008428:	2300      	movs	r3, #0
 800842a:	e00b      	b.n	8008444 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800842c:	8879      	ldrh	r1, [r7, #2]
 800842e:	887a      	ldrh	r2, [r7, #2]
 8008430:	2300      	movs	r3, #0
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	883b      	ldrh	r3, [r7, #0]
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	460b      	mov	r3, r1
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f7ff feb7 	bl	80081b0 <pbuf_init_alloced_pbuf>
  return p;
 8008442:	68fb      	ldr	r3, [r7, #12]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	08015d9c 	.word	0x08015d9c
 8008450:	08015ea0 	.word	0x08015ea0
 8008454:	08015dfc 	.word	0x08015dfc

08008458 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b088      	sub	sp, #32
 800845c:	af02      	add	r7, sp, #8
 800845e:	607b      	str	r3, [r7, #4]
 8008460:	4603      	mov	r3, r0
 8008462:	73fb      	strb	r3, [r7, #15]
 8008464:	460b      	mov	r3, r1
 8008466:	81bb      	strh	r3, [r7, #12]
 8008468:	4613      	mov	r3, r2
 800846a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008470:	8a7b      	ldrh	r3, [r7, #18]
 8008472:	3303      	adds	r3, #3
 8008474:	f023 0203 	bic.w	r2, r3, #3
 8008478:	89bb      	ldrh	r3, [r7, #12]
 800847a:	441a      	add	r2, r3
 800847c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800847e:	429a      	cmp	r2, r3
 8008480:	d901      	bls.n	8008486 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	e018      	b.n	80084b8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d007      	beq.n	800849c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800848c:	8a7b      	ldrh	r3, [r7, #18]
 800848e:	3303      	adds	r3, #3
 8008490:	f023 0303 	bic.w	r3, r3, #3
 8008494:	6a3a      	ldr	r2, [r7, #32]
 8008496:	4413      	add	r3, r2
 8008498:	617b      	str	r3, [r7, #20]
 800849a:	e001      	b.n	80084a0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	89b9      	ldrh	r1, [r7, #12]
 80084a4:	89ba      	ldrh	r2, [r7, #12]
 80084a6:	2302      	movs	r3, #2
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	897b      	ldrh	r3, [r7, #10]
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	460b      	mov	r3, r1
 80084b0:	6979      	ldr	r1, [r7, #20]
 80084b2:	f7ff fe7d 	bl	80081b0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80084b6:	687b      	ldr	r3, [r7, #4]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d106      	bne.n	80084e0 <pbuf_realloc+0x20>
 80084d2:	4b3a      	ldr	r3, [pc, #232]	; (80085bc <pbuf_realloc+0xfc>)
 80084d4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80084d8:	4939      	ldr	r1, [pc, #228]	; (80085c0 <pbuf_realloc+0x100>)
 80084da:	483a      	ldr	r0, [pc, #232]	; (80085c4 <pbuf_realloc+0x104>)
 80084dc:	f00b fc94 	bl	8013e08 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	891b      	ldrh	r3, [r3, #8]
 80084e4:	887a      	ldrh	r2, [r7, #2]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d263      	bcs.n	80085b2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	891a      	ldrh	r2, [r3, #8]
 80084ee:	887b      	ldrh	r3, [r7, #2]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80084f4:	887b      	ldrh	r3, [r7, #2]
 80084f6:	817b      	strh	r3, [r7, #10]
  q = p;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80084fc:	e018      	b.n	8008530 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	895b      	ldrh	r3, [r3, #10]
 8008502:	897a      	ldrh	r2, [r7, #10]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	891a      	ldrh	r2, [r3, #8]
 800850c:	893b      	ldrh	r3, [r7, #8]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d106      	bne.n	8008530 <pbuf_realloc+0x70>
 8008522:	4b26      	ldr	r3, [pc, #152]	; (80085bc <pbuf_realloc+0xfc>)
 8008524:	f240 12af 	movw	r2, #431	; 0x1af
 8008528:	4927      	ldr	r1, [pc, #156]	; (80085c8 <pbuf_realloc+0x108>)
 800852a:	4826      	ldr	r0, [pc, #152]	; (80085c4 <pbuf_realloc+0x104>)
 800852c:	f00b fc6c 	bl	8013e08 <iprintf>
  while (rem_len > q->len) {
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	895b      	ldrh	r3, [r3, #10]
 8008534:	897a      	ldrh	r2, [r7, #10]
 8008536:	429a      	cmp	r2, r3
 8008538:	d8e1      	bhi.n	80084fe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	7b1b      	ldrb	r3, [r3, #12]
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	2b00      	cmp	r3, #0
 8008544:	d121      	bne.n	800858a <pbuf_realloc+0xca>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	895b      	ldrh	r3, [r3, #10]
 800854a:	897a      	ldrh	r2, [r7, #10]
 800854c:	429a      	cmp	r2, r3
 800854e:	d01c      	beq.n	800858a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	7b5b      	ldrb	r3, [r3, #13]
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d116      	bne.n	800858a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	b29a      	uxth	r2, r3
 8008566:	897b      	ldrh	r3, [r7, #10]
 8008568:	4413      	add	r3, r2
 800856a:	b29b      	uxth	r3, r3
 800856c:	4619      	mov	r1, r3
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f7ff f834 	bl	80075dc <mem_trim>
 8008574:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d106      	bne.n	800858a <pbuf_realloc+0xca>
 800857c:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <pbuf_realloc+0xfc>)
 800857e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008582:	4912      	ldr	r1, [pc, #72]	; (80085cc <pbuf_realloc+0x10c>)
 8008584:	480f      	ldr	r0, [pc, #60]	; (80085c4 <pbuf_realloc+0x104>)
 8008586:	f00b fc3f 	bl	8013e08 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	897a      	ldrh	r2, [r7, #10]
 800858e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	895a      	ldrh	r2, [r3, #10]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d004      	beq.n	80085aa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 f911 	bl	80087cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	601a      	str	r2, [r3, #0]
 80085b0:	e000      	b.n	80085b4 <pbuf_realloc+0xf4>
    return;
 80085b2:	bf00      	nop

}
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	08015d9c 	.word	0x08015d9c
 80085c0:	08015eb4 	.word	0x08015eb4
 80085c4:	08015dfc 	.word	0x08015dfc
 80085c8:	08015ecc 	.word	0x08015ecc
 80085cc:	08015ee4 	.word	0x08015ee4

080085d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	4613      	mov	r3, r2
 80085dc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d106      	bne.n	80085f2 <pbuf_add_header_impl+0x22>
 80085e4:	4b2b      	ldr	r3, [pc, #172]	; (8008694 <pbuf_add_header_impl+0xc4>)
 80085e6:	f240 12df 	movw	r2, #479	; 0x1df
 80085ea:	492b      	ldr	r1, [pc, #172]	; (8008698 <pbuf_add_header_impl+0xc8>)
 80085ec:	482b      	ldr	r0, [pc, #172]	; (800869c <pbuf_add_header_impl+0xcc>)
 80085ee:	f00b fc0b 	bl	8013e08 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <pbuf_add_header_impl+0x30>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085fe:	d301      	bcc.n	8008604 <pbuf_add_header_impl+0x34>
    return 1;
 8008600:	2301      	movs	r3, #1
 8008602:	e043      	b.n	800868c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <pbuf_add_header_impl+0x3e>
    return 0;
 800860a:	2300      	movs	r3, #0
 800860c:	e03e      	b.n	800868c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	891a      	ldrh	r2, [r3, #8]
 8008616:	8a7b      	ldrh	r3, [r7, #18]
 8008618:	4413      	add	r3, r2
 800861a:	b29b      	uxth	r3, r3
 800861c:	8a7a      	ldrh	r2, [r7, #18]
 800861e:	429a      	cmp	r2, r3
 8008620:	d901      	bls.n	8008626 <pbuf_add_header_impl+0x56>
    return 1;
 8008622:	2301      	movs	r3, #1
 8008624:	e032      	b.n	800868c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	7b1b      	ldrb	r3, [r3, #12]
 800862a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800862c:	8a3b      	ldrh	r3, [r7, #16]
 800862e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00c      	beq.n	8008650 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	425b      	negs	r3, r3
 800863e:	4413      	add	r3, r2
 8008640:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3310      	adds	r3, #16
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	429a      	cmp	r2, r3
 800864a:	d20d      	bcs.n	8008668 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800864c:	2301      	movs	r3, #1
 800864e:	e01d      	b.n	800868c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d006      	beq.n	8008664 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	425b      	negs	r3, r3
 800865e:	4413      	add	r3, r2
 8008660:	617b      	str	r3, [r7, #20]
 8008662:	e001      	b.n	8008668 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008664:	2301      	movs	r3, #1
 8008666:	e011      	b.n	800868c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	895a      	ldrh	r2, [r3, #10]
 8008672:	8a7b      	ldrh	r3, [r7, #18]
 8008674:	4413      	add	r3, r2
 8008676:	b29a      	uxth	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	891a      	ldrh	r2, [r3, #8]
 8008680:	8a7b      	ldrh	r3, [r7, #18]
 8008682:	4413      	add	r3, r2
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	811a      	strh	r2, [r3, #8]


  return 0;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	08015d9c 	.word	0x08015d9c
 8008698:	08015f00 	.word	0x08015f00
 800869c:	08015dfc 	.word	0x08015dfc

080086a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80086aa:	2200      	movs	r2, #0
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff ff8e 	bl	80085d0 <pbuf_add_header_impl>
 80086b4:	4603      	mov	r3, r0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d106      	bne.n	80086de <pbuf_remove_header+0x1e>
 80086d0:	4b20      	ldr	r3, [pc, #128]	; (8008754 <pbuf_remove_header+0x94>)
 80086d2:	f240 224b 	movw	r2, #587	; 0x24b
 80086d6:	4920      	ldr	r1, [pc, #128]	; (8008758 <pbuf_remove_header+0x98>)
 80086d8:	4820      	ldr	r0, [pc, #128]	; (800875c <pbuf_remove_header+0x9c>)
 80086da:	f00b fb95 	bl	8013e08 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <pbuf_remove_header+0x2c>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ea:	d301      	bcc.n	80086f0 <pbuf_remove_header+0x30>
    return 1;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e02c      	b.n	800874a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <pbuf_remove_header+0x3a>
    return 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	e027      	b.n	800874a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	895b      	ldrh	r3, [r3, #10]
 8008702:	89fa      	ldrh	r2, [r7, #14]
 8008704:	429a      	cmp	r2, r3
 8008706:	d908      	bls.n	800871a <pbuf_remove_header+0x5a>
 8008708:	4b12      	ldr	r3, [pc, #72]	; (8008754 <pbuf_remove_header+0x94>)
 800870a:	f240 2255 	movw	r2, #597	; 0x255
 800870e:	4914      	ldr	r1, [pc, #80]	; (8008760 <pbuf_remove_header+0xa0>)
 8008710:	4812      	ldr	r0, [pc, #72]	; (800875c <pbuf_remove_header+0x9c>)
 8008712:	f00b fb79 	bl	8013e08 <iprintf>
 8008716:	2301      	movs	r3, #1
 8008718:	e017      	b.n	800874a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	441a      	add	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	895a      	ldrh	r2, [r3, #10]
 8008730:	89fb      	ldrh	r3, [r7, #14]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	b29a      	uxth	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	891a      	ldrh	r2, [r3, #8]
 800873e:	89fb      	ldrh	r3, [r7, #14]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	08015d9c 	.word	0x08015d9c
 8008758:	08015f00 	.word	0x08015f00
 800875c:	08015dfc 	.word	0x08015dfc
 8008760:	08015f0c 	.word	0x08015f0c

08008764 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	807b      	strh	r3, [r7, #2]
 8008770:	4613      	mov	r3, r2
 8008772:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008774:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008778:	2b00      	cmp	r3, #0
 800877a:	da08      	bge.n	800878e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800877c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008780:	425b      	negs	r3, r3
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff ff9b 	bl	80086c0 <pbuf_remove_header>
 800878a:	4603      	mov	r3, r0
 800878c:	e007      	b.n	800879e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800878e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008792:	787a      	ldrb	r2, [r7, #1]
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7ff ff1a 	bl	80085d0 <pbuf_add_header_impl>
 800879c:	4603      	mov	r3, r0
  }
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	460b      	mov	r3, r1
 80087b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80087b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80087b6:	2201      	movs	r2, #1
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff ffd2 	bl	8008764 <pbuf_header_impl>
 80087c0:	4603      	mov	r3, r0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10b      	bne.n	80087f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d106      	bne.n	80087ee <pbuf_free+0x22>
 80087e0:	4b38      	ldr	r3, [pc, #224]	; (80088c4 <pbuf_free+0xf8>)
 80087e2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80087e6:	4938      	ldr	r1, [pc, #224]	; (80088c8 <pbuf_free+0xfc>)
 80087e8:	4838      	ldr	r0, [pc, #224]	; (80088cc <pbuf_free+0x100>)
 80087ea:	f00b fb0d 	bl	8013e08 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	e063      	b.n	80088ba <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80087f6:	e05c      	b.n	80088b2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	7b9b      	ldrb	r3, [r3, #14]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d106      	bne.n	800880e <pbuf_free+0x42>
 8008800:	4b30      	ldr	r3, [pc, #192]	; (80088c4 <pbuf_free+0xf8>)
 8008802:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008806:	4932      	ldr	r1, [pc, #200]	; (80088d0 <pbuf_free+0x104>)
 8008808:	4830      	ldr	r0, [pc, #192]	; (80088cc <pbuf_free+0x100>)
 800880a:	f00b fafd 	bl	8013e08 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	7b9b      	ldrb	r3, [r3, #14]
 8008812:	3b01      	subs	r3, #1
 8008814:	b2da      	uxtb	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	739a      	strb	r2, [r3, #14]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	7b9b      	ldrb	r3, [r3, #14]
 800881e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008820:	7dbb      	ldrb	r3, [r7, #22]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d143      	bne.n	80088ae <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	7b1b      	ldrb	r3, [r3, #12]
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	7b5b      	ldrb	r3, [r3, #13]
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d011      	beq.n	8008866 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <pbuf_free+0x90>
 800884e:	4b1d      	ldr	r3, [pc, #116]	; (80088c4 <pbuf_free+0xf8>)
 8008850:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008854:	491f      	ldr	r1, [pc, #124]	; (80088d4 <pbuf_free+0x108>)
 8008856:	481d      	ldr	r0, [pc, #116]	; (80088cc <pbuf_free+0x100>)
 8008858:	f00b fad6 	bl	8013e08 <iprintf>
        pc->custom_free_function(p);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	4798      	blx	r3
 8008864:	e01d      	b.n	80088a2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d104      	bne.n	8008876 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	2008      	movs	r0, #8
 8008870:	f7ff f992 	bl	8007b98 <memp_free>
 8008874:	e015      	b.n	80088a2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d104      	bne.n	8008886 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	2007      	movs	r0, #7
 8008880:	f7ff f98a 	bl	8007b98 <memp_free>
 8008884:	e00d      	b.n	80088a2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d103      	bne.n	8008894 <pbuf_free+0xc8>
          mem_free(p);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7fe fe3b 	bl	8007508 <mem_free>
 8008892:	e006      	b.n	80088a2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008894:	4b0b      	ldr	r3, [pc, #44]	; (80088c4 <pbuf_free+0xf8>)
 8008896:	f240 320f 	movw	r2, #783	; 0x30f
 800889a:	490f      	ldr	r1, [pc, #60]	; (80088d8 <pbuf_free+0x10c>)
 800889c:	480b      	ldr	r0, [pc, #44]	; (80088cc <pbuf_free+0x100>)
 800889e:	f00b fab3 	bl	8013e08 <iprintf>
        }
      }
      count++;
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
 80088a4:	3301      	adds	r3, #1
 80088a6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	607b      	str	r3, [r7, #4]
 80088ac:	e001      	b.n	80088b2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80088ae:	2300      	movs	r3, #0
 80088b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d19f      	bne.n	80087f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	08015d9c 	.word	0x08015d9c
 80088c8:	08015f00 	.word	0x08015f00
 80088cc:	08015dfc 	.word	0x08015dfc
 80088d0:	08015f2c 	.word	0x08015f2c
 80088d4:	08015f44 	.word	0x08015f44
 80088d8:	08015f68 	.word	0x08015f68

080088dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80088e8:	e005      	b.n	80088f6 <pbuf_clen+0x1a>
    ++len;
 80088ea:	89fb      	ldrh	r3, [r7, #14]
 80088ec:	3301      	adds	r3, #1
 80088ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1f6      	bne.n	80088ea <pbuf_clen+0xe>
  }
  return len;
 80088fc:	89fb      	ldrh	r3, [r7, #14]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
	...

0800890c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d010      	beq.n	800893c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	7b9b      	ldrb	r3, [r3, #14]
 800891e:	3301      	adds	r3, #1
 8008920:	b2da      	uxtb	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	7b9b      	ldrb	r3, [r3, #14]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <pbuf_ref+0x30>
 800892e:	4b05      	ldr	r3, [pc, #20]	; (8008944 <pbuf_ref+0x38>)
 8008930:	f240 3242 	movw	r2, #834	; 0x342
 8008934:	4904      	ldr	r1, [pc, #16]	; (8008948 <pbuf_ref+0x3c>)
 8008936:	4805      	ldr	r0, [pc, #20]	; (800894c <pbuf_ref+0x40>)
 8008938:	f00b fa66 	bl	8013e08 <iprintf>
  }
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	08015d9c 	.word	0x08015d9c
 8008948:	08015f7c 	.word	0x08015f7c
 800894c:	08015dfc 	.word	0x08015dfc

08008950 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <pbuf_cat+0x16>
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d107      	bne.n	8008976 <pbuf_cat+0x26>
 8008966:	4b20      	ldr	r3, [pc, #128]	; (80089e8 <pbuf_cat+0x98>)
 8008968:	f240 3259 	movw	r2, #857	; 0x359
 800896c:	491f      	ldr	r1, [pc, #124]	; (80089ec <pbuf_cat+0x9c>)
 800896e:	4820      	ldr	r0, [pc, #128]	; (80089f0 <pbuf_cat+0xa0>)
 8008970:	f00b fa4a 	bl	8013e08 <iprintf>
 8008974:	e034      	b.n	80089e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	e00a      	b.n	8008992 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	891a      	ldrh	r2, [r3, #8]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	891b      	ldrh	r3, [r3, #8]
 8008984:	4413      	add	r3, r2
 8008986:	b29a      	uxth	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1f0      	bne.n	800897c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	891a      	ldrh	r2, [r3, #8]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	895b      	ldrh	r3, [r3, #10]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d006      	beq.n	80089b4 <pbuf_cat+0x64>
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <pbuf_cat+0x98>)
 80089a8:	f240 3262 	movw	r2, #866	; 0x362
 80089ac:	4911      	ldr	r1, [pc, #68]	; (80089f4 <pbuf_cat+0xa4>)
 80089ae:	4810      	ldr	r0, [pc, #64]	; (80089f0 <pbuf_cat+0xa0>)
 80089b0:	f00b fa2a 	bl	8013e08 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d006      	beq.n	80089ca <pbuf_cat+0x7a>
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <pbuf_cat+0x98>)
 80089be:	f240 3263 	movw	r2, #867	; 0x363
 80089c2:	490d      	ldr	r1, [pc, #52]	; (80089f8 <pbuf_cat+0xa8>)
 80089c4:	480a      	ldr	r0, [pc, #40]	; (80089f0 <pbuf_cat+0xa0>)
 80089c6:	f00b fa1f 	bl	8013e08 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	891a      	ldrh	r2, [r3, #8]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	891b      	ldrh	r3, [r3, #8]
 80089d2:	4413      	add	r3, r2
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	08015d9c 	.word	0x08015d9c
 80089ec:	08015f90 	.word	0x08015f90
 80089f0:	08015dfc 	.word	0x08015dfc
 80089f4:	08015fc8 	.word	0x08015fc8
 80089f8:	08015ff8 	.word	0x08015ff8

080089fc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff ffa1 	bl	8008950 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008a0e:	6838      	ldr	r0, [r7, #0]
 8008a10:	f7ff ff7c 	bl	800890c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008a14:	bf00      	nop
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008a26:	2300      	movs	r3, #0
 8008a28:	617b      	str	r3, [r7, #20]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d008      	beq.n	8008a46 <pbuf_copy+0x2a>
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <pbuf_copy+0x2a>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	891a      	ldrh	r2, [r3, #8]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	891b      	ldrh	r3, [r3, #8]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d209      	bcs.n	8008a5a <pbuf_copy+0x3e>
 8008a46:	4b57      	ldr	r3, [pc, #348]	; (8008ba4 <pbuf_copy+0x188>)
 8008a48:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008a4c:	4956      	ldr	r1, [pc, #344]	; (8008ba8 <pbuf_copy+0x18c>)
 8008a4e:	4857      	ldr	r0, [pc, #348]	; (8008bac <pbuf_copy+0x190>)
 8008a50:	f00b f9da 	bl	8013e08 <iprintf>
 8008a54:	f06f 030f 	mvn.w	r3, #15
 8008a58:	e09f      	b.n	8008b9a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	895b      	ldrh	r3, [r3, #10]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	1ad2      	subs	r2, r2, r3
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	895b      	ldrh	r3, [r3, #10]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	1acb      	subs	r3, r1, r3
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d306      	bcc.n	8008a80 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	895b      	ldrh	r3, [r3, #10]
 8008a76:	461a      	mov	r2, r3
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	60fb      	str	r3, [r7, #12]
 8008a7e:	e005      	b.n	8008a8c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	895b      	ldrh	r3, [r3, #10]
 8008a84:	461a      	mov	r2, r3
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685a      	ldr	r2, [r3, #4]
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	18d0      	adds	r0, r2, r3
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	f00b f99c 	bl	8013ddc <memcpy>
    offset_to += len;
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	895b      	ldrh	r3, [r3, #10]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d906      	bls.n	8008ace <pbuf_copy+0xb2>
 8008ac0:	4b38      	ldr	r3, [pc, #224]	; (8008ba4 <pbuf_copy+0x188>)
 8008ac2:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008ac6:	493a      	ldr	r1, [pc, #232]	; (8008bb0 <pbuf_copy+0x194>)
 8008ac8:	4838      	ldr	r0, [pc, #224]	; (8008bac <pbuf_copy+0x190>)
 8008aca:	f00b f99d 	bl	8013e08 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	895b      	ldrh	r3, [r3, #10]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d906      	bls.n	8008ae8 <pbuf_copy+0xcc>
 8008ada:	4b32      	ldr	r3, [pc, #200]	; (8008ba4 <pbuf_copy+0x188>)
 8008adc:	f240 32da 	movw	r2, #986	; 0x3da
 8008ae0:	4934      	ldr	r1, [pc, #208]	; (8008bb4 <pbuf_copy+0x198>)
 8008ae2:	4832      	ldr	r0, [pc, #200]	; (8008bac <pbuf_copy+0x190>)
 8008ae4:	f00b f990 	bl	8013e08 <iprintf>
    if (offset_from >= p_from->len) {
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	895b      	ldrh	r3, [r3, #10]
 8008aec:	461a      	mov	r2, r3
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d304      	bcc.n	8008afe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008af4:	2300      	movs	r3, #0
 8008af6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	895b      	ldrh	r3, [r3, #10]
 8008b02:	461a      	mov	r2, r3
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d114      	bne.n	8008b34 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10c      	bne.n	8008b34 <pbuf_copy+0x118>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d009      	beq.n	8008b34 <pbuf_copy+0x118>
 8008b20:	4b20      	ldr	r3, [pc, #128]	; (8008ba4 <pbuf_copy+0x188>)
 8008b22:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008b26:	4924      	ldr	r1, [pc, #144]	; (8008bb8 <pbuf_copy+0x19c>)
 8008b28:	4820      	ldr	r0, [pc, #128]	; (8008bac <pbuf_copy+0x190>)
 8008b2a:	f00b f96d 	bl	8013e08 <iprintf>
 8008b2e:	f06f 030f 	mvn.w	r3, #15
 8008b32:	e032      	b.n	8008b9a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d013      	beq.n	8008b62 <pbuf_copy+0x146>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	895a      	ldrh	r2, [r3, #10]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	891b      	ldrh	r3, [r3, #8]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d10d      	bne.n	8008b62 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d009      	beq.n	8008b62 <pbuf_copy+0x146>
 8008b4e:	4b15      	ldr	r3, [pc, #84]	; (8008ba4 <pbuf_copy+0x188>)
 8008b50:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008b54:	4919      	ldr	r1, [pc, #100]	; (8008bbc <pbuf_copy+0x1a0>)
 8008b56:	4815      	ldr	r0, [pc, #84]	; (8008bac <pbuf_copy+0x190>)
 8008b58:	f00b f956 	bl	8013e08 <iprintf>
 8008b5c:	f06f 0305 	mvn.w	r3, #5
 8008b60:	e01b      	b.n	8008b9a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d013      	beq.n	8008b90 <pbuf_copy+0x174>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	895a      	ldrh	r2, [r3, #10]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	891b      	ldrh	r3, [r3, #8]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d10d      	bne.n	8008b90 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d009      	beq.n	8008b90 <pbuf_copy+0x174>
 8008b7c:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <pbuf_copy+0x188>)
 8008b7e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008b82:	490e      	ldr	r1, [pc, #56]	; (8008bbc <pbuf_copy+0x1a0>)
 8008b84:	4809      	ldr	r0, [pc, #36]	; (8008bac <pbuf_copy+0x190>)
 8008b86:	f00b f93f 	bl	8013e08 <iprintf>
 8008b8a:	f06f 0305 	mvn.w	r3, #5
 8008b8e:	e004      	b.n	8008b9a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f47f af61 	bne.w	8008a5a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	08015d9c 	.word	0x08015d9c
 8008ba8:	08016044 	.word	0x08016044
 8008bac:	08015dfc 	.word	0x08015dfc
 8008bb0:	08016074 	.word	0x08016074
 8008bb4:	0801608c 	.word	0x0801608c
 8008bb8:	080160a8 	.word	0x080160a8
 8008bbc:	080160b8 	.word	0x080160b8

08008bc0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	4611      	mov	r1, r2
 8008bcc:	461a      	mov	r2, r3
 8008bce:	460b      	mov	r3, r1
 8008bd0:	80fb      	strh	r3, [r7, #6]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d108      	bne.n	8008bf6 <pbuf_copy_partial+0x36>
 8008be4:	4b2b      	ldr	r3, [pc, #172]	; (8008c94 <pbuf_copy_partial+0xd4>)
 8008be6:	f240 420a 	movw	r2, #1034	; 0x40a
 8008bea:	492b      	ldr	r1, [pc, #172]	; (8008c98 <pbuf_copy_partial+0xd8>)
 8008bec:	482b      	ldr	r0, [pc, #172]	; (8008c9c <pbuf_copy_partial+0xdc>)
 8008bee:	f00b f90b 	bl	8013e08 <iprintf>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e04a      	b.n	8008c8c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d108      	bne.n	8008c0e <pbuf_copy_partial+0x4e>
 8008bfc:	4b25      	ldr	r3, [pc, #148]	; (8008c94 <pbuf_copy_partial+0xd4>)
 8008bfe:	f240 420b 	movw	r2, #1035	; 0x40b
 8008c02:	4927      	ldr	r1, [pc, #156]	; (8008ca0 <pbuf_copy_partial+0xe0>)
 8008c04:	4825      	ldr	r0, [pc, #148]	; (8008c9c <pbuf_copy_partial+0xdc>)
 8008c06:	f00b f8ff 	bl	8013e08 <iprintf>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	e03e      	b.n	8008c8c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	61fb      	str	r3, [r7, #28]
 8008c12:	e034      	b.n	8008c7e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008c14:	88bb      	ldrh	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <pbuf_copy_partial+0x70>
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	895b      	ldrh	r3, [r3, #10]
 8008c1e:	88ba      	ldrh	r2, [r7, #4]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d305      	bcc.n	8008c30 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	895b      	ldrh	r3, [r3, #10]
 8008c28:	88ba      	ldrh	r2, [r7, #4]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	80bb      	strh	r3, [r7, #4]
 8008c2e:	e023      	b.n	8008c78 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	895a      	ldrh	r2, [r3, #10]
 8008c34:	88bb      	ldrh	r3, [r7, #4]
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008c3a:	8b3a      	ldrh	r2, [r7, #24]
 8008c3c:	88fb      	ldrh	r3, [r7, #6]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d901      	bls.n	8008c46 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008c42:	88fb      	ldrh	r3, [r7, #6]
 8008c44:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008c46:	8b7b      	ldrh	r3, [r7, #26]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	18d0      	adds	r0, r2, r3
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	88bb      	ldrh	r3, [r7, #4]
 8008c52:	4413      	add	r3, r2
 8008c54:	8b3a      	ldrh	r2, [r7, #24]
 8008c56:	4619      	mov	r1, r3
 8008c58:	f00b f8c0 	bl	8013ddc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008c5c:	8afa      	ldrh	r2, [r7, #22]
 8008c5e:	8b3b      	ldrh	r3, [r7, #24]
 8008c60:	4413      	add	r3, r2
 8008c62:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008c64:	8b7a      	ldrh	r2, [r7, #26]
 8008c66:	8b3b      	ldrh	r3, [r7, #24]
 8008c68:	4413      	add	r3, r2
 8008c6a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008c6c:	88fa      	ldrh	r2, [r7, #6]
 8008c6e:	8b3b      	ldrh	r3, [r7, #24]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	61fb      	str	r3, [r7, #28]
 8008c7e:	88fb      	ldrh	r3, [r7, #6]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <pbuf_copy_partial+0xca>
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1c4      	bne.n	8008c14 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008c8a:	8afb      	ldrh	r3, [r7, #22]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3720      	adds	r7, #32
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	08015d9c 	.word	0x08015d9c
 8008c98:	080160e4 	.word	0x080160e4
 8008c9c:	08015dfc 	.word	0x08015dfc
 8008ca0:	08016104 	.word	0x08016104

08008ca4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	460b      	mov	r3, r1
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8008cb2:	897b      	ldrh	r3, [r7, #10]
 8008cb4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8008cba:	e007      	b.n	8008ccc <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	895b      	ldrh	r3, [r3, #10]
 8008cc0:	8afa      	ldrh	r2, [r7, #22]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d004      	beq.n	8008cdc <pbuf_skip_const+0x38>
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	895b      	ldrh	r3, [r3, #10]
 8008cd6:	8afa      	ldrh	r2, [r7, #22]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d2ef      	bcs.n	8008cbc <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	8afa      	ldrh	r2, [r7, #22]
 8008ce6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8008ce8:	693b      	ldr	r3, [r7, #16]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
	...

08008cf8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	603a      	str	r2, [r7, #0]
 8008d02:	71fb      	strb	r3, [r7, #7]
 8008d04:	460b      	mov	r3, r1
 8008d06:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	8919      	ldrh	r1, [r3, #8]
 8008d0c:	88ba      	ldrh	r2, [r7, #4]
 8008d0e:	79fb      	ldrb	r3, [r7, #7]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7ff fa77 	bl	8008204 <pbuf_alloc>
 8008d16:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <pbuf_clone+0x2a>
    return NULL;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e011      	b.n	8008d46 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f7ff fe79 	bl	8008a1c <pbuf_copy>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008d2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d006      	beq.n	8008d44 <pbuf_clone+0x4c>
 8008d36:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <pbuf_clone+0x58>)
 8008d38:	f240 5224 	movw	r2, #1316	; 0x524
 8008d3c:	4905      	ldr	r1, [pc, #20]	; (8008d54 <pbuf_clone+0x5c>)
 8008d3e:	4806      	ldr	r0, [pc, #24]	; (8008d58 <pbuf_clone+0x60>)
 8008d40:	f00b f862 	bl	8013e08 <iprintf>
  return q;
 8008d44:	68fb      	ldr	r3, [r7, #12]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	08015d9c 	.word	0x08015d9c
 8008d54:	08016210 	.word	0x08016210
 8008d58:	08015dfc 	.word	0x08015dfc

08008d5c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	460b      	mov	r3, r1
 8008d66:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8008d68:	887b      	ldrh	r3, [r7, #2]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f80c 	bl	8008d8a <pbuf_try_get_at>
 8008d72:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	db02      	blt.n	8008d80 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	e000      	b.n	8008d82 <pbuf_get_at+0x26>
  }
  return 0;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	460b      	mov	r3, r1
 8008d94:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8008d96:	f107 020a 	add.w	r2, r7, #10
 8008d9a:	887b      	ldrh	r3, [r7, #2]
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff ff80 	bl	8008ca4 <pbuf_skip_const>
 8008da4:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00a      	beq.n	8008dc2 <pbuf_try_get_at+0x38>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	895a      	ldrh	r2, [r3, #10]
 8008db0:	897b      	ldrh	r3, [r7, #10]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d905      	bls.n	8008dc2 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	897a      	ldrh	r2, [r7, #10]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	e001      	b.n	8008dc6 <pbuf_try_get_at+0x3c>
  }
  return -1;
 8008dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008dd4:	f00b f8a6 	bl	8013f24 <rand>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	4b01      	ldr	r3, [pc, #4]	; (8008df0 <tcp_init+0x20>)
 8008dea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008dec:	bf00      	nop
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	2000000a 	.word	0x2000000a

08008df4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	7d1b      	ldrb	r3, [r3, #20]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d105      	bne.n	8008e10 <tcp_free+0x1c>
 8008e04:	4b06      	ldr	r3, [pc, #24]	; (8008e20 <tcp_free+0x2c>)
 8008e06:	22d4      	movs	r2, #212	; 0xd4
 8008e08:	4906      	ldr	r1, [pc, #24]	; (8008e24 <tcp_free+0x30>)
 8008e0a:	4807      	ldr	r0, [pc, #28]	; (8008e28 <tcp_free+0x34>)
 8008e0c:	f00a fffc 	bl	8013e08 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	2001      	movs	r0, #1
 8008e14:	f7fe fec0 	bl	8007b98 <memp_free>
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	0801629c 	.word	0x0801629c
 8008e24:	080162cc 	.word	0x080162cc
 8008e28:	080162e0 	.word	0x080162e0

08008e2c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	7d1b      	ldrb	r3, [r3, #20]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d105      	bne.n	8008e48 <tcp_free_listen+0x1c>
 8008e3c:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <tcp_free_listen+0x2c>)
 8008e3e:	22df      	movs	r2, #223	; 0xdf
 8008e40:	4906      	ldr	r1, [pc, #24]	; (8008e5c <tcp_free_listen+0x30>)
 8008e42:	4807      	ldr	r0, [pc, #28]	; (8008e60 <tcp_free_listen+0x34>)
 8008e44:	f00a ffe0 	bl	8013e08 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	2002      	movs	r0, #2
 8008e4c:	f7fe fea4 	bl	8007b98 <memp_free>
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	0801629c 	.word	0x0801629c
 8008e5c:	08016308 	.word	0x08016308
 8008e60:	080162e0 	.word	0x080162e0

08008e64 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008e68:	f001 f898 	bl	8009f9c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008e6c:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <tcp_tmr+0x28>)
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	3301      	adds	r3, #1
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <tcp_tmr+0x28>)
 8008e76:	701a      	strb	r2, [r3, #0]
 8008e78:	4b04      	ldr	r3, [pc, #16]	; (8008e8c <tcp_tmr+0x28>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	f003 0301 	and.w	r3, r3, #1
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008e84:	f000 fd4a 	bl	800991c <tcp_slowtmr>
  }
}
 8008e88:	bf00      	nop
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	200000cd 	.word	0x200000cd

08008e90 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d105      	bne.n	8008eac <tcp_remove_listener+0x1c>
 8008ea0:	4b0d      	ldr	r3, [pc, #52]	; (8008ed8 <tcp_remove_listener+0x48>)
 8008ea2:	22ff      	movs	r2, #255	; 0xff
 8008ea4:	490d      	ldr	r1, [pc, #52]	; (8008edc <tcp_remove_listener+0x4c>)
 8008ea6:	480e      	ldr	r0, [pc, #56]	; (8008ee0 <tcp_remove_listener+0x50>)
 8008ea8:	f00a ffae 	bl	8013e08 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	e00a      	b.n	8008ec8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d102      	bne.n	8008ec2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1f1      	bne.n	8008eb2 <tcp_remove_listener+0x22>
    }
  }
}
 8008ece:	bf00      	nop
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	0801629c 	.word	0x0801629c
 8008edc:	08016324 	.word	0x08016324
 8008ee0:	080162e0 	.word	0x080162e0

08008ee4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d106      	bne.n	8008f00 <tcp_listen_closed+0x1c>
 8008ef2:	4b14      	ldr	r3, [pc, #80]	; (8008f44 <tcp_listen_closed+0x60>)
 8008ef4:	f240 1211 	movw	r2, #273	; 0x111
 8008ef8:	4913      	ldr	r1, [pc, #76]	; (8008f48 <tcp_listen_closed+0x64>)
 8008efa:	4814      	ldr	r0, [pc, #80]	; (8008f4c <tcp_listen_closed+0x68>)
 8008efc:	f00a ff84 	bl	8013e08 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	7d1b      	ldrb	r3, [r3, #20]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d006      	beq.n	8008f16 <tcp_listen_closed+0x32>
 8008f08:	4b0e      	ldr	r3, [pc, #56]	; (8008f44 <tcp_listen_closed+0x60>)
 8008f0a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008f0e:	4910      	ldr	r1, [pc, #64]	; (8008f50 <tcp_listen_closed+0x6c>)
 8008f10:	480e      	ldr	r0, [pc, #56]	; (8008f4c <tcp_listen_closed+0x68>)
 8008f12:	f00a ff79 	bl	8013e08 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008f16:	2301      	movs	r3, #1
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	e00b      	b.n	8008f34 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008f1c:	4a0d      	ldr	r2, [pc, #52]	; (8008f54 <tcp_listen_closed+0x70>)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7ff ffb1 	bl	8008e90 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3301      	adds	r3, #1
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d9f0      	bls.n	8008f1c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008f3a:	bf00      	nop
 8008f3c:	bf00      	nop
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	0801629c 	.word	0x0801629c
 8008f48:	0801634c 	.word	0x0801634c
 8008f4c:	080162e0 	.word	0x080162e0
 8008f50:	08016358 	.word	0x08016358
 8008f54:	08018608 	.word	0x08018608

08008f58 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008f58:	b5b0      	push	{r4, r5, r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af04      	add	r7, sp, #16
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d106      	bne.n	8008f78 <tcp_close_shutdown+0x20>
 8008f6a:	4b63      	ldr	r3, [pc, #396]	; (80090f8 <tcp_close_shutdown+0x1a0>)
 8008f6c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008f70:	4962      	ldr	r1, [pc, #392]	; (80090fc <tcp_close_shutdown+0x1a4>)
 8008f72:	4863      	ldr	r0, [pc, #396]	; (8009100 <tcp_close_shutdown+0x1a8>)
 8008f74:	f00a ff48 	bl	8013e08 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d066      	beq.n	800904c <tcp_close_shutdown+0xf4>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	7d1b      	ldrb	r3, [r3, #20]
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d003      	beq.n	8008f8e <tcp_close_shutdown+0x36>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7d1b      	ldrb	r3, [r3, #20]
 8008f8a:	2b07      	cmp	r3, #7
 8008f8c:	d15e      	bne.n	800904c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d104      	bne.n	8008fa0 <tcp_close_shutdown+0x48>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f9a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008f9e:	d055      	beq.n	800904c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	8b5b      	ldrh	r3, [r3, #26]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d106      	bne.n	8008fba <tcp_close_shutdown+0x62>
 8008fac:	4b52      	ldr	r3, [pc, #328]	; (80090f8 <tcp_close_shutdown+0x1a0>)
 8008fae:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008fb2:	4954      	ldr	r1, [pc, #336]	; (8009104 <tcp_close_shutdown+0x1ac>)
 8008fb4:	4852      	ldr	r0, [pc, #328]	; (8009100 <tcp_close_shutdown+0x1a8>)
 8008fb6:	f00a ff27 	bl	8013e08 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008fc2:	687d      	ldr	r5, [r7, #4]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	8ad2      	ldrh	r2, [r2, #22]
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	8b09      	ldrh	r1, [r1, #24]
 8008fd0:	9102      	str	r1, [sp, #8]
 8008fd2:	9201      	str	r2, [sp, #4]
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	462b      	mov	r3, r5
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4601      	mov	r1, r0
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f005 fd91 	bl	800eb04 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f001 fb72 	bl	800a6cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008fe8:	4b47      	ldr	r3, [pc, #284]	; (8009108 <tcp_close_shutdown+0x1b0>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d105      	bne.n	8008ffe <tcp_close_shutdown+0xa6>
 8008ff2:	4b45      	ldr	r3, [pc, #276]	; (8009108 <tcp_close_shutdown+0x1b0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	4a43      	ldr	r2, [pc, #268]	; (8009108 <tcp_close_shutdown+0x1b0>)
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	e013      	b.n	8009026 <tcp_close_shutdown+0xce>
 8008ffe:	4b42      	ldr	r3, [pc, #264]	; (8009108 <tcp_close_shutdown+0x1b0>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	e00c      	b.n	8009020 <tcp_close_shutdown+0xc8>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	429a      	cmp	r2, r3
 800900e:	d104      	bne.n	800901a <tcp_close_shutdown+0xc2>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68da      	ldr	r2, [r3, #12]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	60da      	str	r2, [r3, #12]
 8009018:	e005      	b.n	8009026 <tcp_close_shutdown+0xce>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1ef      	bne.n	8009006 <tcp_close_shutdown+0xae>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	60da      	str	r2, [r3, #12]
 800902c:	4b37      	ldr	r3, [pc, #220]	; (800910c <tcp_close_shutdown+0x1b4>)
 800902e:	2201      	movs	r2, #1
 8009030:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009032:	4b37      	ldr	r3, [pc, #220]	; (8009110 <tcp_close_shutdown+0x1b8>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	429a      	cmp	r2, r3
 800903a:	d102      	bne.n	8009042 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800903c:	f004 f806 	bl	800d04c <tcp_trigger_input_pcb_close>
 8009040:	e002      	b.n	8009048 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7ff fed6 	bl	8008df4 <tcp_free>
      }
      return ERR_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	e050      	b.n	80090ee <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	7d1b      	ldrb	r3, [r3, #20]
 8009050:	2b02      	cmp	r3, #2
 8009052:	d03b      	beq.n	80090cc <tcp_close_shutdown+0x174>
 8009054:	2b02      	cmp	r3, #2
 8009056:	dc44      	bgt.n	80090e2 <tcp_close_shutdown+0x18a>
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <tcp_close_shutdown+0x10a>
 800905c:	2b01      	cmp	r3, #1
 800905e:	d02a      	beq.n	80090b6 <tcp_close_shutdown+0x15e>
 8009060:	e03f      	b.n	80090e2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	8adb      	ldrh	r3, [r3, #22]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d021      	beq.n	80090ae <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800906a:	4b2a      	ldr	r3, [pc, #168]	; (8009114 <tcp_close_shutdown+0x1bc>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	429a      	cmp	r2, r3
 8009072:	d105      	bne.n	8009080 <tcp_close_shutdown+0x128>
 8009074:	4b27      	ldr	r3, [pc, #156]	; (8009114 <tcp_close_shutdown+0x1bc>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	4a26      	ldr	r2, [pc, #152]	; (8009114 <tcp_close_shutdown+0x1bc>)
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	e013      	b.n	80090a8 <tcp_close_shutdown+0x150>
 8009080:	4b24      	ldr	r3, [pc, #144]	; (8009114 <tcp_close_shutdown+0x1bc>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	60bb      	str	r3, [r7, #8]
 8009086:	e00c      	b.n	80090a2 <tcp_close_shutdown+0x14a>
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	429a      	cmp	r2, r3
 8009090:	d104      	bne.n	800909c <tcp_close_shutdown+0x144>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68da      	ldr	r2, [r3, #12]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	60da      	str	r2, [r3, #12]
 800909a:	e005      	b.n	80090a8 <tcp_close_shutdown+0x150>
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	60bb      	str	r3, [r7, #8]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1ef      	bne.n	8009088 <tcp_close_shutdown+0x130>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7ff fea0 	bl	8008df4 <tcp_free>
      break;
 80090b4:	e01a      	b.n	80090ec <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff ff14 	bl	8008ee4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	4816      	ldr	r0, [pc, #88]	; (8009118 <tcp_close_shutdown+0x1c0>)
 80090c0:	f001 fb54 	bl	800a76c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff feb1 	bl	8008e2c <tcp_free_listen>
      break;
 80090ca:	e00f      	b.n	80090ec <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80090cc:	6879      	ldr	r1, [r7, #4]
 80090ce:	480e      	ldr	r0, [pc, #56]	; (8009108 <tcp_close_shutdown+0x1b0>)
 80090d0:	f001 fb4c 	bl	800a76c <tcp_pcb_remove>
 80090d4:	4b0d      	ldr	r3, [pc, #52]	; (800910c <tcp_close_shutdown+0x1b4>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7ff fe8a 	bl	8008df4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80090e0:	e004      	b.n	80090ec <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f81a 	bl	800911c <tcp_close_shutdown_fin>
 80090e8:	4603      	mov	r3, r0
 80090ea:	e000      	b.n	80090ee <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bdb0      	pop	{r4, r5, r7, pc}
 80090f6:	bf00      	nop
 80090f8:	0801629c 	.word	0x0801629c
 80090fc:	08016370 	.word	0x08016370
 8009100:	080162e0 	.word	0x080162e0
 8009104:	08016390 	.word	0x08016390
 8009108:	20006d08 	.word	0x20006d08
 800910c:	20006d04 	.word	0x20006d04
 8009110:	20006d1c 	.word	0x20006d1c
 8009114:	20006d14 	.word	0x20006d14
 8009118:	20006d10 	.word	0x20006d10

0800911c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <tcp_close_shutdown_fin+0x1c>
 800912a:	4b2e      	ldr	r3, [pc, #184]	; (80091e4 <tcp_close_shutdown_fin+0xc8>)
 800912c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009130:	492d      	ldr	r1, [pc, #180]	; (80091e8 <tcp_close_shutdown_fin+0xcc>)
 8009132:	482e      	ldr	r0, [pc, #184]	; (80091ec <tcp_close_shutdown_fin+0xd0>)
 8009134:	f00a fe68 	bl	8013e08 <iprintf>

  switch (pcb->state) {
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	7d1b      	ldrb	r3, [r3, #20]
 800913c:	2b07      	cmp	r3, #7
 800913e:	d020      	beq.n	8009182 <tcp_close_shutdown_fin+0x66>
 8009140:	2b07      	cmp	r3, #7
 8009142:	dc2b      	bgt.n	800919c <tcp_close_shutdown_fin+0x80>
 8009144:	2b03      	cmp	r3, #3
 8009146:	d002      	beq.n	800914e <tcp_close_shutdown_fin+0x32>
 8009148:	2b04      	cmp	r3, #4
 800914a:	d00d      	beq.n	8009168 <tcp_close_shutdown_fin+0x4c>
 800914c:	e026      	b.n	800919c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f004 fde6 	bl	800dd20 <tcp_send_fin>
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d11f      	bne.n	80091a0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2205      	movs	r2, #5
 8009164:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009166:	e01b      	b.n	80091a0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f004 fdd9 	bl	800dd20 <tcp_send_fin>
 800916e:	4603      	mov	r3, r0
 8009170:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d114      	bne.n	80091a4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2205      	movs	r2, #5
 800917e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009180:	e010      	b.n	80091a4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f004 fdcc 	bl	800dd20 <tcp_send_fin>
 8009188:	4603      	mov	r3, r0
 800918a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800918c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d109      	bne.n	80091a8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2209      	movs	r2, #9
 8009198:	751a      	strb	r2, [r3, #20]
      }
      break;
 800919a:	e005      	b.n	80091a8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	e01c      	b.n	80091da <tcp_close_shutdown_fin+0xbe>
      break;
 80091a0:	bf00      	nop
 80091a2:	e002      	b.n	80091aa <tcp_close_shutdown_fin+0x8e>
      break;
 80091a4:	bf00      	nop
 80091a6:	e000      	b.n	80091aa <tcp_close_shutdown_fin+0x8e>
      break;
 80091a8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80091aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d103      	bne.n	80091ba <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f004 fef2 	bl	800df9c <tcp_output>
 80091b8:	e00d      	b.n	80091d6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80091ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c2:	d108      	bne.n	80091d6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	8b5b      	ldrh	r3, [r3, #26]
 80091c8:	f043 0308 	orr.w	r3, r3, #8
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	e001      	b.n	80091da <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80091d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	0801629c 	.word	0x0801629c
 80091e8:	0801634c 	.word	0x0801634c
 80091ec:	080162e0 	.word	0x080162e0

080091f0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <tcp_close+0x22>
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <tcp_close+0x4c>)
 8009200:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009204:	490e      	ldr	r1, [pc, #56]	; (8009240 <tcp_close+0x50>)
 8009206:	480f      	ldr	r0, [pc, #60]	; (8009244 <tcp_close+0x54>)
 8009208:	f00a fdfe 	bl	8013e08 <iprintf>
 800920c:	f06f 030f 	mvn.w	r3, #15
 8009210:	e00f      	b.n	8009232 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	7d1b      	ldrb	r3, [r3, #20]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d006      	beq.n	8009228 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	8b5b      	ldrh	r3, [r3, #26]
 800921e:	f043 0310 	orr.w	r3, r3, #16
 8009222:	b29a      	uxth	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009228:	2101      	movs	r1, #1
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff fe94 	bl	8008f58 <tcp_close_shutdown>
 8009230:	4603      	mov	r3, r0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	0801629c 	.word	0x0801629c
 8009240:	080163ac 	.word	0x080163ac
 8009244:	080162e0 	.word	0x080162e0

08009248 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08e      	sub	sp, #56	; 0x38
 800924c:	af04      	add	r7, sp, #16
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d107      	bne.n	8009268 <tcp_abandon+0x20>
 8009258:	4b52      	ldr	r3, [pc, #328]	; (80093a4 <tcp_abandon+0x15c>)
 800925a:	f240 223d 	movw	r2, #573	; 0x23d
 800925e:	4952      	ldr	r1, [pc, #328]	; (80093a8 <tcp_abandon+0x160>)
 8009260:	4852      	ldr	r0, [pc, #328]	; (80093ac <tcp_abandon+0x164>)
 8009262:	f00a fdd1 	bl	8013e08 <iprintf>
 8009266:	e099      	b.n	800939c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	7d1b      	ldrb	r3, [r3, #20]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d106      	bne.n	800927e <tcp_abandon+0x36>
 8009270:	4b4c      	ldr	r3, [pc, #304]	; (80093a4 <tcp_abandon+0x15c>)
 8009272:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009276:	494e      	ldr	r1, [pc, #312]	; (80093b0 <tcp_abandon+0x168>)
 8009278:	484c      	ldr	r0, [pc, #304]	; (80093ac <tcp_abandon+0x164>)
 800927a:	f00a fdc5 	bl	8013e08 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7d1b      	ldrb	r3, [r3, #20]
 8009282:	2b0a      	cmp	r3, #10
 8009284:	d107      	bne.n	8009296 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009286:	6879      	ldr	r1, [r7, #4]
 8009288:	484a      	ldr	r0, [pc, #296]	; (80093b4 <tcp_abandon+0x16c>)
 800928a:	f001 fa6f 	bl	800a76c <tcp_pcb_remove>
    tcp_free(pcb);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7ff fdb0 	bl	8008df4 <tcp_free>
 8009294:	e082      	b.n	800939c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	7d1b      	ldrb	r3, [r3, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d126      	bne.n	800930e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	8adb      	ldrh	r3, [r3, #22]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d02e      	beq.n	8009326 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80092c8:	4b3b      	ldr	r3, [pc, #236]	; (80093b8 <tcp_abandon+0x170>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d105      	bne.n	80092de <tcp_abandon+0x96>
 80092d2:	4b39      	ldr	r3, [pc, #228]	; (80093b8 <tcp_abandon+0x170>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	4a37      	ldr	r2, [pc, #220]	; (80093b8 <tcp_abandon+0x170>)
 80092da:	6013      	str	r3, [r2, #0]
 80092dc:	e013      	b.n	8009306 <tcp_abandon+0xbe>
 80092de:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <tcp_abandon+0x170>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	61fb      	str	r3, [r7, #28]
 80092e4:	e00c      	b.n	8009300 <tcp_abandon+0xb8>
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d104      	bne.n	80092fa <tcp_abandon+0xb2>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	68da      	ldr	r2, [r3, #12]
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	60da      	str	r2, [r3, #12]
 80092f8:	e005      	b.n	8009306 <tcp_abandon+0xbe>
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	61fb      	str	r3, [r7, #28]
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1ef      	bne.n	80092e6 <tcp_abandon+0x9e>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	60da      	str	r2, [r3, #12]
 800930c:	e00b      	b.n	8009326 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	8adb      	ldrh	r3, [r3, #22]
 8009316:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	4828      	ldr	r0, [pc, #160]	; (80093bc <tcp_abandon+0x174>)
 800931c:	f001 fa26 	bl	800a76c <tcp_pcb_remove>
 8009320:	4b27      	ldr	r3, [pc, #156]	; (80093c0 <tcp_abandon+0x178>)
 8009322:	2201      	movs	r2, #1
 8009324:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932a:	2b00      	cmp	r3, #0
 800932c:	d004      	beq.n	8009338 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009332:	4618      	mov	r0, r3
 8009334:	f000 ff12 	bl	800a15c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800933c:	2b00      	cmp	r3, #0
 800933e:	d004      	beq.n	800934a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009344:	4618      	mov	r0, r3
 8009346:	f000 ff09 	bl	800a15c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800934e:	2b00      	cmp	r3, #0
 8009350:	d004      	beq.n	800935c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009356:	4618      	mov	r0, r3
 8009358:	f000 ff00 	bl	800a15c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00e      	beq.n	8009380 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	3304      	adds	r3, #4
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	8b12      	ldrh	r2, [r2, #24]
 800936c:	9202      	str	r2, [sp, #8]
 800936e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009370:	9201      	str	r2, [sp, #4]
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	460b      	mov	r3, r1
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	69b9      	ldr	r1, [r7, #24]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f005 fbc2 	bl	800eb04 <tcp_rst>
    }
    last_state = pcb->state;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	7d1b      	ldrb	r3, [r3, #20]
 8009384:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7ff fd34 	bl	8008df4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d004      	beq.n	800939c <tcp_abandon+0x154>
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	f06f 010c 	mvn.w	r1, #12
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	4798      	blx	r3
  }
}
 800939c:	3728      	adds	r7, #40	; 0x28
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	0801629c 	.word	0x0801629c
 80093a8:	080163e0 	.word	0x080163e0
 80093ac:	080162e0 	.word	0x080162e0
 80093b0:	080163fc 	.word	0x080163fc
 80093b4:	20006d18 	.word	0x20006d18
 80093b8:	20006d14 	.word	0x20006d14
 80093bc:	20006d08 	.word	0x20006d08
 80093c0:	20006d04 	.word	0x20006d04

080093c4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80093cc:	2101      	movs	r1, #1
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7ff ff3a 	bl	8009248 <tcp_abandon>
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b088      	sub	sp, #32
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	4613      	mov	r3, r2
 80093e8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80093ea:	2304      	movs	r3, #4
 80093ec:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80093f4:	4b3e      	ldr	r3, [pc, #248]	; (80094f0 <tcp_bind+0x114>)
 80093f6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <tcp_bind+0x36>
 80093fe:	4b3d      	ldr	r3, [pc, #244]	; (80094f4 <tcp_bind+0x118>)
 8009400:	f240 22a9 	movw	r2, #681	; 0x2a9
 8009404:	493c      	ldr	r1, [pc, #240]	; (80094f8 <tcp_bind+0x11c>)
 8009406:	483d      	ldr	r0, [pc, #244]	; (80094fc <tcp_bind+0x120>)
 8009408:	f00a fcfe 	bl	8013e08 <iprintf>
 800940c:	f06f 030f 	mvn.w	r3, #15
 8009410:	e06a      	b.n	80094e8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	7d1b      	ldrb	r3, [r3, #20]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d009      	beq.n	800942e <tcp_bind+0x52>
 800941a:	4b36      	ldr	r3, [pc, #216]	; (80094f4 <tcp_bind+0x118>)
 800941c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009420:	4937      	ldr	r1, [pc, #220]	; (8009500 <tcp_bind+0x124>)
 8009422:	4836      	ldr	r0, [pc, #216]	; (80094fc <tcp_bind+0x120>)
 8009424:	f00a fcf0 	bl	8013e08 <iprintf>
 8009428:	f06f 0305 	mvn.w	r3, #5
 800942c:	e05c      	b.n	80094e8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800942e:	88fb      	ldrh	r3, [r7, #6]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d109      	bne.n	8009448 <tcp_bind+0x6c>
    port = tcp_new_port();
 8009434:	f000 f914 	bl	8009660 <tcp_new_port>
 8009438:	4603      	mov	r3, r0
 800943a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d135      	bne.n	80094ae <tcp_bind+0xd2>
      return ERR_BUF;
 8009442:	f06f 0301 	mvn.w	r3, #1
 8009446:	e04f      	b.n	80094e8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009448:	2300      	movs	r3, #0
 800944a:	61fb      	str	r3, [r7, #28]
 800944c:	e02b      	b.n	80094a6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800944e:	4a2d      	ldr	r2, [pc, #180]	; (8009504 <tcp_bind+0x128>)
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	61bb      	str	r3, [r7, #24]
 800945a:	e01e      	b.n	800949a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	8adb      	ldrh	r3, [r3, #22]
 8009460:	88fa      	ldrh	r2, [r7, #6]
 8009462:	429a      	cmp	r2, r3
 8009464:	d116      	bne.n	8009494 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8009466:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009468:	2b00      	cmp	r3, #0
 800946a:	d010      	beq.n	800948e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00c      	beq.n	800948e <tcp_bind+0xb2>
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d009      	beq.n	800948e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d005      	beq.n	800948e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800948a:	429a      	cmp	r2, r3
 800948c:	d102      	bne.n	8009494 <tcp_bind+0xb8>
              return ERR_USE;
 800948e:	f06f 0307 	mvn.w	r3, #7
 8009492:	e029      	b.n	80094e8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	61bb      	str	r3, [r7, #24]
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1dd      	bne.n	800945c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	3301      	adds	r3, #1
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	69fa      	ldr	r2, [r7, #28]
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	dbcf      	blt.n	800944e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00c      	beq.n	80094ce <tcp_bind+0xf2>
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d008      	beq.n	80094ce <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <tcp_bind+0xec>
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	e000      	b.n	80094ca <tcp_bind+0xee>
 80094c8:	2300      	movs	r3, #0
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	88fa      	ldrh	r2, [r7, #6]
 80094d2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80094d4:	4b0c      	ldr	r3, [pc, #48]	; (8009508 <tcp_bind+0x12c>)
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	60da      	str	r2, [r3, #12]
 80094dc:	4a0a      	ldr	r2, [pc, #40]	; (8009508 <tcp_bind+0x12c>)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6013      	str	r3, [r2, #0]
 80094e2:	f005 fcd1 	bl	800ee88 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3720      	adds	r7, #32
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	08018640 	.word	0x08018640
 80094f4:	0801629c 	.word	0x0801629c
 80094f8:	08016430 	.word	0x08016430
 80094fc:	080162e0 	.word	0x080162e0
 8009500:	08016448 	.word	0x08016448
 8009504:	08018608 	.word	0x08018608
 8009508:	20006d14 	.word	0x20006d14

0800950c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d106      	bne.n	8009528 <tcp_update_rcv_ann_wnd+0x1c>
 800951a:	4b25      	ldr	r3, [pc, #148]	; (80095b0 <tcp_update_rcv_ann_wnd+0xa4>)
 800951c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009520:	4924      	ldr	r1, [pc, #144]	; (80095b4 <tcp_update_rcv_ann_wnd+0xa8>)
 8009522:	4825      	ldr	r0, [pc, #148]	; (80095b8 <tcp_update_rcv_ann_wnd+0xac>)
 8009524:	f00a fc70 	bl	8013e08 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009530:	4413      	add	r3, r2
 8009532:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800953c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009540:	bf28      	it	cs
 8009542:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009546:	b292      	uxth	r2, r2
 8009548:	4413      	add	r3, r2
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	db08      	blt.n	8009564 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	e020      	b.n	80095a6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	dd03      	ble.n	800957a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009578:	e014      	b.n	80095a4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800958c:	d306      	bcc.n	800959c <tcp_update_rcv_ann_wnd+0x90>
 800958e:	4b08      	ldr	r3, [pc, #32]	; (80095b0 <tcp_update_rcv_ann_wnd+0xa4>)
 8009590:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009594:	4909      	ldr	r1, [pc, #36]	; (80095bc <tcp_update_rcv_ann_wnd+0xb0>)
 8009596:	4808      	ldr	r0, [pc, #32]	; (80095b8 <tcp_update_rcv_ann_wnd+0xac>)
 8009598:	f00a fc36 	bl	8013e08 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	b29a      	uxth	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80095a4:	2300      	movs	r3, #0
  }
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	0801629c 	.word	0x0801629c
 80095b4:	080164f8 	.word	0x080164f8
 80095b8:	080162e0 	.word	0x080162e0
 80095bc:	0801651c 	.word	0x0801651c

080095c0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d107      	bne.n	80095e2 <tcp_recved+0x22>
 80095d2:	4b1f      	ldr	r3, [pc, #124]	; (8009650 <tcp_recved+0x90>)
 80095d4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80095d8:	491e      	ldr	r1, [pc, #120]	; (8009654 <tcp_recved+0x94>)
 80095da:	481f      	ldr	r0, [pc, #124]	; (8009658 <tcp_recved+0x98>)
 80095dc:	f00a fc14 	bl	8013e08 <iprintf>
 80095e0:	e032      	b.n	8009648 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	7d1b      	ldrb	r3, [r3, #20]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d106      	bne.n	80095f8 <tcp_recved+0x38>
 80095ea:	4b19      	ldr	r3, [pc, #100]	; (8009650 <tcp_recved+0x90>)
 80095ec:	f240 32d2 	movw	r2, #978	; 0x3d2
 80095f0:	491a      	ldr	r1, [pc, #104]	; (800965c <tcp_recved+0x9c>)
 80095f2:	4819      	ldr	r0, [pc, #100]	; (8009658 <tcp_recved+0x98>)
 80095f4:	f00a fc08 	bl	8013e08 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80095fc:	887b      	ldrh	r3, [r7, #2]
 80095fe:	4413      	add	r3, r2
 8009600:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009602:	89fb      	ldrh	r3, [r7, #14]
 8009604:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009608:	d804      	bhi.n	8009614 <tcp_recved+0x54>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800960e:	89fa      	ldrh	r2, [r7, #14]
 8009610:	429a      	cmp	r2, r3
 8009612:	d204      	bcs.n	800961e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800961a:	851a      	strh	r2, [r3, #40]	; 0x28
 800961c:	e002      	b.n	8009624 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	89fa      	ldrh	r2, [r7, #14]
 8009622:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7ff ff71 	bl	800950c <tcp_update_rcv_ann_wnd>
 800962a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009632:	d309      	bcc.n	8009648 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	8b5b      	ldrh	r3, [r3, #26]
 8009638:	f043 0302 	orr.w	r3, r3, #2
 800963c:	b29a      	uxth	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f004 fcaa 	bl	800df9c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	0801629c 	.word	0x0801629c
 8009654:	08016538 	.word	0x08016538
 8009658:	080162e0 	.word	0x080162e0
 800965c:	08016550 	.word	0x08016550

08009660 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800966a:	4b1e      	ldr	r3, [pc, #120]	; (80096e4 <tcp_new_port+0x84>)
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	3301      	adds	r3, #1
 8009670:	b29a      	uxth	r2, r3
 8009672:	4b1c      	ldr	r3, [pc, #112]	; (80096e4 <tcp_new_port+0x84>)
 8009674:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009676:	4b1b      	ldr	r3, [pc, #108]	; (80096e4 <tcp_new_port+0x84>)
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800967e:	4293      	cmp	r3, r2
 8009680:	d103      	bne.n	800968a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009682:	4b18      	ldr	r3, [pc, #96]	; (80096e4 <tcp_new_port+0x84>)
 8009684:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009688:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800968a:	2300      	movs	r3, #0
 800968c:	71fb      	strb	r3, [r7, #7]
 800968e:	e01e      	b.n	80096ce <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009690:	79fb      	ldrb	r3, [r7, #7]
 8009692:	4a15      	ldr	r2, [pc, #84]	; (80096e8 <tcp_new_port+0x88>)
 8009694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	603b      	str	r3, [r7, #0]
 800969c:	e011      	b.n	80096c2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	8ada      	ldrh	r2, [r3, #22]
 80096a2:	4b10      	ldr	r3, [pc, #64]	; (80096e4 <tcp_new_port+0x84>)
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d108      	bne.n	80096bc <tcp_new_port+0x5c>
        n++;
 80096aa:	88bb      	ldrh	r3, [r7, #4]
 80096ac:	3301      	adds	r3, #1
 80096ae:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80096b0:	88bb      	ldrh	r3, [r7, #4]
 80096b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096b6:	d3d8      	bcc.n	800966a <tcp_new_port+0xa>
          return 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	e00d      	b.n	80096d8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	603b      	str	r3, [r7, #0]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1ea      	bne.n	800969e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	3301      	adds	r3, #1
 80096cc:	71fb      	strb	r3, [r7, #7]
 80096ce:	79fb      	ldrb	r3, [r7, #7]
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d9dd      	bls.n	8009690 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80096d4:	4b03      	ldr	r3, [pc, #12]	; (80096e4 <tcp_new_port+0x84>)
 80096d6:	881b      	ldrh	r3, [r3, #0]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	2000000a 	.word	0x2000000a
 80096e8:	08018608 	.word	0x08018608

080096ec <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08a      	sub	sp, #40	; 0x28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	603b      	str	r3, [r7, #0]
 80096f8:	4613      	mov	r3, r2
 80096fa:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80096fc:	2300      	movs	r3, #0
 80096fe:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d109      	bne.n	800971a <tcp_connect+0x2e>
 8009706:	4b7d      	ldr	r3, [pc, #500]	; (80098fc <tcp_connect+0x210>)
 8009708:	f240 4235 	movw	r2, #1077	; 0x435
 800970c:	497c      	ldr	r1, [pc, #496]	; (8009900 <tcp_connect+0x214>)
 800970e:	487d      	ldr	r0, [pc, #500]	; (8009904 <tcp_connect+0x218>)
 8009710:	f00a fb7a 	bl	8013e08 <iprintf>
 8009714:	f06f 030f 	mvn.w	r3, #15
 8009718:	e0ec      	b.n	80098f4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d109      	bne.n	8009734 <tcp_connect+0x48>
 8009720:	4b76      	ldr	r3, [pc, #472]	; (80098fc <tcp_connect+0x210>)
 8009722:	f240 4236 	movw	r2, #1078	; 0x436
 8009726:	4978      	ldr	r1, [pc, #480]	; (8009908 <tcp_connect+0x21c>)
 8009728:	4876      	ldr	r0, [pc, #472]	; (8009904 <tcp_connect+0x218>)
 800972a:	f00a fb6d 	bl	8013e08 <iprintf>
 800972e:	f06f 030f 	mvn.w	r3, #15
 8009732:	e0df      	b.n	80098f4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	7d1b      	ldrb	r3, [r3, #20]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d009      	beq.n	8009750 <tcp_connect+0x64>
 800973c:	4b6f      	ldr	r3, [pc, #444]	; (80098fc <tcp_connect+0x210>)
 800973e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8009742:	4972      	ldr	r1, [pc, #456]	; (800990c <tcp_connect+0x220>)
 8009744:	486f      	ldr	r0, [pc, #444]	; (8009904 <tcp_connect+0x218>)
 8009746:	f00a fb5f 	bl	8013e08 <iprintf>
 800974a:	f06f 0309 	mvn.w	r3, #9
 800974e:	e0d1      	b.n	80098f4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d002      	beq.n	800975c <tcp_connect+0x70>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	e000      	b.n	800975e <tcp_connect+0x72>
 800975c:	2300      	movs	r3, #0
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	88fa      	ldrh	r2, [r7, #6]
 8009766:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	7a1b      	ldrb	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d006      	beq.n	800977e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	7a1b      	ldrb	r3, [r3, #8]
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe fcc9 	bl	800810c <netif_get_by_index>
 800977a:	6278      	str	r0, [r7, #36]	; 0x24
 800977c:	e005      	b.n	800978a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3304      	adds	r3, #4
 8009782:	4618      	mov	r0, r3
 8009784:	f009 f8f4 	bl	8012970 <ip4_route>
 8009788:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	d102      	bne.n	8009796 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8009790:	f06f 0303 	mvn.w	r3, #3
 8009794:	e0ae      	b.n	80098f4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <tcp_connect+0xb8>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d111      	bne.n	80097c8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <tcp_connect+0xc4>
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	3304      	adds	r3, #4
 80097ae:	e000      	b.n	80097b2 <tcp_connect+0xc6>
 80097b0:	2300      	movs	r3, #0
 80097b2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d102      	bne.n	80097c0 <tcp_connect+0xd4>
      return ERR_RTE;
 80097ba:	f06f 0303 	mvn.w	r3, #3
 80097be:	e099      	b.n	80098f4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8adb      	ldrh	r3, [r3, #22]
 80097cc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	8adb      	ldrh	r3, [r3, #22]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10c      	bne.n	80097f0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80097d6:	f7ff ff43 	bl	8009660 <tcp_new_port>
 80097da:	4603      	mov	r3, r0
 80097dc:	461a      	mov	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	8adb      	ldrh	r3, [r3, #22]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d102      	bne.n	80097f0 <tcp_connect+0x104>
      return ERR_BUF;
 80097ea:	f06f 0301 	mvn.w	r3, #1
 80097ee:	e081      	b.n	80098f4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f001 f84f 	bl	800a894 <tcp_next_iss>
 80097f6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	1e5a      	subs	r2, r3, #1
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	1e5a      	subs	r2, r3, #1
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	1e5a      	subs	r2, r3, #1
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009822:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800983a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009844:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3304      	adds	r3, #4
 800984e:	461a      	mov	r2, r3
 8009850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009852:	f001 f845 	bl	800a8e0 <tcp_eff_send_mss_netif>
 8009856:	4603      	mov	r3, r0
 8009858:	461a      	mov	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2201      	movs	r2, #1
 8009862:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800986e:	2102      	movs	r1, #2
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f004 faa5 	bl	800ddc0 <tcp_enqueue_flags>
 8009876:	4603      	mov	r3, r0
 8009878:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800987a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d136      	bne.n	80098f0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2202      	movs	r2, #2
 8009886:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8009888:	8b7b      	ldrh	r3, [r7, #26]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d021      	beq.n	80098d2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800988e:	4b20      	ldr	r3, [pc, #128]	; (8009910 <tcp_connect+0x224>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	429a      	cmp	r2, r3
 8009896:	d105      	bne.n	80098a4 <tcp_connect+0x1b8>
 8009898:	4b1d      	ldr	r3, [pc, #116]	; (8009910 <tcp_connect+0x224>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	4a1c      	ldr	r2, [pc, #112]	; (8009910 <tcp_connect+0x224>)
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	e013      	b.n	80098cc <tcp_connect+0x1e0>
 80098a4:	4b1a      	ldr	r3, [pc, #104]	; (8009910 <tcp_connect+0x224>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	623b      	str	r3, [r7, #32]
 80098aa:	e00c      	b.n	80098c6 <tcp_connect+0x1da>
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d104      	bne.n	80098c0 <tcp_connect+0x1d4>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	68da      	ldr	r2, [r3, #12]
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	60da      	str	r2, [r3, #12]
 80098be:	e005      	b.n	80098cc <tcp_connect+0x1e0>
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	623b      	str	r3, [r7, #32]
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1ef      	bne.n	80098ac <tcp_connect+0x1c0>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80098d2:	4b10      	ldr	r3, [pc, #64]	; (8009914 <tcp_connect+0x228>)
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	60da      	str	r2, [r3, #12]
 80098da:	4a0e      	ldr	r2, [pc, #56]	; (8009914 <tcp_connect+0x228>)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	f005 fad2 	bl	800ee88 <tcp_timer_needed>
 80098e4:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <tcp_connect+0x22c>)
 80098e6:	2201      	movs	r2, #1
 80098e8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f004 fb56 	bl	800df9c <tcp_output>
  }
  return ret;
 80098f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3728      	adds	r7, #40	; 0x28
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	0801629c 	.word	0x0801629c
 8009900:	08016578 	.word	0x08016578
 8009904:	080162e0 	.word	0x080162e0
 8009908:	08016594 	.word	0x08016594
 800990c:	080165b0 	.word	0x080165b0
 8009910:	20006d14 	.word	0x20006d14
 8009914:	20006d08 	.word	0x20006d08
 8009918:	20006d04 	.word	0x20006d04

0800991c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800991c:	b5b0      	push	{r4, r5, r7, lr}
 800991e:	b090      	sub	sp, #64	; 0x40
 8009920:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009928:	4b94      	ldr	r3, [pc, #592]	; (8009b7c <tcp_slowtmr+0x260>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3301      	adds	r3, #1
 800992e:	4a93      	ldr	r2, [pc, #588]	; (8009b7c <tcp_slowtmr+0x260>)
 8009930:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009932:	4b93      	ldr	r3, [pc, #588]	; (8009b80 <tcp_slowtmr+0x264>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	3301      	adds	r3, #1
 8009938:	b2da      	uxtb	r2, r3
 800993a:	4b91      	ldr	r3, [pc, #580]	; (8009b80 <tcp_slowtmr+0x264>)
 800993c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800993e:	2300      	movs	r3, #0
 8009940:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009942:	4b90      	ldr	r3, [pc, #576]	; (8009b84 <tcp_slowtmr+0x268>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009948:	e29f      	b.n	8009e8a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	7d1b      	ldrb	r3, [r3, #20]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d106      	bne.n	8009960 <tcp_slowtmr+0x44>
 8009952:	4b8d      	ldr	r3, [pc, #564]	; (8009b88 <tcp_slowtmr+0x26c>)
 8009954:	f240 42be 	movw	r2, #1214	; 0x4be
 8009958:	498c      	ldr	r1, [pc, #560]	; (8009b8c <tcp_slowtmr+0x270>)
 800995a:	488d      	ldr	r0, [pc, #564]	; (8009b90 <tcp_slowtmr+0x274>)
 800995c:	f00a fa54 	bl	8013e08 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009962:	7d1b      	ldrb	r3, [r3, #20]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d106      	bne.n	8009976 <tcp_slowtmr+0x5a>
 8009968:	4b87      	ldr	r3, [pc, #540]	; (8009b88 <tcp_slowtmr+0x26c>)
 800996a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800996e:	4989      	ldr	r1, [pc, #548]	; (8009b94 <tcp_slowtmr+0x278>)
 8009970:	4887      	ldr	r0, [pc, #540]	; (8009b90 <tcp_slowtmr+0x274>)
 8009972:	f00a fa49 	bl	8013e08 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009978:	7d1b      	ldrb	r3, [r3, #20]
 800997a:	2b0a      	cmp	r3, #10
 800997c:	d106      	bne.n	800998c <tcp_slowtmr+0x70>
 800997e:	4b82      	ldr	r3, [pc, #520]	; (8009b88 <tcp_slowtmr+0x26c>)
 8009980:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009984:	4984      	ldr	r1, [pc, #528]	; (8009b98 <tcp_slowtmr+0x27c>)
 8009986:	4882      	ldr	r0, [pc, #520]	; (8009b90 <tcp_slowtmr+0x274>)
 8009988:	f00a fa3e 	bl	8013e08 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	7f9a      	ldrb	r2, [r3, #30]
 8009990:	4b7b      	ldr	r3, [pc, #492]	; (8009b80 <tcp_slowtmr+0x264>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	429a      	cmp	r2, r3
 8009996:	d105      	bne.n	80099a4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800999c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80099a2:	e272      	b.n	8009e8a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80099a4:	4b76      	ldr	r3, [pc, #472]	; (8009b80 <tcp_slowtmr+0x264>)
 80099a6:	781a      	ldrb	r2, [r3, #0]
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80099b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ba:	7d1b      	ldrb	r3, [r3, #20]
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d10a      	bne.n	80099d6 <tcp_slowtmr+0xba>
 80099c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099c6:	2b05      	cmp	r3, #5
 80099c8:	d905      	bls.n	80099d6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80099ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099ce:	3301      	adds	r3, #1
 80099d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099d4:	e11e      	b.n	8009c14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099dc:	2b0b      	cmp	r3, #11
 80099de:	d905      	bls.n	80099ec <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80099e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e4:	3301      	adds	r3, #1
 80099e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099ea:	e113      	b.n	8009c14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d075      	beq.n	8009ae2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d006      	beq.n	8009a0c <tcp_slowtmr+0xf0>
 80099fe:	4b62      	ldr	r3, [pc, #392]	; (8009b88 <tcp_slowtmr+0x26c>)
 8009a00:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009a04:	4965      	ldr	r1, [pc, #404]	; (8009b9c <tcp_slowtmr+0x280>)
 8009a06:	4862      	ldr	r0, [pc, #392]	; (8009b90 <tcp_slowtmr+0x274>)
 8009a08:	f00a f9fe 	bl	8013e08 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d106      	bne.n	8009a22 <tcp_slowtmr+0x106>
 8009a14:	4b5c      	ldr	r3, [pc, #368]	; (8009b88 <tcp_slowtmr+0x26c>)
 8009a16:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009a1a:	4961      	ldr	r1, [pc, #388]	; (8009ba0 <tcp_slowtmr+0x284>)
 8009a1c:	485c      	ldr	r0, [pc, #368]	; (8009b90 <tcp_slowtmr+0x274>)
 8009a1e:	f00a f9f3 	bl	8013e08 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a24:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009a28:	2b0b      	cmp	r3, #11
 8009a2a:	d905      	bls.n	8009a38 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a30:	3301      	adds	r3, #1
 8009a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a36:	e0ed      	b.n	8009c14 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	4a58      	ldr	r2, [pc, #352]	; (8009ba4 <tcp_slowtmr+0x288>)
 8009a42:	5cd3      	ldrb	r3, [r2, r3]
 8009a44:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009a4c:	7c7a      	ldrb	r2, [r7, #17]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d907      	bls.n	8009a62 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009a58:	3301      	adds	r3, #1
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009a68:	7c7a      	ldrb	r2, [r7, #17]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	f200 80d2 	bhi.w	8009c14 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009a70:	2301      	movs	r3, #1
 8009a72:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d108      	bne.n	8009a90 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009a7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a80:	f005 f934 	bl	800ecec <tcp_zero_window_probe>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d014      	beq.n	8009ab4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	623b      	str	r3, [r7, #32]
 8009a8e:	e011      	b.n	8009ab4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a96:	4619      	mov	r1, r3
 8009a98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a9a:	f003 fff9 	bl	800da90 <tcp_split_unsent_seg>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d107      	bne.n	8009ab4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009aa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009aa6:	f004 fa79 	bl	800df9c <tcp_output>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d101      	bne.n	8009ab4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 80ac 	beq.w	8009c14 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009aca:	2b06      	cmp	r3, #6
 8009acc:	f200 80a2 	bhi.w	8009c14 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009adc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009ae0:	e098      	b.n	8009c14 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	db0f      	blt.n	8009b0c <tcp_slowtmr+0x1f0>
 8009aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009af2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d008      	beq.n	8009b0c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3301      	adds	r3, #1
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	b21a      	sxth	r2, r3
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b14:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	db7b      	blt.n	8009c14 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b1e:	f004 fd2f 	bl	800e580 <tcp_rexmit_rto_prepare>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d007      	beq.n	8009b38 <tcp_slowtmr+0x21c>
 8009b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d171      	bne.n	8009c14 <tcp_slowtmr+0x2f8>
 8009b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d06d      	beq.n	8009c14 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3a:	7d1b      	ldrb	r3, [r3, #20]
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d03a      	beq.n	8009bb6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b46:	2b0c      	cmp	r3, #12
 8009b48:	bf28      	it	cs
 8009b4a:	230c      	movcs	r3, #12
 8009b4c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009b54:	10db      	asrs	r3, r3, #3
 8009b56:	b21b      	sxth	r3, r3
 8009b58:	461a      	mov	r2, r3
 8009b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009b60:	4413      	add	r3, r2
 8009b62:	7efa      	ldrb	r2, [r7, #27]
 8009b64:	4910      	ldr	r1, [pc, #64]	; (8009ba8 <tcp_slowtmr+0x28c>)
 8009b66:	5c8a      	ldrb	r2, [r1, r2]
 8009b68:	4093      	lsls	r3, r2
 8009b6a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009b72:	4293      	cmp	r3, r2
 8009b74:	dc1a      	bgt.n	8009bac <tcp_slowtmr+0x290>
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	b21a      	sxth	r2, r3
 8009b7a:	e019      	b.n	8009bb0 <tcp_slowtmr+0x294>
 8009b7c:	20006d0c 	.word	0x20006d0c
 8009b80:	200000ce 	.word	0x200000ce
 8009b84:	20006d08 	.word	0x20006d08
 8009b88:	0801629c 	.word	0x0801629c
 8009b8c:	080165e0 	.word	0x080165e0
 8009b90:	080162e0 	.word	0x080162e0
 8009b94:	0801660c 	.word	0x0801660c
 8009b98:	08016638 	.word	0x08016638
 8009b9c:	08016668 	.word	0x08016668
 8009ba0:	0801669c 	.word	0x0801669c
 8009ba4:	08018600 	.word	0x08018600
 8009ba8:	080185f0 	.word	0x080185f0
 8009bac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8009bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb8:	2200      	movs	r2, #0
 8009bba:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	bf28      	it	cs
 8009bcc:	4613      	movcs	r3, r2
 8009bce:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009bd0:	8a7b      	ldrh	r3, [r7, #18]
 8009bd2:	085b      	lsrs	r3, r3, #1
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009be6:	005b      	lsls	r3, r3, #1
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d206      	bcs.n	8009bfc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bf2:	005b      	lsls	r3, r3, #1
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009c0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c10:	f004 fd26 	bl	800e660 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c16:	7d1b      	ldrb	r3, [r3, #20]
 8009c18:	2b06      	cmp	r3, #6
 8009c1a:	d111      	bne.n	8009c40 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1e:	8b5b      	ldrh	r3, [r3, #26]
 8009c20:	f003 0310 	and.w	r3, r3, #16
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00b      	beq.n	8009c40 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009c28:	4b9d      	ldr	r3, [pc, #628]	; (8009ea0 <tcp_slowtmr+0x584>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2e:	6a1b      	ldr	r3, [r3, #32]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	2b28      	cmp	r3, #40	; 0x28
 8009c34:	d904      	bls.n	8009c40 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c42:	7a5b      	ldrb	r3, [r3, #9]
 8009c44:	f003 0308 	and.w	r3, r3, #8
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d04c      	beq.n	8009ce6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	d003      	beq.n	8009c5c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c56:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009c58:	2b07      	cmp	r3, #7
 8009c5a:	d144      	bne.n	8009ce6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009c5c:	4b90      	ldr	r3, [pc, #576]	; (8009ea0 <tcp_slowtmr+0x584>)
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c6c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8009c70:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009c74:	498b      	ldr	r1, [pc, #556]	; (8009ea4 <tcp_slowtmr+0x588>)
 8009c76:	fba1 1303 	umull	r1, r3, r1, r3
 8009c7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d90a      	bls.n	8009c96 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c84:	3301      	adds	r3, #1
 8009c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009c8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c8e:	3301      	adds	r3, #1
 8009c90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009c94:	e027      	b.n	8009ce6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009c96:	4b82      	ldr	r3, [pc, #520]	; (8009ea0 <tcp_slowtmr+0x584>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009cac:	4618      	mov	r0, r3
 8009cae:	4b7e      	ldr	r3, [pc, #504]	; (8009ea8 <tcp_slowtmr+0x58c>)
 8009cb0:	fb03 f300 	mul.w	r3, r3, r0
 8009cb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009cb6:	497b      	ldr	r1, [pc, #492]	; (8009ea4 <tcp_slowtmr+0x588>)
 8009cb8:	fba1 1303 	umull	r1, r3, r1, r3
 8009cbc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d911      	bls.n	8009ce6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009cc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cc4:	f004 ffd2 	bl	800ec6c <tcp_keepalive>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009cce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d107      	bne.n	8009ce6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8009cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009cdc:	3301      	adds	r3, #1
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d011      	beq.n	8009d12 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009cee:	4b6c      	ldr	r3, [pc, #432]	; (8009ea0 <tcp_slowtmr+0x584>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	1ad2      	subs	r2, r2, r3
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009cfe:	4619      	mov	r1, r3
 8009d00:	460b      	mov	r3, r1
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	440b      	add	r3, r1
 8009d06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d302      	bcc.n	8009d12 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d0e:	f000 fe91 	bl	800aa34 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d14:	7d1b      	ldrb	r3, [r3, #20]
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d10b      	bne.n	8009d32 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d1a:	4b61      	ldr	r3, [pc, #388]	; (8009ea0 <tcp_slowtmr+0x584>)
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	2b28      	cmp	r3, #40	; 0x28
 8009d26:	d904      	bls.n	8009d32 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d34:	7d1b      	ldrb	r3, [r3, #20]
 8009d36:	2b09      	cmp	r3, #9
 8009d38:	d10b      	bne.n	8009d52 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009d3a:	4b59      	ldr	r3, [pc, #356]	; (8009ea0 <tcp_slowtmr+0x584>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d40:	6a1b      	ldr	r3, [r3, #32]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	2bf0      	cmp	r3, #240	; 0xf0
 8009d46:	d904      	bls.n	8009d52 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d060      	beq.n	8009e1c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d60:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009d62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d64:	f000 fcb2 	bl	800a6cc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d010      	beq.n	8009d90 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009d6e:	4b4f      	ldr	r3, [pc, #316]	; (8009eac <tcp_slowtmr+0x590>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d106      	bne.n	8009d86 <tcp_slowtmr+0x46a>
 8009d78:	4b4d      	ldr	r3, [pc, #308]	; (8009eb0 <tcp_slowtmr+0x594>)
 8009d7a:	f240 526d 	movw	r2, #1389	; 0x56d
 8009d7e:	494d      	ldr	r1, [pc, #308]	; (8009eb4 <tcp_slowtmr+0x598>)
 8009d80:	484d      	ldr	r0, [pc, #308]	; (8009eb8 <tcp_slowtmr+0x59c>)
 8009d82:	f00a f841 	bl	8013e08 <iprintf>
        prev->next = pcb->next;
 8009d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8c:	60da      	str	r2, [r3, #12]
 8009d8e:	e00f      	b.n	8009db0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009d90:	4b46      	ldr	r3, [pc, #280]	; (8009eac <tcp_slowtmr+0x590>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d006      	beq.n	8009da8 <tcp_slowtmr+0x48c>
 8009d9a:	4b45      	ldr	r3, [pc, #276]	; (8009eb0 <tcp_slowtmr+0x594>)
 8009d9c:	f240 5271 	movw	r2, #1393	; 0x571
 8009da0:	4946      	ldr	r1, [pc, #280]	; (8009ebc <tcp_slowtmr+0x5a0>)
 8009da2:	4845      	ldr	r0, [pc, #276]	; (8009eb8 <tcp_slowtmr+0x59c>)
 8009da4:	f00a f830 	bl	8013e08 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	4a3f      	ldr	r2, [pc, #252]	; (8009eac <tcp_slowtmr+0x590>)
 8009dae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009db0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d013      	beq.n	8009de0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009dc0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dc8:	8ad2      	ldrh	r2, [r2, #22]
 8009dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dcc:	8b09      	ldrh	r1, [r1, #24]
 8009dce:	9102      	str	r1, [sp, #8]
 8009dd0:	9201      	str	r2, [sp, #4]
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	462b      	mov	r3, r5
 8009dd6:	4622      	mov	r2, r4
 8009dd8:	4601      	mov	r1, r0
 8009dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ddc:	f004 fe92 	bl	800eb04 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de8:	7d1b      	ldrb	r3, [r3, #20]
 8009dea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009df6:	6838      	ldr	r0, [r7, #0]
 8009df8:	f7fe fffc 	bl	8008df4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009dfc:	4b30      	ldr	r3, [pc, #192]	; (8009ec0 <tcp_slowtmr+0x5a4>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <tcp_slowtmr+0x4f6>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f06f 010c 	mvn.w	r1, #12
 8009e0e:	68b8      	ldr	r0, [r7, #8]
 8009e10:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009e12:	4b2b      	ldr	r3, [pc, #172]	; (8009ec0 <tcp_slowtmr+0x5a4>)
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d037      	beq.n	8009e8a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8009e1a:	e590      	b.n	800993e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e28:	7f1b      	ldrb	r3, [r3, #28]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e30:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	7f1a      	ldrb	r2, [r3, #28]
 8009e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e38:	7f5b      	ldrb	r3, [r3, #29]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d325      	bcc.n	8009e8a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e40:	2200      	movs	r2, #0
 8009e42:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009e44:	4b1e      	ldr	r3, [pc, #120]	; (8009ec0 <tcp_slowtmr+0x5a4>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <tcp_slowtmr+0x550>
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e5c:	6912      	ldr	r2, [r2, #16]
 8009e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e60:	4610      	mov	r0, r2
 8009e62:	4798      	blx	r3
 8009e64:	4603      	mov	r3, r0
 8009e66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009e6a:	e002      	b.n	8009e72 <tcp_slowtmr+0x556>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009e72:	4b13      	ldr	r3, [pc, #76]	; (8009ec0 <tcp_slowtmr+0x5a4>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d000      	beq.n	8009e7c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8009e7a:	e560      	b.n	800993e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009e7c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d102      	bne.n	8009e8a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e86:	f004 f889 	bl	800df9c <tcp_output>
  while (pcb != NULL) {
 8009e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f47f ad5c 	bne.w	800994a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009e96:	4b0b      	ldr	r3, [pc, #44]	; (8009ec4 <tcp_slowtmr+0x5a8>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009e9c:	e067      	b.n	8009f6e <tcp_slowtmr+0x652>
 8009e9e:	bf00      	nop
 8009ea0:	20006d0c 	.word	0x20006d0c
 8009ea4:	10624dd3 	.word	0x10624dd3
 8009ea8:	000124f8 	.word	0x000124f8
 8009eac:	20006d08 	.word	0x20006d08
 8009eb0:	0801629c 	.word	0x0801629c
 8009eb4:	080166d4 	.word	0x080166d4
 8009eb8:	080162e0 	.word	0x080162e0
 8009ebc:	08016700 	.word	0x08016700
 8009ec0:	20006d04 	.word	0x20006d04
 8009ec4:	20006d18 	.word	0x20006d18
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eca:	7d1b      	ldrb	r3, [r3, #20]
 8009ecc:	2b0a      	cmp	r3, #10
 8009ece:	d006      	beq.n	8009ede <tcp_slowtmr+0x5c2>
 8009ed0:	4b2b      	ldr	r3, [pc, #172]	; (8009f80 <tcp_slowtmr+0x664>)
 8009ed2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009ed6:	492b      	ldr	r1, [pc, #172]	; (8009f84 <tcp_slowtmr+0x668>)
 8009ed8:	482b      	ldr	r0, [pc, #172]	; (8009f88 <tcp_slowtmr+0x66c>)
 8009eda:	f009 ff95 	bl	8013e08 <iprintf>
    pcb_remove = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009ee4:	4b29      	ldr	r3, [pc, #164]	; (8009f8c <tcp_slowtmr+0x670>)
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	2bf0      	cmp	r3, #240	; 0xf0
 8009ef0:	d904      	bls.n	8009efc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d02f      	beq.n	8009f64 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009f04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f06:	f000 fbe1 	bl	800a6cc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d010      	beq.n	8009f32 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009f10:	4b1f      	ldr	r3, [pc, #124]	; (8009f90 <tcp_slowtmr+0x674>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d106      	bne.n	8009f28 <tcp_slowtmr+0x60c>
 8009f1a:	4b19      	ldr	r3, [pc, #100]	; (8009f80 <tcp_slowtmr+0x664>)
 8009f1c:	f240 52af 	movw	r2, #1455	; 0x5af
 8009f20:	491c      	ldr	r1, [pc, #112]	; (8009f94 <tcp_slowtmr+0x678>)
 8009f22:	4819      	ldr	r0, [pc, #100]	; (8009f88 <tcp_slowtmr+0x66c>)
 8009f24:	f009 ff70 	bl	8013e08 <iprintf>
        prev->next = pcb->next;
 8009f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2a:	68da      	ldr	r2, [r3, #12]
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	60da      	str	r2, [r3, #12]
 8009f30:	e00f      	b.n	8009f52 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009f32:	4b17      	ldr	r3, [pc, #92]	; (8009f90 <tcp_slowtmr+0x674>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d006      	beq.n	8009f4a <tcp_slowtmr+0x62e>
 8009f3c:	4b10      	ldr	r3, [pc, #64]	; (8009f80 <tcp_slowtmr+0x664>)
 8009f3e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009f42:	4915      	ldr	r1, [pc, #84]	; (8009f98 <tcp_slowtmr+0x67c>)
 8009f44:	4810      	ldr	r0, [pc, #64]	; (8009f88 <tcp_slowtmr+0x66c>)
 8009f46:	f009 ff5f 	bl	8013e08 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	4a10      	ldr	r2, [pc, #64]	; (8009f90 <tcp_slowtmr+0x674>)
 8009f50:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f54:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009f5c:	69f8      	ldr	r0, [r7, #28]
 8009f5e:	f7fe ff49 	bl	8008df4 <tcp_free>
 8009f62:	e004      	b.n	8009f6e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f66:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1a9      	bne.n	8009ec8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009f74:	bf00      	nop
 8009f76:	bf00      	nop
 8009f78:	3730      	adds	r7, #48	; 0x30
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	0801629c 	.word	0x0801629c
 8009f84:	0801672c 	.word	0x0801672c
 8009f88:	080162e0 	.word	0x080162e0
 8009f8c:	20006d0c 	.word	0x20006d0c
 8009f90:	20006d18 	.word	0x20006d18
 8009f94:	0801675c 	.word	0x0801675c
 8009f98:	08016784 	.word	0x08016784

08009f9c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009fa2:	4b2d      	ldr	r3, [pc, #180]	; (800a058 <tcp_fasttmr+0xbc>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	4b2b      	ldr	r3, [pc, #172]	; (800a058 <tcp_fasttmr+0xbc>)
 8009fac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009fae:	4b2b      	ldr	r3, [pc, #172]	; (800a05c <tcp_fasttmr+0xc0>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009fb4:	e048      	b.n	800a048 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	7f9a      	ldrb	r2, [r3, #30]
 8009fba:	4b27      	ldr	r3, [pc, #156]	; (800a058 <tcp_fasttmr+0xbc>)
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d03f      	beq.n	800a042 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009fc2:	4b25      	ldr	r3, [pc, #148]	; (800a058 <tcp_fasttmr+0xbc>)
 8009fc4:	781a      	ldrb	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	8b5b      	ldrh	r3, [r3, #26]
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d010      	beq.n	8009ff8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	8b5b      	ldrh	r3, [r3, #26]
 8009fda:	f043 0302 	orr.w	r3, r3, #2
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f003 ffd9 	bl	800df9c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	8b5b      	ldrh	r3, [r3, #26]
 8009fee:	f023 0303 	bic.w	r3, r3, #3
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	8b5b      	ldrh	r3, [r3, #26]
 8009ffc:	f003 0308 	and.w	r3, r3, #8
 800a000:	2b00      	cmp	r3, #0
 800a002:	d009      	beq.n	800a018 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	8b5b      	ldrh	r3, [r3, #26]
 800a008:	f023 0308 	bic.w	r3, r3, #8
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff f882 	bl	800911c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00a      	beq.n	800a03c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a026:	4b0e      	ldr	r3, [pc, #56]	; (800a060 <tcp_fasttmr+0xc4>)
 800a028:	2200      	movs	r2, #0
 800a02a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f819 	bl	800a064 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a032:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <tcp_fasttmr+0xc4>)
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d000      	beq.n	800a03c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a03a:	e7b8      	b.n	8009fae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	607b      	str	r3, [r7, #4]
 800a040:	e002      	b.n	800a048 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1b3      	bne.n	8009fb6 <tcp_fasttmr+0x1a>
    }
  }
}
 800a04e:	bf00      	nop
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	200000ce 	.word	0x200000ce
 800a05c:	20006d08 	.word	0x20006d08
 800a060:	20006d04 	.word	0x20006d04

0800a064 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a064:	b590      	push	{r4, r7, lr}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d109      	bne.n	800a086 <tcp_process_refused_data+0x22>
 800a072:	4b37      	ldr	r3, [pc, #220]	; (800a150 <tcp_process_refused_data+0xec>)
 800a074:	f240 6209 	movw	r2, #1545	; 0x609
 800a078:	4936      	ldr	r1, [pc, #216]	; (800a154 <tcp_process_refused_data+0xf0>)
 800a07a:	4837      	ldr	r0, [pc, #220]	; (800a158 <tcp_process_refused_data+0xf4>)
 800a07c:	f009 fec4 	bl	8013e08 <iprintf>
 800a080:	f06f 030f 	mvn.w	r3, #15
 800a084:	e060      	b.n	800a148 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a08a:	7b5b      	ldrb	r3, [r3, #13]
 800a08c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a092:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00b      	beq.n	800a0bc <tcp_process_refused_data+0x58>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6918      	ldr	r0, [r3, #16]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	6879      	ldr	r1, [r7, #4]
 800a0b4:	47a0      	blx	r4
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73fb      	strb	r3, [r7, #15]
 800a0ba:	e007      	b.n	800a0cc <tcp_process_refused_data+0x68>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	6879      	ldr	r1, [r7, #4]
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	f000 f8a4 	bl	800a210 <tcp_recv_null>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a0cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d12a      	bne.n	800a12a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a0d4:	7bbb      	ldrb	r3, [r7, #14]
 800a0d6:	f003 0320 	and.w	r3, r3, #32
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d033      	beq.n	800a146 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a0e6:	d005      	beq.n	800a0f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	b29a      	uxth	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00b      	beq.n	800a116 <tcp_process_refused_data+0xb2>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6918      	ldr	r0, [r3, #16]
 800a108:	2300      	movs	r3, #0
 800a10a:	2200      	movs	r2, #0
 800a10c:	6879      	ldr	r1, [r7, #4]
 800a10e:	47a0      	blx	r4
 800a110:	4603      	mov	r3, r0
 800a112:	73fb      	strb	r3, [r7, #15]
 800a114:	e001      	b.n	800a11a <tcp_process_refused_data+0xb6>
 800a116:	2300      	movs	r3, #0
 800a118:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a11a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a11e:	f113 0f0d 	cmn.w	r3, #13
 800a122:	d110      	bne.n	800a146 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a124:	f06f 030c 	mvn.w	r3, #12
 800a128:	e00e      	b.n	800a148 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a12a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a12e:	f113 0f0d 	cmn.w	r3, #13
 800a132:	d102      	bne.n	800a13a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a134:	f06f 030c 	mvn.w	r3, #12
 800a138:	e006      	b.n	800a148 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a140:	f06f 0304 	mvn.w	r3, #4
 800a144:	e000      	b.n	800a148 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd90      	pop	{r4, r7, pc}
 800a150:	0801629c 	.word	0x0801629c
 800a154:	080167ac 	.word	0x080167ac
 800a158:	080162e0 	.word	0x080162e0

0800a15c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a164:	e007      	b.n	800a176 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f80a 	bl	800a186 <tcp_seg_free>
    seg = next;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1f4      	bne.n	800a166 <tcp_segs_free+0xa>
  }
}
 800a17c:	bf00      	nop
 800a17e:	bf00      	nop
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00c      	beq.n	800a1ae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d004      	beq.n	800a1a6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7fe fb13 	bl	80087cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a1a6:	6879      	ldr	r1, [r7, #4]
 800a1a8:	2003      	movs	r0, #3
 800a1aa:	f7fd fcf5 	bl	8007b98 <memp_free>
  }
}
 800a1ae:	bf00      	nop
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
	...

0800a1b8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d106      	bne.n	800a1d4 <tcp_seg_copy+0x1c>
 800a1c6:	4b0f      	ldr	r3, [pc, #60]	; (800a204 <tcp_seg_copy+0x4c>)
 800a1c8:	f240 6282 	movw	r2, #1666	; 0x682
 800a1cc:	490e      	ldr	r1, [pc, #56]	; (800a208 <tcp_seg_copy+0x50>)
 800a1ce:	480f      	ldr	r0, [pc, #60]	; (800a20c <tcp_seg_copy+0x54>)
 800a1d0:	f009 fe1a 	bl	8013e08 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a1d4:	2003      	movs	r0, #3
 800a1d6:	f7fd fc93 	bl	8007b00 <memp_malloc>
 800a1da:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <tcp_seg_copy+0x2e>
    return NULL;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	e00a      	b.n	800a1fc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a1e6:	2210      	movs	r2, #16
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f009 fdf6 	bl	8013ddc <memcpy>
  pbuf_ref(cseg->p);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fe fb89 	bl	800890c <pbuf_ref>
  return cseg;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	0801629c 	.word	0x0801629c
 800a208:	080167f0 	.word	0x080167f0
 800a20c:	080162e0 	.word	0x080162e0

0800a210 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d109      	bne.n	800a238 <tcp_recv_null+0x28>
 800a224:	4b12      	ldr	r3, [pc, #72]	; (800a270 <tcp_recv_null+0x60>)
 800a226:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a22a:	4912      	ldr	r1, [pc, #72]	; (800a274 <tcp_recv_null+0x64>)
 800a22c:	4812      	ldr	r0, [pc, #72]	; (800a278 <tcp_recv_null+0x68>)
 800a22e:	f009 fdeb 	bl	8013e08 <iprintf>
 800a232:	f06f 030f 	mvn.w	r3, #15
 800a236:	e016      	b.n	800a266 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d009      	beq.n	800a252 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	891b      	ldrh	r3, [r3, #8]
 800a242:	4619      	mov	r1, r3
 800a244:	68b8      	ldr	r0, [r7, #8]
 800a246:	f7ff f9bb 	bl	80095c0 <tcp_recved>
    pbuf_free(p);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7fe fabe 	bl	80087cc <pbuf_free>
 800a250:	e008      	b.n	800a264 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d104      	bne.n	800a264 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a25a:	68b8      	ldr	r0, [r7, #8]
 800a25c:	f7fe ffc8 	bl	80091f0 <tcp_close>
 800a260:	4603      	mov	r3, r0
 800a262:	e000      	b.n	800a266 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	0801629c 	.word	0x0801629c
 800a274:	0801680c 	.word	0x0801680c
 800a278:	080162e0 	.word	0x080162e0

0800a27c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	4603      	mov	r3, r0
 800a284:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	db01      	blt.n	800a292 <tcp_kill_prio+0x16>
 800a28e:	79fb      	ldrb	r3, [r7, #7]
 800a290:	e000      	b.n	800a294 <tcp_kill_prio+0x18>
 800a292:	237f      	movs	r3, #127	; 0x7f
 800a294:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a296:	7afb      	ldrb	r3, [r7, #11]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d034      	beq.n	800a306 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a29c:	7afb      	ldrb	r3, [r7, #11]
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2aa:	4b19      	ldr	r3, [pc, #100]	; (800a310 <tcp_kill_prio+0x94>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	617b      	str	r3, [r7, #20]
 800a2b0:	e01f      	b.n	800a2f2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	7d5b      	ldrb	r3, [r3, #21]
 800a2b6:	7afa      	ldrb	r2, [r7, #11]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d80c      	bhi.n	800a2d6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a2c0:	7afa      	ldrb	r2, [r7, #11]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d112      	bne.n	800a2ec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a2c6:	4b13      	ldr	r3, [pc, #76]	; (800a314 <tcp_kill_prio+0x98>)
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d80a      	bhi.n	800a2ec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a2d6:	4b0f      	ldr	r3, [pc, #60]	; (800a314 <tcp_kill_prio+0x98>)
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	7d5b      	ldrb	r3, [r3, #21]
 800a2ea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	617b      	str	r3, [r7, #20]
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1dc      	bne.n	800a2b2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a2fe:	6938      	ldr	r0, [r7, #16]
 800a300:	f7ff f860 	bl	80093c4 <tcp_abort>
 800a304:	e000      	b.n	800a308 <tcp_kill_prio+0x8c>
    return;
 800a306:	bf00      	nop
  }
}
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20006d08 	.word	0x20006d08
 800a314:	20006d0c 	.word	0x20006d0c

0800a318 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	4603      	mov	r3, r0
 800a320:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a322:	79fb      	ldrb	r3, [r7, #7]
 800a324:	2b08      	cmp	r3, #8
 800a326:	d009      	beq.n	800a33c <tcp_kill_state+0x24>
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	2b09      	cmp	r3, #9
 800a32c:	d006      	beq.n	800a33c <tcp_kill_state+0x24>
 800a32e:	4b1a      	ldr	r3, [pc, #104]	; (800a398 <tcp_kill_state+0x80>)
 800a330:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a334:	4919      	ldr	r1, [pc, #100]	; (800a39c <tcp_kill_state+0x84>)
 800a336:	481a      	ldr	r0, [pc, #104]	; (800a3a0 <tcp_kill_state+0x88>)
 800a338:	f009 fd66 	bl	8013e08 <iprintf>

  inactivity = 0;
 800a33c:	2300      	movs	r3, #0
 800a33e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a340:	2300      	movs	r3, #0
 800a342:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a344:	4b17      	ldr	r3, [pc, #92]	; (800a3a4 <tcp_kill_state+0x8c>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	617b      	str	r3, [r7, #20]
 800a34a:	e017      	b.n	800a37c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	7d1b      	ldrb	r3, [r3, #20]
 800a350:	79fa      	ldrb	r2, [r7, #7]
 800a352:	429a      	cmp	r2, r3
 800a354:	d10f      	bne.n	800a376 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a356:	4b14      	ldr	r3, [pc, #80]	; (800a3a8 <tcp_kill_state+0x90>)
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	429a      	cmp	r2, r3
 800a364:	d807      	bhi.n	800a376 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a366:	4b10      	ldr	r3, [pc, #64]	; (800a3a8 <tcp_kill_state+0x90>)
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	617b      	str	r3, [r7, #20]
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e4      	bne.n	800a34c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d003      	beq.n	800a390 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a388:	2100      	movs	r1, #0
 800a38a:	6938      	ldr	r0, [r7, #16]
 800a38c:	f7fe ff5c 	bl	8009248 <tcp_abandon>
  }
}
 800a390:	bf00      	nop
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	0801629c 	.word	0x0801629c
 800a39c:	08016828 	.word	0x08016828
 800a3a0:	080162e0 	.word	0x080162e0
 800a3a4:	20006d08 	.word	0x20006d08
 800a3a8:	20006d0c 	.word	0x20006d0c

0800a3ac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3ba:	4b12      	ldr	r3, [pc, #72]	; (800a404 <tcp_kill_timewait+0x58>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	60fb      	str	r3, [r7, #12]
 800a3c0:	e012      	b.n	800a3e8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a3c2:	4b11      	ldr	r3, [pc, #68]	; (800a408 <tcp_kill_timewait+0x5c>)
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d807      	bhi.n	800a3e2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a3d2:	4b0d      	ldr	r3, [pc, #52]	; (800a408 <tcp_kill_timewait+0x5c>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	1ad3      	subs	r3, r2, r3
 800a3dc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1e9      	bne.n	800a3c2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a3f4:	68b8      	ldr	r0, [r7, #8]
 800a3f6:	f7fe ffe5 	bl	80093c4 <tcp_abort>
  }
}
 800a3fa:	bf00      	nop
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	20006d18 	.word	0x20006d18
 800a408:	20006d0c 	.word	0x20006d0c

0800a40c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a412:	4b10      	ldr	r3, [pc, #64]	; (800a454 <tcp_handle_closepend+0x48>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a418:	e014      	b.n	800a444 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	8b5b      	ldrh	r3, [r3, #26]
 800a424:	f003 0308 	and.w	r3, r3, #8
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d009      	beq.n	800a440 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	8b5b      	ldrh	r3, [r3, #26]
 800a430:	f023 0308 	bic.w	r3, r3, #8
 800a434:	b29a      	uxth	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7fe fe6e 	bl	800911c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1e7      	bne.n	800a41a <tcp_handle_closepend+0xe>
  }
}
 800a44a:	bf00      	nop
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20006d08 	.word	0x20006d08

0800a458 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	4603      	mov	r3, r0
 800a460:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a462:	2001      	movs	r0, #1
 800a464:	f7fd fb4c 	bl	8007b00 <memp_malloc>
 800a468:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d126      	bne.n	800a4be <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a470:	f7ff ffcc 	bl	800a40c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a474:	f7ff ff9a 	bl	800a3ac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a478:	2001      	movs	r0, #1
 800a47a:	f7fd fb41 	bl	8007b00 <memp_malloc>
 800a47e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d11b      	bne.n	800a4be <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a486:	2009      	movs	r0, #9
 800a488:	f7ff ff46 	bl	800a318 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a48c:	2001      	movs	r0, #1
 800a48e:	f7fd fb37 	bl	8007b00 <memp_malloc>
 800a492:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d111      	bne.n	800a4be <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a49a:	2008      	movs	r0, #8
 800a49c:	f7ff ff3c 	bl	800a318 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a4a0:	2001      	movs	r0, #1
 800a4a2:	f7fd fb2d 	bl	8007b00 <memp_malloc>
 800a4a6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d107      	bne.n	800a4be <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a4ae:	79fb      	ldrb	r3, [r7, #7]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7ff fee3 	bl	800a27c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	f7fd fb22 	bl	8007b00 <memp_malloc>
 800a4bc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d03f      	beq.n	800a544 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a4c4:	229c      	movs	r2, #156	; 0x9c
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f009 fc95 	bl	8013df8 <memset>
    pcb->prio = prio;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	79fa      	ldrb	r2, [r7, #7]
 800a4d2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a4da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a4e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	22ff      	movs	r2, #255	; 0xff
 800a4f2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a4fa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2206      	movs	r2, #6
 800a500:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2206      	movs	r2, #6
 800a508:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a510:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2201      	movs	r2, #1
 800a516:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a51a:	4b0d      	ldr	r3, [pc, #52]	; (800a550 <tcp_alloc+0xf8>)
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a522:	4b0c      	ldr	r3, [pc, #48]	; (800a554 <tcp_alloc+0xfc>)
 800a524:	781a      	ldrb	r2, [r3, #0]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a530:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4a08      	ldr	r2, [pc, #32]	; (800a558 <tcp_alloc+0x100>)
 800a538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4a07      	ldr	r2, [pc, #28]	; (800a55c <tcp_alloc+0x104>)
 800a540:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a544:	68fb      	ldr	r3, [r7, #12]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	20006d0c 	.word	0x20006d0c
 800a554:	200000ce 	.word	0x200000ce
 800a558:	0800a211 	.word	0x0800a211
 800a55c:	006ddd00 	.word	0x006ddd00

0800a560 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800a56a:	2040      	movs	r0, #64	; 0x40
 800a56c:	f7ff ff74 	bl	800a458 <tcp_alloc>
 800a570:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800a572:	68fb      	ldr	r3, [r7, #12]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	611a      	str	r2, [r3, #16]
  }
}
 800a592:	bf00      	nop
 800a594:	370c      	adds	r7, #12
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
	...

0800a5a0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00e      	beq.n	800a5ce <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	7d1b      	ldrb	r3, [r3, #20]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d106      	bne.n	800a5c6 <tcp_recv+0x26>
 800a5b8:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <tcp_recv+0x38>)
 800a5ba:	f240 72df 	movw	r2, #2015	; 0x7df
 800a5be:	4907      	ldr	r1, [pc, #28]	; (800a5dc <tcp_recv+0x3c>)
 800a5c0:	4807      	ldr	r0, [pc, #28]	; (800a5e0 <tcp_recv+0x40>)
 800a5c2:	f009 fc21 	bl	8013e08 <iprintf>
    pcb->recv = recv;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800a5ce:	bf00      	nop
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	0801629c 	.word	0x0801629c
 800a5dc:	08016838 	.word	0x08016838
 800a5e0:	080162e0 	.word	0x080162e0

0800a5e4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00e      	beq.n	800a612 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	7d1b      	ldrb	r3, [r3, #20]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d106      	bne.n	800a60a <tcp_sent+0x26>
 800a5fc:	4b07      	ldr	r3, [pc, #28]	; (800a61c <tcp_sent+0x38>)
 800a5fe:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800a602:	4907      	ldr	r1, [pc, #28]	; (800a620 <tcp_sent+0x3c>)
 800a604:	4807      	ldr	r0, [pc, #28]	; (800a624 <tcp_sent+0x40>)
 800a606:	f009 fbff 	bl	8013e08 <iprintf>
    pcb->sent = sent;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	683a      	ldr	r2, [r7, #0]
 800a60e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800a612:	bf00      	nop
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	0801629c 	.word	0x0801629c
 800a620:	08016860 	.word	0x08016860
 800a624:	080162e0 	.word	0x080162e0

0800a628 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00e      	beq.n	800a656 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	7d1b      	ldrb	r3, [r3, #20]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d106      	bne.n	800a64e <tcp_err+0x26>
 800a640:	4b07      	ldr	r3, [pc, #28]	; (800a660 <tcp_err+0x38>)
 800a642:	f640 020d 	movw	r2, #2061	; 0x80d
 800a646:	4907      	ldr	r1, [pc, #28]	; (800a664 <tcp_err+0x3c>)
 800a648:	4807      	ldr	r0, [pc, #28]	; (800a668 <tcp_err+0x40>)
 800a64a:	f009 fbdd 	bl	8013e08 <iprintf>
    pcb->errf = err;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	0801629c 	.word	0x0801629c
 800a664:	08016888 	.word	0x08016888
 800a668:	080162e0 	.word	0x080162e0

0800a66c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	4613      	mov	r3, r2
 800a678:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d107      	bne.n	800a690 <tcp_poll+0x24>
 800a680:	4b0e      	ldr	r3, [pc, #56]	; (800a6bc <tcp_poll+0x50>)
 800a682:	f640 023d 	movw	r2, #2109	; 0x83d
 800a686:	490e      	ldr	r1, [pc, #56]	; (800a6c0 <tcp_poll+0x54>)
 800a688:	480e      	ldr	r0, [pc, #56]	; (800a6c4 <tcp_poll+0x58>)
 800a68a:	f009 fbbd 	bl	8013e08 <iprintf>
 800a68e:	e011      	b.n	800a6b4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	7d1b      	ldrb	r3, [r3, #20]
 800a694:	2b01      	cmp	r3, #1
 800a696:	d106      	bne.n	800a6a6 <tcp_poll+0x3a>
 800a698:	4b08      	ldr	r3, [pc, #32]	; (800a6bc <tcp_poll+0x50>)
 800a69a:	f640 023e 	movw	r2, #2110	; 0x83e
 800a69e:	490a      	ldr	r1, [pc, #40]	; (800a6c8 <tcp_poll+0x5c>)
 800a6a0:	4808      	ldr	r0, [pc, #32]	; (800a6c4 <tcp_poll+0x58>)
 800a6a2:	f009 fbb1 	bl	8013e08 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	79fa      	ldrb	r2, [r7, #7]
 800a6b2:	775a      	strb	r2, [r3, #29]
}
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	0801629c 	.word	0x0801629c
 800a6c0:	080168b0 	.word	0x080168b0
 800a6c4:	080162e0 	.word	0x080162e0
 800a6c8:	080168c8 	.word	0x080168c8

0800a6cc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d107      	bne.n	800a6ea <tcp_pcb_purge+0x1e>
 800a6da:	4b21      	ldr	r3, [pc, #132]	; (800a760 <tcp_pcb_purge+0x94>)
 800a6dc:	f640 0251 	movw	r2, #2129	; 0x851
 800a6e0:	4920      	ldr	r1, [pc, #128]	; (800a764 <tcp_pcb_purge+0x98>)
 800a6e2:	4821      	ldr	r0, [pc, #132]	; (800a768 <tcp_pcb_purge+0x9c>)
 800a6e4:	f009 fb90 	bl	8013e08 <iprintf>
 800a6e8:	e037      	b.n	800a75a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	7d1b      	ldrb	r3, [r3, #20]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d033      	beq.n	800a75a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a6f6:	2b0a      	cmp	r3, #10
 800a6f8:	d02f      	beq.n	800a75a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d02b      	beq.n	800a75a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a706:	2b00      	cmp	r3, #0
 800a708:	d007      	beq.n	800a71a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fe f85c 	bl	80087cc <pbuf_free>
      pcb->refused_data = NULL;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d002      	beq.n	800a728 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f986 	bl	800aa34 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a72e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a734:	4618      	mov	r0, r3
 800a736:	f7ff fd11 	bl	800a15c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a73e:	4618      	mov	r0, r3
 800a740:	f7ff fd0c 	bl	800a15c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	66da      	str	r2, [r3, #108]	; 0x6c
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	0801629c 	.word	0x0801629c
 800a764:	080168e8 	.word	0x080168e8
 800a768:	080162e0 	.word	0x080162e0

0800a76c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d106      	bne.n	800a78a <tcp_pcb_remove+0x1e>
 800a77c:	4b3e      	ldr	r3, [pc, #248]	; (800a878 <tcp_pcb_remove+0x10c>)
 800a77e:	f640 0283 	movw	r2, #2179	; 0x883
 800a782:	493e      	ldr	r1, [pc, #248]	; (800a87c <tcp_pcb_remove+0x110>)
 800a784:	483e      	ldr	r0, [pc, #248]	; (800a880 <tcp_pcb_remove+0x114>)
 800a786:	f009 fb3f 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d106      	bne.n	800a79e <tcp_pcb_remove+0x32>
 800a790:	4b39      	ldr	r3, [pc, #228]	; (800a878 <tcp_pcb_remove+0x10c>)
 800a792:	f640 0284 	movw	r2, #2180	; 0x884
 800a796:	493b      	ldr	r1, [pc, #236]	; (800a884 <tcp_pcb_remove+0x118>)
 800a798:	4839      	ldr	r0, [pc, #228]	; (800a880 <tcp_pcb_remove+0x114>)
 800a79a:	f009 fb35 	bl	8013e08 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d105      	bne.n	800a7b4 <tcp_pcb_remove+0x48>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68da      	ldr	r2, [r3, #12]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	601a      	str	r2, [r3, #0]
 800a7b2:	e013      	b.n	800a7dc <tcp_pcb_remove+0x70>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	60fb      	str	r3, [r7, #12]
 800a7ba:	e00c      	b.n	800a7d6 <tcp_pcb_remove+0x6a>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d104      	bne.n	800a7d0 <tcp_pcb_remove+0x64>
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	68da      	ldr	r2, [r3, #12]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	60da      	str	r2, [r3, #12]
 800a7ce:	e005      	b.n	800a7dc <tcp_pcb_remove+0x70>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	60fb      	str	r3, [r7, #12]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1ef      	bne.n	800a7bc <tcp_pcb_remove+0x50>
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a7e2:	6838      	ldr	r0, [r7, #0]
 800a7e4:	f7ff ff72 	bl	800a6cc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	7d1b      	ldrb	r3, [r3, #20]
 800a7ec:	2b0a      	cmp	r3, #10
 800a7ee:	d013      	beq.n	800a818 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d00f      	beq.n	800a818 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	8b5b      	ldrh	r3, [r3, #26]
 800a7fc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a800:	2b00      	cmp	r3, #0
 800a802:	d009      	beq.n	800a818 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	8b5b      	ldrh	r3, [r3, #26]
 800a808:	f043 0302 	orr.w	r3, r3, #2
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a812:	6838      	ldr	r0, [r7, #0]
 800a814:	f003 fbc2 	bl	800df9c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	7d1b      	ldrb	r3, [r3, #20]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d020      	beq.n	800a862 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a824:	2b00      	cmp	r3, #0
 800a826:	d006      	beq.n	800a836 <tcp_pcb_remove+0xca>
 800a828:	4b13      	ldr	r3, [pc, #76]	; (800a878 <tcp_pcb_remove+0x10c>)
 800a82a:	f640 0293 	movw	r2, #2195	; 0x893
 800a82e:	4916      	ldr	r1, [pc, #88]	; (800a888 <tcp_pcb_remove+0x11c>)
 800a830:	4813      	ldr	r0, [pc, #76]	; (800a880 <tcp_pcb_remove+0x114>)
 800a832:	f009 fae9 	bl	8013e08 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d006      	beq.n	800a84c <tcp_pcb_remove+0xe0>
 800a83e:	4b0e      	ldr	r3, [pc, #56]	; (800a878 <tcp_pcb_remove+0x10c>)
 800a840:	f640 0294 	movw	r2, #2196	; 0x894
 800a844:	4911      	ldr	r1, [pc, #68]	; (800a88c <tcp_pcb_remove+0x120>)
 800a846:	480e      	ldr	r0, [pc, #56]	; (800a880 <tcp_pcb_remove+0x114>)
 800a848:	f009 fade 	bl	8013e08 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a850:	2b00      	cmp	r3, #0
 800a852:	d006      	beq.n	800a862 <tcp_pcb_remove+0xf6>
 800a854:	4b08      	ldr	r3, [pc, #32]	; (800a878 <tcp_pcb_remove+0x10c>)
 800a856:	f640 0296 	movw	r2, #2198	; 0x896
 800a85a:	490d      	ldr	r1, [pc, #52]	; (800a890 <tcp_pcb_remove+0x124>)
 800a85c:	4808      	ldr	r0, [pc, #32]	; (800a880 <tcp_pcb_remove+0x114>)
 800a85e:	f009 fad3 	bl	8013e08 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2200      	movs	r2, #0
 800a866:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	2200      	movs	r2, #0
 800a86c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	0801629c 	.word	0x0801629c
 800a87c:	08016904 	.word	0x08016904
 800a880:	080162e0 	.word	0x080162e0
 800a884:	08016920 	.word	0x08016920
 800a888:	08016940 	.word	0x08016940
 800a88c:	08016958 	.word	0x08016958
 800a890:	08016974 	.word	0x08016974

0800a894 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d106      	bne.n	800a8b0 <tcp_next_iss+0x1c>
 800a8a2:	4b0a      	ldr	r3, [pc, #40]	; (800a8cc <tcp_next_iss+0x38>)
 800a8a4:	f640 02af 	movw	r2, #2223	; 0x8af
 800a8a8:	4909      	ldr	r1, [pc, #36]	; (800a8d0 <tcp_next_iss+0x3c>)
 800a8aa:	480a      	ldr	r0, [pc, #40]	; (800a8d4 <tcp_next_iss+0x40>)
 800a8ac:	f009 faac 	bl	8013e08 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a8b0:	4b09      	ldr	r3, [pc, #36]	; (800a8d8 <tcp_next_iss+0x44>)
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	4b09      	ldr	r3, [pc, #36]	; (800a8dc <tcp_next_iss+0x48>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	4a07      	ldr	r2, [pc, #28]	; (800a8d8 <tcp_next_iss+0x44>)
 800a8bc:	6013      	str	r3, [r2, #0]
  return iss;
 800a8be:	4b06      	ldr	r3, [pc, #24]	; (800a8d8 <tcp_next_iss+0x44>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	0801629c 	.word	0x0801629c
 800a8d0:	0801698c 	.word	0x0801698c
 800a8d4:	080162e0 	.word	0x080162e0
 800a8d8:	2000000c 	.word	0x2000000c
 800a8dc:	20006d0c 	.word	0x20006d0c

0800a8e0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b086      	sub	sp, #24
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
 800a8ec:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d106      	bne.n	800a902 <tcp_eff_send_mss_netif+0x22>
 800a8f4:	4b14      	ldr	r3, [pc, #80]	; (800a948 <tcp_eff_send_mss_netif+0x68>)
 800a8f6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a8fa:	4914      	ldr	r1, [pc, #80]	; (800a94c <tcp_eff_send_mss_netif+0x6c>)
 800a8fc:	4814      	ldr	r0, [pc, #80]	; (800a950 <tcp_eff_send_mss_netif+0x70>)
 800a8fe:	f009 fa83 	bl	8013e08 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a908:	89fb      	ldrh	r3, [r7, #14]
 800a90a:	e019      	b.n	800a940 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a910:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a912:	8afb      	ldrh	r3, [r7, #22]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d012      	beq.n	800a93e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a918:	2328      	movs	r3, #40	; 0x28
 800a91a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a91c:	8afa      	ldrh	r2, [r7, #22]
 800a91e:	8abb      	ldrh	r3, [r7, #20]
 800a920:	429a      	cmp	r2, r3
 800a922:	d904      	bls.n	800a92e <tcp_eff_send_mss_netif+0x4e>
 800a924:	8afa      	ldrh	r2, [r7, #22]
 800a926:	8abb      	ldrh	r3, [r7, #20]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	e000      	b.n	800a930 <tcp_eff_send_mss_netif+0x50>
 800a92e:	2300      	movs	r3, #0
 800a930:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a932:	8a7a      	ldrh	r2, [r7, #18]
 800a934:	89fb      	ldrh	r3, [r7, #14]
 800a936:	4293      	cmp	r3, r2
 800a938:	bf28      	it	cs
 800a93a:	4613      	movcs	r3, r2
 800a93c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a93e:	89fb      	ldrh	r3, [r7, #14]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3718      	adds	r7, #24
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	0801629c 	.word	0x0801629c
 800a94c:	080169a8 	.word	0x080169a8
 800a950:	080162e0 	.word	0x080162e0

0800a954 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d119      	bne.n	800a99c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a968:	4b10      	ldr	r3, [pc, #64]	; (800a9ac <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a96a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a96e:	4910      	ldr	r1, [pc, #64]	; (800a9b0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a970:	4810      	ldr	r0, [pc, #64]	; (800a9b4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a972:	f009 fa49 	bl	8013e08 <iprintf>

  while (pcb != NULL) {
 800a976:	e011      	b.n	800a99c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	429a      	cmp	r2, r3
 800a982:	d108      	bne.n	800a996 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f7fe fd1a 	bl	80093c4 <tcp_abort>
      pcb = next;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	60fb      	str	r3, [r7, #12]
 800a994:	e002      	b.n	800a99c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1ea      	bne.n	800a978 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	0801629c 	.word	0x0801629c
 800a9b0:	080169d0 	.word	0x080169d0
 800a9b4:	080162e0 	.word	0x080162e0

0800a9b8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d02a      	beq.n	800aa1e <tcp_netif_ip_addr_changed+0x66>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d026      	beq.n	800aa1e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a9d0:	4b15      	ldr	r3, [pc, #84]	; (800aa28 <tcp_netif_ip_addr_changed+0x70>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff ffbc 	bl	800a954 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a9dc:	4b13      	ldr	r3, [pc, #76]	; (800aa2c <tcp_netif_ip_addr_changed+0x74>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7ff ffb6 	bl	800a954 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d017      	beq.n	800aa1e <tcp_netif_ip_addr_changed+0x66>
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d013      	beq.n	800aa1e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a9f6:	4b0e      	ldr	r3, [pc, #56]	; (800aa30 <tcp_netif_ip_addr_changed+0x78>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60fb      	str	r3, [r7, #12]
 800a9fc:	e00c      	b.n	800aa18 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d103      	bne.n	800aa12 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	60fb      	str	r3, [r7, #12]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1ef      	bne.n	800a9fe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800aa1e:	bf00      	nop
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	20006d08 	.word	0x20006d08
 800aa2c:	20006d14 	.word	0x20006d14
 800aa30:	20006d10 	.word	0x20006d10

0800aa34 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d007      	beq.n	800aa54 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7ff fb87 	bl	800a15c <tcp_segs_free>
    pcb->ooseq = NULL;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800aa54:	bf00      	nop
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800aa5c:	b590      	push	{r4, r7, lr}
 800aa5e:	b08d      	sub	sp, #52	; 0x34
 800aa60:	af04      	add	r7, sp, #16
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d105      	bne.n	800aa78 <tcp_input+0x1c>
 800aa6c:	4b9b      	ldr	r3, [pc, #620]	; (800acdc <tcp_input+0x280>)
 800aa6e:	2283      	movs	r2, #131	; 0x83
 800aa70:	499b      	ldr	r1, [pc, #620]	; (800ace0 <tcp_input+0x284>)
 800aa72:	489c      	ldr	r0, [pc, #624]	; (800ace4 <tcp_input+0x288>)
 800aa74:	f009 f9c8 	bl	8013e08 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	4a9a      	ldr	r2, [pc, #616]	; (800ace8 <tcp_input+0x28c>)
 800aa7e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	895b      	ldrh	r3, [r3, #10]
 800aa84:	2b13      	cmp	r3, #19
 800aa86:	f240 83c4 	bls.w	800b212 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800aa8a:	4b98      	ldr	r3, [pc, #608]	; (800acec <tcp_input+0x290>)
 800aa8c:	695b      	ldr	r3, [r3, #20]
 800aa8e:	4a97      	ldr	r2, [pc, #604]	; (800acec <tcp_input+0x290>)
 800aa90:	6812      	ldr	r2, [r2, #0]
 800aa92:	4611      	mov	r1, r2
 800aa94:	4618      	mov	r0, r3
 800aa96:	f008 fa1f 	bl	8012ed8 <ip4_addr_isbroadcast_u32>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f040 83ba 	bne.w	800b216 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800aaa2:	4b92      	ldr	r3, [pc, #584]	; (800acec <tcp_input+0x290>)
 800aaa4:	695b      	ldr	r3, [r3, #20]
 800aaa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800aaaa:	2be0      	cmp	r3, #224	; 0xe0
 800aaac:	f000 83b3 	beq.w	800b216 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800aab0:	4b8d      	ldr	r3, [pc, #564]	; (800ace8 <tcp_input+0x28c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	899b      	ldrh	r3, [r3, #12]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fc fba3 	bl	8007204 <lwip_htons>
 800aabe:	4603      	mov	r3, r0
 800aac0:	0b1b      	lsrs	r3, r3, #12
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800aaca:	7cbb      	ldrb	r3, [r7, #18]
 800aacc:	2b13      	cmp	r3, #19
 800aace:	f240 83a4 	bls.w	800b21a <tcp_input+0x7be>
 800aad2:	7cbb      	ldrb	r3, [r7, #18]
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	891b      	ldrh	r3, [r3, #8]
 800aada:	429a      	cmp	r2, r3
 800aadc:	f200 839d 	bhi.w	800b21a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800aae0:	7cbb      	ldrb	r3, [r7, #18]
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	3b14      	subs	r3, #20
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	4b81      	ldr	r3, [pc, #516]	; (800acf0 <tcp_input+0x294>)
 800aaea:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800aaec:	4b81      	ldr	r3, [pc, #516]	; (800acf4 <tcp_input+0x298>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	895a      	ldrh	r2, [r3, #10]
 800aaf6:	7cbb      	ldrb	r3, [r7, #18]
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d309      	bcc.n	800ab12 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800aafe:	4b7c      	ldr	r3, [pc, #496]	; (800acf0 <tcp_input+0x294>)
 800ab00:	881a      	ldrh	r2, [r3, #0]
 800ab02:	4b7d      	ldr	r3, [pc, #500]	; (800acf8 <tcp_input+0x29c>)
 800ab04:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ab06:	7cbb      	ldrb	r3, [r7, #18]
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7fd fdd8 	bl	80086c0 <pbuf_remove_header>
 800ab10:	e04e      	b.n	800abb0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d105      	bne.n	800ab26 <tcp_input+0xca>
 800ab1a:	4b70      	ldr	r3, [pc, #448]	; (800acdc <tcp_input+0x280>)
 800ab1c:	22c2      	movs	r2, #194	; 0xc2
 800ab1e:	4977      	ldr	r1, [pc, #476]	; (800acfc <tcp_input+0x2a0>)
 800ab20:	4870      	ldr	r0, [pc, #448]	; (800ace4 <tcp_input+0x288>)
 800ab22:	f009 f971 	bl	8013e08 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ab26:	2114      	movs	r1, #20
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7fd fdc9 	bl	80086c0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	895a      	ldrh	r2, [r3, #10]
 800ab32:	4b71      	ldr	r3, [pc, #452]	; (800acf8 <tcp_input+0x29c>)
 800ab34:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ab36:	4b6e      	ldr	r3, [pc, #440]	; (800acf0 <tcp_input+0x294>)
 800ab38:	881a      	ldrh	r2, [r3, #0]
 800ab3a:	4b6f      	ldr	r3, [pc, #444]	; (800acf8 <tcp_input+0x29c>)
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ab42:	4b6d      	ldr	r3, [pc, #436]	; (800acf8 <tcp_input+0x29c>)
 800ab44:	881b      	ldrh	r3, [r3, #0]
 800ab46:	4619      	mov	r1, r3
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7fd fdb9 	bl	80086c0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	895b      	ldrh	r3, [r3, #10]
 800ab54:	8a3a      	ldrh	r2, [r7, #16]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	f200 8361 	bhi.w	800b21e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	4a64      	ldr	r2, [pc, #400]	; (800acf4 <tcp_input+0x298>)
 800ab64:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	8a3a      	ldrh	r2, [r7, #16]
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fd fda6 	bl	80086c0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	891a      	ldrh	r2, [r3, #8]
 800ab78:	8a3b      	ldrh	r3, [r7, #16]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	895b      	ldrh	r3, [r3, #10]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d005      	beq.n	800ab96 <tcp_input+0x13a>
 800ab8a:	4b54      	ldr	r3, [pc, #336]	; (800acdc <tcp_input+0x280>)
 800ab8c:	22df      	movs	r2, #223	; 0xdf
 800ab8e:	495c      	ldr	r1, [pc, #368]	; (800ad00 <tcp_input+0x2a4>)
 800ab90:	4854      	ldr	r0, [pc, #336]	; (800ace4 <tcp_input+0x288>)
 800ab92:	f009 f939 	bl	8013e08 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	891a      	ldrh	r2, [r3, #8]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	891b      	ldrh	r3, [r3, #8]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d005      	beq.n	800abb0 <tcp_input+0x154>
 800aba4:	4b4d      	ldr	r3, [pc, #308]	; (800acdc <tcp_input+0x280>)
 800aba6:	22e0      	movs	r2, #224	; 0xe0
 800aba8:	4956      	ldr	r1, [pc, #344]	; (800ad04 <tcp_input+0x2a8>)
 800abaa:	484e      	ldr	r0, [pc, #312]	; (800ace4 <tcp_input+0x288>)
 800abac:	f009 f92c 	bl	8013e08 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800abb0:	4b4d      	ldr	r3, [pc, #308]	; (800ace8 <tcp_input+0x28c>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	881b      	ldrh	r3, [r3, #0]
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	4a4b      	ldr	r2, [pc, #300]	; (800ace8 <tcp_input+0x28c>)
 800abba:	6814      	ldr	r4, [r2, #0]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fc fb21 	bl	8007204 <lwip_htons>
 800abc2:	4603      	mov	r3, r0
 800abc4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800abc6:	4b48      	ldr	r3, [pc, #288]	; (800ace8 <tcp_input+0x28c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	885b      	ldrh	r3, [r3, #2]
 800abcc:	b29b      	uxth	r3, r3
 800abce:	4a46      	ldr	r2, [pc, #280]	; (800ace8 <tcp_input+0x28c>)
 800abd0:	6814      	ldr	r4, [r2, #0]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fc fb16 	bl	8007204 <lwip_htons>
 800abd8:	4603      	mov	r3, r0
 800abda:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800abdc:	4b42      	ldr	r3, [pc, #264]	; (800ace8 <tcp_input+0x28c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	4a41      	ldr	r2, [pc, #260]	; (800ace8 <tcp_input+0x28c>)
 800abe4:	6814      	ldr	r4, [r2, #0]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fc fb21 	bl	800722e <lwip_htonl>
 800abec:	4603      	mov	r3, r0
 800abee:	6063      	str	r3, [r4, #4]
 800abf0:	6863      	ldr	r3, [r4, #4]
 800abf2:	4a45      	ldr	r2, [pc, #276]	; (800ad08 <tcp_input+0x2ac>)
 800abf4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800abf6:	4b3c      	ldr	r3, [pc, #240]	; (800ace8 <tcp_input+0x28c>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	4a3a      	ldr	r2, [pc, #232]	; (800ace8 <tcp_input+0x28c>)
 800abfe:	6814      	ldr	r4, [r2, #0]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fc fb14 	bl	800722e <lwip_htonl>
 800ac06:	4603      	mov	r3, r0
 800ac08:	60a3      	str	r3, [r4, #8]
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	4a3f      	ldr	r2, [pc, #252]	; (800ad0c <tcp_input+0x2b0>)
 800ac0e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ac10:	4b35      	ldr	r3, [pc, #212]	; (800ace8 <tcp_input+0x28c>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	89db      	ldrh	r3, [r3, #14]
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	4a33      	ldr	r2, [pc, #204]	; (800ace8 <tcp_input+0x28c>)
 800ac1a:	6814      	ldr	r4, [r2, #0]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fc faf1 	bl	8007204 <lwip_htons>
 800ac22:	4603      	mov	r3, r0
 800ac24:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ac26:	4b30      	ldr	r3, [pc, #192]	; (800ace8 <tcp_input+0x28c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	899b      	ldrh	r3, [r3, #12]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fc fae8 	bl	8007204 <lwip_htons>
 800ac34:	4603      	mov	r3, r0
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	4b34      	ldr	r3, [pc, #208]	; (800ad10 <tcp_input+0x2b4>)
 800ac40:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	891a      	ldrh	r2, [r3, #8]
 800ac46:	4b33      	ldr	r3, [pc, #204]	; (800ad14 <tcp_input+0x2b8>)
 800ac48:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ac4a:	4b31      	ldr	r3, [pc, #196]	; (800ad10 <tcp_input+0x2b4>)
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	f003 0303 	and.w	r3, r3, #3
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00c      	beq.n	800ac70 <tcp_input+0x214>
    tcplen++;
 800ac56:	4b2f      	ldr	r3, [pc, #188]	; (800ad14 <tcp_input+0x2b8>)
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	4b2d      	ldr	r3, [pc, #180]	; (800ad14 <tcp_input+0x2b8>)
 800ac60:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	891a      	ldrh	r2, [r3, #8]
 800ac66:	4b2b      	ldr	r3, [pc, #172]	; (800ad14 <tcp_input+0x2b8>)
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	f200 82d9 	bhi.w	800b222 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ac70:	2300      	movs	r3, #0
 800ac72:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac74:	4b28      	ldr	r3, [pc, #160]	; (800ad18 <tcp_input+0x2bc>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	61fb      	str	r3, [r7, #28]
 800ac7a:	e09d      	b.n	800adb8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	7d1b      	ldrb	r3, [r3, #20]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d105      	bne.n	800ac90 <tcp_input+0x234>
 800ac84:	4b15      	ldr	r3, [pc, #84]	; (800acdc <tcp_input+0x280>)
 800ac86:	22fb      	movs	r2, #251	; 0xfb
 800ac88:	4924      	ldr	r1, [pc, #144]	; (800ad1c <tcp_input+0x2c0>)
 800ac8a:	4816      	ldr	r0, [pc, #88]	; (800ace4 <tcp_input+0x288>)
 800ac8c:	f009 f8bc 	bl	8013e08 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	7d1b      	ldrb	r3, [r3, #20]
 800ac94:	2b0a      	cmp	r3, #10
 800ac96:	d105      	bne.n	800aca4 <tcp_input+0x248>
 800ac98:	4b10      	ldr	r3, [pc, #64]	; (800acdc <tcp_input+0x280>)
 800ac9a:	22fc      	movs	r2, #252	; 0xfc
 800ac9c:	4920      	ldr	r1, [pc, #128]	; (800ad20 <tcp_input+0x2c4>)
 800ac9e:	4811      	ldr	r0, [pc, #68]	; (800ace4 <tcp_input+0x288>)
 800aca0:	f009 f8b2 	bl	8013e08 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	7d1b      	ldrb	r3, [r3, #20]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d105      	bne.n	800acb8 <tcp_input+0x25c>
 800acac:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <tcp_input+0x280>)
 800acae:	22fd      	movs	r2, #253	; 0xfd
 800acb0:	491c      	ldr	r1, [pc, #112]	; (800ad24 <tcp_input+0x2c8>)
 800acb2:	480c      	ldr	r0, [pc, #48]	; (800ace4 <tcp_input+0x288>)
 800acb4:	f009 f8a8 	bl	8013e08 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	7a1b      	ldrb	r3, [r3, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d033      	beq.n	800ad28 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	7a1a      	ldrb	r2, [r3, #8]
 800acc4:	4b09      	ldr	r3, [pc, #36]	; (800acec <tcp_input+0x290>)
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800accc:	3301      	adds	r3, #1
 800acce:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d029      	beq.n	800ad28 <tcp_input+0x2cc>
      prev = pcb;
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	61bb      	str	r3, [r7, #24]
      continue;
 800acd8:	e06b      	b.n	800adb2 <tcp_input+0x356>
 800acda:	bf00      	nop
 800acdc:	08016a04 	.word	0x08016a04
 800ace0:	08016a38 	.word	0x08016a38
 800ace4:	08016a50 	.word	0x08016a50
 800ace8:	200000e0 	.word	0x200000e0
 800acec:	200037a4 	.word	0x200037a4
 800acf0:	200000e4 	.word	0x200000e4
 800acf4:	200000e8 	.word	0x200000e8
 800acf8:	200000e6 	.word	0x200000e6
 800acfc:	08016a78 	.word	0x08016a78
 800ad00:	08016a88 	.word	0x08016a88
 800ad04:	08016a94 	.word	0x08016a94
 800ad08:	200000f0 	.word	0x200000f0
 800ad0c:	200000f4 	.word	0x200000f4
 800ad10:	200000fc 	.word	0x200000fc
 800ad14:	200000fa 	.word	0x200000fa
 800ad18:	20006d08 	.word	0x20006d08
 800ad1c:	08016ab4 	.word	0x08016ab4
 800ad20:	08016adc 	.word	0x08016adc
 800ad24:	08016b08 	.word	0x08016b08
    }

    if (pcb->remote_port == tcphdr->src &&
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	8b1a      	ldrh	r2, [r3, #24]
 800ad2c:	4b94      	ldr	r3, [pc, #592]	; (800af80 <tcp_input+0x524>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d13a      	bne.n	800adae <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	8ada      	ldrh	r2, [r3, #22]
 800ad3c:	4b90      	ldr	r3, [pc, #576]	; (800af80 <tcp_input+0x524>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	885b      	ldrh	r3, [r3, #2]
 800ad42:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d132      	bne.n	800adae <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	4b8d      	ldr	r3, [pc, #564]	; (800af84 <tcp_input+0x528>)
 800ad4e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d12c      	bne.n	800adae <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	4b8a      	ldr	r3, [pc, #552]	; (800af84 <tcp_input+0x528>)
 800ad5a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d126      	bne.n	800adae <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	69fa      	ldr	r2, [r7, #28]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d106      	bne.n	800ad78 <tcp_input+0x31c>
 800ad6a:	4b87      	ldr	r3, [pc, #540]	; (800af88 <tcp_input+0x52c>)
 800ad6c:	f240 120d 	movw	r2, #269	; 0x10d
 800ad70:	4986      	ldr	r1, [pc, #536]	; (800af8c <tcp_input+0x530>)
 800ad72:	4887      	ldr	r0, [pc, #540]	; (800af90 <tcp_input+0x534>)
 800ad74:	f009 f848 	bl	8013e08 <iprintf>
      if (prev != NULL) {
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00a      	beq.n	800ad94 <tcp_input+0x338>
        prev->next = pcb->next;
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	68da      	ldr	r2, [r3, #12]
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ad86:	4b83      	ldr	r3, [pc, #524]	; (800af94 <tcp_input+0x538>)
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ad8e:	4a81      	ldr	r2, [pc, #516]	; (800af94 <tcp_input+0x538>)
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	69fa      	ldr	r2, [r7, #28]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d111      	bne.n	800adc2 <tcp_input+0x366>
 800ad9e:	4b7a      	ldr	r3, [pc, #488]	; (800af88 <tcp_input+0x52c>)
 800ada0:	f240 1215 	movw	r2, #277	; 0x115
 800ada4:	497c      	ldr	r1, [pc, #496]	; (800af98 <tcp_input+0x53c>)
 800ada6:	487a      	ldr	r0, [pc, #488]	; (800af90 <tcp_input+0x534>)
 800ada8:	f009 f82e 	bl	8013e08 <iprintf>
      break;
 800adac:	e009      	b.n	800adc2 <tcp_input+0x366>
    }
    prev = pcb;
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	61fb      	str	r3, [r7, #28]
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f47f af5e 	bne.w	800ac7c <tcp_input+0x220>
 800adc0:	e000      	b.n	800adc4 <tcp_input+0x368>
      break;
 800adc2:	bf00      	nop
  }

  if (pcb == NULL) {
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f040 8095 	bne.w	800aef6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800adcc:	4b73      	ldr	r3, [pc, #460]	; (800af9c <tcp_input+0x540>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	61fb      	str	r3, [r7, #28]
 800add2:	e03f      	b.n	800ae54 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	7d1b      	ldrb	r3, [r3, #20]
 800add8:	2b0a      	cmp	r3, #10
 800adda:	d006      	beq.n	800adea <tcp_input+0x38e>
 800addc:	4b6a      	ldr	r3, [pc, #424]	; (800af88 <tcp_input+0x52c>)
 800adde:	f240 121f 	movw	r2, #287	; 0x11f
 800ade2:	496f      	ldr	r1, [pc, #444]	; (800afa0 <tcp_input+0x544>)
 800ade4:	486a      	ldr	r0, [pc, #424]	; (800af90 <tcp_input+0x534>)
 800ade6:	f009 f80f 	bl	8013e08 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	7a1b      	ldrb	r3, [r3, #8]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d009      	beq.n	800ae06 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	7a1a      	ldrb	r2, [r3, #8]
 800adf6:	4b63      	ldr	r3, [pc, #396]	; (800af84 <tcp_input+0x528>)
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800adfe:	3301      	adds	r3, #1
 800ae00:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d122      	bne.n	800ae4c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	8b1a      	ldrh	r2, [r3, #24]
 800ae0a:	4b5d      	ldr	r3, [pc, #372]	; (800af80 <tcp_input+0x524>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d11b      	bne.n	800ae4e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	8ada      	ldrh	r2, [r3, #22]
 800ae1a:	4b59      	ldr	r3, [pc, #356]	; (800af80 <tcp_input+0x524>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	885b      	ldrh	r3, [r3, #2]
 800ae20:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d113      	bne.n	800ae4e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	4b56      	ldr	r3, [pc, #344]	; (800af84 <tcp_input+0x528>)
 800ae2c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d10d      	bne.n	800ae4e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	4b53      	ldr	r3, [pc, #332]	; (800af84 <tcp_input+0x528>)
 800ae38:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d107      	bne.n	800ae4e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ae3e:	69f8      	ldr	r0, [r7, #28]
 800ae40:	f000 fb54 	bl	800b4ec <tcp_timewait_input>
        }
        pbuf_free(p);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7fd fcc1 	bl	80087cc <pbuf_free>
        return;
 800ae4a:	e1f0      	b.n	800b22e <tcp_input+0x7d2>
        continue;
 800ae4c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	61fb      	str	r3, [r7, #28]
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1bc      	bne.n	800add4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ae5e:	4b51      	ldr	r3, [pc, #324]	; (800afa4 <tcp_input+0x548>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	617b      	str	r3, [r7, #20]
 800ae64:	e02a      	b.n	800aebc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	7a1b      	ldrb	r3, [r3, #8]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00c      	beq.n	800ae88 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	7a1a      	ldrb	r2, [r3, #8]
 800ae72:	4b44      	ldr	r3, [pc, #272]	; (800af84 <tcp_input+0x528>)
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d002      	beq.n	800ae88 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	61bb      	str	r3, [r7, #24]
        continue;
 800ae86:	e016      	b.n	800aeb6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	8ada      	ldrh	r2, [r3, #22]
 800ae8c:	4b3c      	ldr	r3, [pc, #240]	; (800af80 <tcp_input+0x524>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	885b      	ldrh	r3, [r3, #2]
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d10c      	bne.n	800aeb2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	4b39      	ldr	r3, [pc, #228]	; (800af84 <tcp_input+0x528>)
 800ae9e:	695b      	ldr	r3, [r3, #20]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d00f      	beq.n	800aec4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00d      	beq.n	800aec6 <tcp_input+0x46a>
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d009      	beq.n	800aec6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	617b      	str	r3, [r7, #20]
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1d1      	bne.n	800ae66 <tcp_input+0x40a>
 800aec2:	e000      	b.n	800aec6 <tcp_input+0x46a>
            break;
 800aec4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d014      	beq.n	800aef6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00a      	beq.n	800aee8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	68da      	ldr	r2, [r3, #12]
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aeda:	4b32      	ldr	r3, [pc, #200]	; (800afa4 <tcp_input+0x548>)
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800aee2:	4a30      	ldr	r2, [pc, #192]	; (800afa4 <tcp_input+0x548>)
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800aee8:	6978      	ldr	r0, [r7, #20]
 800aeea:	f000 fa01 	bl	800b2f0 <tcp_listen_input>
      }
      pbuf_free(p);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f7fd fc6c 	bl	80087cc <pbuf_free>
      return;
 800aef4:	e19b      	b.n	800b22e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 8160 	beq.w	800b1be <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800aefe:	4b2a      	ldr	r3, [pc, #168]	; (800afa8 <tcp_input+0x54c>)
 800af00:	2200      	movs	r2, #0
 800af02:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	891a      	ldrh	r2, [r3, #8]
 800af08:	4b27      	ldr	r3, [pc, #156]	; (800afa8 <tcp_input+0x54c>)
 800af0a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800af0c:	4a26      	ldr	r2, [pc, #152]	; (800afa8 <tcp_input+0x54c>)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800af12:	4b1b      	ldr	r3, [pc, #108]	; (800af80 <tcp_input+0x524>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a24      	ldr	r2, [pc, #144]	; (800afa8 <tcp_input+0x54c>)
 800af18:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800af1a:	4b24      	ldr	r3, [pc, #144]	; (800afac <tcp_input+0x550>)
 800af1c:	2200      	movs	r2, #0
 800af1e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800af20:	4b23      	ldr	r3, [pc, #140]	; (800afb0 <tcp_input+0x554>)
 800af22:	2200      	movs	r2, #0
 800af24:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800af26:	4b23      	ldr	r3, [pc, #140]	; (800afb4 <tcp_input+0x558>)
 800af28:	2200      	movs	r2, #0
 800af2a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800af2c:	4b22      	ldr	r3, [pc, #136]	; (800afb8 <tcp_input+0x55c>)
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	f003 0308 	and.w	r3, r3, #8
 800af34:	2b00      	cmp	r3, #0
 800af36:	d006      	beq.n	800af46 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	7b5b      	ldrb	r3, [r3, #13]
 800af3c:	f043 0301 	orr.w	r3, r3, #1
 800af40:	b2da      	uxtb	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d038      	beq.n	800afc0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800af4e:	69f8      	ldr	r0, [r7, #28]
 800af50:	f7ff f888 	bl	800a064 <tcp_process_refused_data>
 800af54:	4603      	mov	r3, r0
 800af56:	f113 0f0d 	cmn.w	r3, #13
 800af5a:	d007      	beq.n	800af6c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800af60:	2b00      	cmp	r3, #0
 800af62:	d02d      	beq.n	800afc0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800af64:	4b15      	ldr	r3, [pc, #84]	; (800afbc <tcp_input+0x560>)
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d029      	beq.n	800afc0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af70:	2b00      	cmp	r3, #0
 800af72:	f040 8104 	bne.w	800b17e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800af76:	69f8      	ldr	r0, [r7, #28]
 800af78:	f003 fe16 	bl	800eba8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800af7c:	e0ff      	b.n	800b17e <tcp_input+0x722>
 800af7e:	bf00      	nop
 800af80:	200000e0 	.word	0x200000e0
 800af84:	200037a4 	.word	0x200037a4
 800af88:	08016a04 	.word	0x08016a04
 800af8c:	08016b30 	.word	0x08016b30
 800af90:	08016a50 	.word	0x08016a50
 800af94:	20006d08 	.word	0x20006d08
 800af98:	08016b5c 	.word	0x08016b5c
 800af9c:	20006d18 	.word	0x20006d18
 800afa0:	08016b88 	.word	0x08016b88
 800afa4:	20006d10 	.word	0x20006d10
 800afa8:	200000d0 	.word	0x200000d0
 800afac:	20000100 	.word	0x20000100
 800afb0:	200000fd 	.word	0x200000fd
 800afb4:	200000f8 	.word	0x200000f8
 800afb8:	200000fc 	.word	0x200000fc
 800afbc:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 800afc0:	4a9c      	ldr	r2, [pc, #624]	; (800b234 <tcp_input+0x7d8>)
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800afc6:	69f8      	ldr	r0, [r7, #28]
 800afc8:	f000 fb0a 	bl	800b5e0 <tcp_process>
 800afcc:	4603      	mov	r3, r0
 800afce:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800afd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afd4:	f113 0f0d 	cmn.w	r3, #13
 800afd8:	f000 80d3 	beq.w	800b182 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800afdc:	4b96      	ldr	r3, [pc, #600]	; (800b238 <tcp_input+0x7dc>)
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	f003 0308 	and.w	r3, r3, #8
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d015      	beq.n	800b014 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d008      	beq.n	800b004 <tcp_input+0x5a8>
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aff8:	69fa      	ldr	r2, [r7, #28]
 800affa:	6912      	ldr	r2, [r2, #16]
 800affc:	f06f 010d 	mvn.w	r1, #13
 800b000:	4610      	mov	r0, r2
 800b002:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b004:	69f9      	ldr	r1, [r7, #28]
 800b006:	488d      	ldr	r0, [pc, #564]	; (800b23c <tcp_input+0x7e0>)
 800b008:	f7ff fbb0 	bl	800a76c <tcp_pcb_remove>
        tcp_free(pcb);
 800b00c:	69f8      	ldr	r0, [r7, #28]
 800b00e:	f7fd fef1 	bl	8008df4 <tcp_free>
 800b012:	e0c1      	b.n	800b198 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b018:	4b89      	ldr	r3, [pc, #548]	; (800b240 <tcp_input+0x7e4>)
 800b01a:	881b      	ldrh	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d01d      	beq.n	800b05c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b020:	4b87      	ldr	r3, [pc, #540]	; (800b240 <tcp_input+0x7e4>)
 800b022:	881b      	ldrh	r3, [r3, #0]
 800b024:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00a      	beq.n	800b046 <tcp_input+0x5ea>
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b036:	69fa      	ldr	r2, [r7, #28]
 800b038:	6910      	ldr	r0, [r2, #16]
 800b03a:	89fa      	ldrh	r2, [r7, #14]
 800b03c:	69f9      	ldr	r1, [r7, #28]
 800b03e:	4798      	blx	r3
 800b040:	4603      	mov	r3, r0
 800b042:	74fb      	strb	r3, [r7, #19]
 800b044:	e001      	b.n	800b04a <tcp_input+0x5ee>
 800b046:	2300      	movs	r3, #0
 800b048:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b04a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b04e:	f113 0f0d 	cmn.w	r3, #13
 800b052:	f000 8098 	beq.w	800b186 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b056:	4b7a      	ldr	r3, [pc, #488]	; (800b240 <tcp_input+0x7e4>)
 800b058:	2200      	movs	r2, #0
 800b05a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b05c:	69f8      	ldr	r0, [r7, #28]
 800b05e:	f000 f907 	bl	800b270 <tcp_input_delayed_close>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	f040 8090 	bne.w	800b18a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b06a:	4b76      	ldr	r3, [pc, #472]	; (800b244 <tcp_input+0x7e8>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d041      	beq.n	800b0f6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b076:	2b00      	cmp	r3, #0
 800b078:	d006      	beq.n	800b088 <tcp_input+0x62c>
 800b07a:	4b73      	ldr	r3, [pc, #460]	; (800b248 <tcp_input+0x7ec>)
 800b07c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b080:	4972      	ldr	r1, [pc, #456]	; (800b24c <tcp_input+0x7f0>)
 800b082:	4873      	ldr	r0, [pc, #460]	; (800b250 <tcp_input+0x7f4>)
 800b084:	f008 fec0 	bl	8013e08 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	8b5b      	ldrh	r3, [r3, #26]
 800b08c:	f003 0310 	and.w	r3, r3, #16
 800b090:	2b00      	cmp	r3, #0
 800b092:	d008      	beq.n	800b0a6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b094:	4b6b      	ldr	r3, [pc, #428]	; (800b244 <tcp_input+0x7e8>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fd fb97 	bl	80087cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b09e:	69f8      	ldr	r0, [r7, #28]
 800b0a0:	f7fe f990 	bl	80093c4 <tcp_abort>
            goto aborted;
 800b0a4:	e078      	b.n	800b198 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00c      	beq.n	800b0ca <tcp_input+0x66e>
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	6918      	ldr	r0, [r3, #16]
 800b0ba:	4b62      	ldr	r3, [pc, #392]	; (800b244 <tcp_input+0x7e8>)
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	2300      	movs	r3, #0
 800b0c0:	69f9      	ldr	r1, [r7, #28]
 800b0c2:	47a0      	blx	r4
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	74fb      	strb	r3, [r7, #19]
 800b0c8:	e008      	b.n	800b0dc <tcp_input+0x680>
 800b0ca:	4b5e      	ldr	r3, [pc, #376]	; (800b244 <tcp_input+0x7e8>)
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	69f9      	ldr	r1, [r7, #28]
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	f7ff f89c 	bl	800a210 <tcp_recv_null>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b0dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b0e0:	f113 0f0d 	cmn.w	r3, #13
 800b0e4:	d053      	beq.n	800b18e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b0e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d003      	beq.n	800b0f6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b0ee:	4b55      	ldr	r3, [pc, #340]	; (800b244 <tcp_input+0x7e8>)
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b0f6:	4b50      	ldr	r3, [pc, #320]	; (800b238 <tcp_input+0x7dc>)
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	f003 0320 	and.w	r3, r3, #32
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d030      	beq.n	800b164 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b106:	2b00      	cmp	r3, #0
 800b108:	d009      	beq.n	800b11e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b10e:	7b5a      	ldrb	r2, [r3, #13]
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b114:	f042 0220 	orr.w	r2, r2, #32
 800b118:	b2d2      	uxtb	r2, r2
 800b11a:	735a      	strb	r2, [r3, #13]
 800b11c:	e022      	b.n	800b164 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b122:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b126:	d005      	beq.n	800b134 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b12c:	3301      	adds	r3, #1
 800b12e:	b29a      	uxth	r2, r3
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00b      	beq.n	800b156 <tcp_input+0x6fa>
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	6918      	ldr	r0, [r3, #16]
 800b148:	2300      	movs	r3, #0
 800b14a:	2200      	movs	r2, #0
 800b14c:	69f9      	ldr	r1, [r7, #28]
 800b14e:	47a0      	blx	r4
 800b150:	4603      	mov	r3, r0
 800b152:	74fb      	strb	r3, [r7, #19]
 800b154:	e001      	b.n	800b15a <tcp_input+0x6fe>
 800b156:	2300      	movs	r3, #0
 800b158:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b15a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b15e:	f113 0f0d 	cmn.w	r3, #13
 800b162:	d016      	beq.n	800b192 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b164:	4b33      	ldr	r3, [pc, #204]	; (800b234 <tcp_input+0x7d8>)
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b16a:	69f8      	ldr	r0, [r7, #28]
 800b16c:	f000 f880 	bl	800b270 <tcp_input_delayed_close>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10f      	bne.n	800b196 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b176:	69f8      	ldr	r0, [r7, #28]
 800b178:	f002 ff10 	bl	800df9c <tcp_output>
 800b17c:	e00c      	b.n	800b198 <tcp_input+0x73c>
        goto aborted;
 800b17e:	bf00      	nop
 800b180:	e00a      	b.n	800b198 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b182:	bf00      	nop
 800b184:	e008      	b.n	800b198 <tcp_input+0x73c>
              goto aborted;
 800b186:	bf00      	nop
 800b188:	e006      	b.n	800b198 <tcp_input+0x73c>
          goto aborted;
 800b18a:	bf00      	nop
 800b18c:	e004      	b.n	800b198 <tcp_input+0x73c>
            goto aborted;
 800b18e:	bf00      	nop
 800b190:	e002      	b.n	800b198 <tcp_input+0x73c>
              goto aborted;
 800b192:	bf00      	nop
 800b194:	e000      	b.n	800b198 <tcp_input+0x73c>
          goto aborted;
 800b196:	bf00      	nop
    tcp_input_pcb = NULL;
 800b198:	4b26      	ldr	r3, [pc, #152]	; (800b234 <tcp_input+0x7d8>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b19e:	4b29      	ldr	r3, [pc, #164]	; (800b244 <tcp_input+0x7e8>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b1a4:	4b2b      	ldr	r3, [pc, #172]	; (800b254 <tcp_input+0x7f8>)
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d03f      	beq.n	800b22c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800b1ac:	4b29      	ldr	r3, [pc, #164]	; (800b254 <tcp_input+0x7f8>)
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fd fb0b 	bl	80087cc <pbuf_free>
      inseg.p = NULL;
 800b1b6:	4b27      	ldr	r3, [pc, #156]	; (800b254 <tcp_input+0x7f8>)
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b1bc:	e036      	b.n	800b22c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b1be:	4b26      	ldr	r3, [pc, #152]	; (800b258 <tcp_input+0x7fc>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	899b      	ldrh	r3, [r3, #12]
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fc f81c 	bl	8007204 <lwip_htons>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d118      	bne.n	800b20a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b1d8:	4b20      	ldr	r3, [pc, #128]	; (800b25c <tcp_input+0x800>)
 800b1da:	6819      	ldr	r1, [r3, #0]
 800b1dc:	4b20      	ldr	r3, [pc, #128]	; (800b260 <tcp_input+0x804>)
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	4b20      	ldr	r3, [pc, #128]	; (800b264 <tcp_input+0x808>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b1e8:	4b1b      	ldr	r3, [pc, #108]	; (800b258 <tcp_input+0x7fc>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b1ec:	885b      	ldrh	r3, [r3, #2]
 800b1ee:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b1f0:	4a19      	ldr	r2, [pc, #100]	; (800b258 <tcp_input+0x7fc>)
 800b1f2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b1f4:	8812      	ldrh	r2, [r2, #0]
 800b1f6:	b292      	uxth	r2, r2
 800b1f8:	9202      	str	r2, [sp, #8]
 800b1fa:	9301      	str	r3, [sp, #4]
 800b1fc:	4b1a      	ldr	r3, [pc, #104]	; (800b268 <tcp_input+0x80c>)
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	4b1a      	ldr	r3, [pc, #104]	; (800b26c <tcp_input+0x810>)
 800b202:	4602      	mov	r2, r0
 800b204:	2000      	movs	r0, #0
 800b206:	f003 fc7d 	bl	800eb04 <tcp_rst>
    pbuf_free(p);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7fd fade 	bl	80087cc <pbuf_free>
  return;
 800b210:	e00c      	b.n	800b22c <tcp_input+0x7d0>
    goto dropped;
 800b212:	bf00      	nop
 800b214:	e006      	b.n	800b224 <tcp_input+0x7c8>
    goto dropped;
 800b216:	bf00      	nop
 800b218:	e004      	b.n	800b224 <tcp_input+0x7c8>
    goto dropped;
 800b21a:	bf00      	nop
 800b21c:	e002      	b.n	800b224 <tcp_input+0x7c8>
      goto dropped;
 800b21e:	bf00      	nop
 800b220:	e000      	b.n	800b224 <tcp_input+0x7c8>
      goto dropped;
 800b222:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7fd fad1 	bl	80087cc <pbuf_free>
 800b22a:	e000      	b.n	800b22e <tcp_input+0x7d2>
  return;
 800b22c:	bf00      	nop
}
 800b22e:	3724      	adds	r7, #36	; 0x24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd90      	pop	{r4, r7, pc}
 800b234:	20006d1c 	.word	0x20006d1c
 800b238:	200000fd 	.word	0x200000fd
 800b23c:	20006d08 	.word	0x20006d08
 800b240:	200000f8 	.word	0x200000f8
 800b244:	20000100 	.word	0x20000100
 800b248:	08016a04 	.word	0x08016a04
 800b24c:	08016bb8 	.word	0x08016bb8
 800b250:	08016a50 	.word	0x08016a50
 800b254:	200000d0 	.word	0x200000d0
 800b258:	200000e0 	.word	0x200000e0
 800b25c:	200000f4 	.word	0x200000f4
 800b260:	200000fa 	.word	0x200000fa
 800b264:	200000f0 	.word	0x200000f0
 800b268:	200037b4 	.word	0x200037b4
 800b26c:	200037b8 	.word	0x200037b8

0800b270 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d106      	bne.n	800b28c <tcp_input_delayed_close+0x1c>
 800b27e:	4b17      	ldr	r3, [pc, #92]	; (800b2dc <tcp_input_delayed_close+0x6c>)
 800b280:	f240 225a 	movw	r2, #602	; 0x25a
 800b284:	4916      	ldr	r1, [pc, #88]	; (800b2e0 <tcp_input_delayed_close+0x70>)
 800b286:	4817      	ldr	r0, [pc, #92]	; (800b2e4 <tcp_input_delayed_close+0x74>)
 800b288:	f008 fdbe 	bl	8013e08 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b28c:	4b16      	ldr	r3, [pc, #88]	; (800b2e8 <tcp_input_delayed_close+0x78>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	f003 0310 	and.w	r3, r3, #16
 800b294:	2b00      	cmp	r3, #0
 800b296:	d01c      	beq.n	800b2d2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	8b5b      	ldrh	r3, [r3, #26]
 800b29c:	f003 0310 	and.w	r3, r3, #16
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10d      	bne.n	800b2c0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d008      	beq.n	800b2c0 <tcp_input_delayed_close+0x50>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	6912      	ldr	r2, [r2, #16]
 800b2b8:	f06f 010e 	mvn.w	r1, #14
 800b2bc:	4610      	mov	r0, r2
 800b2be:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b2c0:	6879      	ldr	r1, [r7, #4]
 800b2c2:	480a      	ldr	r0, [pc, #40]	; (800b2ec <tcp_input_delayed_close+0x7c>)
 800b2c4:	f7ff fa52 	bl	800a76c <tcp_pcb_remove>
    tcp_free(pcb);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7fd fd93 	bl	8008df4 <tcp_free>
    return 1;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e000      	b.n	800b2d4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	08016a04 	.word	0x08016a04
 800b2e0:	08016bd4 	.word	0x08016bd4
 800b2e4:	08016a50 	.word	0x08016a50
 800b2e8:	200000fd 	.word	0x200000fd
 800b2ec:	20006d08 	.word	0x20006d08

0800b2f0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b2f0:	b590      	push	{r4, r7, lr}
 800b2f2:	b08b      	sub	sp, #44	; 0x2c
 800b2f4:	af04      	add	r7, sp, #16
 800b2f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b2f8:	4b6f      	ldr	r3, [pc, #444]	; (800b4b8 <tcp_listen_input+0x1c8>)
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	f003 0304 	and.w	r3, r3, #4
 800b300:	2b00      	cmp	r3, #0
 800b302:	f040 80d2 	bne.w	800b4aa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d106      	bne.n	800b31a <tcp_listen_input+0x2a>
 800b30c:	4b6b      	ldr	r3, [pc, #428]	; (800b4bc <tcp_listen_input+0x1cc>)
 800b30e:	f240 2281 	movw	r2, #641	; 0x281
 800b312:	496b      	ldr	r1, [pc, #428]	; (800b4c0 <tcp_listen_input+0x1d0>)
 800b314:	486b      	ldr	r0, [pc, #428]	; (800b4c4 <tcp_listen_input+0x1d4>)
 800b316:	f008 fd77 	bl	8013e08 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b31a:	4b67      	ldr	r3, [pc, #412]	; (800b4b8 <tcp_listen_input+0x1c8>)
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	f003 0310 	and.w	r3, r3, #16
 800b322:	2b00      	cmp	r3, #0
 800b324:	d019      	beq.n	800b35a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b326:	4b68      	ldr	r3, [pc, #416]	; (800b4c8 <tcp_listen_input+0x1d8>)
 800b328:	6819      	ldr	r1, [r3, #0]
 800b32a:	4b68      	ldr	r3, [pc, #416]	; (800b4cc <tcp_listen_input+0x1dc>)
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	461a      	mov	r2, r3
 800b330:	4b67      	ldr	r3, [pc, #412]	; (800b4d0 <tcp_listen_input+0x1e0>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b336:	4b67      	ldr	r3, [pc, #412]	; (800b4d4 <tcp_listen_input+0x1e4>)
 800b338:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b33a:	885b      	ldrh	r3, [r3, #2]
 800b33c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b33e:	4a65      	ldr	r2, [pc, #404]	; (800b4d4 <tcp_listen_input+0x1e4>)
 800b340:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b342:	8812      	ldrh	r2, [r2, #0]
 800b344:	b292      	uxth	r2, r2
 800b346:	9202      	str	r2, [sp, #8]
 800b348:	9301      	str	r3, [sp, #4]
 800b34a:	4b63      	ldr	r3, [pc, #396]	; (800b4d8 <tcp_listen_input+0x1e8>)
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	4b63      	ldr	r3, [pc, #396]	; (800b4dc <tcp_listen_input+0x1ec>)
 800b350:	4602      	mov	r2, r0
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f003 fbd6 	bl	800eb04 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b358:	e0a9      	b.n	800b4ae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b35a:	4b57      	ldr	r3, [pc, #348]	; (800b4b8 <tcp_listen_input+0x1c8>)
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	f003 0302 	and.w	r3, r3, #2
 800b362:	2b00      	cmp	r3, #0
 800b364:	f000 80a3 	beq.w	800b4ae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	7d5b      	ldrb	r3, [r3, #21]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7ff f873 	bl	800a458 <tcp_alloc>
 800b372:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d111      	bne.n	800b39e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00a      	beq.n	800b398 <tcp_listen_input+0xa8>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	6910      	ldr	r0, [r2, #16]
 800b38a:	f04f 32ff 	mov.w	r2, #4294967295
 800b38e:	2100      	movs	r1, #0
 800b390:	4798      	blx	r3
 800b392:	4603      	mov	r3, r0
 800b394:	73bb      	strb	r3, [r7, #14]
      return;
 800b396:	e08b      	b.n	800b4b0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b398:	23f0      	movs	r3, #240	; 0xf0
 800b39a:	73bb      	strb	r3, [r7, #14]
      return;
 800b39c:	e088      	b.n	800b4b0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b39e:	4b50      	ldr	r3, [pc, #320]	; (800b4e0 <tcp_listen_input+0x1f0>)
 800b3a0:	695a      	ldr	r2, [r3, #20]
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b3a6:	4b4e      	ldr	r3, [pc, #312]	; (800b4e0 <tcp_listen_input+0x1f0>)
 800b3a8:	691a      	ldr	r2, [r3, #16]
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	8ada      	ldrh	r2, [r3, #22]
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b3b6:	4b47      	ldr	r3, [pc, #284]	; (800b4d4 <tcp_listen_input+0x1e4>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	2203      	movs	r2, #3
 800b3c6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b3c8:	4b41      	ldr	r3, [pc, #260]	; (800b4d0 <tcp_listen_input+0x1e0>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	1c5a      	adds	r2, r3, #1
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b3da:	6978      	ldr	r0, [r7, #20]
 800b3dc:	f7ff fa5a 	bl	800a894 <tcp_next_iss>
 800b3e0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	693a      	ldr	r2, [r7, #16]
 800b3f8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b3fa:	4b35      	ldr	r3, [pc, #212]	; (800b4d0 <tcp_listen_input+0x1e0>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	1e5a      	subs	r2, r3, #1
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	691a      	ldr	r2, [r3, #16]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	7a5b      	ldrb	r3, [r3, #9]
 800b416:	f003 030c 	and.w	r3, r3, #12
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	7a1a      	ldrb	r2, [r3, #8]
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b428:	4b2e      	ldr	r3, [pc, #184]	; (800b4e4 <tcp_listen_input+0x1f4>)
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	60da      	str	r2, [r3, #12]
 800b430:	4a2c      	ldr	r2, [pc, #176]	; (800b4e4 <tcp_listen_input+0x1f4>)
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	6013      	str	r3, [r2, #0]
 800b436:	f003 fd27 	bl	800ee88 <tcp_timer_needed>
 800b43a:	4b2b      	ldr	r3, [pc, #172]	; (800b4e8 <tcp_listen_input+0x1f8>)
 800b43c:	2201      	movs	r2, #1
 800b43e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b440:	6978      	ldr	r0, [r7, #20]
 800b442:	f001 fd8d 	bl	800cf60 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b446:	4b23      	ldr	r3, [pc, #140]	; (800b4d4 <tcp_listen_input+0x1e4>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	89db      	ldrh	r3, [r3, #14]
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	3304      	adds	r3, #4
 800b468:	4618      	mov	r0, r3
 800b46a:	f007 fa81 	bl	8012970 <ip4_route>
 800b46e:	4601      	mov	r1, r0
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	3304      	adds	r3, #4
 800b474:	461a      	mov	r2, r3
 800b476:	4620      	mov	r0, r4
 800b478:	f7ff fa32 	bl	800a8e0 <tcp_eff_send_mss_netif>
 800b47c:	4603      	mov	r3, r0
 800b47e:	461a      	mov	r2, r3
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b484:	2112      	movs	r1, #18
 800b486:	6978      	ldr	r0, [r7, #20]
 800b488:	f002 fc9a 	bl	800ddc0 <tcp_enqueue_flags>
 800b48c:	4603      	mov	r3, r0
 800b48e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d004      	beq.n	800b4a2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b498:	2100      	movs	r1, #0
 800b49a:	6978      	ldr	r0, [r7, #20]
 800b49c:	f7fd fed4 	bl	8009248 <tcp_abandon>
      return;
 800b4a0:	e006      	b.n	800b4b0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b4a2:	6978      	ldr	r0, [r7, #20]
 800b4a4:	f002 fd7a 	bl	800df9c <tcp_output>
  return;
 800b4a8:	e001      	b.n	800b4ae <tcp_listen_input+0x1be>
    return;
 800b4aa:	bf00      	nop
 800b4ac:	e000      	b.n	800b4b0 <tcp_listen_input+0x1c0>
  return;
 800b4ae:	bf00      	nop
}
 800b4b0:	371c      	adds	r7, #28
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd90      	pop	{r4, r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	200000fc 	.word	0x200000fc
 800b4bc:	08016a04 	.word	0x08016a04
 800b4c0:	08016bfc 	.word	0x08016bfc
 800b4c4:	08016a50 	.word	0x08016a50
 800b4c8:	200000f4 	.word	0x200000f4
 800b4cc:	200000fa 	.word	0x200000fa
 800b4d0:	200000f0 	.word	0x200000f0
 800b4d4:	200000e0 	.word	0x200000e0
 800b4d8:	200037b4 	.word	0x200037b4
 800b4dc:	200037b8 	.word	0x200037b8
 800b4e0:	200037a4 	.word	0x200037a4
 800b4e4:	20006d08 	.word	0x20006d08
 800b4e8:	20006d04 	.word	0x20006d04

0800b4ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af04      	add	r7, sp, #16
 800b4f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b4f4:	4b2f      	ldr	r3, [pc, #188]	; (800b5b4 <tcp_timewait_input+0xc8>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	f003 0304 	and.w	r3, r3, #4
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d153      	bne.n	800b5a8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d106      	bne.n	800b514 <tcp_timewait_input+0x28>
 800b506:	4b2c      	ldr	r3, [pc, #176]	; (800b5b8 <tcp_timewait_input+0xcc>)
 800b508:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b50c:	492b      	ldr	r1, [pc, #172]	; (800b5bc <tcp_timewait_input+0xd0>)
 800b50e:	482c      	ldr	r0, [pc, #176]	; (800b5c0 <tcp_timewait_input+0xd4>)
 800b510:	f008 fc7a 	bl	8013e08 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b514:	4b27      	ldr	r3, [pc, #156]	; (800b5b4 <tcp_timewait_input+0xc8>)
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	f003 0302 	and.w	r3, r3, #2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d02a      	beq.n	800b576 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b520:	4b28      	ldr	r3, [pc, #160]	; (800b5c4 <tcp_timewait_input+0xd8>)
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	1ad3      	subs	r3, r2, r3
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	db2d      	blt.n	800b58a <tcp_timewait_input+0x9e>
 800b52e:	4b25      	ldr	r3, [pc, #148]	; (800b5c4 <tcp_timewait_input+0xd8>)
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b536:	6879      	ldr	r1, [r7, #4]
 800b538:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b53a:	440b      	add	r3, r1
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	dc23      	bgt.n	800b58a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b542:	4b21      	ldr	r3, [pc, #132]	; (800b5c8 <tcp_timewait_input+0xdc>)
 800b544:	6819      	ldr	r1, [r3, #0]
 800b546:	4b21      	ldr	r3, [pc, #132]	; (800b5cc <tcp_timewait_input+0xe0>)
 800b548:	881b      	ldrh	r3, [r3, #0]
 800b54a:	461a      	mov	r2, r3
 800b54c:	4b1d      	ldr	r3, [pc, #116]	; (800b5c4 <tcp_timewait_input+0xd8>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b552:	4b1f      	ldr	r3, [pc, #124]	; (800b5d0 <tcp_timewait_input+0xe4>)
 800b554:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b556:	885b      	ldrh	r3, [r3, #2]
 800b558:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b55a:	4a1d      	ldr	r2, [pc, #116]	; (800b5d0 <tcp_timewait_input+0xe4>)
 800b55c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b55e:	8812      	ldrh	r2, [r2, #0]
 800b560:	b292      	uxth	r2, r2
 800b562:	9202      	str	r2, [sp, #8]
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	4b1b      	ldr	r3, [pc, #108]	; (800b5d4 <tcp_timewait_input+0xe8>)
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	4b1b      	ldr	r3, [pc, #108]	; (800b5d8 <tcp_timewait_input+0xec>)
 800b56c:	4602      	mov	r2, r0
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f003 fac8 	bl	800eb04 <tcp_rst>
      return;
 800b574:	e01b      	b.n	800b5ae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b576:	4b0f      	ldr	r3, [pc, #60]	; (800b5b4 <tcp_timewait_input+0xc8>)
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	f003 0301 	and.w	r3, r3, #1
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d003      	beq.n	800b58a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b582:	4b16      	ldr	r3, [pc, #88]	; (800b5dc <tcp_timewait_input+0xf0>)
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b58a:	4b10      	ldr	r3, [pc, #64]	; (800b5cc <tcp_timewait_input+0xe0>)
 800b58c:	881b      	ldrh	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00c      	beq.n	800b5ac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	8b5b      	ldrh	r3, [r3, #26]
 800b596:	f043 0302 	orr.w	r3, r3, #2
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f002 fcfb 	bl	800df9c <tcp_output>
  }
  return;
 800b5a6:	e001      	b.n	800b5ac <tcp_timewait_input+0xc0>
    return;
 800b5a8:	bf00      	nop
 800b5aa:	e000      	b.n	800b5ae <tcp_timewait_input+0xc2>
  return;
 800b5ac:	bf00      	nop
}
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	200000fc 	.word	0x200000fc
 800b5b8:	08016a04 	.word	0x08016a04
 800b5bc:	08016c1c 	.word	0x08016c1c
 800b5c0:	08016a50 	.word	0x08016a50
 800b5c4:	200000f0 	.word	0x200000f0
 800b5c8:	200000f4 	.word	0x200000f4
 800b5cc:	200000fa 	.word	0x200000fa
 800b5d0:	200000e0 	.word	0x200000e0
 800b5d4:	200037b4 	.word	0x200037b4
 800b5d8:	200037b8 	.word	0x200037b8
 800b5dc:	20006d0c 	.word	0x20006d0c

0800b5e0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b5e0:	b590      	push	{r4, r7, lr}
 800b5e2:	b08d      	sub	sp, #52	; 0x34
 800b5e4:	af04      	add	r7, sp, #16
 800b5e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d106      	bne.n	800b604 <tcp_process+0x24>
 800b5f6:	4ba5      	ldr	r3, [pc, #660]	; (800b88c <tcp_process+0x2ac>)
 800b5f8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b5fc:	49a4      	ldr	r1, [pc, #656]	; (800b890 <tcp_process+0x2b0>)
 800b5fe:	48a5      	ldr	r0, [pc, #660]	; (800b894 <tcp_process+0x2b4>)
 800b600:	f008 fc02 	bl	8013e08 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b604:	4ba4      	ldr	r3, [pc, #656]	; (800b898 <tcp_process+0x2b8>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	f003 0304 	and.w	r3, r3, #4
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d04e      	beq.n	800b6ae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	7d1b      	ldrb	r3, [r3, #20]
 800b614:	2b02      	cmp	r3, #2
 800b616:	d108      	bne.n	800b62a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b61c:	4b9f      	ldr	r3, [pc, #636]	; (800b89c <tcp_process+0x2bc>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	429a      	cmp	r2, r3
 800b622:	d123      	bne.n	800b66c <tcp_process+0x8c>
        acceptable = 1;
 800b624:	2301      	movs	r3, #1
 800b626:	76fb      	strb	r3, [r7, #27]
 800b628:	e020      	b.n	800b66c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b62e:	4b9c      	ldr	r3, [pc, #624]	; (800b8a0 <tcp_process+0x2c0>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	429a      	cmp	r2, r3
 800b634:	d102      	bne.n	800b63c <tcp_process+0x5c>
        acceptable = 1;
 800b636:	2301      	movs	r3, #1
 800b638:	76fb      	strb	r3, [r7, #27]
 800b63a:	e017      	b.n	800b66c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b63c:	4b98      	ldr	r3, [pc, #608]	; (800b8a0 <tcp_process+0x2c0>)
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	db10      	blt.n	800b66c <tcp_process+0x8c>
 800b64a:	4b95      	ldr	r3, [pc, #596]	; (800b8a0 <tcp_process+0x2c0>)
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b652:	6879      	ldr	r1, [r7, #4]
 800b654:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b656:	440b      	add	r3, r1
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	dc06      	bgt.n	800b66c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	8b5b      	ldrh	r3, [r3, #26]
 800b662:	f043 0302 	orr.w	r3, r3, #2
 800b666:	b29a      	uxth	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b66c:	7efb      	ldrb	r3, [r7, #27]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d01b      	beq.n	800b6aa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	7d1b      	ldrb	r3, [r3, #20]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <tcp_process+0xa8>
 800b67a:	4b84      	ldr	r3, [pc, #528]	; (800b88c <tcp_process+0x2ac>)
 800b67c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b680:	4988      	ldr	r1, [pc, #544]	; (800b8a4 <tcp_process+0x2c4>)
 800b682:	4884      	ldr	r0, [pc, #528]	; (800b894 <tcp_process+0x2b4>)
 800b684:	f008 fbc0 	bl	8013e08 <iprintf>
      recv_flags |= TF_RESET;
 800b688:	4b87      	ldr	r3, [pc, #540]	; (800b8a8 <tcp_process+0x2c8>)
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	f043 0308 	orr.w	r3, r3, #8
 800b690:	b2da      	uxtb	r2, r3
 800b692:	4b85      	ldr	r3, [pc, #532]	; (800b8a8 <tcp_process+0x2c8>)
 800b694:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	8b5b      	ldrh	r3, [r3, #26]
 800b69a:	f023 0301 	bic.w	r3, r3, #1
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b6a4:	f06f 030d 	mvn.w	r3, #13
 800b6a8:	e37a      	b.n	800bda0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e378      	b.n	800bda0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b6ae:	4b7a      	ldr	r3, [pc, #488]	; (800b898 <tcp_process+0x2b8>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	f003 0302 	and.w	r3, r3, #2
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d010      	beq.n	800b6dc <tcp_process+0xfc>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	7d1b      	ldrb	r3, [r3, #20]
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d00c      	beq.n	800b6dc <tcp_process+0xfc>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	7d1b      	ldrb	r3, [r3, #20]
 800b6c6:	2b03      	cmp	r3, #3
 800b6c8:	d008      	beq.n	800b6dc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	8b5b      	ldrh	r3, [r3, #26]
 800b6ce:	f043 0302 	orr.w	r3, r3, #2
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	e361      	b.n	800bda0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	8b5b      	ldrh	r3, [r3, #26]
 800b6e0:	f003 0310 	and.w	r3, r3, #16
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d103      	bne.n	800b6f0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b6e8:	4b70      	ldr	r3, [pc, #448]	; (800b8ac <tcp_process+0x2cc>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f001 fc2d 	bl	800cf60 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	7d1b      	ldrb	r3, [r3, #20]
 800b70a:	3b02      	subs	r3, #2
 800b70c:	2b07      	cmp	r3, #7
 800b70e:	f200 8337 	bhi.w	800bd80 <tcp_process+0x7a0>
 800b712:	a201      	add	r2, pc, #4	; (adr r2, 800b718 <tcp_process+0x138>)
 800b714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b718:	0800b739 	.word	0x0800b739
 800b71c:	0800b969 	.word	0x0800b969
 800b720:	0800bae1 	.word	0x0800bae1
 800b724:	0800bb0b 	.word	0x0800bb0b
 800b728:	0800bc2f 	.word	0x0800bc2f
 800b72c:	0800bae1 	.word	0x0800bae1
 800b730:	0800bcbb 	.word	0x0800bcbb
 800b734:	0800bd4b 	.word	0x0800bd4b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b738:	4b57      	ldr	r3, [pc, #348]	; (800b898 <tcp_process+0x2b8>)
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	f003 0310 	and.w	r3, r3, #16
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 80e4 	beq.w	800b90e <tcp_process+0x32e>
 800b746:	4b54      	ldr	r3, [pc, #336]	; (800b898 <tcp_process+0x2b8>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	f003 0302 	and.w	r3, r3, #2
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f000 80dd 	beq.w	800b90e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	4b50      	ldr	r3, [pc, #320]	; (800b89c <tcp_process+0x2bc>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	429a      	cmp	r2, r3
 800b760:	f040 80d5 	bne.w	800b90e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b764:	4b4e      	ldr	r3, [pc, #312]	; (800b8a0 <tcp_process+0x2c0>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b776:	4b49      	ldr	r3, [pc, #292]	; (800b89c <tcp_process+0x2bc>)
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b77e:	4b4c      	ldr	r3, [pc, #304]	; (800b8b0 <tcp_process+0x2d0>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	89db      	ldrh	r3, [r3, #14]
 800b784:	b29a      	uxth	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b798:	4b41      	ldr	r3, [pc, #260]	; (800b8a0 <tcp_process+0x2c0>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	1e5a      	subs	r2, r3, #1
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2204      	movs	r2, #4
 800b7a6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f007 f8dd 	bl	8012970 <ip4_route>
 800b7b6:	4601      	mov	r1, r0
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	461a      	mov	r2, r3
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f7ff f88e 	bl	800a8e0 <tcp_eff_send_mss_netif>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7d0:	009a      	lsls	r2, r3, #2
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7d6:	005b      	lsls	r3, r3, #1
 800b7d8:	f241 111c 	movw	r1, #4380	; 0x111c
 800b7dc:	428b      	cmp	r3, r1
 800b7de:	bf38      	it	cc
 800b7e0:	460b      	movcc	r3, r1
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d204      	bcs.n	800b7f0 <tcp_process+0x210>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	e00d      	b.n	800b80c <tcp_process+0x22c>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7f4:	005b      	lsls	r3, r3, #1
 800b7f6:	f241 121c 	movw	r2, #4380	; 0x111c
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d904      	bls.n	800b808 <tcp_process+0x228>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b802:	005b      	lsls	r3, r3, #1
 800b804:	b29b      	uxth	r3, r3
 800b806:	e001      	b.n	800b80c <tcp_process+0x22c>
 800b808:	f241 131c 	movw	r3, #4380	; 0x111c
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d106      	bne.n	800b82a <tcp_process+0x24a>
 800b81c:	4b1b      	ldr	r3, [pc, #108]	; (800b88c <tcp_process+0x2ac>)
 800b81e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b822:	4924      	ldr	r1, [pc, #144]	; (800b8b4 <tcp_process+0x2d4>)
 800b824:	481b      	ldr	r0, [pc, #108]	; (800b894 <tcp_process+0x2b4>)
 800b826:	f008 faef 	bl	8013e08 <iprintf>
        --pcb->snd_queuelen;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b830:	3b01      	subs	r3, #1
 800b832:	b29a      	uxth	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b83e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d111      	bne.n	800b86a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b84a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d106      	bne.n	800b860 <tcp_process+0x280>
 800b852:	4b0e      	ldr	r3, [pc, #56]	; (800b88c <tcp_process+0x2ac>)
 800b854:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b858:	4917      	ldr	r1, [pc, #92]	; (800b8b8 <tcp_process+0x2d8>)
 800b85a:	480e      	ldr	r0, [pc, #56]	; (800b894 <tcp_process+0x2b4>)
 800b85c:	f008 fad4 	bl	8013e08 <iprintf>
          pcb->unsent = rseg->next;
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	66da      	str	r2, [r3, #108]	; 0x6c
 800b868:	e003      	b.n	800b872 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b872:	69f8      	ldr	r0, [r7, #28]
 800b874:	f7fe fc87 	bl	800a186 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d11d      	bne.n	800b8bc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b886:	861a      	strh	r2, [r3, #48]	; 0x30
 800b888:	e01f      	b.n	800b8ca <tcp_process+0x2ea>
 800b88a:	bf00      	nop
 800b88c:	08016a04 	.word	0x08016a04
 800b890:	08016c3c 	.word	0x08016c3c
 800b894:	08016a50 	.word	0x08016a50
 800b898:	200000fc 	.word	0x200000fc
 800b89c:	200000f4 	.word	0x200000f4
 800b8a0:	200000f0 	.word	0x200000f0
 800b8a4:	08016c58 	.word	0x08016c58
 800b8a8:	200000fd 	.word	0x200000fd
 800b8ac:	20006d0c 	.word	0x20006d0c
 800b8b0:	200000e0 	.word	0x200000e0
 800b8b4:	08016c78 	.word	0x08016c78
 800b8b8:	08016c90 	.word	0x08016c90
        } else {
          pcb->rtime = 0;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00a      	beq.n	800b8ea <tcp_process+0x30a>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	6910      	ldr	r0, [r2, #16]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	6879      	ldr	r1, [r7, #4]
 800b8e2:	4798      	blx	r3
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	76bb      	strb	r3, [r7, #26]
 800b8e8:	e001      	b.n	800b8ee <tcp_process+0x30e>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b8ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b8f2:	f113 0f0d 	cmn.w	r3, #13
 800b8f6:	d102      	bne.n	800b8fe <tcp_process+0x31e>
          return ERR_ABRT;
 800b8f8:	f06f 030c 	mvn.w	r3, #12
 800b8fc:	e250      	b.n	800bda0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	8b5b      	ldrh	r3, [r3, #26]
 800b902:	f043 0302 	orr.w	r3, r3, #2
 800b906:	b29a      	uxth	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b90c:	e23a      	b.n	800bd84 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b90e:	4b9d      	ldr	r3, [pc, #628]	; (800bb84 <tcp_process+0x5a4>)
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	f003 0310 	and.w	r3, r3, #16
 800b916:	2b00      	cmp	r3, #0
 800b918:	f000 8234 	beq.w	800bd84 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b91c:	4b9a      	ldr	r3, [pc, #616]	; (800bb88 <tcp_process+0x5a8>)
 800b91e:	6819      	ldr	r1, [r3, #0]
 800b920:	4b9a      	ldr	r3, [pc, #616]	; (800bb8c <tcp_process+0x5ac>)
 800b922:	881b      	ldrh	r3, [r3, #0]
 800b924:	461a      	mov	r2, r3
 800b926:	4b9a      	ldr	r3, [pc, #616]	; (800bb90 <tcp_process+0x5b0>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b92c:	4b99      	ldr	r3, [pc, #612]	; (800bb94 <tcp_process+0x5b4>)
 800b92e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b930:	885b      	ldrh	r3, [r3, #2]
 800b932:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b934:	4a97      	ldr	r2, [pc, #604]	; (800bb94 <tcp_process+0x5b4>)
 800b936:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b938:	8812      	ldrh	r2, [r2, #0]
 800b93a:	b292      	uxth	r2, r2
 800b93c:	9202      	str	r2, [sp, #8]
 800b93e:	9301      	str	r3, [sp, #4]
 800b940:	4b95      	ldr	r3, [pc, #596]	; (800bb98 <tcp_process+0x5b8>)
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	4b95      	ldr	r3, [pc, #596]	; (800bb9c <tcp_process+0x5bc>)
 800b946:	4602      	mov	r2, r0
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f003 f8db 	bl	800eb04 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b954:	2b05      	cmp	r3, #5
 800b956:	f200 8215 	bhi.w	800bd84 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f002 fea5 	bl	800e6b0 <tcp_rexmit_rto>
      break;
 800b966:	e20d      	b.n	800bd84 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b968:	4b86      	ldr	r3, [pc, #536]	; (800bb84 <tcp_process+0x5a4>)
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	f003 0310 	and.w	r3, r3, #16
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 80a1 	beq.w	800bab8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b976:	4b84      	ldr	r3, [pc, #528]	; (800bb88 <tcp_process+0x5a8>)
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	3b01      	subs	r3, #1
 800b982:	2b00      	cmp	r3, #0
 800b984:	db7e      	blt.n	800ba84 <tcp_process+0x4a4>
 800b986:	4b80      	ldr	r3, [pc, #512]	; (800bb88 <tcp_process+0x5a8>)
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	2b00      	cmp	r3, #0
 800b992:	dc77      	bgt.n	800ba84 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2204      	movs	r2, #4
 800b998:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d102      	bne.n	800b9a8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b9a2:	23fa      	movs	r3, #250	; 0xfa
 800b9a4:	76bb      	strb	r3, [r7, #26]
 800b9a6:	e01d      	b.n	800b9e4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d106      	bne.n	800b9c0 <tcp_process+0x3e0>
 800b9b2:	4b7b      	ldr	r3, [pc, #492]	; (800bba0 <tcp_process+0x5c0>)
 800b9b4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b9b8:	497a      	ldr	r1, [pc, #488]	; (800bba4 <tcp_process+0x5c4>)
 800b9ba:	487b      	ldr	r0, [pc, #492]	; (800bba8 <tcp_process+0x5c8>)
 800b9bc:	f008 fa24 	bl	8013e08 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00a      	beq.n	800b9e0 <tcp_process+0x400>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	6910      	ldr	r0, [r2, #16]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	6879      	ldr	r1, [r7, #4]
 800b9d8:	4798      	blx	r3
 800b9da:	4603      	mov	r3, r0
 800b9dc:	76bb      	strb	r3, [r7, #26]
 800b9de:	e001      	b.n	800b9e4 <tcp_process+0x404>
 800b9e0:	23f0      	movs	r3, #240	; 0xf0
 800b9e2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b9e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00a      	beq.n	800ba02 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b9ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b9f0:	f113 0f0d 	cmn.w	r3, #13
 800b9f4:	d002      	beq.n	800b9fc <tcp_process+0x41c>
              tcp_abort(pcb);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7fd fce4 	bl	80093c4 <tcp_abort>
            }
            return ERR_ABRT;
 800b9fc:	f06f 030c 	mvn.w	r3, #12
 800ba00:	e1ce      	b.n	800bda0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fae0 	bl	800bfc8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ba08:	4b68      	ldr	r3, [pc, #416]	; (800bbac <tcp_process+0x5cc>)
 800ba0a:	881b      	ldrh	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d005      	beq.n	800ba1c <tcp_process+0x43c>
            recv_acked--;
 800ba10:	4b66      	ldr	r3, [pc, #408]	; (800bbac <tcp_process+0x5cc>)
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	3b01      	subs	r3, #1
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	4b64      	ldr	r3, [pc, #400]	; (800bbac <tcp_process+0x5cc>)
 800ba1a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba20:	009a      	lsls	r2, r3, #2
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	f241 111c 	movw	r1, #4380	; 0x111c
 800ba2c:	428b      	cmp	r3, r1
 800ba2e:	bf38      	it	cc
 800ba30:	460b      	movcc	r3, r1
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d204      	bcs.n	800ba40 <tcp_process+0x460>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	e00d      	b.n	800ba5c <tcp_process+0x47c>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba44:	005b      	lsls	r3, r3, #1
 800ba46:	f241 121c 	movw	r2, #4380	; 0x111c
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d904      	bls.n	800ba58 <tcp_process+0x478>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba52:	005b      	lsls	r3, r3, #1
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	e001      	b.n	800ba5c <tcp_process+0x47c>
 800ba58:	f241 131c 	movw	r3, #4380	; 0x111c
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ba62:	4b53      	ldr	r3, [pc, #332]	; (800bbb0 <tcp_process+0x5d0>)
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	f003 0320 	and.w	r3, r3, #32
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d037      	beq.n	800bade <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	8b5b      	ldrh	r3, [r3, #26]
 800ba72:	f043 0302 	orr.w	r3, r3, #2
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2207      	movs	r2, #7
 800ba80:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ba82:	e02c      	b.n	800bade <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba84:	4b40      	ldr	r3, [pc, #256]	; (800bb88 <tcp_process+0x5a8>)
 800ba86:	6819      	ldr	r1, [r3, #0]
 800ba88:	4b40      	ldr	r3, [pc, #256]	; (800bb8c <tcp_process+0x5ac>)
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	4b40      	ldr	r3, [pc, #256]	; (800bb90 <tcp_process+0x5b0>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba94:	4b3f      	ldr	r3, [pc, #252]	; (800bb94 <tcp_process+0x5b4>)
 800ba96:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba98:	885b      	ldrh	r3, [r3, #2]
 800ba9a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba9c:	4a3d      	ldr	r2, [pc, #244]	; (800bb94 <tcp_process+0x5b4>)
 800ba9e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800baa0:	8812      	ldrh	r2, [r2, #0]
 800baa2:	b292      	uxth	r2, r2
 800baa4:	9202      	str	r2, [sp, #8]
 800baa6:	9301      	str	r3, [sp, #4]
 800baa8:	4b3b      	ldr	r3, [pc, #236]	; (800bb98 <tcp_process+0x5b8>)
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	4b3b      	ldr	r3, [pc, #236]	; (800bb9c <tcp_process+0x5bc>)
 800baae:	4602      	mov	r2, r0
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f003 f827 	bl	800eb04 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800bab6:	e167      	b.n	800bd88 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800bab8:	4b32      	ldr	r3, [pc, #200]	; (800bb84 <tcp_process+0x5a4>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	f003 0302 	and.w	r3, r3, #2
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f000 8161 	beq.w	800bd88 <tcp_process+0x7a8>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baca:	1e5a      	subs	r2, r3, #1
 800bacc:	4b30      	ldr	r3, [pc, #192]	; (800bb90 <tcp_process+0x5b0>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	f040 8159 	bne.w	800bd88 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f002 fe0c 	bl	800e6f4 <tcp_rexmit>
      break;
 800badc:	e154      	b.n	800bd88 <tcp_process+0x7a8>
 800bade:	e153      	b.n	800bd88 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fa71 	bl	800bfc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bae6:	4b32      	ldr	r3, [pc, #200]	; (800bbb0 <tcp_process+0x5d0>)
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	f003 0320 	and.w	r3, r3, #32
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 814c 	beq.w	800bd8c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	8b5b      	ldrh	r3, [r3, #26]
 800baf8:	f043 0302 	orr.w	r3, r3, #2
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2207      	movs	r2, #7
 800bb06:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bb08:	e140      	b.n	800bd8c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fa5c 	bl	800bfc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bb10:	4b27      	ldr	r3, [pc, #156]	; (800bbb0 <tcp_process+0x5d0>)
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	f003 0320 	and.w	r3, r3, #32
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d071      	beq.n	800bc00 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bb1c:	4b19      	ldr	r3, [pc, #100]	; (800bb84 <tcp_process+0x5a4>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	f003 0310 	and.w	r3, r3, #16
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d060      	beq.n	800bbea <tcp_process+0x60a>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb2c:	4b16      	ldr	r3, [pc, #88]	; (800bb88 <tcp_process+0x5a8>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d15a      	bne.n	800bbea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d156      	bne.n	800bbea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	8b5b      	ldrh	r3, [r3, #26]
 800bb40:	f043 0302 	orr.w	r3, r3, #2
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7fe fdbe 	bl	800a6cc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800bb50:	4b18      	ldr	r3, [pc, #96]	; (800bbb4 <tcp_process+0x5d4>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d105      	bne.n	800bb66 <tcp_process+0x586>
 800bb5a:	4b16      	ldr	r3, [pc, #88]	; (800bbb4 <tcp_process+0x5d4>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	4a14      	ldr	r2, [pc, #80]	; (800bbb4 <tcp_process+0x5d4>)
 800bb62:	6013      	str	r3, [r2, #0]
 800bb64:	e02e      	b.n	800bbc4 <tcp_process+0x5e4>
 800bb66:	4b13      	ldr	r3, [pc, #76]	; (800bbb4 <tcp_process+0x5d4>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	e027      	b.n	800bbbe <tcp_process+0x5de>
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d11f      	bne.n	800bbb8 <tcp_process+0x5d8>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	68da      	ldr	r2, [r3, #12]
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	60da      	str	r2, [r3, #12]
 800bb80:	e020      	b.n	800bbc4 <tcp_process+0x5e4>
 800bb82:	bf00      	nop
 800bb84:	200000fc 	.word	0x200000fc
 800bb88:	200000f4 	.word	0x200000f4
 800bb8c:	200000fa 	.word	0x200000fa
 800bb90:	200000f0 	.word	0x200000f0
 800bb94:	200000e0 	.word	0x200000e0
 800bb98:	200037b4 	.word	0x200037b4
 800bb9c:	200037b8 	.word	0x200037b8
 800bba0:	08016a04 	.word	0x08016a04
 800bba4:	08016ca4 	.word	0x08016ca4
 800bba8:	08016a50 	.word	0x08016a50
 800bbac:	200000f8 	.word	0x200000f8
 800bbb0:	200000fd 	.word	0x200000fd
 800bbb4:	20006d08 	.word	0x20006d08
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	617b      	str	r3, [r7, #20]
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1d4      	bne.n	800bb6e <tcp_process+0x58e>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	60da      	str	r2, [r3, #12]
 800bbca:	4b77      	ldr	r3, [pc, #476]	; (800bda8 <tcp_process+0x7c8>)
 800bbcc:	2201      	movs	r2, #1
 800bbce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	220a      	movs	r2, #10
 800bbd4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800bbd6:	4b75      	ldr	r3, [pc, #468]	; (800bdac <tcp_process+0x7cc>)
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	60da      	str	r2, [r3, #12]
 800bbde:	4a73      	ldr	r2, [pc, #460]	; (800bdac <tcp_process+0x7cc>)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6013      	str	r3, [r2, #0]
 800bbe4:	f003 f950 	bl	800ee88 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800bbe8:	e0d2      	b.n	800bd90 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	8b5b      	ldrh	r3, [r3, #26]
 800bbee:	f043 0302 	orr.w	r3, r3, #2
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2208      	movs	r2, #8
 800bbfc:	751a      	strb	r2, [r3, #20]
      break;
 800bbfe:	e0c7      	b.n	800bd90 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bc00:	4b6b      	ldr	r3, [pc, #428]	; (800bdb0 <tcp_process+0x7d0>)
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	f003 0310 	and.w	r3, r3, #16
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f000 80c1 	beq.w	800bd90 <tcp_process+0x7b0>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc12:	4b68      	ldr	r3, [pc, #416]	; (800bdb4 <tcp_process+0x7d4>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	f040 80ba 	bne.w	800bd90 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f040 80b5 	bne.w	800bd90 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2206      	movs	r2, #6
 800bc2a:	751a      	strb	r2, [r3, #20]
      break;
 800bc2c:	e0b0      	b.n	800bd90 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f9ca 	bl	800bfc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bc34:	4b60      	ldr	r3, [pc, #384]	; (800bdb8 <tcp_process+0x7d8>)
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	f003 0320 	and.w	r3, r3, #32
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 80a9 	beq.w	800bd94 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	8b5b      	ldrh	r3, [r3, #26]
 800bc46:	f043 0302 	orr.w	r3, r3, #2
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7fe fd3b 	bl	800a6cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bc56:	4b59      	ldr	r3, [pc, #356]	; (800bdbc <tcp_process+0x7dc>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d105      	bne.n	800bc6c <tcp_process+0x68c>
 800bc60:	4b56      	ldr	r3, [pc, #344]	; (800bdbc <tcp_process+0x7dc>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	4a55      	ldr	r2, [pc, #340]	; (800bdbc <tcp_process+0x7dc>)
 800bc68:	6013      	str	r3, [r2, #0]
 800bc6a:	e013      	b.n	800bc94 <tcp_process+0x6b4>
 800bc6c:	4b53      	ldr	r3, [pc, #332]	; (800bdbc <tcp_process+0x7dc>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	613b      	str	r3, [r7, #16]
 800bc72:	e00c      	b.n	800bc8e <tcp_process+0x6ae>
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d104      	bne.n	800bc88 <tcp_process+0x6a8>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68da      	ldr	r2, [r3, #12]
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	60da      	str	r2, [r3, #12]
 800bc86:	e005      	b.n	800bc94 <tcp_process+0x6b4>
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	613b      	str	r3, [r7, #16]
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1ef      	bne.n	800bc74 <tcp_process+0x694>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	60da      	str	r2, [r3, #12]
 800bc9a:	4b43      	ldr	r3, [pc, #268]	; (800bda8 <tcp_process+0x7c8>)
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	220a      	movs	r2, #10
 800bca4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bca6:	4b41      	ldr	r3, [pc, #260]	; (800bdac <tcp_process+0x7cc>)
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	60da      	str	r2, [r3, #12]
 800bcae:	4a3f      	ldr	r2, [pc, #252]	; (800bdac <tcp_process+0x7cc>)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6013      	str	r3, [r2, #0]
 800bcb4:	f003 f8e8 	bl	800ee88 <tcp_timer_needed>
      }
      break;
 800bcb8:	e06c      	b.n	800bd94 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 f984 	bl	800bfc8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bcc0:	4b3b      	ldr	r3, [pc, #236]	; (800bdb0 <tcp_process+0x7d0>)
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	f003 0310 	and.w	r3, r3, #16
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d065      	beq.n	800bd98 <tcp_process+0x7b8>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcd0:	4b38      	ldr	r3, [pc, #224]	; (800bdb4 <tcp_process+0x7d4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d15f      	bne.n	800bd98 <tcp_process+0x7b8>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d15b      	bne.n	800bd98 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7fe fcf3 	bl	800a6cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bce6:	4b35      	ldr	r3, [pc, #212]	; (800bdbc <tcp_process+0x7dc>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d105      	bne.n	800bcfc <tcp_process+0x71c>
 800bcf0:	4b32      	ldr	r3, [pc, #200]	; (800bdbc <tcp_process+0x7dc>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	4a31      	ldr	r2, [pc, #196]	; (800bdbc <tcp_process+0x7dc>)
 800bcf8:	6013      	str	r3, [r2, #0]
 800bcfa:	e013      	b.n	800bd24 <tcp_process+0x744>
 800bcfc:	4b2f      	ldr	r3, [pc, #188]	; (800bdbc <tcp_process+0x7dc>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	e00c      	b.n	800bd1e <tcp_process+0x73e>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d104      	bne.n	800bd18 <tcp_process+0x738>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	60da      	str	r2, [r3, #12]
 800bd16:	e005      	b.n	800bd24 <tcp_process+0x744>
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	60fb      	str	r3, [r7, #12]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1ef      	bne.n	800bd04 <tcp_process+0x724>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	60da      	str	r2, [r3, #12]
 800bd2a:	4b1f      	ldr	r3, [pc, #124]	; (800bda8 <tcp_process+0x7c8>)
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	220a      	movs	r2, #10
 800bd34:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bd36:	4b1d      	ldr	r3, [pc, #116]	; (800bdac <tcp_process+0x7cc>)
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	60da      	str	r2, [r3, #12]
 800bd3e:	4a1b      	ldr	r2, [pc, #108]	; (800bdac <tcp_process+0x7cc>)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6013      	str	r3, [r2, #0]
 800bd44:	f003 f8a0 	bl	800ee88 <tcp_timer_needed>
      }
      break;
 800bd48:	e026      	b.n	800bd98 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f93c 	bl	800bfc8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bd50:	4b17      	ldr	r3, [pc, #92]	; (800bdb0 <tcp_process+0x7d0>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	f003 0310 	and.w	r3, r3, #16
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d01f      	beq.n	800bd9c <tcp_process+0x7bc>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd60:	4b14      	ldr	r3, [pc, #80]	; (800bdb4 <tcp_process+0x7d4>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d119      	bne.n	800bd9c <tcp_process+0x7bc>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d115      	bne.n	800bd9c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800bd70:	4b11      	ldr	r3, [pc, #68]	; (800bdb8 <tcp_process+0x7d8>)
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	f043 0310 	orr.w	r3, r3, #16
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	4b0f      	ldr	r3, [pc, #60]	; (800bdb8 <tcp_process+0x7d8>)
 800bd7c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bd7e:	e00d      	b.n	800bd9c <tcp_process+0x7bc>
    default:
      break;
 800bd80:	bf00      	nop
 800bd82:	e00c      	b.n	800bd9e <tcp_process+0x7be>
      break;
 800bd84:	bf00      	nop
 800bd86:	e00a      	b.n	800bd9e <tcp_process+0x7be>
      break;
 800bd88:	bf00      	nop
 800bd8a:	e008      	b.n	800bd9e <tcp_process+0x7be>
      break;
 800bd8c:	bf00      	nop
 800bd8e:	e006      	b.n	800bd9e <tcp_process+0x7be>
      break;
 800bd90:	bf00      	nop
 800bd92:	e004      	b.n	800bd9e <tcp_process+0x7be>
      break;
 800bd94:	bf00      	nop
 800bd96:	e002      	b.n	800bd9e <tcp_process+0x7be>
      break;
 800bd98:	bf00      	nop
 800bd9a:	e000      	b.n	800bd9e <tcp_process+0x7be>
      break;
 800bd9c:	bf00      	nop
  }
  return ERR_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3724      	adds	r7, #36	; 0x24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd90      	pop	{r4, r7, pc}
 800bda8:	20006d04 	.word	0x20006d04
 800bdac:	20006d18 	.word	0x20006d18
 800bdb0:	200000fc 	.word	0x200000fc
 800bdb4:	200000f4 	.word	0x200000f4
 800bdb8:	200000fd 	.word	0x200000fd
 800bdbc:	20006d08 	.word	0x20006d08

0800bdc0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bdc0:	b590      	push	{r4, r7, lr}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d106      	bne.n	800bdde <tcp_oos_insert_segment+0x1e>
 800bdd0:	4b3b      	ldr	r3, [pc, #236]	; (800bec0 <tcp_oos_insert_segment+0x100>)
 800bdd2:	f240 421f 	movw	r2, #1055	; 0x41f
 800bdd6:	493b      	ldr	r1, [pc, #236]	; (800bec4 <tcp_oos_insert_segment+0x104>)
 800bdd8:	483b      	ldr	r0, [pc, #236]	; (800bec8 <tcp_oos_insert_segment+0x108>)
 800bdda:	f008 f815 	bl	8013e08 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	899b      	ldrh	r3, [r3, #12]
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fb fa0c 	bl	8007204 <lwip_htons>
 800bdec:	4603      	mov	r3, r0
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	f003 0301 	and.w	r3, r3, #1
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d028      	beq.n	800be4a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bdf8:	6838      	ldr	r0, [r7, #0]
 800bdfa:	f7fe f9af 	bl	800a15c <tcp_segs_free>
    next = NULL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	603b      	str	r3, [r7, #0]
 800be02:	e056      	b.n	800beb2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	899b      	ldrh	r3, [r3, #12]
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7fb f9f9 	bl	8007204 <lwip_htons>
 800be12:	4603      	mov	r3, r0
 800be14:	b2db      	uxtb	r3, r3
 800be16:	f003 0301 	and.w	r3, r3, #1
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00d      	beq.n	800be3a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	899b      	ldrh	r3, [r3, #12]
 800be24:	b29c      	uxth	r4, r3
 800be26:	2001      	movs	r0, #1
 800be28:	f7fb f9ec 	bl	8007204 <lwip_htons>
 800be2c:	4603      	mov	r3, r0
 800be2e:	461a      	mov	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	4322      	orrs	r2, r4
 800be36:	b292      	uxth	r2, r2
 800be38:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f7fe f99e 	bl	800a186 <tcp_seg_free>
    while (next &&
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00e      	beq.n	800be6e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	891b      	ldrh	r3, [r3, #8]
 800be54:	461a      	mov	r2, r3
 800be56:	4b1d      	ldr	r3, [pc, #116]	; (800becc <tcp_oos_insert_segment+0x10c>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	441a      	add	r2, r3
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	8909      	ldrh	r1, [r1, #8]
 800be66:	440b      	add	r3, r1
 800be68:	1ad3      	subs	r3, r2, r3
    while (next &&
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	daca      	bge.n	800be04 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d01e      	beq.n	800beb2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	891b      	ldrh	r3, [r3, #8]
 800be78:	461a      	mov	r2, r3
 800be7a:	4b14      	ldr	r3, [pc, #80]	; (800becc <tcp_oos_insert_segment+0x10c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	441a      	add	r2, r3
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	1ad3      	subs	r3, r2, r3
    if (next &&
 800be88:	2b00      	cmp	r3, #0
 800be8a:	dd12      	ble.n	800beb2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	b29a      	uxth	r2, r3
 800be94:	4b0d      	ldr	r3, [pc, #52]	; (800becc <tcp_oos_insert_segment+0x10c>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	b29b      	uxth	r3, r3
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	685a      	ldr	r2, [r3, #4]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	891b      	ldrh	r3, [r3, #8]
 800beaa:	4619      	mov	r1, r3
 800beac:	4610      	mov	r0, r2
 800beae:	f7fc fb07 	bl	80084c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	683a      	ldr	r2, [r7, #0]
 800beb6:	601a      	str	r2, [r3, #0]
}
 800beb8:	bf00      	nop
 800beba:	3714      	adds	r7, #20
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd90      	pop	{r4, r7, pc}
 800bec0:	08016a04 	.word	0x08016a04
 800bec4:	08016cc4 	.word	0x08016cc4
 800bec8:	08016a50 	.word	0x08016a50
 800becc:	200000f0 	.word	0x200000f0

0800bed0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bed0:	b5b0      	push	{r4, r5, r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bede:	e03e      	b.n	800bf5e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fc fcf4 	bl	80088dc <pbuf_clen>
 800bef4:	4603      	mov	r3, r0
 800bef6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800befe:	8a7a      	ldrh	r2, [r7, #18]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d906      	bls.n	800bf12 <tcp_free_acked_segments+0x42>
 800bf04:	4b2a      	ldr	r3, [pc, #168]	; (800bfb0 <tcp_free_acked_segments+0xe0>)
 800bf06:	f240 4257 	movw	r2, #1111	; 0x457
 800bf0a:	492a      	ldr	r1, [pc, #168]	; (800bfb4 <tcp_free_acked_segments+0xe4>)
 800bf0c:	482a      	ldr	r0, [pc, #168]	; (800bfb8 <tcp_free_acked_segments+0xe8>)
 800bf0e:	f007 ff7b 	bl	8013e08 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800bf18:	8a7b      	ldrh	r3, [r7, #18]
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	891a      	ldrh	r2, [r3, #8]
 800bf28:	4b24      	ldr	r3, [pc, #144]	; (800bfbc <tcp_free_acked_segments+0xec>)
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	4b22      	ldr	r3, [pc, #136]	; (800bfbc <tcp_free_acked_segments+0xec>)
 800bf32:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bf34:	6978      	ldr	r0, [r7, #20]
 800bf36:	f7fe f926 	bl	800a186 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00c      	beq.n	800bf5e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d109      	bne.n	800bf5e <tcp_free_acked_segments+0x8e>
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d106      	bne.n	800bf5e <tcp_free_acked_segments+0x8e>
 800bf50:	4b17      	ldr	r3, [pc, #92]	; (800bfb0 <tcp_free_acked_segments+0xe0>)
 800bf52:	f240 4261 	movw	r2, #1121	; 0x461
 800bf56:	491a      	ldr	r1, [pc, #104]	; (800bfc0 <tcp_free_acked_segments+0xf0>)
 800bf58:	4817      	ldr	r0, [pc, #92]	; (800bfb8 <tcp_free_acked_segments+0xe8>)
 800bf5a:	f007 ff55 	bl	8013e08 <iprintf>
  while (seg_list != NULL &&
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d020      	beq.n	800bfa6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fb f95f 	bl	800722e <lwip_htonl>
 800bf70:	4604      	mov	r4, r0
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	891b      	ldrh	r3, [r3, #8]
 800bf76:	461d      	mov	r5, r3
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	899b      	ldrh	r3, [r3, #12]
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7fb f93f 	bl	8007204 <lwip_htons>
 800bf86:	4603      	mov	r3, r0
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	f003 0303 	and.w	r3, r3, #3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d001      	beq.n	800bf96 <tcp_free_acked_segments+0xc6>
 800bf92:	2301      	movs	r3, #1
 800bf94:	e000      	b.n	800bf98 <tcp_free_acked_segments+0xc8>
 800bf96:	2300      	movs	r3, #0
 800bf98:	442b      	add	r3, r5
 800bf9a:	18e2      	adds	r2, r4, r3
 800bf9c:	4b09      	ldr	r3, [pc, #36]	; (800bfc4 <tcp_free_acked_segments+0xf4>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	dd9c      	ble.n	800bee0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bfa6:	68bb      	ldr	r3, [r7, #8]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bdb0      	pop	{r4, r5, r7, pc}
 800bfb0:	08016a04 	.word	0x08016a04
 800bfb4:	08016cec 	.word	0x08016cec
 800bfb8:	08016a50 	.word	0x08016a50
 800bfbc:	200000f8 	.word	0x200000f8
 800bfc0:	08016d14 	.word	0x08016d14
 800bfc4:	200000f4 	.word	0x200000f4

0800bfc8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bfc8:	b5b0      	push	{r4, r5, r7, lr}
 800bfca:	b094      	sub	sp, #80	; 0x50
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d106      	bne.n	800bfe8 <tcp_receive+0x20>
 800bfda:	4ba6      	ldr	r3, [pc, #664]	; (800c274 <tcp_receive+0x2ac>)
 800bfdc:	f240 427b 	movw	r2, #1147	; 0x47b
 800bfe0:	49a5      	ldr	r1, [pc, #660]	; (800c278 <tcp_receive+0x2b0>)
 800bfe2:	48a6      	ldr	r0, [pc, #664]	; (800c27c <tcp_receive+0x2b4>)
 800bfe4:	f007 ff10 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	7d1b      	ldrb	r3, [r3, #20]
 800bfec:	2b03      	cmp	r3, #3
 800bfee:	d806      	bhi.n	800bffe <tcp_receive+0x36>
 800bff0:	4ba0      	ldr	r3, [pc, #640]	; (800c274 <tcp_receive+0x2ac>)
 800bff2:	f240 427c 	movw	r2, #1148	; 0x47c
 800bff6:	49a2      	ldr	r1, [pc, #648]	; (800c280 <tcp_receive+0x2b8>)
 800bff8:	48a0      	ldr	r0, [pc, #640]	; (800c27c <tcp_receive+0x2b4>)
 800bffa:	f007 ff05 	bl	8013e08 <iprintf>

  if (flags & TCP_ACK) {
 800bffe:	4ba1      	ldr	r3, [pc, #644]	; (800c284 <tcp_receive+0x2bc>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	f003 0310 	and.w	r3, r3, #16
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 8263 	beq.w	800c4d2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c012:	461a      	mov	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c018:	4413      	add	r3, r2
 800c01a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c020:	4b99      	ldr	r3, [pc, #612]	; (800c288 <tcp_receive+0x2c0>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	db1b      	blt.n	800c062 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c02e:	4b96      	ldr	r3, [pc, #600]	; (800c288 <tcp_receive+0x2c0>)
 800c030:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c032:	429a      	cmp	r2, r3
 800c034:	d106      	bne.n	800c044 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c03a:	4b94      	ldr	r3, [pc, #592]	; (800c28c <tcp_receive+0x2c4>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	2b00      	cmp	r3, #0
 800c042:	db0e      	blt.n	800c062 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c048:	4b90      	ldr	r3, [pc, #576]	; (800c28c <tcp_receive+0x2c4>)
 800c04a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d125      	bne.n	800c09c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c050:	4b8f      	ldr	r3, [pc, #572]	; (800c290 <tcp_receive+0x2c8>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	89db      	ldrh	r3, [r3, #14]
 800c056:	b29a      	uxth	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c05e:	429a      	cmp	r2, r3
 800c060:	d91c      	bls.n	800c09c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c062:	4b8b      	ldr	r3, [pc, #556]	; (800c290 <tcp_receive+0x2c8>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	89db      	ldrh	r3, [r3, #14]
 800c068:	b29a      	uxth	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d205      	bcs.n	800c08c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c08c:	4b7e      	ldr	r3, [pc, #504]	; (800c288 <tcp_receive+0x2c0>)
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c094:	4b7d      	ldr	r3, [pc, #500]	; (800c28c <tcp_receive+0x2c4>)
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c09c:	4b7b      	ldr	r3, [pc, #492]	; (800c28c <tcp_receive+0x2c4>)
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0a4:	1ad3      	subs	r3, r2, r3
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	dc58      	bgt.n	800c15c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c0aa:	4b7a      	ldr	r3, [pc, #488]	; (800c294 <tcp_receive+0x2cc>)
 800c0ac:	881b      	ldrh	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d14b      	bne.n	800c14a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c0bc:	4413      	add	r3, r2
 800c0be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d142      	bne.n	800c14a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	db3d      	blt.n	800c14a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0d2:	4b6e      	ldr	r3, [pc, #440]	; (800c28c <tcp_receive+0x2c4>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d137      	bne.n	800c14a <tcp_receive+0x182>
              found_dupack = 1;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c0e4:	2bff      	cmp	r3, #255	; 0xff
 800c0e6:	d007      	beq.n	800c0f8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	d91b      	bls.n	800c13a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c10c:	4413      	add	r3, r2
 800c10e:	b29a      	uxth	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c116:	429a      	cmp	r2, r3
 800c118:	d30a      	bcc.n	800c130 <tcp_receive+0x168>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c124:	4413      	add	r3, r2
 800c126:	b29a      	uxth	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c12e:	e004      	b.n	800c13a <tcp_receive+0x172>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c136:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c140:	2b02      	cmp	r3, #2
 800c142:	d902      	bls.n	800c14a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f002 fb41 	bl	800e7cc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c14a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f040 8160 	bne.w	800c412 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c15a:	e15a      	b.n	800c412 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c15c:	4b4b      	ldr	r3, [pc, #300]	; (800c28c <tcp_receive+0x2c4>)
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c164:	1ad3      	subs	r3, r2, r3
 800c166:	3b01      	subs	r3, #1
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f2c0 814d 	blt.w	800c408 <tcp_receive+0x440>
 800c16e:	4b47      	ldr	r3, [pc, #284]	; (800c28c <tcp_receive+0x2c4>)
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c176:	1ad3      	subs	r3, r2, r3
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f300 8145 	bgt.w	800c408 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	8b5b      	ldrh	r3, [r3, #26]
 800c182:	f003 0304 	and.w	r3, r3, #4
 800c186:	2b00      	cmp	r3, #0
 800c188:	d010      	beq.n	800c1ac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	8b5b      	ldrh	r3, [r3, #26]
 800c18e:	f023 0304 	bic.w	r3, r3, #4
 800c192:	b29a      	uxth	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c1ba:	10db      	asrs	r3, r3, #3
 800c1bc:	b21b      	sxth	r3, r3
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	4413      	add	r3, r2
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	b21a      	sxth	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c1d4:	4b2d      	ldr	r3, [pc, #180]	; (800c28c <tcp_receive+0x2c4>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c1ec:	4b27      	ldr	r3, [pc, #156]	; (800c28c <tcp_receive+0x2c4>)
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	7d1b      	ldrb	r3, [r3, #20]
 800c1f8:	2b03      	cmp	r3, #3
 800c1fa:	f240 8096 	bls.w	800c32a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d244      	bcs.n	800c298 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	8b5b      	ldrh	r3, [r3, #26]
 800c212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c216:	2b00      	cmp	r3, #0
 800c218:	d001      	beq.n	800c21e <tcp_receive+0x256>
 800c21a:	2301      	movs	r3, #1
 800c21c:	e000      	b.n	800c220 <tcp_receive+0x258>
 800c21e:	2302      	movs	r3, #2
 800c220:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c224:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c228:	b29a      	uxth	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c22e:	fb12 f303 	smulbb	r3, r2, r3
 800c232:	b29b      	uxth	r3, r3
 800c234:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c236:	4293      	cmp	r3, r2
 800c238:	bf28      	it	cs
 800c23a:	4613      	movcs	r3, r2
 800c23c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c244:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c246:	4413      	add	r3, r2
 800c248:	b29a      	uxth	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c250:	429a      	cmp	r2, r3
 800c252:	d309      	bcc.n	800c268 <tcp_receive+0x2a0>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c25a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c25c:	4413      	add	r3, r2
 800c25e:	b29a      	uxth	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c266:	e060      	b.n	800c32a <tcp_receive+0x362>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c26e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c272:	e05a      	b.n	800c32a <tcp_receive+0x362>
 800c274:	08016a04 	.word	0x08016a04
 800c278:	08016d34 	.word	0x08016d34
 800c27c:	08016a50 	.word	0x08016a50
 800c280:	08016d50 	.word	0x08016d50
 800c284:	200000fc 	.word	0x200000fc
 800c288:	200000f0 	.word	0x200000f0
 800c28c:	200000f4 	.word	0x200000f4
 800c290:	200000e0 	.word	0x200000e0
 800c294:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c29e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c2a0:	4413      	add	r3, r2
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d309      	bcc.n	800c2c2 <tcp_receive+0x2fa>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c2b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c2b6:	4413      	add	r3, r2
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c2c0:	e004      	b.n	800c2cc <tcp_receive+0x304>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d326      	bcc.n	800c32a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	b29a      	uxth	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2fc:	4413      	add	r3, r2
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c306:	429a      	cmp	r2, r3
 800c308:	d30a      	bcc.n	800c320 <tcp_receive+0x358>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c314:	4413      	add	r3, r2
 800c316:	b29a      	uxth	r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c31e:	e004      	b.n	800c32a <tcp_receive+0x362>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c326:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c332:	4a98      	ldr	r2, [pc, #608]	; (800c594 <tcp_receive+0x5cc>)
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f7ff fdcb 	bl	800bed0 <tcp_free_acked_segments>
 800c33a:	4602      	mov	r2, r0
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c348:	4a93      	ldr	r2, [pc, #588]	; (800c598 <tcp_receive+0x5d0>)
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f7ff fdc0 	bl	800bed0 <tcp_free_acked_segments>
 800c350:	4602      	mov	r2, r0
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d104      	bne.n	800c368 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c364:	861a      	strh	r2, [r3, #48]	; 0x30
 800c366:	e002      	b.n	800c36e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d103      	bne.n	800c384 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c38a:	4b84      	ldr	r3, [pc, #528]	; (800c59c <tcp_receive+0x5d4>)
 800c38c:	881b      	ldrh	r3, [r3, #0]
 800c38e:	4413      	add	r3, r2
 800c390:	b29a      	uxth	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	8b5b      	ldrh	r3, [r3, #26]
 800c39c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d035      	beq.n	800c410 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d118      	bne.n	800c3de <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00c      	beq.n	800c3ce <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fa ff34 	bl	800722e <lwip_htonl>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	dc20      	bgt.n	800c410 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	8b5b      	ldrh	r3, [r3, #26]
 800c3d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c3dc:	e018      	b.n	800c410 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fa ff1f 	bl	800722e <lwip_htonl>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	1ae3      	subs	r3, r4, r3
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	dc0b      	bgt.n	800c410 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	8b5b      	ldrh	r3, [r3, #26]
 800c3fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c400:	b29a      	uxth	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c406:	e003      	b.n	800c410 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f002 fbcd 	bl	800eba8 <tcp_send_empty_ack>
 800c40e:	e000      	b.n	800c412 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c410:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c416:	2b00      	cmp	r3, #0
 800c418:	d05b      	beq.n	800c4d2 <tcp_receive+0x50a>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c41e:	4b60      	ldr	r3, [pc, #384]	; (800c5a0 <tcp_receive+0x5d8>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	1ad3      	subs	r3, r2, r3
 800c424:	2b00      	cmp	r3, #0
 800c426:	da54      	bge.n	800c4d2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c428:	4b5e      	ldr	r3, [pc, #376]	; (800c5a4 <tcp_receive+0x5dc>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c432:	b29b      	uxth	r3, r3
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	b29b      	uxth	r3, r3
 800c438:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c43c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c446:	10db      	asrs	r3, r3, #3
 800c448:	b21b      	sxth	r3, r3
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	b29b      	uxth	r3, r3
 800c450:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c460:	4413      	add	r3, r2
 800c462:	b29b      	uxth	r3, r3
 800c464:	b21a      	sxth	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c46a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c46e:	2b00      	cmp	r3, #0
 800c470:	da05      	bge.n	800c47e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800c472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c476:	425b      	negs	r3, r3
 800c478:	b29b      	uxth	r3, r3
 800c47a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c47e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c488:	109b      	asrs	r3, r3, #2
 800c48a:	b21b      	sxth	r3, r3
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	b29b      	uxth	r3, r3
 800c492:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c4a2:	4413      	add	r3, r2
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	b21a      	sxth	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c4b2:	10db      	asrs	r3, r3, #3
 800c4b4:	b21b      	sxth	r3, r3
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	4413      	add	r3, r2
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	b21a      	sxth	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c4d2:	4b35      	ldr	r3, [pc, #212]	; (800c5a8 <tcp_receive+0x5e0>)
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f000 84e1 	beq.w	800ce9e <tcp_receive+0xed6>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	7d1b      	ldrb	r3, [r3, #20]
 800c4e0:	2b06      	cmp	r3, #6
 800c4e2:	f200 84dc 	bhi.w	800ce9e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4ea:	4b30      	ldr	r3, [pc, #192]	; (800c5ac <tcp_receive+0x5e4>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	3b01      	subs	r3, #1
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f2c0 808e 	blt.w	800c614 <tcp_receive+0x64c>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4fc:	4b2a      	ldr	r3, [pc, #168]	; (800c5a8 <tcp_receive+0x5e0>)
 800c4fe:	881b      	ldrh	r3, [r3, #0]
 800c500:	4619      	mov	r1, r3
 800c502:	4b2a      	ldr	r3, [pc, #168]	; (800c5ac <tcp_receive+0x5e4>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	440b      	add	r3, r1
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	3301      	adds	r3, #1
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f300 8081 	bgt.w	800c614 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c512:	4b27      	ldr	r3, [pc, #156]	; (800c5b0 <tcp_receive+0x5e8>)
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c51c:	4b23      	ldr	r3, [pc, #140]	; (800c5ac <tcp_receive+0x5e4>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c524:	4b22      	ldr	r3, [pc, #136]	; (800c5b0 <tcp_receive+0x5e8>)
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d106      	bne.n	800c53a <tcp_receive+0x572>
 800c52c:	4b21      	ldr	r3, [pc, #132]	; (800c5b4 <tcp_receive+0x5ec>)
 800c52e:	f240 5294 	movw	r2, #1428	; 0x594
 800c532:	4921      	ldr	r1, [pc, #132]	; (800c5b8 <tcp_receive+0x5f0>)
 800c534:	4821      	ldr	r0, [pc, #132]	; (800c5bc <tcp_receive+0x5f4>)
 800c536:	f007 fc67 	bl	8013e08 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c540:	4293      	cmp	r3, r2
 800c542:	d906      	bls.n	800c552 <tcp_receive+0x58a>
 800c544:	4b1b      	ldr	r3, [pc, #108]	; (800c5b4 <tcp_receive+0x5ec>)
 800c546:	f240 5295 	movw	r2, #1429	; 0x595
 800c54a:	491d      	ldr	r1, [pc, #116]	; (800c5c0 <tcp_receive+0x5f8>)
 800c54c:	481b      	ldr	r0, [pc, #108]	; (800c5bc <tcp_receive+0x5f4>)
 800c54e:	f007 fc5b 	bl	8013e08 <iprintf>
      off = (u16_t)off32;
 800c552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c554:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c558:	4b15      	ldr	r3, [pc, #84]	; (800c5b0 <tcp_receive+0x5e8>)
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	891b      	ldrh	r3, [r3, #8]
 800c55e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c562:	429a      	cmp	r2, r3
 800c564:	d906      	bls.n	800c574 <tcp_receive+0x5ac>
 800c566:	4b13      	ldr	r3, [pc, #76]	; (800c5b4 <tcp_receive+0x5ec>)
 800c568:	f240 5297 	movw	r2, #1431	; 0x597
 800c56c:	4915      	ldr	r1, [pc, #84]	; (800c5c4 <tcp_receive+0x5fc>)
 800c56e:	4813      	ldr	r0, [pc, #76]	; (800c5bc <tcp_receive+0x5f4>)
 800c570:	f007 fc4a 	bl	8013e08 <iprintf>
      inseg.len -= off;
 800c574:	4b0e      	ldr	r3, [pc, #56]	; (800c5b0 <tcp_receive+0x5e8>)
 800c576:	891a      	ldrh	r2, [r3, #8]
 800c578:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	b29a      	uxth	r2, r3
 800c580:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <tcp_receive+0x5e8>)
 800c582:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c584:	4b0a      	ldr	r3, [pc, #40]	; (800c5b0 <tcp_receive+0x5e8>)
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	891a      	ldrh	r2, [r3, #8]
 800c58a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c58e:	1ad3      	subs	r3, r2, r3
 800c590:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c592:	e029      	b.n	800c5e8 <tcp_receive+0x620>
 800c594:	08016d6c 	.word	0x08016d6c
 800c598:	08016d74 	.word	0x08016d74
 800c59c:	200000f8 	.word	0x200000f8
 800c5a0:	200000f4 	.word	0x200000f4
 800c5a4:	20006d0c 	.word	0x20006d0c
 800c5a8:	200000fa 	.word	0x200000fa
 800c5ac:	200000f0 	.word	0x200000f0
 800c5b0:	200000d0 	.word	0x200000d0
 800c5b4:	08016a04 	.word	0x08016a04
 800c5b8:	08016d7c 	.word	0x08016d7c
 800c5bc:	08016a50 	.word	0x08016a50
 800c5c0:	08016d8c 	.word	0x08016d8c
 800c5c4:	08016d9c 	.word	0x08016d9c
        off -= p->len;
 800c5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5ca:	895b      	ldrh	r3, [r3, #10]
 800c5cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c5d0:	1ad3      	subs	r3, r2, r3
 800c5d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c5d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c5da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c5dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5de:	2200      	movs	r2, #0
 800c5e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c5e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c5e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5ea:	895b      	ldrh	r3, [r3, #10]
 800c5ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d8e9      	bhi.n	800c5c8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c5f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c5fc:	f7fc f860 	bl	80086c0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c604:	4a91      	ldr	r2, [pc, #580]	; (800c84c <tcp_receive+0x884>)
 800c606:	6013      	str	r3, [r2, #0]
 800c608:	4b91      	ldr	r3, [pc, #580]	; (800c850 <tcp_receive+0x888>)
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	4a8f      	ldr	r2, [pc, #572]	; (800c84c <tcp_receive+0x884>)
 800c60e:	6812      	ldr	r2, [r2, #0]
 800c610:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c612:	e00d      	b.n	800c630 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c614:	4b8d      	ldr	r3, [pc, #564]	; (800c84c <tcp_receive+0x884>)
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61c:	1ad3      	subs	r3, r2, r3
 800c61e:	2b00      	cmp	r3, #0
 800c620:	da06      	bge.n	800c630 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	8b5b      	ldrh	r3, [r3, #26]
 800c626:	f043 0302 	orr.w	r3, r3, #2
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c630:	4b86      	ldr	r3, [pc, #536]	; (800c84c <tcp_receive+0x884>)
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f2c0 842a 	blt.w	800ce94 <tcp_receive+0xecc>
 800c640:	4b82      	ldr	r3, [pc, #520]	; (800c84c <tcp_receive+0x884>)
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c648:	6879      	ldr	r1, [r7, #4]
 800c64a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c64c:	440b      	add	r3, r1
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	3301      	adds	r3, #1
 800c652:	2b00      	cmp	r3, #0
 800c654:	f300 841e 	bgt.w	800ce94 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c65c:	4b7b      	ldr	r3, [pc, #492]	; (800c84c <tcp_receive+0x884>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	429a      	cmp	r2, r3
 800c662:	f040 829a 	bne.w	800cb9a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c666:	4b7a      	ldr	r3, [pc, #488]	; (800c850 <tcp_receive+0x888>)
 800c668:	891c      	ldrh	r4, [r3, #8]
 800c66a:	4b79      	ldr	r3, [pc, #484]	; (800c850 <tcp_receive+0x888>)
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	899b      	ldrh	r3, [r3, #12]
 800c670:	b29b      	uxth	r3, r3
 800c672:	4618      	mov	r0, r3
 800c674:	f7fa fdc6 	bl	8007204 <lwip_htons>
 800c678:	4603      	mov	r3, r0
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	f003 0303 	and.w	r3, r3, #3
 800c680:	2b00      	cmp	r3, #0
 800c682:	d001      	beq.n	800c688 <tcp_receive+0x6c0>
 800c684:	2301      	movs	r3, #1
 800c686:	e000      	b.n	800c68a <tcp_receive+0x6c2>
 800c688:	2300      	movs	r3, #0
 800c68a:	4423      	add	r3, r4
 800c68c:	b29a      	uxth	r2, r3
 800c68e:	4b71      	ldr	r3, [pc, #452]	; (800c854 <tcp_receive+0x88c>)
 800c690:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c696:	4b6f      	ldr	r3, [pc, #444]	; (800c854 <tcp_receive+0x88c>)
 800c698:	881b      	ldrh	r3, [r3, #0]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d275      	bcs.n	800c78a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c69e:	4b6c      	ldr	r3, [pc, #432]	; (800c850 <tcp_receive+0x888>)
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	899b      	ldrh	r3, [r3, #12]
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fa fdac 	bl	8007204 <lwip_htons>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	f003 0301 	and.w	r3, r3, #1
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d01f      	beq.n	800c6f8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c6b8:	4b65      	ldr	r3, [pc, #404]	; (800c850 <tcp_receive+0x888>)
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	899b      	ldrh	r3, [r3, #12]
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	b21b      	sxth	r3, r3
 800c6c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c6c6:	b21c      	sxth	r4, r3
 800c6c8:	4b61      	ldr	r3, [pc, #388]	; (800c850 <tcp_receive+0x888>)
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	899b      	ldrh	r3, [r3, #12]
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fa fd97 	bl	8007204 <lwip_htons>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fa fd8e 	bl	8007204 <lwip_htons>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	b21b      	sxth	r3, r3
 800c6ec:	4323      	orrs	r3, r4
 800c6ee:	b21a      	sxth	r2, r3
 800c6f0:	4b57      	ldr	r3, [pc, #348]	; (800c850 <tcp_receive+0x888>)
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	b292      	uxth	r2, r2
 800c6f6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c6fc:	4b54      	ldr	r3, [pc, #336]	; (800c850 <tcp_receive+0x888>)
 800c6fe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c700:	4b53      	ldr	r3, [pc, #332]	; (800c850 <tcp_receive+0x888>)
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	899b      	ldrh	r3, [r3, #12]
 800c706:	b29b      	uxth	r3, r3
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fa fd7b 	bl	8007204 <lwip_htons>
 800c70e:	4603      	mov	r3, r0
 800c710:	b2db      	uxtb	r3, r3
 800c712:	f003 0302 	and.w	r3, r3, #2
 800c716:	2b00      	cmp	r3, #0
 800c718:	d005      	beq.n	800c726 <tcp_receive+0x75e>
            inseg.len -= 1;
 800c71a:	4b4d      	ldr	r3, [pc, #308]	; (800c850 <tcp_receive+0x888>)
 800c71c:	891b      	ldrh	r3, [r3, #8]
 800c71e:	3b01      	subs	r3, #1
 800c720:	b29a      	uxth	r2, r3
 800c722:	4b4b      	ldr	r3, [pc, #300]	; (800c850 <tcp_receive+0x888>)
 800c724:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c726:	4b4a      	ldr	r3, [pc, #296]	; (800c850 <tcp_receive+0x888>)
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	4a49      	ldr	r2, [pc, #292]	; (800c850 <tcp_receive+0x888>)
 800c72c:	8912      	ldrh	r2, [r2, #8]
 800c72e:	4611      	mov	r1, r2
 800c730:	4618      	mov	r0, r3
 800c732:	f7fb fec5 	bl	80084c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c736:	4b46      	ldr	r3, [pc, #280]	; (800c850 <tcp_receive+0x888>)
 800c738:	891c      	ldrh	r4, [r3, #8]
 800c73a:	4b45      	ldr	r3, [pc, #276]	; (800c850 <tcp_receive+0x888>)
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	899b      	ldrh	r3, [r3, #12]
 800c740:	b29b      	uxth	r3, r3
 800c742:	4618      	mov	r0, r3
 800c744:	f7fa fd5e 	bl	8007204 <lwip_htons>
 800c748:	4603      	mov	r3, r0
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	f003 0303 	and.w	r3, r3, #3
 800c750:	2b00      	cmp	r3, #0
 800c752:	d001      	beq.n	800c758 <tcp_receive+0x790>
 800c754:	2301      	movs	r3, #1
 800c756:	e000      	b.n	800c75a <tcp_receive+0x792>
 800c758:	2300      	movs	r3, #0
 800c75a:	4423      	add	r3, r4
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	4b3d      	ldr	r3, [pc, #244]	; (800c854 <tcp_receive+0x88c>)
 800c760:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c762:	4b3c      	ldr	r3, [pc, #240]	; (800c854 <tcp_receive+0x88c>)
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	461a      	mov	r2, r3
 800c768:	4b38      	ldr	r3, [pc, #224]	; (800c84c <tcp_receive+0x884>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	441a      	add	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c772:	6879      	ldr	r1, [r7, #4]
 800c774:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c776:	440b      	add	r3, r1
 800c778:	429a      	cmp	r2, r3
 800c77a:	d006      	beq.n	800c78a <tcp_receive+0x7c2>
 800c77c:	4b36      	ldr	r3, [pc, #216]	; (800c858 <tcp_receive+0x890>)
 800c77e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c782:	4936      	ldr	r1, [pc, #216]	; (800c85c <tcp_receive+0x894>)
 800c784:	4836      	ldr	r0, [pc, #216]	; (800c860 <tcp_receive+0x898>)
 800c786:	f007 fb3f 	bl	8013e08 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 80e7 	beq.w	800c962 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c794:	4b2e      	ldr	r3, [pc, #184]	; (800c850 <tcp_receive+0x888>)
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	899b      	ldrh	r3, [r3, #12]
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7fa fd31 	bl	8007204 <lwip_htons>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	f003 0301 	and.w	r3, r3, #1
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d010      	beq.n	800c7d0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c7ae:	e00a      	b.n	800c7c6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7b4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f7fd fce0 	bl	800a186 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d1f0      	bne.n	800c7b0 <tcp_receive+0x7e8>
 800c7ce:	e0c8      	b.n	800c962 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c7d6:	e052      	b.n	800c87e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	899b      	ldrh	r3, [r3, #12]
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fa fd0f 	bl	8007204 <lwip_htons>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d03d      	beq.n	800c86e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c7f2:	4b17      	ldr	r3, [pc, #92]	; (800c850 <tcp_receive+0x888>)
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	899b      	ldrh	r3, [r3, #12]
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fa fd02 	bl	8007204 <lwip_htons>
 800c800:	4603      	mov	r3, r0
 800c802:	b2db      	uxtb	r3, r3
 800c804:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d130      	bne.n	800c86e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c80c:	4b10      	ldr	r3, [pc, #64]	; (800c850 <tcp_receive+0x888>)
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	899b      	ldrh	r3, [r3, #12]
 800c812:	b29c      	uxth	r4, r3
 800c814:	2001      	movs	r0, #1
 800c816:	f7fa fcf5 	bl	8007204 <lwip_htons>
 800c81a:	4603      	mov	r3, r0
 800c81c:	461a      	mov	r2, r3
 800c81e:	4b0c      	ldr	r3, [pc, #48]	; (800c850 <tcp_receive+0x888>)
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	4322      	orrs	r2, r4
 800c824:	b292      	uxth	r2, r2
 800c826:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c828:	4b09      	ldr	r3, [pc, #36]	; (800c850 <tcp_receive+0x888>)
 800c82a:	891c      	ldrh	r4, [r3, #8]
 800c82c:	4b08      	ldr	r3, [pc, #32]	; (800c850 <tcp_receive+0x888>)
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	899b      	ldrh	r3, [r3, #12]
 800c832:	b29b      	uxth	r3, r3
 800c834:	4618      	mov	r0, r3
 800c836:	f7fa fce5 	bl	8007204 <lwip_htons>
 800c83a:	4603      	mov	r3, r0
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	f003 0303 	and.w	r3, r3, #3
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00e      	beq.n	800c864 <tcp_receive+0x89c>
 800c846:	2301      	movs	r3, #1
 800c848:	e00d      	b.n	800c866 <tcp_receive+0x89e>
 800c84a:	bf00      	nop
 800c84c:	200000f0 	.word	0x200000f0
 800c850:	200000d0 	.word	0x200000d0
 800c854:	200000fa 	.word	0x200000fa
 800c858:	08016a04 	.word	0x08016a04
 800c85c:	08016dac 	.word	0x08016dac
 800c860:	08016a50 	.word	0x08016a50
 800c864:	2300      	movs	r3, #0
 800c866:	4423      	add	r3, r4
 800c868:	b29a      	uxth	r2, r3
 800c86a:	4b98      	ldr	r3, [pc, #608]	; (800cacc <tcp_receive+0xb04>)
 800c86c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c870:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c878:	6938      	ldr	r0, [r7, #16]
 800c87a:	f7fd fc84 	bl	800a186 <tcp_seg_free>
            while (next &&
 800c87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00e      	beq.n	800c8a2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c884:	4b91      	ldr	r3, [pc, #580]	; (800cacc <tcp_receive+0xb04>)
 800c886:	881b      	ldrh	r3, [r3, #0]
 800c888:	461a      	mov	r2, r3
 800c88a:	4b91      	ldr	r3, [pc, #580]	; (800cad0 <tcp_receive+0xb08>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	441a      	add	r2, r3
 800c890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c898:	8909      	ldrh	r1, [r1, #8]
 800c89a:	440b      	add	r3, r1
 800c89c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	da9a      	bge.n	800c7d8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d059      	beq.n	800c95c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c8a8:	4b88      	ldr	r3, [pc, #544]	; (800cacc <tcp_receive+0xb04>)
 800c8aa:	881b      	ldrh	r3, [r3, #0]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	4b88      	ldr	r3, [pc, #544]	; (800cad0 <tcp_receive+0xb08>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	441a      	add	r2, r3
 800c8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	dd4d      	ble.n	800c95c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	4b81      	ldr	r3, [pc, #516]	; (800cad0 <tcp_receive+0xb08>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	4b80      	ldr	r3, [pc, #512]	; (800cad4 <tcp_receive+0xb0c>)
 800c8d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c8d6:	4b7f      	ldr	r3, [pc, #508]	; (800cad4 <tcp_receive+0xb0c>)
 800c8d8:	68db      	ldr	r3, [r3, #12]
 800c8da:	899b      	ldrh	r3, [r3, #12]
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fa fc90 	bl	8007204 <lwip_htons>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	f003 0302 	and.w	r3, r3, #2
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d005      	beq.n	800c8fc <tcp_receive+0x934>
                inseg.len -= 1;
 800c8f0:	4b78      	ldr	r3, [pc, #480]	; (800cad4 <tcp_receive+0xb0c>)
 800c8f2:	891b      	ldrh	r3, [r3, #8]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	4b76      	ldr	r3, [pc, #472]	; (800cad4 <tcp_receive+0xb0c>)
 800c8fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c8fc:	4b75      	ldr	r3, [pc, #468]	; (800cad4 <tcp_receive+0xb0c>)
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	4a74      	ldr	r2, [pc, #464]	; (800cad4 <tcp_receive+0xb0c>)
 800c902:	8912      	ldrh	r2, [r2, #8]
 800c904:	4611      	mov	r1, r2
 800c906:	4618      	mov	r0, r3
 800c908:	f7fb fdda 	bl	80084c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c90c:	4b71      	ldr	r3, [pc, #452]	; (800cad4 <tcp_receive+0xb0c>)
 800c90e:	891c      	ldrh	r4, [r3, #8]
 800c910:	4b70      	ldr	r3, [pc, #448]	; (800cad4 <tcp_receive+0xb0c>)
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	899b      	ldrh	r3, [r3, #12]
 800c916:	b29b      	uxth	r3, r3
 800c918:	4618      	mov	r0, r3
 800c91a:	f7fa fc73 	bl	8007204 <lwip_htons>
 800c91e:	4603      	mov	r3, r0
 800c920:	b2db      	uxtb	r3, r3
 800c922:	f003 0303 	and.w	r3, r3, #3
 800c926:	2b00      	cmp	r3, #0
 800c928:	d001      	beq.n	800c92e <tcp_receive+0x966>
 800c92a:	2301      	movs	r3, #1
 800c92c:	e000      	b.n	800c930 <tcp_receive+0x968>
 800c92e:	2300      	movs	r3, #0
 800c930:	4423      	add	r3, r4
 800c932:	b29a      	uxth	r2, r3
 800c934:	4b65      	ldr	r3, [pc, #404]	; (800cacc <tcp_receive+0xb04>)
 800c936:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c938:	4b64      	ldr	r3, [pc, #400]	; (800cacc <tcp_receive+0xb04>)
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	461a      	mov	r2, r3
 800c93e:	4b64      	ldr	r3, [pc, #400]	; (800cad0 <tcp_receive+0xb08>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	441a      	add	r2, r3
 800c944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d006      	beq.n	800c95c <tcp_receive+0x994>
 800c94e:	4b62      	ldr	r3, [pc, #392]	; (800cad8 <tcp_receive+0xb10>)
 800c950:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c954:	4961      	ldr	r1, [pc, #388]	; (800cadc <tcp_receive+0xb14>)
 800c956:	4862      	ldr	r0, [pc, #392]	; (800cae0 <tcp_receive+0xb18>)
 800c958:	f007 fa56 	bl	8013e08 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c960:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c962:	4b5a      	ldr	r3, [pc, #360]	; (800cacc <tcp_receive+0xb04>)
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	461a      	mov	r2, r3
 800c968:	4b59      	ldr	r3, [pc, #356]	; (800cad0 <tcp_receive+0xb08>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	441a      	add	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c976:	4b55      	ldr	r3, [pc, #340]	; (800cacc <tcp_receive+0xb04>)
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d206      	bcs.n	800c98c <tcp_receive+0x9c4>
 800c97e:	4b56      	ldr	r3, [pc, #344]	; (800cad8 <tcp_receive+0xb10>)
 800c980:	f240 6207 	movw	r2, #1543	; 0x607
 800c984:	4957      	ldr	r1, [pc, #348]	; (800cae4 <tcp_receive+0xb1c>)
 800c986:	4856      	ldr	r0, [pc, #344]	; (800cae0 <tcp_receive+0xb18>)
 800c988:	f007 fa3e 	bl	8013e08 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c990:	4b4e      	ldr	r3, [pc, #312]	; (800cacc <tcp_receive+0xb04>)
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	b29a      	uxth	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7fc fdb5 	bl	800950c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c9a2:	4b4c      	ldr	r3, [pc, #304]	; (800cad4 <tcp_receive+0xb0c>)
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	891b      	ldrh	r3, [r3, #8]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d006      	beq.n	800c9ba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c9ac:	4b49      	ldr	r3, [pc, #292]	; (800cad4 <tcp_receive+0xb0c>)
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	4a4d      	ldr	r2, [pc, #308]	; (800cae8 <tcp_receive+0xb20>)
 800c9b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c9b4:	4b47      	ldr	r3, [pc, #284]	; (800cad4 <tcp_receive+0xb0c>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c9ba:	4b46      	ldr	r3, [pc, #280]	; (800cad4 <tcp_receive+0xb0c>)
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	899b      	ldrh	r3, [r3, #12]
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fa fc1e 	bl	8007204 <lwip_htons>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	f003 0301 	and.w	r3, r3, #1
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f000 80b8 	beq.w	800cb46 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c9d6:	4b45      	ldr	r3, [pc, #276]	; (800caec <tcp_receive+0xb24>)
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	f043 0320 	orr.w	r3, r3, #32
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	4b42      	ldr	r3, [pc, #264]	; (800caec <tcp_receive+0xb24>)
 800c9e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c9e4:	e0af      	b.n	800cb46 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	4a36      	ldr	r2, [pc, #216]	; (800cad0 <tcp_receive+0xb08>)
 800c9f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	891b      	ldrh	r3, [r3, #8]
 800c9fc:	461c      	mov	r4, r3
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	899b      	ldrh	r3, [r3, #12]
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fa fbfc 	bl	8007204 <lwip_htons>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	f003 0303 	and.w	r3, r3, #3
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <tcp_receive+0xa54>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e000      	b.n	800ca1e <tcp_receive+0xa56>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	191a      	adds	r2, r3, r4
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca24:	441a      	add	r2, r3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca2e:	461c      	mov	r4, r3
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	891b      	ldrh	r3, [r3, #8]
 800ca34:	461d      	mov	r5, r3
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	899b      	ldrh	r3, [r3, #12]
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fa fbe0 	bl	8007204 <lwip_htons>
 800ca44:	4603      	mov	r3, r0
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	f003 0303 	and.w	r3, r3, #3
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d001      	beq.n	800ca54 <tcp_receive+0xa8c>
 800ca50:	2301      	movs	r3, #1
 800ca52:	e000      	b.n	800ca56 <tcp_receive+0xa8e>
 800ca54:	2300      	movs	r3, #0
 800ca56:	442b      	add	r3, r5
 800ca58:	429c      	cmp	r4, r3
 800ca5a:	d206      	bcs.n	800ca6a <tcp_receive+0xaa2>
 800ca5c:	4b1e      	ldr	r3, [pc, #120]	; (800cad8 <tcp_receive+0xb10>)
 800ca5e:	f240 622b 	movw	r2, #1579	; 0x62b
 800ca62:	4923      	ldr	r1, [pc, #140]	; (800caf0 <tcp_receive+0xb28>)
 800ca64:	481e      	ldr	r0, [pc, #120]	; (800cae0 <tcp_receive+0xb18>)
 800ca66:	f007 f9cf 	bl	8013e08 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	891b      	ldrh	r3, [r3, #8]
 800ca6e:	461c      	mov	r4, r3
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	899b      	ldrh	r3, [r3, #12]
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7fa fbc3 	bl	8007204 <lwip_htons>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	f003 0303 	and.w	r3, r3, #3
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d001      	beq.n	800ca8e <tcp_receive+0xac6>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e000      	b.n	800ca90 <tcp_receive+0xac8>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	1919      	adds	r1, r3, r4
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca96:	b28b      	uxth	r3, r1
 800ca98:	1ad3      	subs	r3, r2, r3
 800ca9a:	b29a      	uxth	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f7fc fd33 	bl	800950c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	891b      	ldrh	r3, [r3, #8]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d028      	beq.n	800cb02 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800cab0:	4b0d      	ldr	r3, [pc, #52]	; (800cae8 <tcp_receive+0xb20>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d01d      	beq.n	800caf4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800cab8:	4b0b      	ldr	r3, [pc, #44]	; (800cae8 <tcp_receive+0xb20>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	4619      	mov	r1, r3
 800cac2:	4610      	mov	r0, r2
 800cac4:	f7fb ff44 	bl	8008950 <pbuf_cat>
 800cac8:	e018      	b.n	800cafc <tcp_receive+0xb34>
 800caca:	bf00      	nop
 800cacc:	200000fa 	.word	0x200000fa
 800cad0:	200000f0 	.word	0x200000f0
 800cad4:	200000d0 	.word	0x200000d0
 800cad8:	08016a04 	.word	0x08016a04
 800cadc:	08016de4 	.word	0x08016de4
 800cae0:	08016a50 	.word	0x08016a50
 800cae4:	08016e20 	.word	0x08016e20
 800cae8:	20000100 	.word	0x20000100
 800caec:	200000fd 	.word	0x200000fd
 800caf0:	08016e40 	.word	0x08016e40
            } else {
              recv_data = cseg->p;
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	4a70      	ldr	r2, [pc, #448]	; (800ccbc <tcp_receive+0xcf4>)
 800cafa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2200      	movs	r2, #0
 800cb00:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	899b      	ldrh	r3, [r3, #12]
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fa fb7a 	bl	8007204 <lwip_htons>
 800cb10:	4603      	mov	r3, r0
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	f003 0301 	and.w	r3, r3, #1
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00d      	beq.n	800cb38 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800cb1c:	4b68      	ldr	r3, [pc, #416]	; (800ccc0 <tcp_receive+0xcf8>)
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	f043 0320 	orr.w	r3, r3, #32
 800cb24:	b2da      	uxtb	r2, r3
 800cb26:	4b66      	ldr	r3, [pc, #408]	; (800ccc0 <tcp_receive+0xcf8>)
 800cb28:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	7d1b      	ldrb	r3, [r3, #20]
 800cb2e:	2b04      	cmp	r3, #4
 800cb30:	d102      	bne.n	800cb38 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2207      	movs	r2, #7
 800cb36:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800cb40:	68b8      	ldr	r0, [r7, #8]
 800cb42:	f7fd fb20 	bl	800a186 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d008      	beq.n	800cb60 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb52:	68db      	ldr	r3, [r3, #12]
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	f43f af43 	beq.w	800c9e6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	8b5b      	ldrh	r3, [r3, #26]
 800cb64:	f003 0301 	and.w	r3, r3, #1
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00e      	beq.n	800cb8a <tcp_receive+0xbc2>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	8b5b      	ldrh	r3, [r3, #26]
 800cb70:	f023 0301 	bic.w	r3, r3, #1
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	835a      	strh	r2, [r3, #26]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	8b5b      	ldrh	r3, [r3, #26]
 800cb7e:	f043 0302 	orr.w	r3, r3, #2
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cb88:	e188      	b.n	800ce9c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	8b5b      	ldrh	r3, [r3, #26]
 800cb8e:	f043 0301 	orr.w	r3, r3, #1
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cb98:	e180      	b.n	800ce9c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d106      	bne.n	800cbb0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cba2:	4848      	ldr	r0, [pc, #288]	; (800ccc4 <tcp_receive+0xcfc>)
 800cba4:	f7fd fb08 	bl	800a1b8 <tcp_seg_copy>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	675a      	str	r2, [r3, #116]	; 0x74
 800cbae:	e16d      	b.n	800ce8c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbb8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbba:	e157      	b.n	800ce6c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	4b41      	ldr	r3, [pc, #260]	; (800ccc8 <tcp_receive+0xd00>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d11d      	bne.n	800cc06 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cbca:	4b3e      	ldr	r3, [pc, #248]	; (800ccc4 <tcp_receive+0xcfc>)
 800cbcc:	891a      	ldrh	r2, [r3, #8]
 800cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd0:	891b      	ldrh	r3, [r3, #8]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	f240 814f 	bls.w	800ce76 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cbd8:	483a      	ldr	r0, [pc, #232]	; (800ccc4 <tcp_receive+0xcfc>)
 800cbda:	f7fd faed 	bl	800a1b8 <tcp_seg_copy>
 800cbde:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f000 8149 	beq.w	800ce7a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800cbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d003      	beq.n	800cbf6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800cbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	e002      	b.n	800cbfc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	697a      	ldr	r2, [r7, #20]
 800cbfa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cbfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cbfe:	6978      	ldr	r0, [r7, #20]
 800cc00:	f7ff f8de 	bl	800bdc0 <tcp_oos_insert_segment>
                }
                break;
 800cc04:	e139      	b.n	800ce7a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d117      	bne.n	800cc3c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cc0c:	4b2e      	ldr	r3, [pc, #184]	; (800ccc8 <tcp_receive+0xd00>)
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	da57      	bge.n	800cccc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cc1c:	4829      	ldr	r0, [pc, #164]	; (800ccc4 <tcp_receive+0xcfc>)
 800cc1e:	f7fd facb 	bl	800a1b8 <tcp_seg_copy>
 800cc22:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 8129 	beq.w	800ce7e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	69ba      	ldr	r2, [r7, #24]
 800cc30:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800cc32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc34:	69b8      	ldr	r0, [r7, #24]
 800cc36:	f7ff f8c3 	bl	800bdc0 <tcp_oos_insert_segment>
                  }
                  break;
 800cc3a:	e120      	b.n	800ce7e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800cc3c:	4b22      	ldr	r3, [pc, #136]	; (800ccc8 <tcp_receive+0xd00>)
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	1ad3      	subs	r3, r2, r3
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	db3e      	blt.n	800cccc <tcp_receive+0xd04>
 800cc4e:	4b1e      	ldr	r3, [pc, #120]	; (800ccc8 <tcp_receive+0xd00>)
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	dc35      	bgt.n	800cccc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cc60:	4818      	ldr	r0, [pc, #96]	; (800ccc4 <tcp_receive+0xcfc>)
 800cc62:	f7fd faa9 	bl	800a1b8 <tcp_seg_copy>
 800cc66:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f000 8109 	beq.w	800ce82 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc78:	8912      	ldrh	r2, [r2, #8]
 800cc7a:	441a      	add	r2, r3
 800cc7c:	4b12      	ldr	r3, [pc, #72]	; (800ccc8 <tcp_receive+0xd00>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	1ad3      	subs	r3, r2, r3
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	dd12      	ble.n	800ccac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cc86:	4b10      	ldr	r3, [pc, #64]	; (800ccc8 <tcp_receive+0xd00>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc9a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc9e:	685a      	ldr	r2, [r3, #4]
 800cca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca2:	891b      	ldrh	r3, [r3, #8]
 800cca4:	4619      	mov	r1, r3
 800cca6:	4610      	mov	r0, r2
 800cca8:	f7fb fc0a 	bl	80084c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ccac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccae:	69fa      	ldr	r2, [r7, #28]
 800ccb0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ccb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ccb4:	69f8      	ldr	r0, [r7, #28]
 800ccb6:	f7ff f883 	bl	800bdc0 <tcp_oos_insert_segment>
                  }
                  break;
 800ccba:	e0e2      	b.n	800ce82 <tcp_receive+0xeba>
 800ccbc:	20000100 	.word	0x20000100
 800ccc0:	200000fd 	.word	0x200000fd
 800ccc4:	200000d0 	.word	0x200000d0
 800ccc8:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ccd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f040 80c6 	bne.w	800ce66 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ccda:	4b80      	ldr	r3, [pc, #512]	; (800cedc <tcp_receive+0xf14>)
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f340 80bd 	ble.w	800ce66 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ccec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	899b      	ldrh	r3, [r3, #12]
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fa fa85 	bl	8007204 <lwip_htons>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	f040 80bf 	bne.w	800ce86 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cd08:	4875      	ldr	r0, [pc, #468]	; (800cee0 <tcp_receive+0xf18>)
 800cd0a:	f7fd fa55 	bl	800a1b8 <tcp_seg_copy>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd12:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f000 80b6 	beq.w	800ce8a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd26:	8912      	ldrh	r2, [r2, #8]
 800cd28:	441a      	add	r2, r3
 800cd2a:	4b6c      	ldr	r3, [pc, #432]	; (800cedc <tcp_receive+0xf14>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	dd12      	ble.n	800cd5a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cd34:	4b69      	ldr	r3, [pc, #420]	; (800cedc <tcp_receive+0xf14>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd48:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd50:	891b      	ldrh	r3, [r3, #8]
 800cd52:	4619      	mov	r1, r3
 800cd54:	4610      	mov	r0, r2
 800cd56:	f7fb fbb3 	bl	80084c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800cd5a:	4b62      	ldr	r3, [pc, #392]	; (800cee4 <tcp_receive+0xf1c>)
 800cd5c:	881b      	ldrh	r3, [r3, #0]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	4b5e      	ldr	r3, [pc, #376]	; (800cedc <tcp_receive+0xf14>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	441a      	add	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6a:	6879      	ldr	r1, [r7, #4]
 800cd6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cd6e:	440b      	add	r3, r1
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f340 8089 	ble.w	800ce8a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800cd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	899b      	ldrh	r3, [r3, #12]
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fa fa3e 	bl	8007204 <lwip_htons>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	f003 0301 	and.w	r3, r3, #1
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d022      	beq.n	800cdda <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	899b      	ldrh	r3, [r3, #12]
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	b21b      	sxth	r3, r3
 800cda0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cda4:	b21c      	sxth	r4, r3
 800cda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	899b      	ldrh	r3, [r3, #12]
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7fa fa27 	bl	8007204 <lwip_htons>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fa fa1e 	bl	8007204 <lwip_htons>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	b21b      	sxth	r3, r3
 800cdcc:	4323      	orrs	r3, r4
 800cdce:	b21a      	sxth	r2, r3
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	b292      	uxth	r2, r2
 800cdd8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cde4:	4413      	add	r3, r2
 800cde6:	b299      	uxth	r1, r3
 800cde8:	4b3c      	ldr	r3, [pc, #240]	; (800cedc <tcp_receive+0xf14>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	1a8a      	subs	r2, r1, r2
 800cdf4:	b292      	uxth	r2, r2
 800cdf6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	685a      	ldr	r2, [r3, #4]
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	891b      	ldrh	r3, [r3, #8]
 800ce04:	4619      	mov	r1, r3
 800ce06:	4610      	mov	r0, r2
 800ce08:	f7fb fb5a 	bl	80084c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	891c      	ldrh	r4, [r3, #8]
 800ce12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	899b      	ldrh	r3, [r3, #12]
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fa f9f1 	bl	8007204 <lwip_htons>
 800ce22:	4603      	mov	r3, r0
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	f003 0303 	and.w	r3, r3, #3
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d001      	beq.n	800ce32 <tcp_receive+0xe6a>
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e000      	b.n	800ce34 <tcp_receive+0xe6c>
 800ce32:	2300      	movs	r3, #0
 800ce34:	4423      	add	r3, r4
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	4b2a      	ldr	r3, [pc, #168]	; (800cee4 <tcp_receive+0xf1c>)
 800ce3a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ce3c:	4b29      	ldr	r3, [pc, #164]	; (800cee4 <tcp_receive+0xf1c>)
 800ce3e:	881b      	ldrh	r3, [r3, #0]
 800ce40:	461a      	mov	r2, r3
 800ce42:	4b26      	ldr	r3, [pc, #152]	; (800cedc <tcp_receive+0xf14>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	441a      	add	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4c:	6879      	ldr	r1, [r7, #4]
 800ce4e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ce50:	440b      	add	r3, r1
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d019      	beq.n	800ce8a <tcp_receive+0xec2>
 800ce56:	4b24      	ldr	r3, [pc, #144]	; (800cee8 <tcp_receive+0xf20>)
 800ce58:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ce5c:	4923      	ldr	r1, [pc, #140]	; (800ceec <tcp_receive+0xf24>)
 800ce5e:	4824      	ldr	r0, [pc, #144]	; (800cef0 <tcp_receive+0xf28>)
 800ce60:	f006 ffd2 	bl	8013e08 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ce64:	e011      	b.n	800ce8a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ce66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f47f aea4 	bne.w	800cbbc <tcp_receive+0xbf4>
 800ce74:	e00a      	b.n	800ce8c <tcp_receive+0xec4>
                break;
 800ce76:	bf00      	nop
 800ce78:	e008      	b.n	800ce8c <tcp_receive+0xec4>
                break;
 800ce7a:	bf00      	nop
 800ce7c:	e006      	b.n	800ce8c <tcp_receive+0xec4>
                  break;
 800ce7e:	bf00      	nop
 800ce80:	e004      	b.n	800ce8c <tcp_receive+0xec4>
                  break;
 800ce82:	bf00      	nop
 800ce84:	e002      	b.n	800ce8c <tcp_receive+0xec4>
                  break;
 800ce86:	bf00      	nop
 800ce88:	e000      	b.n	800ce8c <tcp_receive+0xec4>
                break;
 800ce8a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f001 fe8b 	bl	800eba8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ce92:	e003      	b.n	800ce9c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f001 fe87 	bl	800eba8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ce9a:	e01a      	b.n	800ced2 <tcp_receive+0xf0a>
 800ce9c:	e019      	b.n	800ced2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ce9e:	4b0f      	ldr	r3, [pc, #60]	; (800cedc <tcp_receive+0xf14>)
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea6:	1ad3      	subs	r3, r2, r3
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	db0a      	blt.n	800cec2 <tcp_receive+0xefa>
 800ceac:	4b0b      	ldr	r3, [pc, #44]	; (800cedc <tcp_receive+0xf14>)
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb4:	6879      	ldr	r1, [r7, #4]
 800ceb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ceb8:	440b      	add	r3, r1
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	3301      	adds	r3, #1
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	dd07      	ble.n	800ced2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	8b5b      	ldrh	r3, [r3, #26]
 800cec6:	f043 0302 	orr.w	r3, r3, #2
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ced0:	e7ff      	b.n	800ced2 <tcp_receive+0xf0a>
 800ced2:	bf00      	nop
 800ced4:	3750      	adds	r7, #80	; 0x50
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bdb0      	pop	{r4, r5, r7, pc}
 800ceda:	bf00      	nop
 800cedc:	200000f0 	.word	0x200000f0
 800cee0:	200000d0 	.word	0x200000d0
 800cee4:	200000fa 	.word	0x200000fa
 800cee8:	08016a04 	.word	0x08016a04
 800ceec:	08016dac 	.word	0x08016dac
 800cef0:	08016a50 	.word	0x08016a50

0800cef4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800cefa:	4b15      	ldr	r3, [pc, #84]	; (800cf50 <tcp_get_next_optbyte+0x5c>)
 800cefc:	881b      	ldrh	r3, [r3, #0]
 800cefe:	1c5a      	adds	r2, r3, #1
 800cf00:	b291      	uxth	r1, r2
 800cf02:	4a13      	ldr	r2, [pc, #76]	; (800cf50 <tcp_get_next_optbyte+0x5c>)
 800cf04:	8011      	strh	r1, [r2, #0]
 800cf06:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cf08:	4b12      	ldr	r3, [pc, #72]	; (800cf54 <tcp_get_next_optbyte+0x60>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d004      	beq.n	800cf1a <tcp_get_next_optbyte+0x26>
 800cf10:	4b11      	ldr	r3, [pc, #68]	; (800cf58 <tcp_get_next_optbyte+0x64>)
 800cf12:	881b      	ldrh	r3, [r3, #0]
 800cf14:	88fa      	ldrh	r2, [r7, #6]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d208      	bcs.n	800cf2c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cf1a:	4b10      	ldr	r3, [pc, #64]	; (800cf5c <tcp_get_next_optbyte+0x68>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3314      	adds	r3, #20
 800cf20:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800cf22:	88fb      	ldrh	r3, [r7, #6]
 800cf24:	683a      	ldr	r2, [r7, #0]
 800cf26:	4413      	add	r3, r2
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	e00b      	b.n	800cf44 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cf2c:	88fb      	ldrh	r3, [r7, #6]
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	4b09      	ldr	r3, [pc, #36]	; (800cf58 <tcp_get_next_optbyte+0x64>)
 800cf32:	881b      	ldrh	r3, [r3, #0]
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	1ad3      	subs	r3, r2, r3
 800cf38:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800cf3a:	4b06      	ldr	r3, [pc, #24]	; (800cf54 <tcp_get_next_optbyte+0x60>)
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	797b      	ldrb	r3, [r7, #5]
 800cf40:	4413      	add	r3, r2
 800cf42:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr
 800cf50:	200000ec 	.word	0x200000ec
 800cf54:	200000e8 	.word	0x200000e8
 800cf58:	200000e6 	.word	0x200000e6
 800cf5c:	200000e0 	.word	0x200000e0

0800cf60 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d106      	bne.n	800cf7c <tcp_parseopt+0x1c>
 800cf6e:	4b32      	ldr	r3, [pc, #200]	; (800d038 <tcp_parseopt+0xd8>)
 800cf70:	f240 727d 	movw	r2, #1917	; 0x77d
 800cf74:	4931      	ldr	r1, [pc, #196]	; (800d03c <tcp_parseopt+0xdc>)
 800cf76:	4832      	ldr	r0, [pc, #200]	; (800d040 <tcp_parseopt+0xe0>)
 800cf78:	f006 ff46 	bl	8013e08 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cf7c:	4b31      	ldr	r3, [pc, #196]	; (800d044 <tcp_parseopt+0xe4>)
 800cf7e:	881b      	ldrh	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d055      	beq.n	800d030 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cf84:	4b30      	ldr	r3, [pc, #192]	; (800d048 <tcp_parseopt+0xe8>)
 800cf86:	2200      	movs	r2, #0
 800cf88:	801a      	strh	r2, [r3, #0]
 800cf8a:	e045      	b.n	800d018 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800cf8c:	f7ff ffb2 	bl	800cef4 <tcp_get_next_optbyte>
 800cf90:	4603      	mov	r3, r0
 800cf92:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cf94:	7bfb      	ldrb	r3, [r7, #15]
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	d006      	beq.n	800cfa8 <tcp_parseopt+0x48>
 800cf9a:	2b02      	cmp	r3, #2
 800cf9c:	dc2b      	bgt.n	800cff6 <tcp_parseopt+0x96>
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d041      	beq.n	800d026 <tcp_parseopt+0xc6>
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d127      	bne.n	800cff6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800cfa6:	e037      	b.n	800d018 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cfa8:	f7ff ffa4 	bl	800cef4 <tcp_get_next_optbyte>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b04      	cmp	r3, #4
 800cfb0:	d13b      	bne.n	800d02a <tcp_parseopt+0xca>
 800cfb2:	4b25      	ldr	r3, [pc, #148]	; (800d048 <tcp_parseopt+0xe8>)
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	4a22      	ldr	r2, [pc, #136]	; (800d044 <tcp_parseopt+0xe4>)
 800cfba:	8812      	ldrh	r2, [r2, #0]
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	da34      	bge.n	800d02a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cfc0:	f7ff ff98 	bl	800cef4 <tcp_get_next_optbyte>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	021b      	lsls	r3, r3, #8
 800cfca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cfcc:	f7ff ff92 	bl	800cef4 <tcp_get_next_optbyte>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	b29a      	uxth	r2, r3
 800cfd4:	89bb      	ldrh	r3, [r7, #12]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cfda:	89bb      	ldrh	r3, [r7, #12]
 800cfdc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cfe0:	d804      	bhi.n	800cfec <tcp_parseopt+0x8c>
 800cfe2:	89bb      	ldrh	r3, [r7, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <tcp_parseopt+0x8c>
 800cfe8:	89ba      	ldrh	r2, [r7, #12]
 800cfea:	e001      	b.n	800cff0 <tcp_parseopt+0x90>
 800cfec:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800cff4:	e010      	b.n	800d018 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cff6:	f7ff ff7d 	bl	800cef4 <tcp_get_next_optbyte>
 800cffa:	4603      	mov	r3, r0
 800cffc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cffe:	7afb      	ldrb	r3, [r7, #11]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d914      	bls.n	800d02e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d004:	7afb      	ldrb	r3, [r7, #11]
 800d006:	b29a      	uxth	r2, r3
 800d008:	4b0f      	ldr	r3, [pc, #60]	; (800d048 <tcp_parseopt+0xe8>)
 800d00a:	881b      	ldrh	r3, [r3, #0]
 800d00c:	4413      	add	r3, r2
 800d00e:	b29b      	uxth	r3, r3
 800d010:	3b02      	subs	r3, #2
 800d012:	b29a      	uxth	r2, r3
 800d014:	4b0c      	ldr	r3, [pc, #48]	; (800d048 <tcp_parseopt+0xe8>)
 800d016:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d018:	4b0b      	ldr	r3, [pc, #44]	; (800d048 <tcp_parseopt+0xe8>)
 800d01a:	881a      	ldrh	r2, [r3, #0]
 800d01c:	4b09      	ldr	r3, [pc, #36]	; (800d044 <tcp_parseopt+0xe4>)
 800d01e:	881b      	ldrh	r3, [r3, #0]
 800d020:	429a      	cmp	r2, r3
 800d022:	d3b3      	bcc.n	800cf8c <tcp_parseopt+0x2c>
 800d024:	e004      	b.n	800d030 <tcp_parseopt+0xd0>
          return;
 800d026:	bf00      	nop
 800d028:	e002      	b.n	800d030 <tcp_parseopt+0xd0>
            return;
 800d02a:	bf00      	nop
 800d02c:	e000      	b.n	800d030 <tcp_parseopt+0xd0>
            return;
 800d02e:	bf00      	nop
      }
    }
  }
}
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	08016a04 	.word	0x08016a04
 800d03c:	08016e68 	.word	0x08016e68
 800d040:	08016a50 	.word	0x08016a50
 800d044:	200000e4 	.word	0x200000e4
 800d048:	200000ec 	.word	0x200000ec

0800d04c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d04c:	b480      	push	{r7}
 800d04e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d050:	4b05      	ldr	r3, [pc, #20]	; (800d068 <tcp_trigger_input_pcb_close+0x1c>)
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	f043 0310 	orr.w	r3, r3, #16
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	4b03      	ldr	r3, [pc, #12]	; (800d068 <tcp_trigger_input_pcb_close+0x1c>)
 800d05c:	701a      	strb	r2, [r3, #0]
}
 800d05e:	bf00      	nop
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	200000fd 	.word	0x200000fd

0800d06c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00a      	beq.n	800d094 <tcp_route+0x28>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	7a1b      	ldrb	r3, [r3, #8]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d006      	beq.n	800d094 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	7a1b      	ldrb	r3, [r3, #8]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fb f83e 	bl	800810c <netif_get_by_index>
 800d090:	4603      	mov	r3, r0
 800d092:	e003      	b.n	800d09c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f005 fc6b 	bl	8012970 <ip4_route>
 800d09a:	4603      	mov	r3, r0
  }
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d0a4:	b590      	push	{r4, r7, lr}
 800d0a6:	b087      	sub	sp, #28
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	603b      	str	r3, [r7, #0]
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d105      	bne.n	800d0c6 <tcp_create_segment+0x22>
 800d0ba:	4b44      	ldr	r3, [pc, #272]	; (800d1cc <tcp_create_segment+0x128>)
 800d0bc:	22a3      	movs	r2, #163	; 0xa3
 800d0be:	4944      	ldr	r1, [pc, #272]	; (800d1d0 <tcp_create_segment+0x12c>)
 800d0c0:	4844      	ldr	r0, [pc, #272]	; (800d1d4 <tcp_create_segment+0x130>)
 800d0c2:	f006 fea1 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d105      	bne.n	800d0d8 <tcp_create_segment+0x34>
 800d0cc:	4b3f      	ldr	r3, [pc, #252]	; (800d1cc <tcp_create_segment+0x128>)
 800d0ce:	22a4      	movs	r2, #164	; 0xa4
 800d0d0:	4941      	ldr	r1, [pc, #260]	; (800d1d8 <tcp_create_segment+0x134>)
 800d0d2:	4840      	ldr	r0, [pc, #256]	; (800d1d4 <tcp_create_segment+0x130>)
 800d0d4:	f006 fe98 	bl	8013e08 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d0d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	f003 0304 	and.w	r3, r3, #4
 800d0e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d0e6:	2003      	movs	r0, #3
 800d0e8:	f7fa fd0a 	bl	8007b00 <memp_malloc>
 800d0ec:	6138      	str	r0, [r7, #16]
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d104      	bne.n	800d0fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d0f4:	68b8      	ldr	r0, [r7, #8]
 800d0f6:	f7fb fb69 	bl	80087cc <pbuf_free>
    return NULL;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	e061      	b.n	800d1c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d104:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	2200      	movs	r2, #0
 800d10a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	891a      	ldrh	r2, [r3, #8]
 800d116:	7dfb      	ldrb	r3, [r7, #23]
 800d118:	b29b      	uxth	r3, r3
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d205      	bcs.n	800d12a <tcp_create_segment+0x86>
 800d11e:	4b2b      	ldr	r3, [pc, #172]	; (800d1cc <tcp_create_segment+0x128>)
 800d120:	22b0      	movs	r2, #176	; 0xb0
 800d122:	492e      	ldr	r1, [pc, #184]	; (800d1dc <tcp_create_segment+0x138>)
 800d124:	482b      	ldr	r0, [pc, #172]	; (800d1d4 <tcp_create_segment+0x130>)
 800d126:	f006 fe6f 	bl	8013e08 <iprintf>
  seg->len = p->tot_len - optlen;
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	891a      	ldrh	r2, [r3, #8]
 800d12e:	7dfb      	ldrb	r3, [r7, #23]
 800d130:	b29b      	uxth	r3, r3
 800d132:	1ad3      	subs	r3, r2, r3
 800d134:	b29a      	uxth	r2, r3
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d13a:	2114      	movs	r1, #20
 800d13c:	68b8      	ldr	r0, [r7, #8]
 800d13e:	f7fb faaf 	bl	80086a0 <pbuf_add_header>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d004      	beq.n	800d152 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d148:	6938      	ldr	r0, [r7, #16]
 800d14a:	f7fd f81c 	bl	800a186 <tcp_seg_free>
    return NULL;
 800d14e:	2300      	movs	r3, #0
 800d150:	e037      	b.n	800d1c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	685a      	ldr	r2, [r3, #4]
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	8ada      	ldrh	r2, [r3, #22]
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	68dc      	ldr	r4, [r3, #12]
 800d164:	4610      	mov	r0, r2
 800d166:	f7fa f84d 	bl	8007204 <lwip_htons>
 800d16a:	4603      	mov	r3, r0
 800d16c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	8b1a      	ldrh	r2, [r3, #24]
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	68dc      	ldr	r4, [r3, #12]
 800d176:	4610      	mov	r0, r2
 800d178:	f7fa f844 	bl	8007204 <lwip_htons>
 800d17c:	4603      	mov	r3, r0
 800d17e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	68dc      	ldr	r4, [r3, #12]
 800d184:	6838      	ldr	r0, [r7, #0]
 800d186:	f7fa f852 	bl	800722e <lwip_htonl>
 800d18a:	4603      	mov	r3, r0
 800d18c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d18e:	7dfb      	ldrb	r3, [r7, #23]
 800d190:	089b      	lsrs	r3, r3, #2
 800d192:	b2db      	uxtb	r3, r3
 800d194:	b29b      	uxth	r3, r3
 800d196:	3305      	adds	r3, #5
 800d198:	b29b      	uxth	r3, r3
 800d19a:	031b      	lsls	r3, r3, #12
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	79fb      	ldrb	r3, [r7, #7]
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	68dc      	ldr	r4, [r3, #12]
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	f7fa f82a 	bl	8007204 <lwip_htons>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	749a      	strb	r2, [r3, #18]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	74da      	strb	r2, [r3, #19]
  return seg;
 800d1c0:	693b      	ldr	r3, [r7, #16]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	371c      	adds	r7, #28
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd90      	pop	{r4, r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	08016e84 	.word	0x08016e84
 800d1d0:	08016eb8 	.word	0x08016eb8
 800d1d4:	08016ed8 	.word	0x08016ed8
 800d1d8:	08016f00 	.word	0x08016f00
 800d1dc:	08016f24 	.word	0x08016f24

0800d1e0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	607b      	str	r3, [r7, #4]
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	73fb      	strb	r3, [r7, #15]
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	81bb      	strh	r3, [r7, #12]
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d1f4:	89bb      	ldrh	r3, [r7, #12]
 800d1f6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d105      	bne.n	800d20a <tcp_pbuf_prealloc+0x2a>
 800d1fe:	4b30      	ldr	r3, [pc, #192]	; (800d2c0 <tcp_pbuf_prealloc+0xe0>)
 800d200:	22e8      	movs	r2, #232	; 0xe8
 800d202:	4930      	ldr	r1, [pc, #192]	; (800d2c4 <tcp_pbuf_prealloc+0xe4>)
 800d204:	4830      	ldr	r0, [pc, #192]	; (800d2c8 <tcp_pbuf_prealloc+0xe8>)
 800d206:	f006 fdff 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d20a:	6a3b      	ldr	r3, [r7, #32]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d105      	bne.n	800d21c <tcp_pbuf_prealloc+0x3c>
 800d210:	4b2b      	ldr	r3, [pc, #172]	; (800d2c0 <tcp_pbuf_prealloc+0xe0>)
 800d212:	22e9      	movs	r2, #233	; 0xe9
 800d214:	492d      	ldr	r1, [pc, #180]	; (800d2cc <tcp_pbuf_prealloc+0xec>)
 800d216:	482c      	ldr	r0, [pc, #176]	; (800d2c8 <tcp_pbuf_prealloc+0xe8>)
 800d218:	f006 fdf6 	bl	8013e08 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d21c:	89ba      	ldrh	r2, [r7, #12]
 800d21e:	897b      	ldrh	r3, [r7, #10]
 800d220:	429a      	cmp	r2, r3
 800d222:	d221      	bcs.n	800d268 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d224:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d228:	f003 0302 	and.w	r3, r3, #2
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d111      	bne.n	800d254 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d230:	6a3b      	ldr	r3, [r7, #32]
 800d232:	8b5b      	ldrh	r3, [r3, #26]
 800d234:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d115      	bne.n	800d268 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d23c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d240:	2b00      	cmp	r3, #0
 800d242:	d007      	beq.n	800d254 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d244:	6a3b      	ldr	r3, [r7, #32]
 800d246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d103      	bne.n	800d254 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d24c:	6a3b      	ldr	r3, [r7, #32]
 800d24e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800d250:	2b00      	cmp	r3, #0
 800d252:	d009      	beq.n	800d268 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d254:	89bb      	ldrh	r3, [r7, #12]
 800d256:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d25a:	f023 0203 	bic.w	r2, r3, #3
 800d25e:	897b      	ldrh	r3, [r7, #10]
 800d260:	4293      	cmp	r3, r2
 800d262:	bf28      	it	cs
 800d264:	4613      	movcs	r3, r2
 800d266:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d268:	8af9      	ldrh	r1, [r7, #22]
 800d26a:	7bfb      	ldrb	r3, [r7, #15]
 800d26c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d270:	4618      	mov	r0, r3
 800d272:	f7fa ffc7 	bl	8008204 <pbuf_alloc>
 800d276:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d101      	bne.n	800d282 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d27e:	2300      	movs	r3, #0
 800d280:	e019      	b.n	800d2b6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d006      	beq.n	800d298 <tcp_pbuf_prealloc+0xb8>
 800d28a:	4b0d      	ldr	r3, [pc, #52]	; (800d2c0 <tcp_pbuf_prealloc+0xe0>)
 800d28c:	f240 120b 	movw	r2, #267	; 0x10b
 800d290:	490f      	ldr	r1, [pc, #60]	; (800d2d0 <tcp_pbuf_prealloc+0xf0>)
 800d292:	480d      	ldr	r0, [pc, #52]	; (800d2c8 <tcp_pbuf_prealloc+0xe8>)
 800d294:	f006 fdb8 	bl	8013e08 <iprintf>
  *oversize = p->len - length;
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	895a      	ldrh	r2, [r3, #10]
 800d29c:	89bb      	ldrh	r3, [r7, #12]
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	b29a      	uxth	r2, r3
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	89ba      	ldrh	r2, [r7, #12]
 800d2aa:	811a      	strh	r2, [r3, #8]
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	891a      	ldrh	r2, [r3, #8]
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	815a      	strh	r2, [r3, #10]
  return p;
 800d2b4:	693b      	ldr	r3, [r7, #16]
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3718      	adds	r7, #24
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	08016e84 	.word	0x08016e84
 800d2c4:	08016f3c 	.word	0x08016f3c
 800d2c8:	08016ed8 	.word	0x08016ed8
 800d2cc:	08016f60 	.word	0x08016f60
 800d2d0:	08016f80 	.word	0x08016f80

0800d2d4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d106      	bne.n	800d2f4 <tcp_write_checks+0x20>
 800d2e6:	4b33      	ldr	r3, [pc, #204]	; (800d3b4 <tcp_write_checks+0xe0>)
 800d2e8:	f240 1233 	movw	r2, #307	; 0x133
 800d2ec:	4932      	ldr	r1, [pc, #200]	; (800d3b8 <tcp_write_checks+0xe4>)
 800d2ee:	4833      	ldr	r0, [pc, #204]	; (800d3bc <tcp_write_checks+0xe8>)
 800d2f0:	f006 fd8a 	bl	8013e08 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	7d1b      	ldrb	r3, [r3, #20]
 800d2f8:	2b04      	cmp	r3, #4
 800d2fa:	d00e      	beq.n	800d31a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d300:	2b07      	cmp	r3, #7
 800d302:	d00a      	beq.n	800d31a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d006      	beq.n	800d31a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d310:	2b03      	cmp	r3, #3
 800d312:	d002      	beq.n	800d31a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d314:	f06f 030a 	mvn.w	r3, #10
 800d318:	e048      	b.n	800d3ac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800d31a:	887b      	ldrh	r3, [r7, #2]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d101      	bne.n	800d324 <tcp_write_checks+0x50>
    return ERR_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	e043      	b.n	800d3ac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d32a:	887a      	ldrh	r2, [r7, #2]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d909      	bls.n	800d344 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	8b5b      	ldrh	r3, [r3, #26]
 800d334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d338:	b29a      	uxth	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d33e:	f04f 33ff 	mov.w	r3, #4294967295
 800d342:	e033      	b.n	800d3ac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d34a:	2b08      	cmp	r3, #8
 800d34c:	d909      	bls.n	800d362 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	8b5b      	ldrh	r3, [r3, #26]
 800d352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d356:	b29a      	uxth	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d35c:	f04f 33ff 	mov.w	r3, #4294967295
 800d360:	e024      	b.n	800d3ac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00f      	beq.n	800d38c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d370:	2b00      	cmp	r3, #0
 800d372:	d11a      	bne.n	800d3aa <tcp_write_checks+0xd6>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d116      	bne.n	800d3aa <tcp_write_checks+0xd6>
 800d37c:	4b0d      	ldr	r3, [pc, #52]	; (800d3b4 <tcp_write_checks+0xe0>)
 800d37e:	f240 1255 	movw	r2, #341	; 0x155
 800d382:	490f      	ldr	r1, [pc, #60]	; (800d3c0 <tcp_write_checks+0xec>)
 800d384:	480d      	ldr	r0, [pc, #52]	; (800d3bc <tcp_write_checks+0xe8>)
 800d386:	f006 fd3f 	bl	8013e08 <iprintf>
 800d38a:	e00e      	b.n	800d3aa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d390:	2b00      	cmp	r3, #0
 800d392:	d103      	bne.n	800d39c <tcp_write_checks+0xc8>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d006      	beq.n	800d3aa <tcp_write_checks+0xd6>
 800d39c:	4b05      	ldr	r3, [pc, #20]	; (800d3b4 <tcp_write_checks+0xe0>)
 800d39e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800d3a2:	4908      	ldr	r1, [pc, #32]	; (800d3c4 <tcp_write_checks+0xf0>)
 800d3a4:	4805      	ldr	r0, [pc, #20]	; (800d3bc <tcp_write_checks+0xe8>)
 800d3a6:	f006 fd2f 	bl	8013e08 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	08016e84 	.word	0x08016e84
 800d3b8:	08016f94 	.word	0x08016f94
 800d3bc:	08016ed8 	.word	0x08016ed8
 800d3c0:	08016fb4 	.word	0x08016fb4
 800d3c4:	08016ff0 	.word	0x08016ff0

0800d3c8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d3c8:	b590      	push	{r4, r7, lr}
 800d3ca:	b09b      	sub	sp, #108	; 0x6c
 800d3cc:	af04      	add	r7, sp, #16
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	4611      	mov	r1, r2
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	80fb      	strh	r3, [r7, #6]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	653b      	str	r3, [r7, #80]	; 0x50
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d3fe:	2300      	movs	r3, #0
 800d400:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d402:	2300      	movs	r3, #0
 800d404:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d406:	2300      	movs	r3, #0
 800d408:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d109      	bne.n	800d424 <tcp_write+0x5c>
 800d410:	4ba4      	ldr	r3, [pc, #656]	; (800d6a4 <tcp_write+0x2dc>)
 800d412:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800d416:	49a4      	ldr	r1, [pc, #656]	; (800d6a8 <tcp_write+0x2e0>)
 800d418:	48a4      	ldr	r0, [pc, #656]	; (800d6ac <tcp_write+0x2e4>)
 800d41a:	f006 fcf5 	bl	8013e08 <iprintf>
 800d41e:	f06f 030f 	mvn.w	r3, #15
 800d422:	e32a      	b.n	800da7a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d42a:	085b      	lsrs	r3, r3, #1
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d432:	4293      	cmp	r3, r2
 800d434:	bf28      	it	cs
 800d436:	4613      	movcs	r3, r2
 800d438:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d43a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d102      	bne.n	800d446 <tcp_write+0x7e>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d444:	e000      	b.n	800d448 <tcp_write+0x80>
 800d446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d448:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d109      	bne.n	800d464 <tcp_write+0x9c>
 800d450:	4b94      	ldr	r3, [pc, #592]	; (800d6a4 <tcp_write+0x2dc>)
 800d452:	f240 12ad 	movw	r2, #429	; 0x1ad
 800d456:	4996      	ldr	r1, [pc, #600]	; (800d6b0 <tcp_write+0x2e8>)
 800d458:	4894      	ldr	r0, [pc, #592]	; (800d6ac <tcp_write+0x2e4>)
 800d45a:	f006 fcd5 	bl	8013e08 <iprintf>
 800d45e:	f06f 030f 	mvn.w	r3, #15
 800d462:	e30a      	b.n	800da7a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d464:	88fb      	ldrh	r3, [r7, #6]
 800d466:	4619      	mov	r1, r3
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f7ff ff33 	bl	800d2d4 <tcp_write_checks>
 800d46e:	4603      	mov	r3, r0
 800d470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800d474:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d002      	beq.n	800d482 <tcp_write+0xba>
    return err;
 800d47c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d480:	e2fb      	b.n	800da7a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d488:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d48c:	2300      	movs	r3, #0
 800d48e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d496:	2b00      	cmp	r3, #0
 800d498:	f000 80f6 	beq.w	800d688 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4a0:	653b      	str	r3, [r7, #80]	; 0x50
 800d4a2:	e002      	b.n	800d4aa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d4aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1f8      	bne.n	800d4a4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d4b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4b4:	7a9b      	ldrb	r3, [r3, #10]
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	f003 0304 	and.w	r3, r3, #4
 800d4be:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d4c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d4c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4c4:	891b      	ldrh	r3, [r3, #8]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	8c3b      	ldrh	r3, [r7, #32]
 800d4ca:	440b      	add	r3, r1
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	da06      	bge.n	800d4de <tcp_write+0x116>
 800d4d0:	4b74      	ldr	r3, [pc, #464]	; (800d6a4 <tcp_write+0x2dc>)
 800d4d2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d4d6:	4977      	ldr	r1, [pc, #476]	; (800d6b4 <tcp_write+0x2ec>)
 800d4d8:	4874      	ldr	r0, [pc, #464]	; (800d6ac <tcp_write+0x2e4>)
 800d4da:	f006 fc95 	bl	8013e08 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d4de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4e0:	891a      	ldrh	r2, [r3, #8]
 800d4e2:	8c3b      	ldrh	r3, [r7, #32]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d4ea:	1ad3      	subs	r3, r2, r3
 800d4ec:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d4f4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d4f6:	8a7b      	ldrh	r3, [r7, #18]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d026      	beq.n	800d54a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d4fc:	8a7b      	ldrh	r3, [r7, #18]
 800d4fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d500:	429a      	cmp	r2, r3
 800d502:	d206      	bcs.n	800d512 <tcp_write+0x14a>
 800d504:	4b67      	ldr	r3, [pc, #412]	; (800d6a4 <tcp_write+0x2dc>)
 800d506:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800d50a:	496b      	ldr	r1, [pc, #428]	; (800d6b8 <tcp_write+0x2f0>)
 800d50c:	4867      	ldr	r0, [pc, #412]	; (800d6ac <tcp_write+0x2e4>)
 800d50e:	f006 fc7b 	bl	8013e08 <iprintf>
      seg = last_unsent;
 800d512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d514:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d516:	8a7b      	ldrh	r3, [r7, #18]
 800d518:	88fa      	ldrh	r2, [r7, #6]
 800d51a:	4293      	cmp	r3, r2
 800d51c:	bf28      	it	cs
 800d51e:	4613      	movcs	r3, r2
 800d520:	b29b      	uxth	r3, r3
 800d522:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d524:	4293      	cmp	r3, r2
 800d526:	bf28      	it	cs
 800d528:	4613      	movcs	r3, r2
 800d52a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800d52c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d530:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d532:	4413      	add	r3, r2
 800d534:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800d538:	8a7a      	ldrh	r2, [r7, #18]
 800d53a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d53c:	1ad3      	subs	r3, r2, r3
 800d53e:	b29b      	uxth	r3, r3
 800d540:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d542:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d544:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d546:	1ad3      	subs	r3, r2, r3
 800d548:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d54a:	8a7b      	ldrh	r3, [r7, #18]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00b      	beq.n	800d568 <tcp_write+0x1a0>
 800d550:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d554:	88fb      	ldrh	r3, [r7, #6]
 800d556:	429a      	cmp	r2, r3
 800d558:	d006      	beq.n	800d568 <tcp_write+0x1a0>
 800d55a:	4b52      	ldr	r3, [pc, #328]	; (800d6a4 <tcp_write+0x2dc>)
 800d55c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d560:	4956      	ldr	r1, [pc, #344]	; (800d6bc <tcp_write+0x2f4>)
 800d562:	4852      	ldr	r0, [pc, #328]	; (800d6ac <tcp_write+0x2e4>)
 800d564:	f006 fc50 	bl	8013e08 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d568:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d56c:	88fb      	ldrh	r3, [r7, #6]
 800d56e:	429a      	cmp	r2, r3
 800d570:	f080 8167 	bcs.w	800d842 <tcp_write+0x47a>
 800d574:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d576:	2b00      	cmp	r3, #0
 800d578:	f000 8163 	beq.w	800d842 <tcp_write+0x47a>
 800d57c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d57e:	891b      	ldrh	r3, [r3, #8]
 800d580:	2b00      	cmp	r3, #0
 800d582:	f000 815e 	beq.w	800d842 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d586:	88fa      	ldrh	r2, [r7, #6]
 800d588:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d58c:	1ad2      	subs	r2, r2, r3
 800d58e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d590:	4293      	cmp	r3, r2
 800d592:	bfa8      	it	ge
 800d594:	4613      	movge	r3, r2
 800d596:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d59a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d59c:	797b      	ldrb	r3, [r7, #5]
 800d59e:	f003 0301 	and.w	r3, r3, #1
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d027      	beq.n	800d5f6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d5a6:	f107 0012 	add.w	r0, r7, #18
 800d5aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d5ac:	8bf9      	ldrh	r1, [r7, #30]
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	9302      	str	r3, [sp, #8]
 800d5b2:	797b      	ldrb	r3, [r7, #5]
 800d5b4:	9301      	str	r3, [sp, #4]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	9300      	str	r3, [sp, #0]
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2000      	movs	r0, #0
 800d5be:	f7ff fe0f 	bl	800d1e0 <tcp_pbuf_prealloc>
 800d5c2:	6578      	str	r0, [r7, #84]	; 0x54
 800d5c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f000 8225 	beq.w	800da16 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d5cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5ce:	6858      	ldr	r0, [r3, #4]
 800d5d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d5d4:	68ba      	ldr	r2, [r7, #8]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	8bfa      	ldrh	r2, [r7, #30]
 800d5da:	4619      	mov	r1, r3
 800d5dc:	f006 fbfe 	bl	8013ddc <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d5e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d5e2:	f7fb f97b 	bl	80088dc <pbuf_clen>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d5ee:	4413      	add	r3, r2
 800d5f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d5f4:	e041      	b.n	800d67a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d5f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	637b      	str	r3, [r7, #52]	; 0x34
 800d5fc:	e002      	b.n	800d604 <tcp_write+0x23c>
 800d5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	637b      	str	r3, [r7, #52]	; 0x34
 800d604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1f8      	bne.n	800d5fe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d60e:	7b1b      	ldrb	r3, [r3, #12]
 800d610:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d115      	bne.n	800d644 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d61e:	8952      	ldrh	r2, [r2, #10]
 800d620:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d622:	68ba      	ldr	r2, [r7, #8]
 800d624:	429a      	cmp	r2, r3
 800d626:	d10d      	bne.n	800d644 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d628:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d006      	beq.n	800d63e <tcp_write+0x276>
 800d630:	4b1c      	ldr	r3, [pc, #112]	; (800d6a4 <tcp_write+0x2dc>)
 800d632:	f240 2231 	movw	r2, #561	; 0x231
 800d636:	4922      	ldr	r1, [pc, #136]	; (800d6c0 <tcp_write+0x2f8>)
 800d638:	481c      	ldr	r0, [pc, #112]	; (800d6ac <tcp_write+0x2e4>)
 800d63a:	f006 fbe5 	bl	8013e08 <iprintf>
          extendlen = seglen;
 800d63e:	8bfb      	ldrh	r3, [r7, #30]
 800d640:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d642:	e01a      	b.n	800d67a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d644:	8bfb      	ldrh	r3, [r7, #30]
 800d646:	2201      	movs	r2, #1
 800d648:	4619      	mov	r1, r3
 800d64a:	2000      	movs	r0, #0
 800d64c:	f7fa fdda 	bl	8008204 <pbuf_alloc>
 800d650:	6578      	str	r0, [r7, #84]	; 0x54
 800d652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d654:	2b00      	cmp	r3, #0
 800d656:	f000 81e0 	beq.w	800da1a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d65a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d65e:	68ba      	ldr	r2, [r7, #8]
 800d660:	441a      	add	r2, r3
 800d662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d664:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d666:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d668:	f7fb f938 	bl	80088dc <pbuf_clen>
 800d66c:	4603      	mov	r3, r0
 800d66e:	461a      	mov	r2, r3
 800d670:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d674:	4413      	add	r3, r2
 800d676:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d67a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d67e:	8bfb      	ldrh	r3, [r7, #30]
 800d680:	4413      	add	r3, r2
 800d682:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d686:	e0dc      	b.n	800d842 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f000 80d7 	beq.w	800d842 <tcp_write+0x47a>
 800d694:	4b03      	ldr	r3, [pc, #12]	; (800d6a4 <tcp_write+0x2dc>)
 800d696:	f240 224a 	movw	r2, #586	; 0x24a
 800d69a:	490a      	ldr	r1, [pc, #40]	; (800d6c4 <tcp_write+0x2fc>)
 800d69c:	4803      	ldr	r0, [pc, #12]	; (800d6ac <tcp_write+0x2e4>)
 800d69e:	f006 fbb3 	bl	8013e08 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d6a2:	e0ce      	b.n	800d842 <tcp_write+0x47a>
 800d6a4:	08016e84 	.word	0x08016e84
 800d6a8:	08017024 	.word	0x08017024
 800d6ac:	08016ed8 	.word	0x08016ed8
 800d6b0:	0801703c 	.word	0x0801703c
 800d6b4:	08017070 	.word	0x08017070
 800d6b8:	08017088 	.word	0x08017088
 800d6bc:	080170a8 	.word	0x080170a8
 800d6c0:	080170c8 	.word	0x080170c8
 800d6c4:	080170f4 	.word	0x080170f4
    struct pbuf *p;
    u16_t left = len - pos;
 800d6c8:	88fa      	ldrh	r2, [r7, #6]
 800d6ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d6ce:	1ad3      	subs	r3, r2, r3
 800d6d0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d6d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d6da:	1ad3      	subs	r3, r2, r3
 800d6dc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d6de:	8b7a      	ldrh	r2, [r7, #26]
 800d6e0:	8bbb      	ldrh	r3, [r7, #28]
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	bf28      	it	cs
 800d6e6:	4613      	movcs	r3, r2
 800d6e8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d6ea:	797b      	ldrb	r3, [r7, #5]
 800d6ec:	f003 0301 	and.w	r3, r3, #1
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d036      	beq.n	800d762 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d6f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	8b3b      	ldrh	r3, [r7, #24]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	b299      	uxth	r1, r3
 800d700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d702:	2b00      	cmp	r3, #0
 800d704:	bf0c      	ite	eq
 800d706:	2301      	moveq	r3, #1
 800d708:	2300      	movne	r3, #0
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	f107 0012 	add.w	r0, r7, #18
 800d710:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d712:	9302      	str	r3, [sp, #8]
 800d714:	797b      	ldrb	r3, [r7, #5]
 800d716:	9301      	str	r3, [sp, #4]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	4603      	mov	r3, r0
 800d71e:	2036      	movs	r0, #54	; 0x36
 800d720:	f7ff fd5e 	bl	800d1e0 <tcp_pbuf_prealloc>
 800d724:	6338      	str	r0, [r7, #48]	; 0x30
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f000 8178 	beq.w	800da1e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d730:	895b      	ldrh	r3, [r3, #10]
 800d732:	8b3a      	ldrh	r2, [r7, #24]
 800d734:	429a      	cmp	r2, r3
 800d736:	d906      	bls.n	800d746 <tcp_write+0x37e>
 800d738:	4b8c      	ldr	r3, [pc, #560]	; (800d96c <tcp_write+0x5a4>)
 800d73a:	f240 2266 	movw	r2, #614	; 0x266
 800d73e:	498c      	ldr	r1, [pc, #560]	; (800d970 <tcp_write+0x5a8>)
 800d740:	488c      	ldr	r0, [pc, #560]	; (800d974 <tcp_write+0x5ac>)
 800d742:	f006 fb61 	bl	8013e08 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d748:	685a      	ldr	r2, [r3, #4]
 800d74a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d74e:	18d0      	adds	r0, r2, r3
 800d750:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	4413      	add	r3, r2
 800d758:	8b3a      	ldrh	r2, [r7, #24]
 800d75a:	4619      	mov	r1, r3
 800d75c:	f006 fb3e 	bl	8013ddc <memcpy>
 800d760:	e02f      	b.n	800d7c2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d762:	8a7b      	ldrh	r3, [r7, #18]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d006      	beq.n	800d776 <tcp_write+0x3ae>
 800d768:	4b80      	ldr	r3, [pc, #512]	; (800d96c <tcp_write+0x5a4>)
 800d76a:	f240 2271 	movw	r2, #625	; 0x271
 800d76e:	4982      	ldr	r1, [pc, #520]	; (800d978 <tcp_write+0x5b0>)
 800d770:	4880      	ldr	r0, [pc, #512]	; (800d974 <tcp_write+0x5ac>)
 800d772:	f006 fb49 	bl	8013e08 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d776:	8b3b      	ldrh	r3, [r7, #24]
 800d778:	2201      	movs	r2, #1
 800d77a:	4619      	mov	r1, r3
 800d77c:	2036      	movs	r0, #54	; 0x36
 800d77e:	f7fa fd41 	bl	8008204 <pbuf_alloc>
 800d782:	6178      	str	r0, [r7, #20]
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2b00      	cmp	r3, #0
 800d788:	f000 814b 	beq.w	800da22 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d78c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	441a      	add	r2, r3
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d798:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	2036      	movs	r0, #54	; 0x36
 800d7a6:	f7fa fd2d 	bl	8008204 <pbuf_alloc>
 800d7aa:	6338      	str	r0, [r7, #48]	; 0x30
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d103      	bne.n	800d7ba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d7b2:	6978      	ldr	r0, [r7, #20]
 800d7b4:	f7fb f80a 	bl	80087cc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d7b8:	e136      	b.n	800da28 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d7ba:	6979      	ldr	r1, [r7, #20]
 800d7bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7be:	f7fb f8c7 	bl	8008950 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d7c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7c4:	f7fb f88a 	bl	80088dc <pbuf_clen>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d7d0:	4413      	add	r3, r2
 800d7d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d7d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d7da:	2b09      	cmp	r3, #9
 800d7dc:	d903      	bls.n	800d7e6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d7de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7e0:	f7fa fff4 	bl	80087cc <pbuf_free>
      goto memerr;
 800d7e4:	e120      	b.n	800da28 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d7ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d7ee:	441a      	add	r2, r3
 800d7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f7ff fc51 	bl	800d0a4 <tcp_create_segment>
 800d802:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 810d 	beq.w	800da26 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d80c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d102      	bne.n	800d818 <tcp_write+0x450>
      queue = seg;
 800d812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d814:	647b      	str	r3, [r7, #68]	; 0x44
 800d816:	e00c      	b.n	800d832 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d106      	bne.n	800d82c <tcp_write+0x464>
 800d81e:	4b53      	ldr	r3, [pc, #332]	; (800d96c <tcp_write+0x5a4>)
 800d820:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d824:	4955      	ldr	r1, [pc, #340]	; (800d97c <tcp_write+0x5b4>)
 800d826:	4853      	ldr	r0, [pc, #332]	; (800d974 <tcp_write+0x5ac>)
 800d828:	f006 faee 	bl	8013e08 <iprintf>
      prev_seg->next = seg;
 800d82c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d82e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d830:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d834:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d836:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d83a:	8b3b      	ldrh	r3, [r7, #24]
 800d83c:	4413      	add	r3, r2
 800d83e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800d842:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d846:	88fb      	ldrh	r3, [r7, #6]
 800d848:	429a      	cmp	r2, r3
 800d84a:	f4ff af3d 	bcc.w	800d6c8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d84e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d850:	2b00      	cmp	r3, #0
 800d852:	d02c      	beq.n	800d8ae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d85a:	e01e      	b.n	800d89a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85e:	891a      	ldrh	r2, [r3, #8]
 800d860:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d862:	4413      	add	r3, r2
 800d864:	b29a      	uxth	r2, r3
 800d866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d868:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d110      	bne.n	800d894 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d878:	8952      	ldrh	r2, [r2, #10]
 800d87a:	4413      	add	r3, r2
 800d87c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d87e:	68b9      	ldr	r1, [r7, #8]
 800d880:	4618      	mov	r0, r3
 800d882:	f006 faab 	bl	8013ddc <memcpy>
        p->len += oversize_used;
 800d886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d888:	895a      	ldrh	r2, [r3, #10]
 800d88a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d88c:	4413      	add	r3, r2
 800d88e:	b29a      	uxth	r2, r3
 800d890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d892:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d1dd      	bne.n	800d85c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8a2:	891a      	ldrh	r2, [r3, #8]
 800d8a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d8a6:	4413      	add	r3, r2
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8ac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d8ae:	8a7a      	ldrh	r2, [r7, #18]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d8b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d018      	beq.n	800d8ee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d8bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d106      	bne.n	800d8d0 <tcp_write+0x508>
 800d8c2:	4b2a      	ldr	r3, [pc, #168]	; (800d96c <tcp_write+0x5a4>)
 800d8c4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800d8c8:	492d      	ldr	r1, [pc, #180]	; (800d980 <tcp_write+0x5b8>)
 800d8ca:	482a      	ldr	r0, [pc, #168]	; (800d974 <tcp_write+0x5ac>)
 800d8cc:	f006 fa9c 	bl	8013e08 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d8d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fb f83a 	bl	8008950 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8de:	891a      	ldrh	r2, [r3, #8]
 800d8e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8e2:	891b      	ldrh	r3, [r3, #8]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8ea:	811a      	strh	r2, [r3, #8]
 800d8ec:	e037      	b.n	800d95e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d8ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d034      	beq.n	800d95e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d003      	beq.n	800d902 <tcp_write+0x53a>
 800d8fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d106      	bne.n	800d910 <tcp_write+0x548>
 800d902:	4b1a      	ldr	r3, [pc, #104]	; (800d96c <tcp_write+0x5a4>)
 800d904:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d908:	491e      	ldr	r1, [pc, #120]	; (800d984 <tcp_write+0x5bc>)
 800d90a:	481a      	ldr	r0, [pc, #104]	; (800d974 <tcp_write+0x5ac>)
 800d90c:	f006 fa7c 	bl	8013e08 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	62bb      	str	r3, [r7, #40]	; 0x28
 800d916:	e009      	b.n	800d92c <tcp_write+0x564>
      p->tot_len += extendlen;
 800d918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91a:	891a      	ldrh	r2, [r3, #8]
 800d91c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d91e:	4413      	add	r3, r2
 800d920:	b29a      	uxth	r2, r3
 800d922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d924:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d1f1      	bne.n	800d918 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d936:	891a      	ldrh	r2, [r3, #8]
 800d938:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d93a:	4413      	add	r3, r2
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d940:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d944:	895a      	ldrh	r2, [r3, #10]
 800d946:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d948:	4413      	add	r3, r2
 800d94a:	b29a      	uxth	r2, r3
 800d94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d952:	891a      	ldrh	r2, [r3, #8]
 800d954:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d956:	4413      	add	r3, r2
 800d958:	b29a      	uxth	r2, r3
 800d95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d95c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d960:	2b00      	cmp	r3, #0
 800d962:	d111      	bne.n	800d988 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d968:	66da      	str	r2, [r3, #108]	; 0x6c
 800d96a:	e010      	b.n	800d98e <tcp_write+0x5c6>
 800d96c:	08016e84 	.word	0x08016e84
 800d970:	08017124 	.word	0x08017124
 800d974:	08016ed8 	.word	0x08016ed8
 800d978:	08017164 	.word	0x08017164
 800d97c:	08017174 	.word	0x08017174
 800d980:	08017188 	.word	0x08017188
 800d984:	080171c0 	.word	0x080171c0
  } else {
    last_unsent->next = queue;
 800d988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d98a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d98c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d992:	88fb      	ldrh	r3, [r7, #6]
 800d994:	441a      	add	r2, r3
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d9a0:	88fb      	ldrh	r3, [r7, #6]
 800d9a2:	1ad3      	subs	r3, r2, r3
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d9b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00e      	beq.n	800d9de <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10a      	bne.n	800d9de <tcp_write+0x616>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d106      	bne.n	800d9de <tcp_write+0x616>
 800d9d0:	4b2c      	ldr	r3, [pc, #176]	; (800da84 <tcp_write+0x6bc>)
 800d9d2:	f240 3212 	movw	r2, #786	; 0x312
 800d9d6:	492c      	ldr	r1, [pc, #176]	; (800da88 <tcp_write+0x6c0>)
 800d9d8:	482c      	ldr	r0, [pc, #176]	; (800da8c <tcp_write+0x6c4>)
 800d9da:	f006 fa15 	bl	8013e08 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d9de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d016      	beq.n	800da12 <tcp_write+0x64a>
 800d9e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d012      	beq.n	800da12 <tcp_write+0x64a>
 800d9ec:	797b      	ldrb	r3, [r7, #5]
 800d9ee:	f003 0302 	and.w	r3, r3, #2
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d10d      	bne.n	800da12 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d9f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	899b      	ldrh	r3, [r3, #12]
 800d9fc:	b29c      	uxth	r4, r3
 800d9fe:	2008      	movs	r0, #8
 800da00:	f7f9 fc00 	bl	8007204 <lwip_htons>
 800da04:	4603      	mov	r3, r0
 800da06:	461a      	mov	r2, r3
 800da08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	4322      	orrs	r2, r4
 800da0e:	b292      	uxth	r2, r2
 800da10:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800da12:	2300      	movs	r3, #0
 800da14:	e031      	b.n	800da7a <tcp_write+0x6b2>
          goto memerr;
 800da16:	bf00      	nop
 800da18:	e006      	b.n	800da28 <tcp_write+0x660>
            goto memerr;
 800da1a:	bf00      	nop
 800da1c:	e004      	b.n	800da28 <tcp_write+0x660>
        goto memerr;
 800da1e:	bf00      	nop
 800da20:	e002      	b.n	800da28 <tcp_write+0x660>
        goto memerr;
 800da22:	bf00      	nop
 800da24:	e000      	b.n	800da28 <tcp_write+0x660>
      goto memerr;
 800da26:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	8b5b      	ldrh	r3, [r3, #26]
 800da2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da30:	b29a      	uxth	r2, r3
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800da36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800da3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800da3e:	f7fa fec5 	bl	80087cc <pbuf_free>
  }
  if (queue != NULL) {
 800da42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da44:	2b00      	cmp	r3, #0
 800da46:	d002      	beq.n	800da4e <tcp_write+0x686>
    tcp_segs_free(queue);
 800da48:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800da4a:	f7fc fb87 	bl	800a15c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da54:	2b00      	cmp	r3, #0
 800da56:	d00e      	beq.n	800da76 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d10a      	bne.n	800da76 <tcp_write+0x6ae>
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da64:	2b00      	cmp	r3, #0
 800da66:	d106      	bne.n	800da76 <tcp_write+0x6ae>
 800da68:	4b06      	ldr	r3, [pc, #24]	; (800da84 <tcp_write+0x6bc>)
 800da6a:	f240 3227 	movw	r2, #807	; 0x327
 800da6e:	4906      	ldr	r1, [pc, #24]	; (800da88 <tcp_write+0x6c0>)
 800da70:	4806      	ldr	r0, [pc, #24]	; (800da8c <tcp_write+0x6c4>)
 800da72:	f006 f9c9 	bl	8013e08 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800da76:	f04f 33ff 	mov.w	r3, #4294967295
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	375c      	adds	r7, #92	; 0x5c
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd90      	pop	{r4, r7, pc}
 800da82:	bf00      	nop
 800da84:	08016e84 	.word	0x08016e84
 800da88:	080171f8 	.word	0x080171f8
 800da8c:	08016ed8 	.word	0x08016ed8

0800da90 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800da90:	b590      	push	{r4, r7, lr}
 800da92:	b08b      	sub	sp, #44	; 0x2c
 800da94:	af02      	add	r7, sp, #8
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	460b      	mov	r3, r1
 800da9a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800da9c:	2300      	movs	r3, #0
 800da9e:	61fb      	str	r3, [r7, #28]
 800daa0:	2300      	movs	r3, #0
 800daa2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800daa4:	2300      	movs	r3, #0
 800daa6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d106      	bne.n	800dabc <tcp_split_unsent_seg+0x2c>
 800daae:	4b95      	ldr	r3, [pc, #596]	; (800dd04 <tcp_split_unsent_seg+0x274>)
 800dab0:	f240 324b 	movw	r2, #843	; 0x34b
 800dab4:	4994      	ldr	r1, [pc, #592]	; (800dd08 <tcp_split_unsent_seg+0x278>)
 800dab6:	4895      	ldr	r0, [pc, #596]	; (800dd0c <tcp_split_unsent_seg+0x27c>)
 800dab8:	f006 f9a6 	bl	8013e08 <iprintf>

  useg = pcb->unsent;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dac0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d102      	bne.n	800dace <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800dac8:	f04f 33ff 	mov.w	r3, #4294967295
 800dacc:	e116      	b.n	800dcfc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800dace:	887b      	ldrh	r3, [r7, #2]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d109      	bne.n	800dae8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800dad4:	4b8b      	ldr	r3, [pc, #556]	; (800dd04 <tcp_split_unsent_seg+0x274>)
 800dad6:	f240 3253 	movw	r2, #851	; 0x353
 800dada:	498d      	ldr	r1, [pc, #564]	; (800dd10 <tcp_split_unsent_seg+0x280>)
 800dadc:	488b      	ldr	r0, [pc, #556]	; (800dd0c <tcp_split_unsent_seg+0x27c>)
 800dade:	f006 f993 	bl	8013e08 <iprintf>
    return ERR_VAL;
 800dae2:	f06f 0305 	mvn.w	r3, #5
 800dae6:	e109      	b.n	800dcfc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	891b      	ldrh	r3, [r3, #8]
 800daec:	887a      	ldrh	r2, [r7, #2]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d301      	bcc.n	800daf6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	e102      	b.n	800dcfc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dafa:	887a      	ldrh	r2, [r7, #2]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d906      	bls.n	800db0e <tcp_split_unsent_seg+0x7e>
 800db00:	4b80      	ldr	r3, [pc, #512]	; (800dd04 <tcp_split_unsent_seg+0x274>)
 800db02:	f240 325b 	movw	r2, #859	; 0x35b
 800db06:	4983      	ldr	r1, [pc, #524]	; (800dd14 <tcp_split_unsent_seg+0x284>)
 800db08:	4880      	ldr	r0, [pc, #512]	; (800dd0c <tcp_split_unsent_seg+0x27c>)
 800db0a:	f006 f97d 	bl	8013e08 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	891b      	ldrh	r3, [r3, #8]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d106      	bne.n	800db24 <tcp_split_unsent_seg+0x94>
 800db16:	4b7b      	ldr	r3, [pc, #492]	; (800dd04 <tcp_split_unsent_seg+0x274>)
 800db18:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800db1c:	497e      	ldr	r1, [pc, #504]	; (800dd18 <tcp_split_unsent_seg+0x288>)
 800db1e:	487b      	ldr	r0, [pc, #492]	; (800dd0c <tcp_split_unsent_seg+0x27c>)
 800db20:	f006 f972 	bl	8013e08 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	7a9b      	ldrb	r3, [r3, #10]
 800db28:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800db2a:	7bfb      	ldrb	r3, [r7, #15]
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	f003 0304 	and.w	r3, r3, #4
 800db34:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	891a      	ldrh	r2, [r3, #8]
 800db3a:	887b      	ldrh	r3, [r7, #2]
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800db40:	7bbb      	ldrb	r3, [r7, #14]
 800db42:	b29a      	uxth	r2, r3
 800db44:	89bb      	ldrh	r3, [r7, #12]
 800db46:	4413      	add	r3, r2
 800db48:	b29b      	uxth	r3, r3
 800db4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db4e:	4619      	mov	r1, r3
 800db50:	2036      	movs	r0, #54	; 0x36
 800db52:	f7fa fb57 	bl	8008204 <pbuf_alloc>
 800db56:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f000 80b7 	beq.w	800dcce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	891a      	ldrh	r2, [r3, #8]
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	891b      	ldrh	r3, [r3, #8]
 800db6a:	1ad3      	subs	r3, r2, r3
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	887b      	ldrh	r3, [r7, #2]
 800db70:	4413      	add	r3, r2
 800db72:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	6858      	ldr	r0, [r3, #4]
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	685a      	ldr	r2, [r3, #4]
 800db7c:	7bbb      	ldrb	r3, [r7, #14]
 800db7e:	18d1      	adds	r1, r2, r3
 800db80:	897b      	ldrh	r3, [r7, #10]
 800db82:	89ba      	ldrh	r2, [r7, #12]
 800db84:	f7fb f81c 	bl	8008bc0 <pbuf_copy_partial>
 800db88:	4603      	mov	r3, r0
 800db8a:	461a      	mov	r2, r3
 800db8c:	89bb      	ldrh	r3, [r7, #12]
 800db8e:	4293      	cmp	r3, r2
 800db90:	f040 809f 	bne.w	800dcd2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	899b      	ldrh	r3, [r3, #12]
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7f9 fb31 	bl	8007204 <lwip_htons>
 800dba2:	4603      	mov	r3, r0
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbaa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800dbac:	2300      	movs	r3, #0
 800dbae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800dbb0:	7efb      	ldrb	r3, [r7, #27]
 800dbb2:	f003 0308 	and.w	r3, r3, #8
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d007      	beq.n	800dbca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800dbba:	7efb      	ldrb	r3, [r7, #27]
 800dbbc:	f023 0308 	bic.w	r3, r3, #8
 800dbc0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800dbc2:	7ebb      	ldrb	r3, [r7, #26]
 800dbc4:	f043 0308 	orr.w	r3, r3, #8
 800dbc8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800dbca:	7efb      	ldrb	r3, [r7, #27]
 800dbcc:	f003 0301 	and.w	r3, r3, #1
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d007      	beq.n	800dbe4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800dbd4:	7efb      	ldrb	r3, [r7, #27]
 800dbd6:	f023 0301 	bic.w	r3, r3, #1
 800dbda:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800dbdc:	7ebb      	ldrb	r3, [r7, #26]
 800dbde:	f043 0301 	orr.w	r3, r3, #1
 800dbe2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	68db      	ldr	r3, [r3, #12]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7f9 fb1f 	bl	800722e <lwip_htonl>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	887b      	ldrh	r3, [r7, #2]
 800dbf4:	18d1      	adds	r1, r2, r3
 800dbf6:	7eba      	ldrb	r2, [r7, #26]
 800dbf8:	7bfb      	ldrb	r3, [r7, #15]
 800dbfa:	9300      	str	r3, [sp, #0]
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	6939      	ldr	r1, [r7, #16]
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f7ff fa4f 	bl	800d0a4 <tcp_create_segment>
 800dc06:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d063      	beq.n	800dcd6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7fa fe62 	bl	80088dc <pbuf_clen>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc22:	1a9b      	subs	r3, r3, r2
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	6858      	ldr	r0, [r3, #4]
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	891a      	ldrh	r2, [r3, #8]
 800dc36:	89bb      	ldrh	r3, [r7, #12]
 800dc38:	1ad3      	subs	r3, r2, r3
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	f7fa fc3f 	bl	80084c0 <pbuf_realloc>
  useg->len -= remainder;
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	891a      	ldrh	r2, [r3, #8]
 800dc46:	89bb      	ldrh	r3, [r7, #12]
 800dc48:	1ad3      	subs	r3, r2, r3
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	899b      	ldrh	r3, [r3, #12]
 800dc56:	b29c      	uxth	r4, r3
 800dc58:	7efb      	ldrb	r3, [r7, #27]
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7f9 fad1 	bl	8007204 <lwip_htons>
 800dc62:	4603      	mov	r3, r0
 800dc64:	461a      	mov	r2, r3
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	4322      	orrs	r2, r4
 800dc6c:	b292      	uxth	r2, r2
 800dc6e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fa fe31 	bl	80088dc <pbuf_clen>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc84:	4413      	add	r3, r2
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fa fe22 	bl	80088dc <pbuf_clen>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dca2:	4413      	add	r3, r2
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	69fa      	ldr	r2, [r7, #28]
 800dcb8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d103      	bne.n	800dcca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800dcca:	2300      	movs	r3, #0
 800dccc:	e016      	b.n	800dcfc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800dcce:	bf00      	nop
 800dcd0:	e002      	b.n	800dcd8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dcd2:	bf00      	nop
 800dcd4:	e000      	b.n	800dcd8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dcd6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d006      	beq.n	800dcec <tcp_split_unsent_seg+0x25c>
 800dcde:	4b09      	ldr	r3, [pc, #36]	; (800dd04 <tcp_split_unsent_seg+0x274>)
 800dce0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800dce4:	490d      	ldr	r1, [pc, #52]	; (800dd1c <tcp_split_unsent_seg+0x28c>)
 800dce6:	4809      	ldr	r0, [pc, #36]	; (800dd0c <tcp_split_unsent_seg+0x27c>)
 800dce8:	f006 f88e 	bl	8013e08 <iprintf>
  if (p != NULL) {
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800dcf2:	6938      	ldr	r0, [r7, #16]
 800dcf4:	f7fa fd6a 	bl	80087cc <pbuf_free>
  }

  return ERR_MEM;
 800dcf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3724      	adds	r7, #36	; 0x24
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd90      	pop	{r4, r7, pc}
 800dd04:	08016e84 	.word	0x08016e84
 800dd08:	08017218 	.word	0x08017218
 800dd0c:	08016ed8 	.word	0x08016ed8
 800dd10:	0801723c 	.word	0x0801723c
 800dd14:	08017260 	.word	0x08017260
 800dd18:	08017270 	.word	0x08017270
 800dd1c:	08017280 	.word	0x08017280

0800dd20 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800dd20:	b590      	push	{r4, r7, lr}
 800dd22:	b085      	sub	sp, #20
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d106      	bne.n	800dd3c <tcp_send_fin+0x1c>
 800dd2e:	4b21      	ldr	r3, [pc, #132]	; (800ddb4 <tcp_send_fin+0x94>)
 800dd30:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800dd34:	4920      	ldr	r1, [pc, #128]	; (800ddb8 <tcp_send_fin+0x98>)
 800dd36:	4821      	ldr	r0, [pc, #132]	; (800ddbc <tcp_send_fin+0x9c>)
 800dd38:	f006 f866 	bl	8013e08 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d02e      	beq.n	800dda2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd48:	60fb      	str	r3, [r7, #12]
 800dd4a:	e002      	b.n	800dd52 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1f8      	bne.n	800dd4c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	899b      	ldrh	r3, [r3, #12]
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7f9 fa4e 	bl	8007204 <lwip_htons>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	f003 0307 	and.w	r3, r3, #7
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d116      	bne.n	800dda2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	899b      	ldrh	r3, [r3, #12]
 800dd7a:	b29c      	uxth	r4, r3
 800dd7c:	2001      	movs	r0, #1
 800dd7e:	f7f9 fa41 	bl	8007204 <lwip_htons>
 800dd82:	4603      	mov	r3, r0
 800dd84:	461a      	mov	r2, r3
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	4322      	orrs	r2, r4
 800dd8c:	b292      	uxth	r2, r2
 800dd8e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	8b5b      	ldrh	r3, [r3, #26]
 800dd94:	f043 0320 	orr.w	r3, r3, #32
 800dd98:	b29a      	uxth	r2, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	e004      	b.n	800ddac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dda2:	2101      	movs	r1, #1
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 f80b 	bl	800ddc0 <tcp_enqueue_flags>
 800ddaa:	4603      	mov	r3, r0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3714      	adds	r7, #20
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd90      	pop	{r4, r7, pc}
 800ddb4:	08016e84 	.word	0x08016e84
 800ddb8:	0801728c 	.word	0x0801728c
 800ddbc:	08016ed8 	.word	0x08016ed8

0800ddc0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08a      	sub	sp, #40	; 0x28
 800ddc4:	af02      	add	r7, sp, #8
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ddd4:	78fb      	ldrb	r3, [r7, #3]
 800ddd6:	f003 0303 	and.w	r3, r3, #3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d106      	bne.n	800ddec <tcp_enqueue_flags+0x2c>
 800ddde:	4b67      	ldr	r3, [pc, #412]	; (800df7c <tcp_enqueue_flags+0x1bc>)
 800dde0:	f240 4211 	movw	r2, #1041	; 0x411
 800dde4:	4966      	ldr	r1, [pc, #408]	; (800df80 <tcp_enqueue_flags+0x1c0>)
 800dde6:	4867      	ldr	r0, [pc, #412]	; (800df84 <tcp_enqueue_flags+0x1c4>)
 800dde8:	f006 f80e 	bl	8013e08 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d106      	bne.n	800de00 <tcp_enqueue_flags+0x40>
 800ddf2:	4b62      	ldr	r3, [pc, #392]	; (800df7c <tcp_enqueue_flags+0x1bc>)
 800ddf4:	f240 4213 	movw	r2, #1043	; 0x413
 800ddf8:	4963      	ldr	r1, [pc, #396]	; (800df88 <tcp_enqueue_flags+0x1c8>)
 800ddfa:	4862      	ldr	r0, [pc, #392]	; (800df84 <tcp_enqueue_flags+0x1c4>)
 800ddfc:	f006 f804 	bl	8013e08 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800de00:	78fb      	ldrb	r3, [r7, #3]
 800de02:	f003 0302 	and.w	r3, r3, #2
 800de06:	2b00      	cmp	r3, #0
 800de08:	d001      	beq.n	800de0e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800de0a:	2301      	movs	r3, #1
 800de0c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800de0e:	7ffb      	ldrb	r3, [r7, #31]
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	b2db      	uxtb	r3, r3
 800de14:	f003 0304 	and.w	r3, r3, #4
 800de18:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800de1a:	7dfb      	ldrb	r3, [r7, #23]
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de22:	4619      	mov	r1, r3
 800de24:	2036      	movs	r0, #54	; 0x36
 800de26:	f7fa f9ed 	bl	8008204 <pbuf_alloc>
 800de2a:	6138      	str	r0, [r7, #16]
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d109      	bne.n	800de46 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	8b5b      	ldrh	r3, [r3, #26]
 800de36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800de40:	f04f 33ff 	mov.w	r3, #4294967295
 800de44:	e095      	b.n	800df72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	895a      	ldrh	r2, [r3, #10]
 800de4a:	7dfb      	ldrb	r3, [r7, #23]
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	429a      	cmp	r2, r3
 800de50:	d206      	bcs.n	800de60 <tcp_enqueue_flags+0xa0>
 800de52:	4b4a      	ldr	r3, [pc, #296]	; (800df7c <tcp_enqueue_flags+0x1bc>)
 800de54:	f240 4239 	movw	r2, #1081	; 0x439
 800de58:	494c      	ldr	r1, [pc, #304]	; (800df8c <tcp_enqueue_flags+0x1cc>)
 800de5a:	484a      	ldr	r0, [pc, #296]	; (800df84 <tcp_enqueue_flags+0x1c4>)
 800de5c:	f005 ffd4 	bl	8013e08 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800de64:	78fa      	ldrb	r2, [r7, #3]
 800de66:	7ffb      	ldrb	r3, [r7, #31]
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	460b      	mov	r3, r1
 800de6c:	6939      	ldr	r1, [r7, #16]
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff f918 	bl	800d0a4 <tcp_create_segment>
 800de74:	60f8      	str	r0, [r7, #12]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d109      	bne.n	800de90 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	8b5b      	ldrh	r3, [r3, #26]
 800de80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de84:	b29a      	uxth	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800de8a:	f04f 33ff 	mov.w	r3, #4294967295
 800de8e:	e070      	b.n	800df72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	68db      	ldr	r3, [r3, #12]
 800de94:	f003 0303 	and.w	r3, r3, #3
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d006      	beq.n	800deaa <tcp_enqueue_flags+0xea>
 800de9c:	4b37      	ldr	r3, [pc, #220]	; (800df7c <tcp_enqueue_flags+0x1bc>)
 800de9e:	f240 4242 	movw	r2, #1090	; 0x442
 800dea2:	493b      	ldr	r1, [pc, #236]	; (800df90 <tcp_enqueue_flags+0x1d0>)
 800dea4:	4837      	ldr	r0, [pc, #220]	; (800df84 <tcp_enqueue_flags+0x1c4>)
 800dea6:	f005 ffaf 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	891b      	ldrh	r3, [r3, #8]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d006      	beq.n	800dec0 <tcp_enqueue_flags+0x100>
 800deb2:	4b32      	ldr	r3, [pc, #200]	; (800df7c <tcp_enqueue_flags+0x1bc>)
 800deb4:	f240 4243 	movw	r2, #1091	; 0x443
 800deb8:	4936      	ldr	r1, [pc, #216]	; (800df94 <tcp_enqueue_flags+0x1d4>)
 800deba:	4832      	ldr	r0, [pc, #200]	; (800df84 <tcp_enqueue_flags+0x1c4>)
 800debc:	f005 ffa4 	bl	8013e08 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d103      	bne.n	800ded0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	66da      	str	r2, [r3, #108]	; 0x6c
 800dece:	e00d      	b.n	800deec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ded4:	61bb      	str	r3, [r7, #24]
 800ded6:	e002      	b.n	800dede <tcp_enqueue_flags+0x11e>
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	61bb      	str	r3, [r7, #24]
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d1f8      	bne.n	800ded8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	68fa      	ldr	r2, [r7, #12]
 800deea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2200      	movs	r2, #0
 800def0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800def4:	78fb      	ldrb	r3, [r7, #3]
 800def6:	f003 0302 	and.w	r3, r3, #2
 800defa:	2b00      	cmp	r3, #0
 800defc:	d104      	bne.n	800df08 <tcp_enqueue_flags+0x148>
 800defe:	78fb      	ldrb	r3, [r7, #3]
 800df00:	f003 0301 	and.w	r3, r3, #1
 800df04:	2b00      	cmp	r3, #0
 800df06:	d004      	beq.n	800df12 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df0c:	1c5a      	adds	r2, r3, #1
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800df12:	78fb      	ldrb	r3, [r7, #3]
 800df14:	f003 0301 	and.w	r3, r3, #1
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d006      	beq.n	800df2a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	8b5b      	ldrh	r3, [r3, #26]
 800df20:	f043 0320 	orr.w	r3, r3, #32
 800df24:	b29a      	uxth	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fa fcd4 	bl	80088dc <pbuf_clen>
 800df34:	4603      	mov	r3, r0
 800df36:	461a      	mov	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df3e:	4413      	add	r3, r2
 800df40:	b29a      	uxth	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00e      	beq.n	800df70 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df56:	2b00      	cmp	r3, #0
 800df58:	d10a      	bne.n	800df70 <tcp_enqueue_flags+0x1b0>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d106      	bne.n	800df70 <tcp_enqueue_flags+0x1b0>
 800df62:	4b06      	ldr	r3, [pc, #24]	; (800df7c <tcp_enqueue_flags+0x1bc>)
 800df64:	f240 4265 	movw	r2, #1125	; 0x465
 800df68:	490b      	ldr	r1, [pc, #44]	; (800df98 <tcp_enqueue_flags+0x1d8>)
 800df6a:	4806      	ldr	r0, [pc, #24]	; (800df84 <tcp_enqueue_flags+0x1c4>)
 800df6c:	f005 ff4c 	bl	8013e08 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	3720      	adds	r7, #32
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	08016e84 	.word	0x08016e84
 800df80:	080172a8 	.word	0x080172a8
 800df84:	08016ed8 	.word	0x08016ed8
 800df88:	08017300 	.word	0x08017300
 800df8c:	08017320 	.word	0x08017320
 800df90:	0801735c 	.word	0x0801735c
 800df94:	08017374 	.word	0x08017374
 800df98:	080173a0 	.word	0x080173a0

0800df9c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800df9c:	b5b0      	push	{r4, r5, r7, lr}
 800df9e:	b08a      	sub	sp, #40	; 0x28
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d106      	bne.n	800dfb8 <tcp_output+0x1c>
 800dfaa:	4b9e      	ldr	r3, [pc, #632]	; (800e224 <tcp_output+0x288>)
 800dfac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800dfb0:	499d      	ldr	r1, [pc, #628]	; (800e228 <tcp_output+0x28c>)
 800dfb2:	489e      	ldr	r0, [pc, #632]	; (800e22c <tcp_output+0x290>)
 800dfb4:	f005 ff28 	bl	8013e08 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	7d1b      	ldrb	r3, [r3, #20]
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d106      	bne.n	800dfce <tcp_output+0x32>
 800dfc0:	4b98      	ldr	r3, [pc, #608]	; (800e224 <tcp_output+0x288>)
 800dfc2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800dfc6:	499a      	ldr	r1, [pc, #616]	; (800e230 <tcp_output+0x294>)
 800dfc8:	4898      	ldr	r0, [pc, #608]	; (800e22c <tcp_output+0x290>)
 800dfca:	f005 ff1d 	bl	8013e08 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dfce:	4b99      	ldr	r3, [pc, #612]	; (800e234 <tcp_output+0x298>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d101      	bne.n	800dfdc <tcp_output+0x40>
    return ERR_OK;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	e1ce      	b.n	800e37a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	bf28      	it	cs
 800dfec:	4613      	movcs	r3, r2
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dff6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d10b      	bne.n	800e016 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	8b5b      	ldrh	r3, [r3, #26]
 800e002:	f003 0302 	and.w	r3, r3, #2
 800e006:	2b00      	cmp	r3, #0
 800e008:	f000 81aa 	beq.w	800e360 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 fdcb 	bl	800eba8 <tcp_send_empty_ack>
 800e012:	4603      	mov	r3, r0
 800e014:	e1b1      	b.n	800e37a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e016:	6879      	ldr	r1, [r7, #4]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	3304      	adds	r3, #4
 800e01c:	461a      	mov	r2, r3
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7ff f824 	bl	800d06c <tcp_route>
 800e024:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d102      	bne.n	800e032 <tcp_output+0x96>
    return ERR_RTE;
 800e02c:	f06f 0303 	mvn.w	r3, #3
 800e030:	e1a3      	b.n	800e37a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d003      	beq.n	800e040 <tcp_output+0xa4>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d111      	bne.n	800e064 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d002      	beq.n	800e04c <tcp_output+0xb0>
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	3304      	adds	r3, #4
 800e04a:	e000      	b.n	800e04e <tcp_output+0xb2>
 800e04c:	2300      	movs	r3, #0
 800e04e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d102      	bne.n	800e05c <tcp_output+0xc0>
      return ERR_RTE;
 800e056:	f06f 0303 	mvn.w	r3, #3
 800e05a:	e18e      	b.n	800e37a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7f9 f8df 	bl	800722e <lwip_htonl>
 800e070:	4602      	mov	r2, r0
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e076:	1ad3      	subs	r3, r2, r3
 800e078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e07a:	8912      	ldrh	r2, [r2, #8]
 800e07c:	4413      	add	r3, r2
 800e07e:	69ba      	ldr	r2, [r7, #24]
 800e080:	429a      	cmp	r2, r3
 800e082:	d227      	bcs.n	800e0d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e08a:	461a      	mov	r2, r3
 800e08c:	69bb      	ldr	r3, [r7, #24]
 800e08e:	4293      	cmp	r3, r2
 800e090:	d114      	bne.n	800e0bc <tcp_output+0x120>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e096:	2b00      	cmp	r3, #0
 800e098:	d110      	bne.n	800e0bc <tcp_output+0x120>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10b      	bne.n	800e0bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	8b5b      	ldrh	r3, [r3, #26]
 800e0c0:	f003 0302 	and.w	r3, r3, #2
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	f000 814d 	beq.w	800e364 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 fd6c 	bl	800eba8 <tcp_send_empty_ack>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	e152      	b.n	800e37a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f000 811c 	beq.w	800e322 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e0ea:	e002      	b.n	800e0f2 <tcp_output+0x156>
 800e0ec:	6a3b      	ldr	r3, [r7, #32]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	623b      	str	r3, [r7, #32]
 800e0f2:	6a3b      	ldr	r3, [r7, #32]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1f8      	bne.n	800e0ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e0fa:	e112      	b.n	800e322 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	899b      	ldrh	r3, [r3, #12]
 800e102:	b29b      	uxth	r3, r3
 800e104:	4618      	mov	r0, r3
 800e106:	f7f9 f87d 	bl	8007204 <lwip_htons>
 800e10a:	4603      	mov	r3, r0
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	f003 0304 	and.w	r3, r3, #4
 800e112:	2b00      	cmp	r3, #0
 800e114:	d006      	beq.n	800e124 <tcp_output+0x188>
 800e116:	4b43      	ldr	r3, [pc, #268]	; (800e224 <tcp_output+0x288>)
 800e118:	f240 5236 	movw	r2, #1334	; 0x536
 800e11c:	4946      	ldr	r1, [pc, #280]	; (800e238 <tcp_output+0x29c>)
 800e11e:	4843      	ldr	r0, [pc, #268]	; (800e22c <tcp_output+0x290>)
 800e120:	f005 fe72 	bl	8013e08 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d01f      	beq.n	800e16c <tcp_output+0x1d0>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	8b5b      	ldrh	r3, [r3, #26]
 800e130:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e134:	2b00      	cmp	r3, #0
 800e136:	d119      	bne.n	800e16c <tcp_output+0x1d0>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d00b      	beq.n	800e158 <tcp_output+0x1bc>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d110      	bne.n	800e16c <tcp_output+0x1d0>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e14e:	891a      	ldrh	r2, [r3, #8]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e154:	429a      	cmp	r2, r3
 800e156:	d209      	bcs.n	800e16c <tcp_output+0x1d0>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d004      	beq.n	800e16c <tcp_output+0x1d0>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e168:	2b08      	cmp	r3, #8
 800e16a:	d901      	bls.n	800e170 <tcp_output+0x1d4>
 800e16c:	2301      	movs	r3, #1
 800e16e:	e000      	b.n	800e172 <tcp_output+0x1d6>
 800e170:	2300      	movs	r3, #0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d106      	bne.n	800e184 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	8b5b      	ldrh	r3, [r3, #26]
 800e17a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f000 80e4 	beq.w	800e34c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	7d1b      	ldrb	r3, [r3, #20]
 800e188:	2b02      	cmp	r3, #2
 800e18a:	d00d      	beq.n	800e1a8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	899b      	ldrh	r3, [r3, #12]
 800e192:	b29c      	uxth	r4, r3
 800e194:	2010      	movs	r0, #16
 800e196:	f7f9 f835 	bl	8007204 <lwip_htons>
 800e19a:	4603      	mov	r3, r0
 800e19c:	461a      	mov	r2, r3
 800e19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	4322      	orrs	r2, r4
 800e1a4:	b292      	uxth	r2, r2
 800e1a6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e1a8:	697a      	ldr	r2, [r7, #20]
 800e1aa:	6879      	ldr	r1, [r7, #4]
 800e1ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ae:	f000 f909 	bl	800e3c4 <tcp_output_segment>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e1b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d009      	beq.n	800e1d2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	8b5b      	ldrh	r3, [r3, #26]
 800e1c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1c6:	b29a      	uxth	r2, r3
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	835a      	strh	r2, [r3, #26]
      return err;
 800e1cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1d0:	e0d3      	b.n	800e37a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	7d1b      	ldrb	r3, [r3, #20]
 800e1de:	2b02      	cmp	r3, #2
 800e1e0:	d006      	beq.n	800e1f0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	8b5b      	ldrh	r3, [r3, #26]
 800e1e6:	f023 0303 	bic.w	r3, r3, #3
 800e1ea:	b29a      	uxth	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7f9 f819 	bl	800722e <lwip_htonl>
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e200:	891b      	ldrh	r3, [r3, #8]
 800e202:	461d      	mov	r5, r3
 800e204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	899b      	ldrh	r3, [r3, #12]
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7f8 fff9 	bl	8007204 <lwip_htons>
 800e212:	4603      	mov	r3, r0
 800e214:	b2db      	uxtb	r3, r3
 800e216:	f003 0303 	and.w	r3, r3, #3
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00e      	beq.n	800e23c <tcp_output+0x2a0>
 800e21e:	2301      	movs	r3, #1
 800e220:	e00d      	b.n	800e23e <tcp_output+0x2a2>
 800e222:	bf00      	nop
 800e224:	08016e84 	.word	0x08016e84
 800e228:	080173c8 	.word	0x080173c8
 800e22c:	08016ed8 	.word	0x08016ed8
 800e230:	080173e0 	.word	0x080173e0
 800e234:	20006d1c 	.word	0x20006d1c
 800e238:	08017408 	.word	0x08017408
 800e23c:	2300      	movs	r3, #0
 800e23e:	442b      	add	r3, r5
 800e240:	4423      	add	r3, r4
 800e242:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	1ad3      	subs	r3, r2, r3
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	da02      	bge.n	800e256 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	68ba      	ldr	r2, [r7, #8]
 800e254:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e258:	891b      	ldrh	r3, [r3, #8]
 800e25a:	461c      	mov	r4, r3
 800e25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	899b      	ldrh	r3, [r3, #12]
 800e262:	b29b      	uxth	r3, r3
 800e264:	4618      	mov	r0, r3
 800e266:	f7f8 ffcd 	bl	8007204 <lwip_htons>
 800e26a:	4603      	mov	r3, r0
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	f003 0303 	and.w	r3, r3, #3
 800e272:	2b00      	cmp	r3, #0
 800e274:	d001      	beq.n	800e27a <tcp_output+0x2de>
 800e276:	2301      	movs	r3, #1
 800e278:	e000      	b.n	800e27c <tcp_output+0x2e0>
 800e27a:	2300      	movs	r3, #0
 800e27c:	4423      	add	r3, r4
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d049      	beq.n	800e316 <tcp_output+0x37a>
      seg->next = NULL;
 800e282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e284:	2200      	movs	r2, #0
 800e286:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d105      	bne.n	800e29c <tcp_output+0x300>
        pcb->unacked = seg;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e294:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e298:	623b      	str	r3, [r7, #32]
 800e29a:	e03f      	b.n	800e31c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	685b      	ldr	r3, [r3, #4]
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7f8 ffc3 	bl	800722e <lwip_htonl>
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	6a3b      	ldr	r3, [r7, #32]
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7f8 ffbc 	bl	800722e <lwip_htonl>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	1ae3      	subs	r3, r4, r3
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	da24      	bge.n	800e308 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3370      	adds	r3, #112	; 0x70
 800e2c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e2c4:	e002      	b.n	800e2cc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d011      	beq.n	800e2f8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7f8 ffa6 	bl	800722e <lwip_htonl>
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7f8 ff9f 	bl	800722e <lwip_htonl>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	dbe6      	blt.n	800e2c6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e2f8:	69fb      	ldr	r3, [r7, #28]
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e304:	601a      	str	r2, [r3, #0]
 800e306:	e009      	b.n	800e31c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e308:	6a3b      	ldr	r3, [r7, #32]
 800e30a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e30c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e30e:	6a3b      	ldr	r3, [r7, #32]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	623b      	str	r3, [r7, #32]
 800e314:	e002      	b.n	800e31c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e318:	f7fb ff35 	bl	800a186 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e320:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e324:	2b00      	cmp	r3, #0
 800e326:	d012      	beq.n	800e34e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	4618      	mov	r0, r3
 800e330:	f7f8 ff7d 	bl	800722e <lwip_htonl>
 800e334:	4602      	mov	r2, r0
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e33a:	1ad3      	subs	r3, r2, r3
 800e33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e33e:	8912      	ldrh	r2, [r2, #8]
 800e340:	4413      	add	r3, r2
  while (seg != NULL &&
 800e342:	69ba      	ldr	r2, [r7, #24]
 800e344:	429a      	cmp	r2, r3
 800e346:	f4bf aed9 	bcs.w	800e0fc <tcp_output+0x160>
 800e34a:	e000      	b.n	800e34e <tcp_output+0x3b2>
      break;
 800e34c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e352:	2b00      	cmp	r3, #0
 800e354:	d108      	bne.n	800e368 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e35e:	e004      	b.n	800e36a <tcp_output+0x3ce>
    goto output_done;
 800e360:	bf00      	nop
 800e362:	e002      	b.n	800e36a <tcp_output+0x3ce>
    goto output_done;
 800e364:	bf00      	nop
 800e366:	e000      	b.n	800e36a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e368:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	8b5b      	ldrh	r3, [r3, #26]
 800e36e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e372:	b29a      	uxth	r2, r3
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3728      	adds	r7, #40	; 0x28
 800e37e:	46bd      	mov	sp, r7
 800e380:	bdb0      	pop	{r4, r5, r7, pc}
 800e382:	bf00      	nop

0800e384 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d106      	bne.n	800e3a0 <tcp_output_segment_busy+0x1c>
 800e392:	4b09      	ldr	r3, [pc, #36]	; (800e3b8 <tcp_output_segment_busy+0x34>)
 800e394:	f240 529a 	movw	r2, #1434	; 0x59a
 800e398:	4908      	ldr	r1, [pc, #32]	; (800e3bc <tcp_output_segment_busy+0x38>)
 800e39a:	4809      	ldr	r0, [pc, #36]	; (800e3c0 <tcp_output_segment_busy+0x3c>)
 800e39c:	f005 fd34 	bl	8013e08 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	7b9b      	ldrb	r3, [r3, #14]
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d001      	beq.n	800e3ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e000      	b.n	800e3b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e3ae:	2300      	movs	r3, #0
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	08016e84 	.word	0x08016e84
 800e3bc:	08017420 	.word	0x08017420
 800e3c0:	08016ed8 	.word	0x08016ed8

0800e3c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e3c4:	b5b0      	push	{r4, r5, r7, lr}
 800e3c6:	b08c      	sub	sp, #48	; 0x30
 800e3c8:	af04      	add	r7, sp, #16
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d106      	bne.n	800e3e4 <tcp_output_segment+0x20>
 800e3d6:	4b63      	ldr	r3, [pc, #396]	; (800e564 <tcp_output_segment+0x1a0>)
 800e3d8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e3dc:	4962      	ldr	r1, [pc, #392]	; (800e568 <tcp_output_segment+0x1a4>)
 800e3de:	4863      	ldr	r0, [pc, #396]	; (800e56c <tcp_output_segment+0x1a8>)
 800e3e0:	f005 fd12 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d106      	bne.n	800e3f8 <tcp_output_segment+0x34>
 800e3ea:	4b5e      	ldr	r3, [pc, #376]	; (800e564 <tcp_output_segment+0x1a0>)
 800e3ec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e3f0:	495f      	ldr	r1, [pc, #380]	; (800e570 <tcp_output_segment+0x1ac>)
 800e3f2:	485e      	ldr	r0, [pc, #376]	; (800e56c <tcp_output_segment+0x1a8>)
 800e3f4:	f005 fd08 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d106      	bne.n	800e40c <tcp_output_segment+0x48>
 800e3fe:	4b59      	ldr	r3, [pc, #356]	; (800e564 <tcp_output_segment+0x1a0>)
 800e400:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e404:	495b      	ldr	r1, [pc, #364]	; (800e574 <tcp_output_segment+0x1b0>)
 800e406:	4859      	ldr	r0, [pc, #356]	; (800e56c <tcp_output_segment+0x1a8>)
 800e408:	f005 fcfe 	bl	8013e08 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	f7ff ffb9 	bl	800e384 <tcp_output_segment_busy>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d001      	beq.n	800e41c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e418:	2300      	movs	r3, #0
 800e41a:	e09f      	b.n	800e55c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	68dc      	ldr	r4, [r3, #12]
 800e424:	4610      	mov	r0, r2
 800e426:	f7f8 ff02 	bl	800722e <lwip_htonl>
 800e42a:	4603      	mov	r3, r0
 800e42c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	68dc      	ldr	r4, [r3, #12]
 800e436:	4610      	mov	r0, r2
 800e438:	f7f8 fee4 	bl	8007204 <lwip_htons>
 800e43c:	4603      	mov	r3, r0
 800e43e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e444:	68ba      	ldr	r2, [r7, #8]
 800e446:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e448:	441a      	add	r2, r3
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	3314      	adds	r3, #20
 800e454:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	7a9b      	ldrb	r3, [r3, #10]
 800e45a:	f003 0301 	and.w	r3, r3, #1
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d015      	beq.n	800e48e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	3304      	adds	r3, #4
 800e466:	461a      	mov	r2, r3
 800e468:	6879      	ldr	r1, [r7, #4]
 800e46a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e46e:	f7fc fa37 	bl	800a8e0 <tcp_eff_send_mss_netif>
 800e472:	4603      	mov	r3, r0
 800e474:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e476:	8b7b      	ldrh	r3, [r7, #26]
 800e478:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7f8 fed6 	bl	800722e <lwip_htonl>
 800e482:	4602      	mov	r2, r0
 800e484:	69fb      	ldr	r3, [r7, #28]
 800e486:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	3304      	adds	r3, #4
 800e48c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e494:	2b00      	cmp	r3, #0
 800e496:	da02      	bge.n	800e49e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	2200      	movs	r2, #0
 800e49c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10c      	bne.n	800e4c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e4a6:	4b34      	ldr	r3, [pc, #208]	; (800e578 <tcp_output_segment+0x1b4>)
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7f8 feba 	bl	800722e <lwip_htonl>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	68da      	ldr	r2, [r3, #12]
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	1ad3      	subs	r3, r2, r3
 800e4cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	8959      	ldrh	r1, [r3, #10]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	8b3a      	ldrh	r2, [r7, #24]
 800e4da:	1a8a      	subs	r2, r1, r2
 800e4dc:	b292      	uxth	r2, r2
 800e4de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	8919      	ldrh	r1, [r3, #8]
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	8b3a      	ldrh	r2, [r7, #24]
 800e4ec:	1a8a      	subs	r2, r1, r2
 800e4ee:	b292      	uxth	r2, r2
 800e4f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	68fa      	ldr	r2, [r7, #12]
 800e4f8:	68d2      	ldr	r2, [r2, #12]
 800e4fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	2200      	movs	r2, #0
 800e502:	741a      	strb	r2, [r3, #16]
 800e504:	2200      	movs	r2, #0
 800e506:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	f103 0214 	add.w	r2, r3, #20
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	7a9b      	ldrb	r3, [r3, #10]
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	f003 0304 	and.w	r3, r3, #4
 800e51a:	4413      	add	r3, r2
 800e51c:	69fa      	ldr	r2, [r7, #28]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d006      	beq.n	800e530 <tcp_output_segment+0x16c>
 800e522:	4b10      	ldr	r3, [pc, #64]	; (800e564 <tcp_output_segment+0x1a0>)
 800e524:	f240 621c 	movw	r2, #1564	; 0x61c
 800e528:	4914      	ldr	r1, [pc, #80]	; (800e57c <tcp_output_segment+0x1b8>)
 800e52a:	4810      	ldr	r0, [pc, #64]	; (800e56c <tcp_output_segment+0x1a8>)
 800e52c:	f005 fc6c 	bl	8013e08 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6858      	ldr	r0, [r3, #4]
 800e534:	68b9      	ldr	r1, [r7, #8]
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	1d1c      	adds	r4, r3, #4
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	7add      	ldrb	r5, [r3, #11]
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	7a9b      	ldrb	r3, [r3, #10]
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	9202      	str	r2, [sp, #8]
 800e546:	2206      	movs	r2, #6
 800e548:	9201      	str	r2, [sp, #4]
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	462b      	mov	r3, r5
 800e54e:	4622      	mov	r2, r4
 800e550:	f004 fbea 	bl	8012d28 <ip4_output_if>
 800e554:	4603      	mov	r3, r0
 800e556:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e558:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3720      	adds	r7, #32
 800e560:	46bd      	mov	sp, r7
 800e562:	bdb0      	pop	{r4, r5, r7, pc}
 800e564:	08016e84 	.word	0x08016e84
 800e568:	08017448 	.word	0x08017448
 800e56c:	08016ed8 	.word	0x08016ed8
 800e570:	08017468 	.word	0x08017468
 800e574:	08017488 	.word	0x08017488
 800e578:	20006d0c 	.word	0x20006d0c
 800e57c:	080174ac 	.word	0x080174ac

0800e580 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e580:	b5b0      	push	{r4, r5, r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d106      	bne.n	800e59c <tcp_rexmit_rto_prepare+0x1c>
 800e58e:	4b31      	ldr	r3, [pc, #196]	; (800e654 <tcp_rexmit_rto_prepare+0xd4>)
 800e590:	f240 6263 	movw	r2, #1635	; 0x663
 800e594:	4930      	ldr	r1, [pc, #192]	; (800e658 <tcp_rexmit_rto_prepare+0xd8>)
 800e596:	4831      	ldr	r0, [pc, #196]	; (800e65c <tcp_rexmit_rto_prepare+0xdc>)
 800e598:	f005 fc36 	bl	8013e08 <iprintf>

  if (pcb->unacked == NULL) {
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d102      	bne.n	800e5aa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e5a4:	f06f 0305 	mvn.w	r3, #5
 800e5a8:	e050      	b.n	800e64c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5ae:	60fb      	str	r3, [r7, #12]
 800e5b0:	e00b      	b.n	800e5ca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e5b2:	68f8      	ldr	r0, [r7, #12]
 800e5b4:	f7ff fee6 	bl	800e384 <tcp_output_segment_busy>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d002      	beq.n	800e5c4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e5be:	f06f 0305 	mvn.w	r3, #5
 800e5c2:	e043      	b.n	800e64c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	60fb      	str	r3, [r7, #12]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1ef      	bne.n	800e5b2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	f7ff fed6 	bl	800e384 <tcp_output_segment_busy>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d002      	beq.n	800e5e4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e5de:	f06f 0305 	mvn.w	r3, #5
 800e5e2:	e033      	b.n	800e64c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	8b5b      	ldrh	r3, [r3, #26]
 800e5fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e602:	b29a      	uxth	r2, r3
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	68db      	ldr	r3, [r3, #12]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	4618      	mov	r0, r3
 800e610:	f7f8 fe0d 	bl	800722e <lwip_htonl>
 800e614:	4604      	mov	r4, r0
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	891b      	ldrh	r3, [r3, #8]
 800e61a:	461d      	mov	r5, r3
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	899b      	ldrh	r3, [r3, #12]
 800e622:	b29b      	uxth	r3, r3
 800e624:	4618      	mov	r0, r3
 800e626:	f7f8 fded 	bl	8007204 <lwip_htons>
 800e62a:	4603      	mov	r3, r0
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	f003 0303 	and.w	r3, r3, #3
 800e632:	2b00      	cmp	r3, #0
 800e634:	d001      	beq.n	800e63a <tcp_rexmit_rto_prepare+0xba>
 800e636:	2301      	movs	r3, #1
 800e638:	e000      	b.n	800e63c <tcp_rexmit_rto_prepare+0xbc>
 800e63a:	2300      	movs	r3, #0
 800e63c:	442b      	add	r3, r5
 800e63e:	18e2      	adds	r2, r4, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e64a:	2300      	movs	r3, #0
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bdb0      	pop	{r4, r5, r7, pc}
 800e654:	08016e84 	.word	0x08016e84
 800e658:	080174c0 	.word	0x080174c0
 800e65c:	08016ed8 	.word	0x08016ed8

0800e660 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d106      	bne.n	800e67c <tcp_rexmit_rto_commit+0x1c>
 800e66e:	4b0d      	ldr	r3, [pc, #52]	; (800e6a4 <tcp_rexmit_rto_commit+0x44>)
 800e670:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e674:	490c      	ldr	r1, [pc, #48]	; (800e6a8 <tcp_rexmit_rto_commit+0x48>)
 800e676:	480d      	ldr	r0, [pc, #52]	; (800e6ac <tcp_rexmit_rto_commit+0x4c>)
 800e678:	f005 fbc6 	bl	8013e08 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e682:	2bff      	cmp	r3, #255	; 0xff
 800e684:	d007      	beq.n	800e696 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e68c:	3301      	adds	r3, #1
 800e68e:	b2da      	uxtb	r2, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7ff fc80 	bl	800df9c <tcp_output>
}
 800e69c:	bf00      	nop
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	08016e84 	.word	0x08016e84
 800e6a8:	080174e4 	.word	0x080174e4
 800e6ac:	08016ed8 	.word	0x08016ed8

0800e6b0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d106      	bne.n	800e6cc <tcp_rexmit_rto+0x1c>
 800e6be:	4b0a      	ldr	r3, [pc, #40]	; (800e6e8 <tcp_rexmit_rto+0x38>)
 800e6c0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e6c4:	4909      	ldr	r1, [pc, #36]	; (800e6ec <tcp_rexmit_rto+0x3c>)
 800e6c6:	480a      	ldr	r0, [pc, #40]	; (800e6f0 <tcp_rexmit_rto+0x40>)
 800e6c8:	f005 fb9e 	bl	8013e08 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff ff57 	bl	800e580 <tcp_rexmit_rto_prepare>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d102      	bne.n	800e6de <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f7ff ffc1 	bl	800e660 <tcp_rexmit_rto_commit>
  }
}
 800e6de:	bf00      	nop
 800e6e0:	3708      	adds	r7, #8
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	08016e84 	.word	0x08016e84
 800e6ec:	08017508 	.word	0x08017508
 800e6f0:	08016ed8 	.word	0x08016ed8

0800e6f4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e6f4:	b590      	push	{r4, r7, lr}
 800e6f6:	b085      	sub	sp, #20
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d106      	bne.n	800e710 <tcp_rexmit+0x1c>
 800e702:	4b2f      	ldr	r3, [pc, #188]	; (800e7c0 <tcp_rexmit+0xcc>)
 800e704:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e708:	492e      	ldr	r1, [pc, #184]	; (800e7c4 <tcp_rexmit+0xd0>)
 800e70a:	482f      	ldr	r0, [pc, #188]	; (800e7c8 <tcp_rexmit+0xd4>)
 800e70c:	f005 fb7c 	bl	8013e08 <iprintf>

  if (pcb->unacked == NULL) {
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e714:	2b00      	cmp	r3, #0
 800e716:	d102      	bne.n	800e71e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e718:	f06f 0305 	mvn.w	r3, #5
 800e71c:	e04c      	b.n	800e7b8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e722:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e724:	68b8      	ldr	r0, [r7, #8]
 800e726:	f7ff fe2d 	bl	800e384 <tcp_output_segment_busy>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d002      	beq.n	800e736 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e730:	f06f 0305 	mvn.w	r3, #5
 800e734:	e040      	b.n	800e7b8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	681a      	ldr	r2, [r3, #0]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	336c      	adds	r3, #108	; 0x6c
 800e742:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e744:	e002      	b.n	800e74c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d011      	beq.n	800e778 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7f8 fd66 	bl	800722e <lwip_htonl>
 800e762:	4604      	mov	r4, r0
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7f8 fd5f 	bl	800722e <lwip_htonl>
 800e770:	4603      	mov	r3, r0
 800e772:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e774:	2b00      	cmp	r3, #0
 800e776:	dbe6      	blt.n	800e746 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	68ba      	ldr	r2, [r7, #8]
 800e784:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d103      	bne.n	800e796 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2200      	movs	r2, #0
 800e792:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e79c:	2bff      	cmp	r3, #255	; 0xff
 800e79e:	d007      	beq.n	800e7b0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	b2da      	uxtb	r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e7b6:	2300      	movs	r3, #0
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3714      	adds	r7, #20
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd90      	pop	{r4, r7, pc}
 800e7c0:	08016e84 	.word	0x08016e84
 800e7c4:	08017524 	.word	0x08017524
 800e7c8:	08016ed8 	.word	0x08016ed8

0800e7cc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d106      	bne.n	800e7e8 <tcp_rexmit_fast+0x1c>
 800e7da:	4b2a      	ldr	r3, [pc, #168]	; (800e884 <tcp_rexmit_fast+0xb8>)
 800e7dc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e7e0:	4929      	ldr	r1, [pc, #164]	; (800e888 <tcp_rexmit_fast+0xbc>)
 800e7e2:	482a      	ldr	r0, [pc, #168]	; (800e88c <tcp_rexmit_fast+0xc0>)
 800e7e4:	f005 fb10 	bl	8013e08 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d044      	beq.n	800e87a <tcp_rexmit_fast+0xae>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	8b5b      	ldrh	r3, [r3, #26]
 800e7f4:	f003 0304 	and.w	r3, r3, #4
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d13e      	bne.n	800e87a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f7ff ff79 	bl	800e6f4 <tcp_rexmit>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d138      	bne.n	800e87a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e814:	4293      	cmp	r3, r2
 800e816:	bf28      	it	cs
 800e818:	4613      	movcs	r3, r2
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	0fda      	lsrs	r2, r3, #31
 800e81e:	4413      	add	r3, r2
 800e820:	105b      	asrs	r3, r3, #1
 800e822:	b29a      	uxth	r2, r3
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e830:	461a      	mov	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e836:	005b      	lsls	r3, r3, #1
 800e838:	429a      	cmp	r2, r3
 800e83a:	d206      	bcs.n	800e84a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e840:	005b      	lsls	r3, r3, #1
 800e842:	b29a      	uxth	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e854:	4619      	mov	r1, r3
 800e856:	0049      	lsls	r1, r1, #1
 800e858:	440b      	add	r3, r1
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	4413      	add	r3, r2
 800e85e:	b29a      	uxth	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	8b5b      	ldrh	r3, [r3, #26]
 800e86a:	f043 0304 	orr.w	r3, r3, #4
 800e86e:	b29a      	uxth	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e87a:	bf00      	nop
 800e87c:	3708      	adds	r7, #8
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	08016e84 	.word	0x08016e84
 800e888:	0801753c 	.word	0x0801753c
 800e88c:	08016ed8 	.word	0x08016ed8

0800e890 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b086      	sub	sp, #24
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	607b      	str	r3, [r7, #4]
 800e89a:	460b      	mov	r3, r1
 800e89c:	817b      	strh	r3, [r7, #10]
 800e89e:	4613      	mov	r3, r2
 800e8a0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e8a2:	897a      	ldrh	r2, [r7, #10]
 800e8a4:	893b      	ldrh	r3, [r7, #8]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	3314      	adds	r3, #20
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	2022      	movs	r0, #34	; 0x22
 800e8b6:	f7f9 fca5 	bl	8008204 <pbuf_alloc>
 800e8ba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d04d      	beq.n	800e95e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e8c2:	897b      	ldrh	r3, [r7, #10]
 800e8c4:	3313      	adds	r3, #19
 800e8c6:	697a      	ldr	r2, [r7, #20]
 800e8c8:	8952      	ldrh	r2, [r2, #10]
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	db06      	blt.n	800e8dc <tcp_output_alloc_header_common+0x4c>
 800e8ce:	4b26      	ldr	r3, [pc, #152]	; (800e968 <tcp_output_alloc_header_common+0xd8>)
 800e8d0:	f240 7223 	movw	r2, #1827	; 0x723
 800e8d4:	4925      	ldr	r1, [pc, #148]	; (800e96c <tcp_output_alloc_header_common+0xdc>)
 800e8d6:	4826      	ldr	r0, [pc, #152]	; (800e970 <tcp_output_alloc_header_common+0xe0>)
 800e8d8:	f005 fa96 	bl	8013e08 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e8e2:	8c3b      	ldrh	r3, [r7, #32]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7f8 fc8d 	bl	8007204 <lwip_htons>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e8f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7f8 fc85 	bl	8007204 <lwip_htons>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f7f8 fc90 	bl	800722e <lwip_htonl>
 800e90e:	4602      	mov	r2, r0
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e914:	897b      	ldrh	r3, [r7, #10]
 800e916:	089b      	lsrs	r3, r3, #2
 800e918:	b29b      	uxth	r3, r3
 800e91a:	3305      	adds	r3, #5
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	031b      	lsls	r3, r3, #12
 800e920:	b29a      	uxth	r2, r3
 800e922:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e926:	b29b      	uxth	r3, r3
 800e928:	4313      	orrs	r3, r2
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7f8 fc69 	bl	8007204 <lwip_htons>
 800e932:	4603      	mov	r3, r0
 800e934:	461a      	mov	r2, r3
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e93a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7f8 fc61 	bl	8007204 <lwip_htons>
 800e942:	4603      	mov	r3, r0
 800e944:	461a      	mov	r2, r3
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	2200      	movs	r2, #0
 800e94e:	741a      	strb	r2, [r3, #16]
 800e950:	2200      	movs	r2, #0
 800e952:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	2200      	movs	r2, #0
 800e958:	749a      	strb	r2, [r3, #18]
 800e95a:	2200      	movs	r2, #0
 800e95c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e95e:	697b      	ldr	r3, [r7, #20]
}
 800e960:	4618      	mov	r0, r3
 800e962:	3718      	adds	r7, #24
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	08016e84 	.word	0x08016e84
 800e96c:	0801755c 	.word	0x0801755c
 800e970:	08016ed8 	.word	0x08016ed8

0800e974 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e974:	b5b0      	push	{r4, r5, r7, lr}
 800e976:	b08a      	sub	sp, #40	; 0x28
 800e978:	af04      	add	r7, sp, #16
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	607b      	str	r3, [r7, #4]
 800e97e:	460b      	mov	r3, r1
 800e980:	817b      	strh	r3, [r7, #10]
 800e982:	4613      	mov	r3, r2
 800e984:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d106      	bne.n	800e99a <tcp_output_alloc_header+0x26>
 800e98c:	4b15      	ldr	r3, [pc, #84]	; (800e9e4 <tcp_output_alloc_header+0x70>)
 800e98e:	f240 7242 	movw	r2, #1858	; 0x742
 800e992:	4915      	ldr	r1, [pc, #84]	; (800e9e8 <tcp_output_alloc_header+0x74>)
 800e994:	4815      	ldr	r0, [pc, #84]	; (800e9ec <tcp_output_alloc_header+0x78>)
 800e996:	f005 fa37 	bl	8013e08 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	8adb      	ldrh	r3, [r3, #22]
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	8b12      	ldrh	r2, [r2, #24]
 800e9a6:	68f9      	ldr	r1, [r7, #12]
 800e9a8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e9aa:	893d      	ldrh	r5, [r7, #8]
 800e9ac:	897c      	ldrh	r4, [r7, #10]
 800e9ae:	9103      	str	r1, [sp, #12]
 800e9b0:	2110      	movs	r1, #16
 800e9b2:	9102      	str	r1, [sp, #8]
 800e9b4:	9201      	str	r2, [sp, #4]
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	462a      	mov	r2, r5
 800e9bc:	4621      	mov	r1, r4
 800e9be:	f7ff ff67 	bl	800e890 <tcp_output_alloc_header_common>
 800e9c2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d006      	beq.n	800e9d8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e9d2:	441a      	add	r2, r3
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e9d8:	697b      	ldr	r3, [r7, #20]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3718      	adds	r7, #24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bdb0      	pop	{r4, r5, r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	08016e84 	.word	0x08016e84
 800e9e8:	0801758c 	.word	0x0801758c
 800e9ec:	08016ed8 	.word	0x08016ed8

0800e9f0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b088      	sub	sp, #32
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	4611      	mov	r1, r2
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	460b      	mov	r3, r1
 800ea00:	71fb      	strb	r3, [r7, #7]
 800ea02:	4613      	mov	r3, r2
 800ea04:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ea06:	2300      	movs	r3, #0
 800ea08:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d106      	bne.n	800ea1e <tcp_output_fill_options+0x2e>
 800ea10:	4b13      	ldr	r3, [pc, #76]	; (800ea60 <tcp_output_fill_options+0x70>)
 800ea12:	f240 7256 	movw	r2, #1878	; 0x756
 800ea16:	4913      	ldr	r1, [pc, #76]	; (800ea64 <tcp_output_fill_options+0x74>)
 800ea18:	4813      	ldr	r0, [pc, #76]	; (800ea68 <tcp_output_fill_options+0x78>)
 800ea1a:	f005 f9f5 	bl	8013e08 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	685b      	ldr	r3, [r3, #4]
 800ea22:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	3314      	adds	r3, #20
 800ea28:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	f103 0214 	add.w	r2, r3, #20
 800ea30:	8bfb      	ldrh	r3, [r7, #30]
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	4619      	mov	r1, r3
 800ea36:	79fb      	ldrb	r3, [r7, #7]
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	f003 0304 	and.w	r3, r3, #4
 800ea3e:	440b      	add	r3, r1
 800ea40:	4413      	add	r3, r2
 800ea42:	697a      	ldr	r2, [r7, #20]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d006      	beq.n	800ea56 <tcp_output_fill_options+0x66>
 800ea48:	4b05      	ldr	r3, [pc, #20]	; (800ea60 <tcp_output_fill_options+0x70>)
 800ea4a:	f240 7275 	movw	r2, #1909	; 0x775
 800ea4e:	4907      	ldr	r1, [pc, #28]	; (800ea6c <tcp_output_fill_options+0x7c>)
 800ea50:	4805      	ldr	r0, [pc, #20]	; (800ea68 <tcp_output_fill_options+0x78>)
 800ea52:	f005 f9d9 	bl	8013e08 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ea56:	bf00      	nop
 800ea58:	3720      	adds	r7, #32
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	08016e84 	.word	0x08016e84
 800ea64:	080175b4 	.word	0x080175b4
 800ea68:	08016ed8 	.word	0x08016ed8
 800ea6c:	080174ac 	.word	0x080174ac

0800ea70 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b08a      	sub	sp, #40	; 0x28
 800ea74:	af04      	add	r7, sp, #16
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d106      	bne.n	800ea92 <tcp_output_control_segment+0x22>
 800ea84:	4b1c      	ldr	r3, [pc, #112]	; (800eaf8 <tcp_output_control_segment+0x88>)
 800ea86:	f240 7287 	movw	r2, #1927	; 0x787
 800ea8a:	491c      	ldr	r1, [pc, #112]	; (800eafc <tcp_output_control_segment+0x8c>)
 800ea8c:	481c      	ldr	r0, [pc, #112]	; (800eb00 <tcp_output_control_segment+0x90>)
 800ea8e:	f005 f9bb 	bl	8013e08 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	6879      	ldr	r1, [r7, #4]
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f7fe fae8 	bl	800d06c <tcp_route>
 800ea9c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d102      	bne.n	800eaaa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800eaa4:	23fc      	movs	r3, #252	; 0xfc
 800eaa6:	75fb      	strb	r3, [r7, #23]
 800eaa8:	e01c      	b.n	800eae4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d006      	beq.n	800eabe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	7adb      	ldrb	r3, [r3, #11]
 800eab4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	7a9b      	ldrb	r3, [r3, #10]
 800eaba:	757b      	strb	r3, [r7, #21]
 800eabc:	e003      	b.n	800eac6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800eabe:	23ff      	movs	r3, #255	; 0xff
 800eac0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800eac6:	7dba      	ldrb	r2, [r7, #22]
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	9302      	str	r3, [sp, #8]
 800eacc:	2306      	movs	r3, #6
 800eace:	9301      	str	r3, [sp, #4]
 800ead0:	7d7b      	ldrb	r3, [r7, #21]
 800ead2:	9300      	str	r3, [sp, #0]
 800ead4:	4613      	mov	r3, r2
 800ead6:	683a      	ldr	r2, [r7, #0]
 800ead8:	6879      	ldr	r1, [r7, #4]
 800eada:	68b8      	ldr	r0, [r7, #8]
 800eadc:	f004 f924 	bl	8012d28 <ip4_output_if>
 800eae0:	4603      	mov	r3, r0
 800eae2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800eae4:	68b8      	ldr	r0, [r7, #8]
 800eae6:	f7f9 fe71 	bl	80087cc <pbuf_free>
  return err;
 800eaea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3718      	adds	r7, #24
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	08016e84 	.word	0x08016e84
 800eafc:	080175dc 	.word	0x080175dc
 800eb00:	08016ed8 	.word	0x08016ed8

0800eb04 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800eb04:	b590      	push	{r4, r7, lr}
 800eb06:	b08b      	sub	sp, #44	; 0x2c
 800eb08:	af04      	add	r7, sp, #16
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
 800eb10:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d106      	bne.n	800eb26 <tcp_rst+0x22>
 800eb18:	4b1f      	ldr	r3, [pc, #124]	; (800eb98 <tcp_rst+0x94>)
 800eb1a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800eb1e:	491f      	ldr	r1, [pc, #124]	; (800eb9c <tcp_rst+0x98>)
 800eb20:	481f      	ldr	r0, [pc, #124]	; (800eba0 <tcp_rst+0x9c>)
 800eb22:	f005 f971 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800eb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d106      	bne.n	800eb3a <tcp_rst+0x36>
 800eb2c:	4b1a      	ldr	r3, [pc, #104]	; (800eb98 <tcp_rst+0x94>)
 800eb2e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800eb32:	491c      	ldr	r1, [pc, #112]	; (800eba4 <tcp_rst+0xa0>)
 800eb34:	481a      	ldr	r0, [pc, #104]	; (800eba0 <tcp_rst+0x9c>)
 800eb36:	f005 f967 	bl	8013e08 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800eb3e:	f246 0308 	movw	r3, #24584	; 0x6008
 800eb42:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800eb44:	7dfb      	ldrb	r3, [r7, #23]
 800eb46:	b29c      	uxth	r4, r3
 800eb48:	68b8      	ldr	r0, [r7, #8]
 800eb4a:	f7f8 fb70 	bl	800722e <lwip_htonl>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	8abb      	ldrh	r3, [r7, #20]
 800eb52:	9303      	str	r3, [sp, #12]
 800eb54:	2314      	movs	r3, #20
 800eb56:	9302      	str	r3, [sp, #8]
 800eb58:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eb5a:	9301      	str	r3, [sp, #4]
 800eb5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eb5e:	9300      	str	r3, [sp, #0]
 800eb60:	4613      	mov	r3, r2
 800eb62:	2200      	movs	r2, #0
 800eb64:	4621      	mov	r1, r4
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f7ff fe92 	bl	800e890 <tcp_output_alloc_header_common>
 800eb6c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00c      	beq.n	800eb8e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb74:	7dfb      	ldrb	r3, [r7, #23]
 800eb76:	2200      	movs	r2, #0
 800eb78:	6939      	ldr	r1, [r7, #16]
 800eb7a:	68f8      	ldr	r0, [r7, #12]
 800eb7c:	f7ff ff38 	bl	800e9f0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800eb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb82:	683a      	ldr	r2, [r7, #0]
 800eb84:	6939      	ldr	r1, [r7, #16]
 800eb86:	68f8      	ldr	r0, [r7, #12]
 800eb88:	f7ff ff72 	bl	800ea70 <tcp_output_control_segment>
 800eb8c:	e000      	b.n	800eb90 <tcp_rst+0x8c>
    return;
 800eb8e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800eb90:	371c      	adds	r7, #28
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd90      	pop	{r4, r7, pc}
 800eb96:	bf00      	nop
 800eb98:	08016e84 	.word	0x08016e84
 800eb9c:	08017608 	.word	0x08017608
 800eba0:	08016ed8 	.word	0x08016ed8
 800eba4:	08017624 	.word	0x08017624

0800eba8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800eba8:	b590      	push	{r4, r7, lr}
 800ebaa:	b087      	sub	sp, #28
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d106      	bne.n	800ebcc <tcp_send_empty_ack+0x24>
 800ebbe:	4b28      	ldr	r3, [pc, #160]	; (800ec60 <tcp_send_empty_ack+0xb8>)
 800ebc0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ebc4:	4927      	ldr	r1, [pc, #156]	; (800ec64 <tcp_send_empty_ack+0xbc>)
 800ebc6:	4828      	ldr	r0, [pc, #160]	; (800ec68 <tcp_send_empty_ack+0xc0>)
 800ebc8:	f005 f91e 	bl	8013e08 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ebcc:	7dfb      	ldrb	r3, [r7, #23]
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	f003 0304 	and.w	r3, r3, #4
 800ebd6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ebd8:	7d7b      	ldrb	r3, [r7, #21]
 800ebda:	b29c      	uxth	r4, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7f8 fb24 	bl	800722e <lwip_htonl>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2200      	movs	r2, #0
 800ebea:	4621      	mov	r1, r4
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f7ff fec1 	bl	800e974 <tcp_output_alloc_header>
 800ebf2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d109      	bne.n	800ec0e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	8b5b      	ldrh	r3, [r3, #26]
 800ebfe:	f043 0303 	orr.w	r3, r3, #3
 800ec02:	b29a      	uxth	r2, r3
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ec08:	f06f 0301 	mvn.w	r3, #1
 800ec0c:	e023      	b.n	800ec56 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ec0e:	7dbb      	ldrb	r3, [r7, #22]
 800ec10:	7dfa      	ldrb	r2, [r7, #23]
 800ec12:	6939      	ldr	r1, [r7, #16]
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f7ff feeb 	bl	800e9f0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	3304      	adds	r3, #4
 800ec20:	6939      	ldr	r1, [r7, #16]
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7ff ff24 	bl	800ea70 <tcp_output_control_segment>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ec2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d007      	beq.n	800ec44 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	8b5b      	ldrh	r3, [r3, #26]
 800ec38:	f043 0303 	orr.w	r3, r3, #3
 800ec3c:	b29a      	uxth	r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	835a      	strh	r2, [r3, #26]
 800ec42:	e006      	b.n	800ec52 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	8b5b      	ldrh	r3, [r3, #26]
 800ec48:	f023 0303 	bic.w	r3, r3, #3
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ec52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	371c      	adds	r7, #28
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd90      	pop	{r4, r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	08016e84 	.word	0x08016e84
 800ec64:	08017640 	.word	0x08017640
 800ec68:	08016ed8 	.word	0x08016ed8

0800ec6c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ec6c:	b590      	push	{r4, r7, lr}
 800ec6e:	b087      	sub	sp, #28
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ec74:	2300      	movs	r3, #0
 800ec76:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d106      	bne.n	800ec8c <tcp_keepalive+0x20>
 800ec7e:	4b18      	ldr	r3, [pc, #96]	; (800ece0 <tcp_keepalive+0x74>)
 800ec80:	f640 0224 	movw	r2, #2084	; 0x824
 800ec84:	4917      	ldr	r1, [pc, #92]	; (800ece4 <tcp_keepalive+0x78>)
 800ec86:	4818      	ldr	r0, [pc, #96]	; (800ece8 <tcp_keepalive+0x7c>)
 800ec88:	f005 f8be 	bl	8013e08 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ec8c:	7dfb      	ldrb	r3, [r7, #23]
 800ec8e:	b29c      	uxth	r4, r3
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec94:	3b01      	subs	r3, #1
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7f8 fac9 	bl	800722e <lwip_htonl>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2200      	movs	r2, #0
 800eca0:	4621      	mov	r1, r4
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f7ff fe66 	bl	800e974 <tcp_output_alloc_header>
 800eca8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d102      	bne.n	800ecb6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ecb0:	f04f 33ff 	mov.w	r3, #4294967295
 800ecb4:	e010      	b.n	800ecd8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ecb6:	7dfb      	ldrb	r3, [r7, #23]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	6939      	ldr	r1, [r7, #16]
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f7ff fe97 	bl	800e9f0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	3304      	adds	r3, #4
 800ecc8:	6939      	ldr	r1, [r7, #16]
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f7ff fed0 	bl	800ea70 <tcp_output_control_segment>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ecd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	371c      	adds	r7, #28
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd90      	pop	{r4, r7, pc}
 800ece0:	08016e84 	.word	0x08016e84
 800ece4:	08017660 	.word	0x08017660
 800ece8:	08016ed8 	.word	0x08016ed8

0800ecec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ecec:	b590      	push	{r4, r7, lr}
 800ecee:	b08b      	sub	sp, #44	; 0x2c
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d106      	bne.n	800ed0e <tcp_zero_window_probe+0x22>
 800ed00:	4b4c      	ldr	r3, [pc, #304]	; (800ee34 <tcp_zero_window_probe+0x148>)
 800ed02:	f640 024f 	movw	r2, #2127	; 0x84f
 800ed06:	494c      	ldr	r1, [pc, #304]	; (800ee38 <tcp_zero_window_probe+0x14c>)
 800ed08:	484c      	ldr	r0, [pc, #304]	; (800ee3c <tcp_zero_window_probe+0x150>)
 800ed0a:	f005 f87d 	bl	8013e08 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed12:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ed14:	6a3b      	ldr	r3, [r7, #32]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d101      	bne.n	800ed1e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	e086      	b.n	800ee2c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ed24:	2bff      	cmp	r3, #255	; 0xff
 800ed26:	d007      	beq.n	800ed38 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ed2e:	3301      	adds	r3, #1
 800ed30:	b2da      	uxtb	r2, r3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ed38:	6a3b      	ldr	r3, [r7, #32]
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	899b      	ldrh	r3, [r3, #12]
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7f8 fa5f 	bl	8007204 <lwip_htons>
 800ed46:	4603      	mov	r3, r0
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	f003 0301 	and.w	r3, r3, #1
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d005      	beq.n	800ed5e <tcp_zero_window_probe+0x72>
 800ed52:	6a3b      	ldr	r3, [r7, #32]
 800ed54:	891b      	ldrh	r3, [r3, #8]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d101      	bne.n	800ed5e <tcp_zero_window_probe+0x72>
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	e000      	b.n	800ed60 <tcp_zero_window_probe+0x74>
 800ed5e:	2300      	movs	r3, #0
 800ed60:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ed62:	7ffb      	ldrb	r3, [r7, #31]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	bf0c      	ite	eq
 800ed68:	2301      	moveq	r3, #1
 800ed6a:	2300      	movne	r3, #0
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ed70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed74:	b299      	uxth	r1, r3
 800ed76:	6a3b      	ldr	r3, [r7, #32]
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	8bba      	ldrh	r2, [r7, #28]
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f7ff fdf8 	bl	800e974 <tcp_output_alloc_header>
 800ed84:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ed86:	69bb      	ldr	r3, [r7, #24]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d102      	bne.n	800ed92 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ed8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed90:	e04c      	b.n	800ee2c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ed98:	7ffb      	ldrb	r3, [r7, #31]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d011      	beq.n	800edc2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	899b      	ldrh	r3, [r3, #12]
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	b21b      	sxth	r3, r3
 800eda6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800edaa:	b21c      	sxth	r4, r3
 800edac:	2011      	movs	r0, #17
 800edae:	f7f8 fa29 	bl	8007204 <lwip_htons>
 800edb2:	4603      	mov	r3, r0
 800edb4:	b21b      	sxth	r3, r3
 800edb6:	4323      	orrs	r3, r4
 800edb8:	b21b      	sxth	r3, r3
 800edba:	b29a      	uxth	r2, r3
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	819a      	strh	r2, [r3, #12]
 800edc0:	e010      	b.n	800ede4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	3314      	adds	r3, #20
 800edc8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800edca:	6a3b      	ldr	r3, [r7, #32]
 800edcc:	6858      	ldr	r0, [r3, #4]
 800edce:	6a3b      	ldr	r3, [r7, #32]
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	891a      	ldrh	r2, [r3, #8]
 800edd4:	6a3b      	ldr	r3, [r7, #32]
 800edd6:	891b      	ldrh	r3, [r3, #8]
 800edd8:	1ad3      	subs	r3, r2, r3
 800edda:	b29b      	uxth	r3, r3
 800eddc:	2201      	movs	r2, #1
 800edde:	6939      	ldr	r1, [r7, #16]
 800ede0:	f7f9 feee 	bl	8008bc0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ede4:	6a3b      	ldr	r3, [r7, #32]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	4618      	mov	r0, r3
 800edec:	f7f8 fa1f 	bl	800722e <lwip_htonl>
 800edf0:	4603      	mov	r3, r0
 800edf2:	3301      	adds	r3, #1
 800edf4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	1ad3      	subs	r3, r2, r3
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	da02      	bge.n	800ee08 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ee08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	69b9      	ldr	r1, [r7, #24]
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f7ff fded 	bl	800e9f0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	3304      	adds	r3, #4
 800ee1c:	69b9      	ldr	r1, [r7, #24]
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f7ff fe26 	bl	800ea70 <tcp_output_control_segment>
 800ee24:	4603      	mov	r3, r0
 800ee26:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ee28:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	372c      	adds	r7, #44	; 0x2c
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd90      	pop	{r4, r7, pc}
 800ee34:	08016e84 	.word	0x08016e84
 800ee38:	0801767c 	.word	0x0801767c
 800ee3c:	08016ed8 	.word	0x08016ed8

0800ee40 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ee48:	f7fa f80c 	bl	8008e64 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ee4c:	4b0a      	ldr	r3, [pc, #40]	; (800ee78 <tcpip_tcp_timer+0x38>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d103      	bne.n	800ee5c <tcpip_tcp_timer+0x1c>
 800ee54:	4b09      	ldr	r3, [pc, #36]	; (800ee7c <tcpip_tcp_timer+0x3c>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d005      	beq.n	800ee68 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	4908      	ldr	r1, [pc, #32]	; (800ee80 <tcpip_tcp_timer+0x40>)
 800ee60:	20fa      	movs	r0, #250	; 0xfa
 800ee62:	f000 f8f3 	bl	800f04c <sys_timeout>
 800ee66:	e003      	b.n	800ee70 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ee68:	4b06      	ldr	r3, [pc, #24]	; (800ee84 <tcpip_tcp_timer+0x44>)
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	601a      	str	r2, [r3, #0]
  }
}
 800ee6e:	bf00      	nop
 800ee70:	bf00      	nop
 800ee72:	3708      	adds	r7, #8
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	20006d08 	.word	0x20006d08
 800ee7c:	20006d18 	.word	0x20006d18
 800ee80:	0800ee41 	.word	0x0800ee41
 800ee84:	2000010c 	.word	0x2000010c

0800ee88 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ee8c:	4b0a      	ldr	r3, [pc, #40]	; (800eeb8 <tcp_timer_needed+0x30>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10f      	bne.n	800eeb4 <tcp_timer_needed+0x2c>
 800ee94:	4b09      	ldr	r3, [pc, #36]	; (800eebc <tcp_timer_needed+0x34>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d103      	bne.n	800eea4 <tcp_timer_needed+0x1c>
 800ee9c:	4b08      	ldr	r3, [pc, #32]	; (800eec0 <tcp_timer_needed+0x38>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d007      	beq.n	800eeb4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800eea4:	4b04      	ldr	r3, [pc, #16]	; (800eeb8 <tcp_timer_needed+0x30>)
 800eea6:	2201      	movs	r2, #1
 800eea8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eeaa:	2200      	movs	r2, #0
 800eeac:	4905      	ldr	r1, [pc, #20]	; (800eec4 <tcp_timer_needed+0x3c>)
 800eeae:	20fa      	movs	r0, #250	; 0xfa
 800eeb0:	f000 f8cc 	bl	800f04c <sys_timeout>
  }
}
 800eeb4:	bf00      	nop
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	2000010c 	.word	0x2000010c
 800eebc:	20006d08 	.word	0x20006d08
 800eec0:	20006d18 	.word	0x20006d18
 800eec4:	0800ee41 	.word	0x0800ee41

0800eec8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b086      	sub	sp, #24
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eed4:	2006      	movs	r0, #6
 800eed6:	f7f8 fe13 	bl	8007b00 <memp_malloc>
 800eeda:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d109      	bne.n	800eef6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d151      	bne.n	800ef8c <sys_timeout_abs+0xc4>
 800eee8:	4b2a      	ldr	r3, [pc, #168]	; (800ef94 <sys_timeout_abs+0xcc>)
 800eeea:	22be      	movs	r2, #190	; 0xbe
 800eeec:	492a      	ldr	r1, [pc, #168]	; (800ef98 <sys_timeout_abs+0xd0>)
 800eeee:	482b      	ldr	r0, [pc, #172]	; (800ef9c <sys_timeout_abs+0xd4>)
 800eef0:	f004 ff8a 	bl	8013e08 <iprintf>
    return;
 800eef4:	e04a      	b.n	800ef8c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	2200      	movs	r2, #0
 800eefa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	68ba      	ldr	r2, [r7, #8]
 800ef00:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	68fa      	ldr	r2, [r7, #12]
 800ef0c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ef0e:	4b24      	ldr	r3, [pc, #144]	; (800efa0 <sys_timeout_abs+0xd8>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d103      	bne.n	800ef1e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ef16:	4a22      	ldr	r2, [pc, #136]	; (800efa0 <sys_timeout_abs+0xd8>)
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	6013      	str	r3, [r2, #0]
    return;
 800ef1c:	e037      	b.n	800ef8e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	685a      	ldr	r2, [r3, #4]
 800ef22:	4b1f      	ldr	r3, [pc, #124]	; (800efa0 <sys_timeout_abs+0xd8>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	1ad3      	subs	r3, r2, r3
 800ef2a:	0fdb      	lsrs	r3, r3, #31
 800ef2c:	f003 0301 	and.w	r3, r3, #1
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d007      	beq.n	800ef46 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ef36:	4b1a      	ldr	r3, [pc, #104]	; (800efa0 <sys_timeout_abs+0xd8>)
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ef3e:	4a18      	ldr	r2, [pc, #96]	; (800efa0 <sys_timeout_abs+0xd8>)
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	6013      	str	r3, [r2, #0]
 800ef44:	e023      	b.n	800ef8e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ef46:	4b16      	ldr	r3, [pc, #88]	; (800efa0 <sys_timeout_abs+0xd8>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	617b      	str	r3, [r7, #20]
 800ef4c:	e01a      	b.n	800ef84 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00b      	beq.n	800ef6e <sys_timeout_abs+0xa6>
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	685a      	ldr	r2, [r3, #4]
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	0fdb      	lsrs	r3, r3, #31
 800ef64:	f003 0301 	and.w	r3, r3, #1
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d007      	beq.n	800ef7e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	693a      	ldr	r2, [r7, #16]
 800ef7a:	601a      	str	r2, [r3, #0]
        break;
 800ef7c:	e007      	b.n	800ef8e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	617b      	str	r3, [r7, #20]
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d1e1      	bne.n	800ef4e <sys_timeout_abs+0x86>
 800ef8a:	e000      	b.n	800ef8e <sys_timeout_abs+0xc6>
    return;
 800ef8c:	bf00      	nop
      }
    }
  }
}
 800ef8e:	3718      	adds	r7, #24
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	080176a0 	.word	0x080176a0
 800ef98:	080176d4 	.word	0x080176d4
 800ef9c:	08017714 	.word	0x08017714
 800efa0:	20000104 	.word	0x20000104

0800efa4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b086      	sub	sp, #24
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	4798      	blx	r3

  now = sys_now();
 800efb6:	f7f6 fc79 	bl	80058ac <sys_now>
 800efba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	4b0f      	ldr	r3, [pc, #60]	; (800f000 <lwip_cyclic_timer+0x5c>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4413      	add	r3, r2
 800efc6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	1ad3      	subs	r3, r2, r3
 800efce:	0fdb      	lsrs	r3, r3, #31
 800efd0:	f003 0301 	and.w	r3, r3, #1
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d009      	beq.n	800efee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	4413      	add	r3, r2
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	4907      	ldr	r1, [pc, #28]	; (800f004 <lwip_cyclic_timer+0x60>)
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7ff ff6e 	bl	800eec8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800efec:	e004      	b.n	800eff8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	4904      	ldr	r1, [pc, #16]	; (800f004 <lwip_cyclic_timer+0x60>)
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f7ff ff68 	bl	800eec8 <sys_timeout_abs>
}
 800eff8:	bf00      	nop
 800effa:	3718      	adds	r7, #24
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	20000108 	.word	0x20000108
 800f004:	0800efa5 	.word	0x0800efa5

0800f008 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f00e:	2301      	movs	r3, #1
 800f010:	607b      	str	r3, [r7, #4]
 800f012:	e00e      	b.n	800f032 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f014:	4a0b      	ldr	r2, [pc, #44]	; (800f044 <sys_timeouts_init+0x3c>)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	00db      	lsls	r3, r3, #3
 800f020:	4a08      	ldr	r2, [pc, #32]	; (800f044 <sys_timeouts_init+0x3c>)
 800f022:	4413      	add	r3, r2
 800f024:	461a      	mov	r2, r3
 800f026:	4908      	ldr	r1, [pc, #32]	; (800f048 <sys_timeouts_init+0x40>)
 800f028:	f000 f810 	bl	800f04c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	3301      	adds	r3, #1
 800f030:	607b      	str	r3, [r7, #4]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2b04      	cmp	r3, #4
 800f036:	d9ed      	bls.n	800f014 <sys_timeouts_init+0xc>
  }
}
 800f038:	bf00      	nop
 800f03a:	bf00      	nop
 800f03c:	3708      	adds	r7, #8
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	08018618 	.word	0x08018618
 800f048:	0800efa5 	.word	0x0800efa5

0800f04c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b086      	sub	sp, #24
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f05e:	d306      	bcc.n	800f06e <sys_timeout+0x22>
 800f060:	4b0a      	ldr	r3, [pc, #40]	; (800f08c <sys_timeout+0x40>)
 800f062:	f240 1229 	movw	r2, #297	; 0x129
 800f066:	490a      	ldr	r1, [pc, #40]	; (800f090 <sys_timeout+0x44>)
 800f068:	480a      	ldr	r0, [pc, #40]	; (800f094 <sys_timeout+0x48>)
 800f06a:	f004 fecd 	bl	8013e08 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f06e:	f7f6 fc1d 	bl	80058ac <sys_now>
 800f072:	4602      	mov	r2, r0
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	4413      	add	r3, r2
 800f078:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	68b9      	ldr	r1, [r7, #8]
 800f07e:	6978      	ldr	r0, [r7, #20]
 800f080:	f7ff ff22 	bl	800eec8 <sys_timeout_abs>
#endif
}
 800f084:	bf00      	nop
 800f086:	3718      	adds	r7, #24
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	080176a0 	.word	0x080176a0
 800f090:	0801773c 	.word	0x0801773c
 800f094:	08017714 	.word	0x08017714

0800f098 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f0a2:	4b19      	ldr	r3, [pc, #100]	; (800f108 <sys_untimeout+0x70>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d029      	beq.n	800f0fe <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800f0aa:	4b17      	ldr	r3, [pc, #92]	; (800f108 <sys_untimeout+0x70>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	60bb      	str	r3, [r7, #8]
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	60fb      	str	r3, [r7, #12]
 800f0b4:	e01f      	b.n	800f0f6 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	689b      	ldr	r3, [r3, #8]
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d115      	bne.n	800f0ec <sys_untimeout+0x54>
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	683a      	ldr	r2, [r7, #0]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d110      	bne.n	800f0ec <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d104      	bne.n	800f0da <sys_untimeout+0x42>
        next_timeout = t->next;
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4a0c      	ldr	r2, [pc, #48]	; (800f108 <sys_untimeout+0x70>)
 800f0d6:	6013      	str	r3, [r2, #0]
 800f0d8:	e003      	b.n	800f0e2 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800f0e2:	68b9      	ldr	r1, [r7, #8]
 800f0e4:	2006      	movs	r0, #6
 800f0e6:	f7f8 fd57 	bl	8007b98 <memp_free>
      return;
 800f0ea:	e009      	b.n	800f100 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	60fb      	str	r3, [r7, #12]
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	60bb      	str	r3, [r7, #8]
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1dc      	bne.n	800f0b6 <sys_untimeout+0x1e>
    }
  }
  return;
 800f0fc:	e000      	b.n	800f100 <sys_untimeout+0x68>
    return;
 800f0fe:	bf00      	nop
}
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	20000104 	.word	0x20000104

0800f10c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f112:	f7f6 fbcb 	bl	80058ac <sys_now>
 800f116:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f118:	4b1a      	ldr	r3, [pc, #104]	; (800f184 <sys_check_timeouts+0x78>)
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d001      	beq.n	800f126 <sys_check_timeouts+0x1a>
 800f122:	f7f9 f819 	bl	8008158 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f126:	4b18      	ldr	r3, [pc, #96]	; (800f188 <sys_check_timeouts+0x7c>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d022      	beq.n	800f178 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	68fa      	ldr	r2, [r7, #12]
 800f138:	1ad3      	subs	r3, r2, r3
 800f13a:	0fdb      	lsrs	r3, r3, #31
 800f13c:	f003 0301 	and.w	r3, r3, #1
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	d11a      	bne.n	800f17c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4a0f      	ldr	r2, [pc, #60]	; (800f188 <sys_check_timeouts+0x7c>)
 800f14c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	689b      	ldr	r3, [r3, #8]
 800f152:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	4a0b      	ldr	r2, [pc, #44]	; (800f18c <sys_check_timeouts+0x80>)
 800f160:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f162:	68b9      	ldr	r1, [r7, #8]
 800f164:	2006      	movs	r0, #6
 800f166:	f7f8 fd17 	bl	8007b98 <memp_free>
    if (handler != NULL) {
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d0d3      	beq.n	800f118 <sys_check_timeouts+0xc>
      handler(arg);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6838      	ldr	r0, [r7, #0]
 800f174:	4798      	blx	r3
  do {
 800f176:	e7cf      	b.n	800f118 <sys_check_timeouts+0xc>
      return;
 800f178:	bf00      	nop
 800f17a:	e000      	b.n	800f17e <sys_check_timeouts+0x72>
      return;
 800f17c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	20006d00 	.word	0x20006d00
 800f188:	20000104 	.word	0x20000104
 800f18c:	20000108 	.word	0x20000108

0800f190 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f194:	f004 fec6 	bl	8013f24 <rand>
 800f198:	4603      	mov	r3, r0
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	4b01      	ldr	r3, [pc, #4]	; (800f1b0 <udp_init+0x20>)
 800f1aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f1ac:	bf00      	nop
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	20000010 	.word	0x20000010

0800f1b4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f1be:	4b17      	ldr	r3, [pc, #92]	; (800f21c <udp_new_port+0x68>)
 800f1c0:	881b      	ldrh	r3, [r3, #0]
 800f1c2:	1c5a      	adds	r2, r3, #1
 800f1c4:	b291      	uxth	r1, r2
 800f1c6:	4a15      	ldr	r2, [pc, #84]	; (800f21c <udp_new_port+0x68>)
 800f1c8:	8011      	strh	r1, [r2, #0]
 800f1ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d103      	bne.n	800f1da <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f1d2:	4b12      	ldr	r3, [pc, #72]	; (800f21c <udp_new_port+0x68>)
 800f1d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f1d8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1da:	4b11      	ldr	r3, [pc, #68]	; (800f220 <udp_new_port+0x6c>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	603b      	str	r3, [r7, #0]
 800f1e0:	e011      	b.n	800f206 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	8a5a      	ldrh	r2, [r3, #18]
 800f1e6:	4b0d      	ldr	r3, [pc, #52]	; (800f21c <udp_new_port+0x68>)
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d108      	bne.n	800f200 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f1ee:	88fb      	ldrh	r3, [r7, #6]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	80fb      	strh	r3, [r7, #6]
 800f1f4:	88fb      	ldrh	r3, [r7, #6]
 800f1f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f1fa:	d3e0      	bcc.n	800f1be <udp_new_port+0xa>
        return 0;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	e007      	b.n	800f210 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	603b      	str	r3, [r7, #0]
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1ea      	bne.n	800f1e2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f20c:	4b03      	ldr	r3, [pc, #12]	; (800f21c <udp_new_port+0x68>)
 800f20e:	881b      	ldrh	r3, [r3, #0]
}
 800f210:	4618      	mov	r0, r3
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr
 800f21c:	20000010 	.word	0x20000010
 800f220:	20006d20 	.word	0x20006d20

0800f224 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	4613      	mov	r3, r2
 800f230:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d105      	bne.n	800f244 <udp_input_local_match+0x20>
 800f238:	4b27      	ldr	r3, [pc, #156]	; (800f2d8 <udp_input_local_match+0xb4>)
 800f23a:	2287      	movs	r2, #135	; 0x87
 800f23c:	4927      	ldr	r1, [pc, #156]	; (800f2dc <udp_input_local_match+0xb8>)
 800f23e:	4828      	ldr	r0, [pc, #160]	; (800f2e0 <udp_input_local_match+0xbc>)
 800f240:	f004 fde2 	bl	8013e08 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d105      	bne.n	800f256 <udp_input_local_match+0x32>
 800f24a:	4b23      	ldr	r3, [pc, #140]	; (800f2d8 <udp_input_local_match+0xb4>)
 800f24c:	2288      	movs	r2, #136	; 0x88
 800f24e:	4925      	ldr	r1, [pc, #148]	; (800f2e4 <udp_input_local_match+0xc0>)
 800f250:	4823      	ldr	r0, [pc, #140]	; (800f2e0 <udp_input_local_match+0xbc>)
 800f252:	f004 fdd9 	bl	8013e08 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	7a1b      	ldrb	r3, [r3, #8]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00b      	beq.n	800f276 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	7a1a      	ldrb	r2, [r3, #8]
 800f262:	4b21      	ldr	r3, [pc, #132]	; (800f2e8 <udp_input_local_match+0xc4>)
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f26a:	3301      	adds	r3, #1
 800f26c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f26e:	429a      	cmp	r2, r3
 800f270:	d001      	beq.n	800f276 <udp_input_local_match+0x52>
    return 0;
 800f272:	2300      	movs	r3, #0
 800f274:	e02b      	b.n	800f2ce <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f276:	79fb      	ldrb	r3, [r7, #7]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d018      	beq.n	800f2ae <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d013      	beq.n	800f2aa <udp_input_local_match+0x86>
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00f      	beq.n	800f2aa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f28a:	4b17      	ldr	r3, [pc, #92]	; (800f2e8 <udp_input_local_match+0xc4>)
 800f28c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f292:	d00a      	beq.n	800f2aa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	4b13      	ldr	r3, [pc, #76]	; (800f2e8 <udp_input_local_match+0xc4>)
 800f29a:	695b      	ldr	r3, [r3, #20]
 800f29c:	405a      	eors	r2, r3
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	3308      	adds	r3, #8
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d110      	bne.n	800f2cc <udp_input_local_match+0xa8>
          return 1;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e00f      	b.n	800f2ce <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d009      	beq.n	800f2c8 <udp_input_local_match+0xa4>
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d005      	beq.n	800f2c8 <udp_input_local_match+0xa4>
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	4b09      	ldr	r3, [pc, #36]	; (800f2e8 <udp_input_local_match+0xc4>)
 800f2c2:	695b      	ldr	r3, [r3, #20]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d101      	bne.n	800f2cc <udp_input_local_match+0xa8>
        return 1;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e000      	b.n	800f2ce <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3710      	adds	r7, #16
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	08017788 	.word	0x08017788
 800f2dc:	080177b8 	.word	0x080177b8
 800f2e0:	080177dc 	.word	0x080177dc
 800f2e4:	08017804 	.word	0x08017804
 800f2e8:	200037a4 	.word	0x200037a4

0800f2ec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f2ec:	b590      	push	{r4, r7, lr}
 800f2ee:	b08d      	sub	sp, #52	; 0x34
 800f2f0:	af02      	add	r7, sp, #8
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d105      	bne.n	800f30c <udp_input+0x20>
 800f300:	4b7c      	ldr	r3, [pc, #496]	; (800f4f4 <udp_input+0x208>)
 800f302:	22cf      	movs	r2, #207	; 0xcf
 800f304:	497c      	ldr	r1, [pc, #496]	; (800f4f8 <udp_input+0x20c>)
 800f306:	487d      	ldr	r0, [pc, #500]	; (800f4fc <udp_input+0x210>)
 800f308:	f004 fd7e 	bl	8013e08 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d105      	bne.n	800f31e <udp_input+0x32>
 800f312:	4b78      	ldr	r3, [pc, #480]	; (800f4f4 <udp_input+0x208>)
 800f314:	22d0      	movs	r2, #208	; 0xd0
 800f316:	497a      	ldr	r1, [pc, #488]	; (800f500 <udp_input+0x214>)
 800f318:	4878      	ldr	r0, [pc, #480]	; (800f4fc <udp_input+0x210>)
 800f31a:	f004 fd75 	bl	8013e08 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	895b      	ldrh	r3, [r3, #10]
 800f322:	2b07      	cmp	r3, #7
 800f324:	d803      	bhi.n	800f32e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f7f9 fa50 	bl	80087cc <pbuf_free>
    goto end;
 800f32c:	e0de      	b.n	800f4ec <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f334:	4b73      	ldr	r3, [pc, #460]	; (800f504 <udp_input+0x218>)
 800f336:	695b      	ldr	r3, [r3, #20]
 800f338:	4a72      	ldr	r2, [pc, #456]	; (800f504 <udp_input+0x218>)
 800f33a:	6812      	ldr	r2, [r2, #0]
 800f33c:	4611      	mov	r1, r2
 800f33e:	4618      	mov	r0, r3
 800f340:	f003 fdca 	bl	8012ed8 <ip4_addr_isbroadcast_u32>
 800f344:	4603      	mov	r3, r0
 800f346:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	881b      	ldrh	r3, [r3, #0]
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	4618      	mov	r0, r3
 800f350:	f7f7 ff58 	bl	8007204 <lwip_htons>
 800f354:	4603      	mov	r3, r0
 800f356:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	885b      	ldrh	r3, [r3, #2]
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	4618      	mov	r0, r3
 800f360:	f7f7 ff50 	bl	8007204 <lwip_htons>
 800f364:	4603      	mov	r3, r0
 800f366:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f368:	2300      	movs	r3, #0
 800f36a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f36c:	2300      	movs	r3, #0
 800f36e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f370:	2300      	movs	r3, #0
 800f372:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f374:	4b64      	ldr	r3, [pc, #400]	; (800f508 <udp_input+0x21c>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	627b      	str	r3, [r7, #36]	; 0x24
 800f37a:	e054      	b.n	800f426 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37e:	8a5b      	ldrh	r3, [r3, #18]
 800f380:	89fa      	ldrh	r2, [r7, #14]
 800f382:	429a      	cmp	r2, r3
 800f384:	d14a      	bne.n	800f41c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f386:	7cfb      	ldrb	r3, [r7, #19]
 800f388:	461a      	mov	r2, r3
 800f38a:	6839      	ldr	r1, [r7, #0]
 800f38c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f38e:	f7ff ff49 	bl	800f224 <udp_input_local_match>
 800f392:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f394:	2b00      	cmp	r3, #0
 800f396:	d041      	beq.n	800f41c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39a:	7c1b      	ldrb	r3, [r3, #16]
 800f39c:	f003 0304 	and.w	r3, r3, #4
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d11d      	bne.n	800f3e0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d102      	bne.n	800f3b0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ac:	61fb      	str	r3, [r7, #28]
 800f3ae:	e017      	b.n	800f3e0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f3b0:	7cfb      	ldrb	r3, [r7, #19]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d014      	beq.n	800f3e0 <udp_input+0xf4>
 800f3b6:	4b53      	ldr	r3, [pc, #332]	; (800f504 <udp_input+0x218>)
 800f3b8:	695b      	ldr	r3, [r3, #20]
 800f3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3be:	d10f      	bne.n	800f3e0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	681a      	ldr	r2, [r3, #0]
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d008      	beq.n	800f3e0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	3304      	adds	r3, #4
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d101      	bne.n	800f3e0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3de:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e2:	8a9b      	ldrh	r3, [r3, #20]
 800f3e4:	8a3a      	ldrh	r2, [r7, #16]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d118      	bne.n	800f41c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ec:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d005      	beq.n	800f3fe <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f4:	685a      	ldr	r2, [r3, #4]
 800f3f6:	4b43      	ldr	r3, [pc, #268]	; (800f504 <udp_input+0x218>)
 800f3f8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d10e      	bne.n	800f41c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f3fe:	6a3b      	ldr	r3, [r7, #32]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d014      	beq.n	800f42e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f406:	68da      	ldr	r2, [r3, #12]
 800f408:	6a3b      	ldr	r3, [r7, #32]
 800f40a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f40c:	4b3e      	ldr	r3, [pc, #248]	; (800f508 <udp_input+0x21c>)
 800f40e:	681a      	ldr	r2, [r3, #0]
 800f410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f412:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f414:	4a3c      	ldr	r2, [pc, #240]	; (800f508 <udp_input+0x21c>)
 800f416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f418:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f41a:	e008      	b.n	800f42e <udp_input+0x142>
      }
    }

    prev = pcb;
 800f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	627b      	str	r3, [r7, #36]	; 0x24
 800f426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d1a7      	bne.n	800f37c <udp_input+0x90>
 800f42c:	e000      	b.n	800f430 <udp_input+0x144>
        break;
 800f42e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f432:	2b00      	cmp	r3, #0
 800f434:	d101      	bne.n	800f43a <udp_input+0x14e>
    pcb = uncon_pcb;
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d002      	beq.n	800f446 <udp_input+0x15a>
    for_us = 1;
 800f440:	2301      	movs	r3, #1
 800f442:	76fb      	strb	r3, [r7, #27]
 800f444:	e00a      	b.n	800f45c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	3304      	adds	r3, #4
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	4b2d      	ldr	r3, [pc, #180]	; (800f504 <udp_input+0x218>)
 800f44e:	695b      	ldr	r3, [r3, #20]
 800f450:	429a      	cmp	r2, r3
 800f452:	bf0c      	ite	eq
 800f454:	2301      	moveq	r3, #1
 800f456:	2300      	movne	r3, #0
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f45c:	7efb      	ldrb	r3, [r7, #27]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d041      	beq.n	800f4e6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f462:	2108      	movs	r1, #8
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f7f9 f92b 	bl	80086c0 <pbuf_remove_header>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d00a      	beq.n	800f486 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f470:	4b20      	ldr	r3, [pc, #128]	; (800f4f4 <udp_input+0x208>)
 800f472:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f476:	4925      	ldr	r1, [pc, #148]	; (800f50c <udp_input+0x220>)
 800f478:	4820      	ldr	r0, [pc, #128]	; (800f4fc <udp_input+0x210>)
 800f47a:	f004 fcc5 	bl	8013e08 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7f9 f9a4 	bl	80087cc <pbuf_free>
      goto end;
 800f484:	e032      	b.n	800f4ec <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d012      	beq.n	800f4b2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48e:	699b      	ldr	r3, [r3, #24]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d00a      	beq.n	800f4aa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f496:	699c      	ldr	r4, [r3, #24]
 800f498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49a:	69d8      	ldr	r0, [r3, #28]
 800f49c:	8a3b      	ldrh	r3, [r7, #16]
 800f49e:	9300      	str	r3, [sp, #0]
 800f4a0:	4b1b      	ldr	r3, [pc, #108]	; (800f510 <udp_input+0x224>)
 800f4a2:	687a      	ldr	r2, [r7, #4]
 800f4a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4a6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f4a8:	e021      	b.n	800f4ee <udp_input+0x202>
        pbuf_free(p);
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f7f9 f98e 	bl	80087cc <pbuf_free>
        goto end;
 800f4b0:	e01c      	b.n	800f4ec <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f4b2:	7cfb      	ldrb	r3, [r7, #19]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d112      	bne.n	800f4de <udp_input+0x1f2>
 800f4b8:	4b12      	ldr	r3, [pc, #72]	; (800f504 <udp_input+0x218>)
 800f4ba:	695b      	ldr	r3, [r3, #20]
 800f4bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4c0:	2be0      	cmp	r3, #224	; 0xe0
 800f4c2:	d00c      	beq.n	800f4de <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f4c4:	4b0f      	ldr	r3, [pc, #60]	; (800f504 <udp_input+0x218>)
 800f4c6:	899b      	ldrh	r3, [r3, #12]
 800f4c8:	3308      	adds	r3, #8
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	b21b      	sxth	r3, r3
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f7f9 f968 	bl	80087a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f4d6:	2103      	movs	r1, #3
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f003 f9bf 	bl	801285c <icmp_dest_unreach>
      pbuf_free(p);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f7f9 f974 	bl	80087cc <pbuf_free>
  return;
 800f4e4:	e003      	b.n	800f4ee <udp_input+0x202>
    pbuf_free(p);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7f9 f970 	bl	80087cc <pbuf_free>
  return;
 800f4ec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f4ee:	372c      	adds	r7, #44	; 0x2c
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd90      	pop	{r4, r7, pc}
 800f4f4:	08017788 	.word	0x08017788
 800f4f8:	0801782c 	.word	0x0801782c
 800f4fc:	080177dc 	.word	0x080177dc
 800f500:	08017844 	.word	0x08017844
 800f504:	200037a4 	.word	0x200037a4
 800f508:	20006d20 	.word	0x20006d20
 800f50c:	08017860 	.word	0x08017860
 800f510:	200037b4 	.word	0x200037b4

0800f514 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af02      	add	r7, sp, #8
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	607a      	str	r2, [r7, #4]
 800f520:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d109      	bne.n	800f53c <udp_sendto_if+0x28>
 800f528:	4b2e      	ldr	r3, [pc, #184]	; (800f5e4 <udp_sendto_if+0xd0>)
 800f52a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f52e:	492e      	ldr	r1, [pc, #184]	; (800f5e8 <udp_sendto_if+0xd4>)
 800f530:	482e      	ldr	r0, [pc, #184]	; (800f5ec <udp_sendto_if+0xd8>)
 800f532:	f004 fc69 	bl	8013e08 <iprintf>
 800f536:	f06f 030f 	mvn.w	r3, #15
 800f53a:	e04f      	b.n	800f5dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d109      	bne.n	800f556 <udp_sendto_if+0x42>
 800f542:	4b28      	ldr	r3, [pc, #160]	; (800f5e4 <udp_sendto_if+0xd0>)
 800f544:	f240 2281 	movw	r2, #641	; 0x281
 800f548:	4929      	ldr	r1, [pc, #164]	; (800f5f0 <udp_sendto_if+0xdc>)
 800f54a:	4828      	ldr	r0, [pc, #160]	; (800f5ec <udp_sendto_if+0xd8>)
 800f54c:	f004 fc5c 	bl	8013e08 <iprintf>
 800f550:	f06f 030f 	mvn.w	r3, #15
 800f554:	e042      	b.n	800f5dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d109      	bne.n	800f570 <udp_sendto_if+0x5c>
 800f55c:	4b21      	ldr	r3, [pc, #132]	; (800f5e4 <udp_sendto_if+0xd0>)
 800f55e:	f240 2282 	movw	r2, #642	; 0x282
 800f562:	4924      	ldr	r1, [pc, #144]	; (800f5f4 <udp_sendto_if+0xe0>)
 800f564:	4821      	ldr	r0, [pc, #132]	; (800f5ec <udp_sendto_if+0xd8>)
 800f566:	f004 fc4f 	bl	8013e08 <iprintf>
 800f56a:	f06f 030f 	mvn.w	r3, #15
 800f56e:	e035      	b.n	800f5dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f570:	6a3b      	ldr	r3, [r7, #32]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d109      	bne.n	800f58a <udp_sendto_if+0x76>
 800f576:	4b1b      	ldr	r3, [pc, #108]	; (800f5e4 <udp_sendto_if+0xd0>)
 800f578:	f240 2283 	movw	r2, #643	; 0x283
 800f57c:	491e      	ldr	r1, [pc, #120]	; (800f5f8 <udp_sendto_if+0xe4>)
 800f57e:	481b      	ldr	r0, [pc, #108]	; (800f5ec <udp_sendto_if+0xd8>)
 800f580:	f004 fc42 	bl	8013e08 <iprintf>
 800f584:	f06f 030f 	mvn.w	r3, #15
 800f588:	e028      	b.n	800f5dc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d009      	beq.n	800f5a4 <udp_sendto_if+0x90>
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d005      	beq.n	800f5a4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f5a0:	2be0      	cmp	r3, #224	; 0xe0
 800f5a2:	d103      	bne.n	800f5ac <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f5a4:	6a3b      	ldr	r3, [r7, #32]
 800f5a6:	3304      	adds	r3, #4
 800f5a8:	617b      	str	r3, [r7, #20]
 800f5aa:	e00b      	b.n	800f5c4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	6a3b      	ldr	r3, [r7, #32]
 800f5b2:	3304      	adds	r3, #4
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d002      	beq.n	800f5c0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f5ba:	f06f 0303 	mvn.w	r3, #3
 800f5be:	e00d      	b.n	800f5dc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f5c4:	887a      	ldrh	r2, [r7, #2]
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	9301      	str	r3, [sp, #4]
 800f5ca:	6a3b      	ldr	r3, [r7, #32]
 800f5cc:	9300      	str	r3, [sp, #0]
 800f5ce:	4613      	mov	r3, r2
 800f5d0:	687a      	ldr	r2, [r7, #4]
 800f5d2:	68b9      	ldr	r1, [r7, #8]
 800f5d4:	68f8      	ldr	r0, [r7, #12]
 800f5d6:	f000 f811 	bl	800f5fc <udp_sendto_if_src>
 800f5da:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3718      	adds	r7, #24
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	08017788 	.word	0x08017788
 800f5e8:	080178fc 	.word	0x080178fc
 800f5ec:	080177dc 	.word	0x080177dc
 800f5f0:	08017918 	.word	0x08017918
 800f5f4:	08017934 	.word	0x08017934
 800f5f8:	08017954 	.word	0x08017954

0800f5fc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b08c      	sub	sp, #48	; 0x30
 800f600:	af04      	add	r7, sp, #16
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	607a      	str	r2, [r7, #4]
 800f608:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d109      	bne.n	800f624 <udp_sendto_if_src+0x28>
 800f610:	4b65      	ldr	r3, [pc, #404]	; (800f7a8 <udp_sendto_if_src+0x1ac>)
 800f612:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f616:	4965      	ldr	r1, [pc, #404]	; (800f7ac <udp_sendto_if_src+0x1b0>)
 800f618:	4865      	ldr	r0, [pc, #404]	; (800f7b0 <udp_sendto_if_src+0x1b4>)
 800f61a:	f004 fbf5 	bl	8013e08 <iprintf>
 800f61e:	f06f 030f 	mvn.w	r3, #15
 800f622:	e0bc      	b.n	800f79e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d109      	bne.n	800f63e <udp_sendto_if_src+0x42>
 800f62a:	4b5f      	ldr	r3, [pc, #380]	; (800f7a8 <udp_sendto_if_src+0x1ac>)
 800f62c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f630:	4960      	ldr	r1, [pc, #384]	; (800f7b4 <udp_sendto_if_src+0x1b8>)
 800f632:	485f      	ldr	r0, [pc, #380]	; (800f7b0 <udp_sendto_if_src+0x1b4>)
 800f634:	f004 fbe8 	bl	8013e08 <iprintf>
 800f638:	f06f 030f 	mvn.w	r3, #15
 800f63c:	e0af      	b.n	800f79e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d109      	bne.n	800f658 <udp_sendto_if_src+0x5c>
 800f644:	4b58      	ldr	r3, [pc, #352]	; (800f7a8 <udp_sendto_if_src+0x1ac>)
 800f646:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f64a:	495b      	ldr	r1, [pc, #364]	; (800f7b8 <udp_sendto_if_src+0x1bc>)
 800f64c:	4858      	ldr	r0, [pc, #352]	; (800f7b0 <udp_sendto_if_src+0x1b4>)
 800f64e:	f004 fbdb 	bl	8013e08 <iprintf>
 800f652:	f06f 030f 	mvn.w	r3, #15
 800f656:	e0a2      	b.n	800f79e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d109      	bne.n	800f672 <udp_sendto_if_src+0x76>
 800f65e:	4b52      	ldr	r3, [pc, #328]	; (800f7a8 <udp_sendto_if_src+0x1ac>)
 800f660:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f664:	4955      	ldr	r1, [pc, #340]	; (800f7bc <udp_sendto_if_src+0x1c0>)
 800f666:	4852      	ldr	r0, [pc, #328]	; (800f7b0 <udp_sendto_if_src+0x1b4>)
 800f668:	f004 fbce 	bl	8013e08 <iprintf>
 800f66c:	f06f 030f 	mvn.w	r3, #15
 800f670:	e095      	b.n	800f79e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f674:	2b00      	cmp	r3, #0
 800f676:	d109      	bne.n	800f68c <udp_sendto_if_src+0x90>
 800f678:	4b4b      	ldr	r3, [pc, #300]	; (800f7a8 <udp_sendto_if_src+0x1ac>)
 800f67a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f67e:	4950      	ldr	r1, [pc, #320]	; (800f7c0 <udp_sendto_if_src+0x1c4>)
 800f680:	484b      	ldr	r0, [pc, #300]	; (800f7b0 <udp_sendto_if_src+0x1b4>)
 800f682:	f004 fbc1 	bl	8013e08 <iprintf>
 800f686:	f06f 030f 	mvn.w	r3, #15
 800f68a:	e088      	b.n	800f79e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	8a5b      	ldrh	r3, [r3, #18]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d10f      	bne.n	800f6b4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f694:	68f9      	ldr	r1, [r7, #12]
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	8a5b      	ldrh	r3, [r3, #18]
 800f69a:	461a      	mov	r2, r3
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f000 f893 	bl	800f7c8 <udp_bind>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f6a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d002      	beq.n	800f6b4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f6ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f6b2:	e074      	b.n	800f79e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	891b      	ldrh	r3, [r3, #8]
 800f6b8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d902      	bls.n	800f6c6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6c4:	e06b      	b.n	800f79e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f6c6:	2108      	movs	r1, #8
 800f6c8:	68b8      	ldr	r0, [r7, #8]
 800f6ca:	f7f8 ffe9 	bl	80086a0 <pbuf_add_header>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d015      	beq.n	800f700 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f6d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f6d8:	2108      	movs	r1, #8
 800f6da:	2022      	movs	r0, #34	; 0x22
 800f6dc:	f7f8 fd92 	bl	8008204 <pbuf_alloc>
 800f6e0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d102      	bne.n	800f6ee <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6ec:	e057      	b.n	800f79e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	891b      	ldrh	r3, [r3, #8]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d006      	beq.n	800f704 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f6f6:	68b9      	ldr	r1, [r7, #8]
 800f6f8:	69f8      	ldr	r0, [r7, #28]
 800f6fa:	f7f9 f97f 	bl	80089fc <pbuf_chain>
 800f6fe:	e001      	b.n	800f704 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	895b      	ldrh	r3, [r3, #10]
 800f708:	2b07      	cmp	r3, #7
 800f70a:	d806      	bhi.n	800f71a <udp_sendto_if_src+0x11e>
 800f70c:	4b26      	ldr	r3, [pc, #152]	; (800f7a8 <udp_sendto_if_src+0x1ac>)
 800f70e:	f240 320d 	movw	r2, #781	; 0x30d
 800f712:	492c      	ldr	r1, [pc, #176]	; (800f7c4 <udp_sendto_if_src+0x1c8>)
 800f714:	4826      	ldr	r0, [pc, #152]	; (800f7b0 <udp_sendto_if_src+0x1b4>)
 800f716:	f004 fb77 	bl	8013e08 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	8a5b      	ldrh	r3, [r3, #18]
 800f724:	4618      	mov	r0, r3
 800f726:	f7f7 fd6d 	bl	8007204 <lwip_htons>
 800f72a:	4603      	mov	r3, r0
 800f72c:	461a      	mov	r2, r3
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f732:	887b      	ldrh	r3, [r7, #2]
 800f734:	4618      	mov	r0, r3
 800f736:	f7f7 fd65 	bl	8007204 <lwip_htons>
 800f73a:	4603      	mov	r3, r0
 800f73c:	461a      	mov	r2, r3
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	2200      	movs	r2, #0
 800f746:	719a      	strb	r2, [r3, #6]
 800f748:	2200      	movs	r2, #0
 800f74a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	891b      	ldrh	r3, [r3, #8]
 800f750:	4618      	mov	r0, r3
 800f752:	f7f7 fd57 	bl	8007204 <lwip_htons>
 800f756:	4603      	mov	r3, r0
 800f758:	461a      	mov	r2, r3
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f75e:	2311      	movs	r3, #17
 800f760:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	7adb      	ldrb	r3, [r3, #11]
 800f766:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	7a9b      	ldrb	r3, [r3, #10]
 800f76c:	7cb9      	ldrb	r1, [r7, #18]
 800f76e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f770:	9202      	str	r2, [sp, #8]
 800f772:	7cfa      	ldrb	r2, [r7, #19]
 800f774:	9201      	str	r2, [sp, #4]
 800f776:	9300      	str	r3, [sp, #0]
 800f778:	460b      	mov	r3, r1
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f77e:	69f8      	ldr	r0, [r7, #28]
 800f780:	f003 fafc 	bl	8012d7c <ip4_output_if_src>
 800f784:	4603      	mov	r3, r0
 800f786:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f788:	69fa      	ldr	r2, [r7, #28]
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d004      	beq.n	800f79a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f790:	69f8      	ldr	r0, [r7, #28]
 800f792:	f7f9 f81b 	bl	80087cc <pbuf_free>
    q = NULL;
 800f796:	2300      	movs	r3, #0
 800f798:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f79a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3720      	adds	r7, #32
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	08017788 	.word	0x08017788
 800f7ac:	08017974 	.word	0x08017974
 800f7b0:	080177dc 	.word	0x080177dc
 800f7b4:	08017994 	.word	0x08017994
 800f7b8:	080179b4 	.word	0x080179b4
 800f7bc:	080179d8 	.word	0x080179d8
 800f7c0:	080179fc 	.word	0x080179fc
 800f7c4:	08017a20 	.word	0x08017a20

0800f7c8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b086      	sub	sp, #24
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	4613      	mov	r3, r2
 800f7d4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d101      	bne.n	800f7e0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f7dc:	4b39      	ldr	r3, [pc, #228]	; (800f8c4 <udp_bind+0xfc>)
 800f7de:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d109      	bne.n	800f7fa <udp_bind+0x32>
 800f7e6:	4b38      	ldr	r3, [pc, #224]	; (800f8c8 <udp_bind+0x100>)
 800f7e8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800f7ec:	4937      	ldr	r1, [pc, #220]	; (800f8cc <udp_bind+0x104>)
 800f7ee:	4838      	ldr	r0, [pc, #224]	; (800f8d0 <udp_bind+0x108>)
 800f7f0:	f004 fb0a 	bl	8013e08 <iprintf>
 800f7f4:	f06f 030f 	mvn.w	r3, #15
 800f7f8:	e060      	b.n	800f8bc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f7fe:	4b35      	ldr	r3, [pc, #212]	; (800f8d4 <udp_bind+0x10c>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	617b      	str	r3, [r7, #20]
 800f804:	e009      	b.n	800f81a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f806:	68fa      	ldr	r2, [r7, #12]
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d102      	bne.n	800f814 <udp_bind+0x4c>
      rebind = 1;
 800f80e:	2301      	movs	r3, #1
 800f810:	74fb      	strb	r3, [r7, #19]
      break;
 800f812:	e005      	b.n	800f820 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	617b      	str	r3, [r7, #20]
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d1f2      	bne.n	800f806 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f820:	88fb      	ldrh	r3, [r7, #6]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d109      	bne.n	800f83a <udp_bind+0x72>
    port = udp_new_port();
 800f826:	f7ff fcc5 	bl	800f1b4 <udp_new_port>
 800f82a:	4603      	mov	r3, r0
 800f82c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f82e:	88fb      	ldrh	r3, [r7, #6]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d12c      	bne.n	800f88e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f834:	f06f 0307 	mvn.w	r3, #7
 800f838:	e040      	b.n	800f8bc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f83a:	4b26      	ldr	r3, [pc, #152]	; (800f8d4 <udp_bind+0x10c>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	617b      	str	r3, [r7, #20]
 800f840:	e022      	b.n	800f888 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f842:	68fa      	ldr	r2, [r7, #12]
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	429a      	cmp	r2, r3
 800f848:	d01b      	beq.n	800f882 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	8a5b      	ldrh	r3, [r3, #18]
 800f84e:	88fa      	ldrh	r2, [r7, #6]
 800f850:	429a      	cmp	r2, r3
 800f852:	d116      	bne.n	800f882 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d00d      	beq.n	800f87c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d00a      	beq.n	800f87c <udp_bind+0xb4>
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d006      	beq.n	800f87c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f86e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f870:	2b00      	cmp	r3, #0
 800f872:	d003      	beq.n	800f87c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d102      	bne.n	800f882 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f87c:	f06f 0307 	mvn.w	r3, #7
 800f880:	e01c      	b.n	800f8bc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	617b      	str	r3, [r7, #20]
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d1d9      	bne.n	800f842 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d002      	beq.n	800f89a <udp_bind+0xd2>
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	e000      	b.n	800f89c <udp_bind+0xd4>
 800f89a:	2300      	movs	r3, #0
 800f89c:	68fa      	ldr	r2, [r7, #12]
 800f89e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	88fa      	ldrh	r2, [r7, #6]
 800f8a4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f8a6:	7cfb      	ldrb	r3, [r7, #19]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d106      	bne.n	800f8ba <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f8ac:	4b09      	ldr	r3, [pc, #36]	; (800f8d4 <udp_bind+0x10c>)
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f8b4:	4a07      	ldr	r2, [pc, #28]	; (800f8d4 <udp_bind+0x10c>)
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f8ba:	2300      	movs	r3, #0
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3718      	adds	r7, #24
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	08018640 	.word	0x08018640
 800f8c8:	08017788 	.word	0x08017788
 800f8cc:	08017a50 	.word	0x08017a50
 800f8d0:	080177dc 	.word	0x080177dc
 800f8d4:	20006d20 	.word	0x20006d20

0800f8d8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b086      	sub	sp, #24
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d109      	bne.n	800f900 <udp_connect+0x28>
 800f8ec:	4b2c      	ldr	r3, [pc, #176]	; (800f9a0 <udp_connect+0xc8>)
 800f8ee:	f240 4235 	movw	r2, #1077	; 0x435
 800f8f2:	492c      	ldr	r1, [pc, #176]	; (800f9a4 <udp_connect+0xcc>)
 800f8f4:	482c      	ldr	r0, [pc, #176]	; (800f9a8 <udp_connect+0xd0>)
 800f8f6:	f004 fa87 	bl	8013e08 <iprintf>
 800f8fa:	f06f 030f 	mvn.w	r3, #15
 800f8fe:	e04b      	b.n	800f998 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d109      	bne.n	800f91a <udp_connect+0x42>
 800f906:	4b26      	ldr	r3, [pc, #152]	; (800f9a0 <udp_connect+0xc8>)
 800f908:	f240 4236 	movw	r2, #1078	; 0x436
 800f90c:	4927      	ldr	r1, [pc, #156]	; (800f9ac <udp_connect+0xd4>)
 800f90e:	4826      	ldr	r0, [pc, #152]	; (800f9a8 <udp_connect+0xd0>)
 800f910:	f004 fa7a 	bl	8013e08 <iprintf>
 800f914:	f06f 030f 	mvn.w	r3, #15
 800f918:	e03e      	b.n	800f998 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	8a5b      	ldrh	r3, [r3, #18]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d10f      	bne.n	800f942 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f922:	68f9      	ldr	r1, [r7, #12]
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	8a5b      	ldrh	r3, [r3, #18]
 800f928:	461a      	mov	r2, r3
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	f7ff ff4c 	bl	800f7c8 <udp_bind>
 800f930:	4603      	mov	r3, r0
 800f932:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f934:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d002      	beq.n	800f942 <udp_connect+0x6a>
      return err;
 800f93c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f940:	e02a      	b.n	800f998 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d002      	beq.n	800f94e <udp_connect+0x76>
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	e000      	b.n	800f950 <udp_connect+0x78>
 800f94e:	2300      	movs	r3, #0
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	88fa      	ldrh	r2, [r7, #6]
 800f958:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	7c1b      	ldrb	r3, [r3, #16]
 800f95e:	f043 0304 	orr.w	r3, r3, #4
 800f962:	b2da      	uxtb	r2, r3
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f968:	4b11      	ldr	r3, [pc, #68]	; (800f9b0 <udp_connect+0xd8>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	617b      	str	r3, [r7, #20]
 800f96e:	e008      	b.n	800f982 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	429a      	cmp	r2, r3
 800f976:	d101      	bne.n	800f97c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f978:	2300      	movs	r3, #0
 800f97a:	e00d      	b.n	800f998 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	68db      	ldr	r3, [r3, #12]
 800f980:	617b      	str	r3, [r7, #20]
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1f3      	bne.n	800f970 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f988:	4b09      	ldr	r3, [pc, #36]	; (800f9b0 <udp_connect+0xd8>)
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f990:	4a07      	ldr	r2, [pc, #28]	; (800f9b0 <udp_connect+0xd8>)
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f996:	2300      	movs	r3, #0
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3718      	adds	r7, #24
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	08017788 	.word	0x08017788
 800f9a4:	08017a68 	.word	0x08017a68
 800f9a8:	080177dc 	.word	0x080177dc
 800f9ac:	08017a84 	.word	0x08017a84
 800f9b0:	20006d20 	.word	0x20006d20

0800f9b4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d107      	bne.n	800f9d6 <udp_recv+0x22>
 800f9c6:	4b08      	ldr	r3, [pc, #32]	; (800f9e8 <udp_recv+0x34>)
 800f9c8:	f240 428a 	movw	r2, #1162	; 0x48a
 800f9cc:	4907      	ldr	r1, [pc, #28]	; (800f9ec <udp_recv+0x38>)
 800f9ce:	4808      	ldr	r0, [pc, #32]	; (800f9f0 <udp_recv+0x3c>)
 800f9d0:	f004 fa1a 	bl	8013e08 <iprintf>
 800f9d4:	e005      	b.n	800f9e2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	68ba      	ldr	r2, [r7, #8]
 800f9da:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	61da      	str	r2, [r3, #28]
}
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	08017788 	.word	0x08017788
 800f9ec:	08017abc 	.word	0x08017abc
 800f9f0:	080177dc 	.word	0x080177dc

0800f9f4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d107      	bne.n	800fa12 <udp_remove+0x1e>
 800fa02:	4b19      	ldr	r3, [pc, #100]	; (800fa68 <udp_remove+0x74>)
 800fa04:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800fa08:	4918      	ldr	r1, [pc, #96]	; (800fa6c <udp_remove+0x78>)
 800fa0a:	4819      	ldr	r0, [pc, #100]	; (800fa70 <udp_remove+0x7c>)
 800fa0c:	f004 f9fc 	bl	8013e08 <iprintf>
 800fa10:	e026      	b.n	800fa60 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800fa12:	4b18      	ldr	r3, [pc, #96]	; (800fa74 <udp_remove+0x80>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d105      	bne.n	800fa28 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800fa1c:	4b15      	ldr	r3, [pc, #84]	; (800fa74 <udp_remove+0x80>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	4a14      	ldr	r2, [pc, #80]	; (800fa74 <udp_remove+0x80>)
 800fa24:	6013      	str	r3, [r2, #0]
 800fa26:	e017      	b.n	800fa58 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800fa28:	4b12      	ldr	r3, [pc, #72]	; (800fa74 <udp_remove+0x80>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	60fb      	str	r3, [r7, #12]
 800fa2e:	e010      	b.n	800fa52 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d009      	beq.n	800fa4c <udp_remove+0x58>
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d104      	bne.n	800fa4c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	68da      	ldr	r2, [r3, #12]
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	60da      	str	r2, [r3, #12]
        break;
 800fa4a:	e005      	b.n	800fa58 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	60fb      	str	r3, [r7, #12]
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d1eb      	bne.n	800fa30 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800fa58:	6879      	ldr	r1, [r7, #4]
 800fa5a:	2000      	movs	r0, #0
 800fa5c:	f7f8 f89c 	bl	8007b98 <memp_free>
}
 800fa60:	3710      	adds	r7, #16
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	08017788 	.word	0x08017788
 800fa6c:	08017ad4 	.word	0x08017ad4
 800fa70:	080177dc 	.word	0x080177dc
 800fa74:	20006d20 	.word	0x20006d20

0800fa78 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800fa7e:	2000      	movs	r0, #0
 800fa80:	f7f8 f83e 	bl	8007b00 <memp_malloc>
 800fa84:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d007      	beq.n	800fa9c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800fa8c:	2220      	movs	r2, #32
 800fa8e:	2100      	movs	r1, #0
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f004 f9b1 	bl	8013df8 <memset>
    pcb->ttl = UDP_TTL;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	22ff      	movs	r2, #255	; 0xff
 800fa9a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800fa9c:	687b      	ldr	r3, [r7, #4]
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
	...

0800faa8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d01e      	beq.n	800faf6 <udp_netif_ip_addr_changed+0x4e>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d01a      	beq.n	800faf6 <udp_netif_ip_addr_changed+0x4e>
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d017      	beq.n	800faf6 <udp_netif_ip_addr_changed+0x4e>
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d013      	beq.n	800faf6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800face:	4b0d      	ldr	r3, [pc, #52]	; (800fb04 <udp_netif_ip_addr_changed+0x5c>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	60fb      	str	r3, [r7, #12]
 800fad4:	e00c      	b.n	800faf0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d103      	bne.n	800faea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	68db      	ldr	r3, [r3, #12]
 800faee:	60fb      	str	r3, [r7, #12]
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d1ef      	bne.n	800fad6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800faf6:	bf00      	nop
 800faf8:	3714      	adds	r7, #20
 800fafa:	46bd      	mov	sp, r7
 800fafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb00:	4770      	bx	lr
 800fb02:	bf00      	nop
 800fb04:	20006d20 	.word	0x20006d20

0800fb08 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800fb0c:	4b20      	ldr	r3, [pc, #128]	; (800fb90 <dhcp_inc_pcb_refcount+0x88>)
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d133      	bne.n	800fb7c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800fb14:	4b1f      	ldr	r3, [pc, #124]	; (800fb94 <dhcp_inc_pcb_refcount+0x8c>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d005      	beq.n	800fb28 <dhcp_inc_pcb_refcount+0x20>
 800fb1c:	4b1e      	ldr	r3, [pc, #120]	; (800fb98 <dhcp_inc_pcb_refcount+0x90>)
 800fb1e:	22e5      	movs	r2, #229	; 0xe5
 800fb20:	491e      	ldr	r1, [pc, #120]	; (800fb9c <dhcp_inc_pcb_refcount+0x94>)
 800fb22:	481f      	ldr	r0, [pc, #124]	; (800fba0 <dhcp_inc_pcb_refcount+0x98>)
 800fb24:	f004 f970 	bl	8013e08 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800fb28:	f7ff ffa6 	bl	800fa78 <udp_new>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	4a19      	ldr	r2, [pc, #100]	; (800fb94 <dhcp_inc_pcb_refcount+0x8c>)
 800fb30:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800fb32:	4b18      	ldr	r3, [pc, #96]	; (800fb94 <dhcp_inc_pcb_refcount+0x8c>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d102      	bne.n	800fb40 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800fb3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb3e:	e024      	b.n	800fb8a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800fb40:	4b14      	ldr	r3, [pc, #80]	; (800fb94 <dhcp_inc_pcb_refcount+0x8c>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	7a5a      	ldrb	r2, [r3, #9]
 800fb46:	4b13      	ldr	r3, [pc, #76]	; (800fb94 <dhcp_inc_pcb_refcount+0x8c>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f042 0220 	orr.w	r2, r2, #32
 800fb4e:	b2d2      	uxtb	r2, r2
 800fb50:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800fb52:	4b10      	ldr	r3, [pc, #64]	; (800fb94 <dhcp_inc_pcb_refcount+0x8c>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2244      	movs	r2, #68	; 0x44
 800fb58:	4912      	ldr	r1, [pc, #72]	; (800fba4 <dhcp_inc_pcb_refcount+0x9c>)
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7ff fe34 	bl	800f7c8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800fb60:	4b0c      	ldr	r3, [pc, #48]	; (800fb94 <dhcp_inc_pcb_refcount+0x8c>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2243      	movs	r2, #67	; 0x43
 800fb66:	490f      	ldr	r1, [pc, #60]	; (800fba4 <dhcp_inc_pcb_refcount+0x9c>)
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff feb5 	bl	800f8d8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800fb6e:	4b09      	ldr	r3, [pc, #36]	; (800fb94 <dhcp_inc_pcb_refcount+0x8c>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2200      	movs	r2, #0
 800fb74:	490c      	ldr	r1, [pc, #48]	; (800fba8 <dhcp_inc_pcb_refcount+0xa0>)
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7ff ff1c 	bl	800f9b4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800fb7c:	4b04      	ldr	r3, [pc, #16]	; (800fb90 <dhcp_inc_pcb_refcount+0x88>)
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	3301      	adds	r3, #1
 800fb82:	b2da      	uxtb	r2, r3
 800fb84:	4b02      	ldr	r3, [pc, #8]	; (800fb90 <dhcp_inc_pcb_refcount+0x88>)
 800fb86:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800fb88:	2300      	movs	r3, #0
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	20000114 	.word	0x20000114
 800fb94:	20000110 	.word	0x20000110
 800fb98:	08017aec 	.word	0x08017aec
 800fb9c:	08017b24 	.word	0x08017b24
 800fba0:	08017b4c 	.word	0x08017b4c
 800fba4:	08018640 	.word	0x08018640
 800fba8:	080113c5 	.word	0x080113c5

0800fbac <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800fbb0:	4b0e      	ldr	r3, [pc, #56]	; (800fbec <dhcp_dec_pcb_refcount+0x40>)
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d105      	bne.n	800fbc4 <dhcp_dec_pcb_refcount+0x18>
 800fbb8:	4b0d      	ldr	r3, [pc, #52]	; (800fbf0 <dhcp_dec_pcb_refcount+0x44>)
 800fbba:	22ff      	movs	r2, #255	; 0xff
 800fbbc:	490d      	ldr	r1, [pc, #52]	; (800fbf4 <dhcp_dec_pcb_refcount+0x48>)
 800fbbe:	480e      	ldr	r0, [pc, #56]	; (800fbf8 <dhcp_dec_pcb_refcount+0x4c>)
 800fbc0:	f004 f922 	bl	8013e08 <iprintf>
  dhcp_pcb_refcount--;
 800fbc4:	4b09      	ldr	r3, [pc, #36]	; (800fbec <dhcp_dec_pcb_refcount+0x40>)
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	3b01      	subs	r3, #1
 800fbca:	b2da      	uxtb	r2, r3
 800fbcc:	4b07      	ldr	r3, [pc, #28]	; (800fbec <dhcp_dec_pcb_refcount+0x40>)
 800fbce:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800fbd0:	4b06      	ldr	r3, [pc, #24]	; (800fbec <dhcp_dec_pcb_refcount+0x40>)
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d107      	bne.n	800fbe8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800fbd8:	4b08      	ldr	r3, [pc, #32]	; (800fbfc <dhcp_dec_pcb_refcount+0x50>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7ff ff09 	bl	800f9f4 <udp_remove>
    dhcp_pcb = NULL;
 800fbe2:	4b06      	ldr	r3, [pc, #24]	; (800fbfc <dhcp_dec_pcb_refcount+0x50>)
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	601a      	str	r2, [r3, #0]
  }
}
 800fbe8:	bf00      	nop
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	20000114 	.word	0x20000114
 800fbf0:	08017aec 	.word	0x08017aec
 800fbf4:	08017b74 	.word	0x08017b74
 800fbf8:	08017b4c 	.word	0x08017b4c
 800fbfc:	20000110 	.word	0x20000110

0800fc00 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc0c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800fc0e:	210c      	movs	r1, #12
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	f001 f819 	bl	8010c48 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fc16:	4b06      	ldr	r3, [pc, #24]	; (800fc30 <dhcp_handle_nak+0x30>)
 800fc18:	4a05      	ldr	r2, [pc, #20]	; (800fc30 <dhcp_handle_nak+0x30>)
 800fc1a:	4905      	ldr	r1, [pc, #20]	; (800fc30 <dhcp_handle_nak+0x30>)
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7f8 f95d 	bl	8007edc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 fc0c 	bl	8010440 <dhcp_discover>
}
 800fc28:	bf00      	nop
 800fc2a:	3710      	adds	r7, #16
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	08018640 	.word	0x08018640

0800fc34 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b084      	sub	sp, #16
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc40:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800fc42:	2108      	movs	r1, #8
 800fc44:	68f8      	ldr	r0, [r7, #12]
 800fc46:	f000 ffff 	bl	8010c48 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	331c      	adds	r3, #28
 800fc4e:	2200      	movs	r2, #0
 800fc50:	4619      	mov	r1, r3
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f002 fb00 	bl	8012258 <etharp_query>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	799b      	ldrb	r3, [r3, #6]
 800fc60:	2bff      	cmp	r3, #255	; 0xff
 800fc62:	d005      	beq.n	800fc70 <dhcp_check+0x3c>
    dhcp->tries++;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	799b      	ldrb	r3, [r3, #6]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	b2da      	uxtb	r2, r3
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800fc70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fc74:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fc76:	893b      	ldrh	r3, [r7, #8]
 800fc78:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fc7c:	4a06      	ldr	r2, [pc, #24]	; (800fc98 <dhcp_check+0x64>)
 800fc7e:	fb82 1203 	smull	r1, r2, r2, r3
 800fc82:	1152      	asrs	r2, r2, #5
 800fc84:	17db      	asrs	r3, r3, #31
 800fc86:	1ad3      	subs	r3, r2, r3
 800fc88:	b29a      	uxth	r2, r3
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800fc8e:	bf00      	nop
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}
 800fc96:	bf00      	nop
 800fc98:	10624dd3 	.word	0x10624dd3

0800fc9c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcaa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fcac:	4b0c      	ldr	r3, [pc, #48]	; (800fce0 <dhcp_handle_offer+0x44>)
 800fcae:	789b      	ldrb	r3, [r3, #2]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d011      	beq.n	800fcd8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800fcba:	4b0a      	ldr	r3, [pc, #40]	; (800fce4 <dhcp_handle_offer+0x48>)
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7f7 fab5 	bl	800722e <lwip_htonl>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	691a      	ldr	r2, [r3, #16]
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 f808 	bl	800fce8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800fcd8:	bf00      	nop
 800fcda:	3710      	adds	r7, #16
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	20006d24 	.word	0x20006d24
 800fce4:	20006d2c 	.word	0x20006d2c

0800fce8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800fce8:	b5b0      	push	{r4, r5, r7, lr}
 800fcea:	b08a      	sub	sp, #40	; 0x28
 800fcec:	af02      	add	r7, sp, #8
 800fcee:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d109      	bne.n	800fd0a <dhcp_select+0x22>
 800fcf6:	4b71      	ldr	r3, [pc, #452]	; (800febc <dhcp_select+0x1d4>)
 800fcf8:	f240 1277 	movw	r2, #375	; 0x177
 800fcfc:	4970      	ldr	r1, [pc, #448]	; (800fec0 <dhcp_select+0x1d8>)
 800fcfe:	4871      	ldr	r0, [pc, #452]	; (800fec4 <dhcp_select+0x1dc>)
 800fd00:	f004 f882 	bl	8013e08 <iprintf>
 800fd04:	f06f 030f 	mvn.w	r3, #15
 800fd08:	e0d3      	b.n	800feb2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fd10:	69bb      	ldr	r3, [r7, #24]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d109      	bne.n	800fd2a <dhcp_select+0x42>
 800fd16:	4b69      	ldr	r3, [pc, #420]	; (800febc <dhcp_select+0x1d4>)
 800fd18:	f240 1279 	movw	r2, #377	; 0x179
 800fd1c:	496a      	ldr	r1, [pc, #424]	; (800fec8 <dhcp_select+0x1e0>)
 800fd1e:	4869      	ldr	r0, [pc, #420]	; (800fec4 <dhcp_select+0x1dc>)
 800fd20:	f004 f872 	bl	8013e08 <iprintf>
 800fd24:	f06f 0305 	mvn.w	r3, #5
 800fd28:	e0c3      	b.n	800feb2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fd2a:	2101      	movs	r1, #1
 800fd2c:	69b8      	ldr	r0, [r7, #24]
 800fd2e:	f000 ff8b 	bl	8010c48 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fd32:	f107 030c 	add.w	r3, r7, #12
 800fd36:	2203      	movs	r2, #3
 800fd38:	69b9      	ldr	r1, [r7, #24]
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f001 fc10 	bl	8011560 <dhcp_create_msg>
 800fd40:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f000 8085 	beq.w	800fe54 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fd50:	89b8      	ldrh	r0, [r7, #12]
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd58:	2302      	movs	r3, #2
 800fd5a:	2239      	movs	r2, #57	; 0x39
 800fd5c:	f000 ff8e 	bl	8010c7c <dhcp_option>
 800fd60:	4603      	mov	r3, r0
 800fd62:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fd64:	89b8      	ldrh	r0, [r7, #12]
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd70:	461a      	mov	r2, r3
 800fd72:	f000 ffdd 	bl	8010d30 <dhcp_option_short>
 800fd76:	4603      	mov	r3, r0
 800fd78:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fd7a:	89b8      	ldrh	r0, [r7, #12]
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd82:	2304      	movs	r3, #4
 800fd84:	2232      	movs	r2, #50	; 0x32
 800fd86:	f000 ff79 	bl	8010c7c <dhcp_option>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fd8e:	89bc      	ldrh	r4, [r7, #12]
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	69db      	ldr	r3, [r3, #28]
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7f7 fa47 	bl	800722e <lwip_htonl>
 800fda0:	4603      	mov	r3, r0
 800fda2:	461a      	mov	r2, r3
 800fda4:	4629      	mov	r1, r5
 800fda6:	4620      	mov	r0, r4
 800fda8:	f000 fff4 	bl	8010d94 <dhcp_option_long>
 800fdac:	4603      	mov	r3, r0
 800fdae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fdb0:	89b8      	ldrh	r0, [r7, #12]
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fdb8:	2304      	movs	r3, #4
 800fdba:	2236      	movs	r2, #54	; 0x36
 800fdbc:	f000 ff5e 	bl	8010c7c <dhcp_option>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fdc4:	89bc      	ldrh	r4, [r7, #12]
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	699b      	ldr	r3, [r3, #24]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7f7 fa2c 	bl	800722e <lwip_htonl>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	461a      	mov	r2, r3
 800fdda:	4629      	mov	r1, r5
 800fddc:	4620      	mov	r0, r4
 800fdde:	f000 ffd9 	bl	8010d94 <dhcp_option_long>
 800fde2:	4603      	mov	r3, r0
 800fde4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fde6:	89b8      	ldrh	r0, [r7, #12]
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fdee:	2303      	movs	r3, #3
 800fdf0:	2237      	movs	r2, #55	; 0x37
 800fdf2:	f000 ff43 	bl	8010c7c <dhcp_option>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	77bb      	strb	r3, [r7, #30]
 800fdfe:	e00e      	b.n	800fe1e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fe00:	89b8      	ldrh	r0, [r7, #12]
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe08:	7fbb      	ldrb	r3, [r7, #30]
 800fe0a:	4a30      	ldr	r2, [pc, #192]	; (800fecc <dhcp_select+0x1e4>)
 800fe0c:	5cd3      	ldrb	r3, [r2, r3]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	f000 ff68 	bl	8010ce4 <dhcp_option_byte>
 800fe14:	4603      	mov	r3, r0
 800fe16:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fe18:	7fbb      	ldrb	r3, [r7, #30]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	77bb      	strb	r3, [r7, #30]
 800fe1e:	7fbb      	ldrb	r3, [r7, #30]
 800fe20:	2b02      	cmp	r3, #2
 800fe22:	d9ed      	bls.n	800fe00 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fe24:	89b8      	ldrh	r0, [r7, #12]
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	33f0      	adds	r3, #240	; 0xf0
 800fe2a:	697a      	ldr	r2, [r7, #20]
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	f001 fc6d 	bl	801170c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fe32:	4b27      	ldr	r3, [pc, #156]	; (800fed0 <dhcp_select+0x1e8>)
 800fe34:	6818      	ldr	r0, [r3, #0]
 800fe36:	4b27      	ldr	r3, [pc, #156]	; (800fed4 <dhcp_select+0x1ec>)
 800fe38:	9301      	str	r3, [sp, #4]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	2343      	movs	r3, #67	; 0x43
 800fe40:	4a25      	ldr	r2, [pc, #148]	; (800fed8 <dhcp_select+0x1f0>)
 800fe42:	6979      	ldr	r1, [r7, #20]
 800fe44:	f7ff fbda 	bl	800f5fc <udp_sendto_if_src>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fe4c:	6978      	ldr	r0, [r7, #20]
 800fe4e:	f7f8 fcbd 	bl	80087cc <pbuf_free>
 800fe52:	e001      	b.n	800fe58 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fe54:	23ff      	movs	r3, #255	; 0xff
 800fe56:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	799b      	ldrb	r3, [r3, #6]
 800fe5c:	2bff      	cmp	r3, #255	; 0xff
 800fe5e:	d005      	beq.n	800fe6c <dhcp_select+0x184>
    dhcp->tries++;
 800fe60:	69bb      	ldr	r3, [r7, #24]
 800fe62:	799b      	ldrb	r3, [r3, #6]
 800fe64:	3301      	adds	r3, #1
 800fe66:	b2da      	uxtb	r2, r3
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fe6c:	69bb      	ldr	r3, [r7, #24]
 800fe6e:	799b      	ldrb	r3, [r3, #6]
 800fe70:	2b05      	cmp	r3, #5
 800fe72:	d80d      	bhi.n	800fe90 <dhcp_select+0x1a8>
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	799b      	ldrb	r3, [r3, #6]
 800fe78:	461a      	mov	r2, r3
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	4093      	lsls	r3, r2
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	461a      	mov	r2, r3
 800fe82:	0152      	lsls	r2, r2, #5
 800fe84:	1ad2      	subs	r2, r2, r3
 800fe86:	0092      	lsls	r2, r2, #2
 800fe88:	4413      	add	r3, r2
 800fe8a:	00db      	lsls	r3, r3, #3
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	e001      	b.n	800fe94 <dhcp_select+0x1ac>
 800fe90:	f64e 2360 	movw	r3, #60000	; 0xea60
 800fe94:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fe96:	89fb      	ldrh	r3, [r7, #14]
 800fe98:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fe9c:	4a0f      	ldr	r2, [pc, #60]	; (800fedc <dhcp_select+0x1f4>)
 800fe9e:	fb82 1203 	smull	r1, r2, r2, r3
 800fea2:	1152      	asrs	r2, r2, #5
 800fea4:	17db      	asrs	r3, r3, #31
 800fea6:	1ad3      	subs	r3, r2, r3
 800fea8:	b29a      	uxth	r2, r3
 800feaa:	69bb      	ldr	r3, [r7, #24]
 800feac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800feae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3720      	adds	r7, #32
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bdb0      	pop	{r4, r5, r7, pc}
 800feba:	bf00      	nop
 800febc:	08017aec 	.word	0x08017aec
 800fec0:	08017b98 	.word	0x08017b98
 800fec4:	08017b4c 	.word	0x08017b4c
 800fec8:	08017bb4 	.word	0x08017bb4
 800fecc:	20000014 	.word	0x20000014
 800fed0:	20000110 	.word	0x20000110
 800fed4:	08018640 	.word	0x08018640
 800fed8:	08018644 	.word	0x08018644
 800fedc:	10624dd3 	.word	0x10624dd3

0800fee0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fee6:	4b27      	ldr	r3, [pc, #156]	; (800ff84 <dhcp_coarse_tmr+0xa4>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	607b      	str	r3, [r7, #4]
 800feec:	e042      	b.n	800ff74 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d039      	beq.n	800ff6e <dhcp_coarse_tmr+0x8e>
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	795b      	ldrb	r3, [r3, #5]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d035      	beq.n	800ff6e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	8a9b      	ldrh	r3, [r3, #20]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d012      	beq.n	800ff30 <dhcp_coarse_tmr+0x50>
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	8a5b      	ldrh	r3, [r3, #18]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	b29a      	uxth	r2, r3
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	825a      	strh	r2, [r3, #18]
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	8a5a      	ldrh	r2, [r3, #18]
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	8a9b      	ldrh	r3, [r3, #20]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d106      	bne.n	800ff30 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f000 fdf6 	bl	8010b14 <dhcp_release_and_stop>
        dhcp_start(netif);
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f000 f969 	bl	8010200 <dhcp_start>
 800ff2e:	e01e      	b.n	800ff6e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	8a1b      	ldrh	r3, [r3, #16]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d00b      	beq.n	800ff50 <dhcp_coarse_tmr+0x70>
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	8a1b      	ldrh	r3, [r3, #16]
 800ff3c:	1e5a      	subs	r2, r3, #1
 800ff3e:	b291      	uxth	r1, r2
 800ff40:	683a      	ldr	r2, [r7, #0]
 800ff42:	8211      	strh	r1, [r2, #16]
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d103      	bne.n	800ff50 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 f8c6 	bl	80100da <dhcp_t2_timeout>
 800ff4e:	e00e      	b.n	800ff6e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	89db      	ldrh	r3, [r3, #14]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00a      	beq.n	800ff6e <dhcp_coarse_tmr+0x8e>
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	89db      	ldrh	r3, [r3, #14]
 800ff5c:	1e5a      	subs	r2, r3, #1
 800ff5e:	b291      	uxth	r1, r2
 800ff60:	683a      	ldr	r2, [r7, #0]
 800ff62:	81d1      	strh	r1, [r2, #14]
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d102      	bne.n	800ff6e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f000 f888 	bl	801007e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	607b      	str	r3, [r7, #4]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1b9      	bne.n	800feee <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800ff7a:	bf00      	nop
 800ff7c:	bf00      	nop
 800ff7e:	3708      	adds	r7, #8
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	20006cf8 	.word	0x20006cf8

0800ff88 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800ff8e:	4b16      	ldr	r3, [pc, #88]	; (800ffe8 <dhcp_fine_tmr+0x60>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	607b      	str	r3, [r7, #4]
 800ff94:	e020      	b.n	800ffd8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff9a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d017      	beq.n	800ffd2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	891b      	ldrh	r3, [r3, #8]
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	d906      	bls.n	800ffb8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	891b      	ldrh	r3, [r3, #8]
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	811a      	strh	r2, [r3, #8]
 800ffb6:	e00c      	b.n	800ffd2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	891b      	ldrh	r3, [r3, #8]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d108      	bne.n	800ffd2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	891b      	ldrh	r3, [r3, #8]
 800ffc4:	3b01      	subs	r3, #1
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f000 f80d 	bl	800ffec <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	607b      	str	r3, [r7, #4]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d1db      	bne.n	800ff96 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800ffde:	bf00      	nop
 800ffe0:	bf00      	nop
 800ffe2:	3708      	adds	r7, #8
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	20006cf8 	.word	0x20006cf8

0800ffec <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	795b      	ldrb	r3, [r3, #5]
 800fffe:	2b0c      	cmp	r3, #12
 8010000:	d003      	beq.n	801000a <dhcp_timeout+0x1e>
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	795b      	ldrb	r3, [r3, #5]
 8010006:	2b06      	cmp	r3, #6
 8010008:	d103      	bne.n	8010012 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 fa18 	bl	8010440 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8010010:	e031      	b.n	8010076 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	795b      	ldrb	r3, [r3, #5]
 8010016:	2b01      	cmp	r3, #1
 8010018:	d10e      	bne.n	8010038 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	799b      	ldrb	r3, [r3, #6]
 801001e:	2b05      	cmp	r3, #5
 8010020:	d803      	bhi.n	801002a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f7ff fe60 	bl	800fce8 <dhcp_select>
}
 8010028:	e025      	b.n	8010076 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 fd72 	bl	8010b14 <dhcp_release_and_stop>
      dhcp_start(netif);
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f000 f8e5 	bl	8010200 <dhcp_start>
}
 8010036:	e01e      	b.n	8010076 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	795b      	ldrb	r3, [r3, #5]
 801003c:	2b08      	cmp	r3, #8
 801003e:	d10b      	bne.n	8010058 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	799b      	ldrb	r3, [r3, #6]
 8010044:	2b01      	cmp	r3, #1
 8010046:	d803      	bhi.n	8010050 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7ff fdf3 	bl	800fc34 <dhcp_check>
}
 801004e:	e012      	b.n	8010076 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f000 fa97 	bl	8010584 <dhcp_bind>
}
 8010056:	e00e      	b.n	8010076 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	795b      	ldrb	r3, [r3, #5]
 801005c:	2b03      	cmp	r3, #3
 801005e:	d10a      	bne.n	8010076 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	799b      	ldrb	r3, [r3, #6]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d803      	bhi.n	8010070 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 fc9d 	bl	80109a8 <dhcp_reboot>
}
 801006e:	e002      	b.n	8010076 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 f9e5 	bl	8010440 <dhcp_discover>
}
 8010076:	bf00      	nop
 8010078:	3710      	adds	r7, #16
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801007e:	b580      	push	{r7, lr}
 8010080:	b084      	sub	sp, #16
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	795b      	ldrb	r3, [r3, #5]
 8010090:	2b01      	cmp	r3, #1
 8010092:	d007      	beq.n	80100a4 <dhcp_t1_timeout+0x26>
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	795b      	ldrb	r3, [r3, #5]
 8010098:	2b0a      	cmp	r3, #10
 801009a:	d003      	beq.n	80100a4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80100a0:	2b05      	cmp	r3, #5
 80100a2:	d116      	bne.n	80100d2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 fb47 	bl	8010738 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	899b      	ldrh	r3, [r3, #12]
 80100ae:	461a      	mov	r2, r3
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	8a5b      	ldrh	r3, [r3, #18]
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	2b01      	cmp	r3, #1
 80100b8:	dd0b      	ble.n	80100d2 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	899b      	ldrh	r3, [r3, #12]
 80100be:	461a      	mov	r2, r3
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	8a5b      	ldrh	r3, [r3, #18]
 80100c4:	1ad3      	subs	r3, r2, r3
 80100c6:	0fda      	lsrs	r2, r3, #31
 80100c8:	4413      	add	r3, r2
 80100ca:	105b      	asrs	r3, r3, #1
 80100cc:	b29a      	uxth	r2, r3
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80100d2:	bf00      	nop
 80100d4:	3710      	adds	r7, #16
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}

080100da <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80100da:	b580      	push	{r7, lr}
 80100dc:	b084      	sub	sp, #16
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	795b      	ldrb	r3, [r3, #5]
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d00b      	beq.n	8010108 <dhcp_t2_timeout+0x2e>
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	795b      	ldrb	r3, [r3, #5]
 80100f4:	2b0a      	cmp	r3, #10
 80100f6:	d007      	beq.n	8010108 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80100fc:	2b05      	cmp	r3, #5
 80100fe:	d003      	beq.n	8010108 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	795b      	ldrb	r3, [r3, #5]
 8010104:	2b04      	cmp	r3, #4
 8010106:	d116      	bne.n	8010136 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f000 fbb1 	bl	8010870 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	8a9b      	ldrh	r3, [r3, #20]
 8010112:	461a      	mov	r2, r3
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	8a5b      	ldrh	r3, [r3, #18]
 8010118:	1ad3      	subs	r3, r2, r3
 801011a:	2b01      	cmp	r3, #1
 801011c:	dd0b      	ble.n	8010136 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	8a9b      	ldrh	r3, [r3, #20]
 8010122:	461a      	mov	r2, r3
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	8a5b      	ldrh	r3, [r3, #18]
 8010128:	1ad3      	subs	r3, r2, r3
 801012a:	0fda      	lsrs	r2, r3, #31
 801012c:	4413      	add	r3, r2
 801012e:	105b      	asrs	r3, r3, #1
 8010130:	b29a      	uxth	r2, r3
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8010136:	bf00      	nop
 8010138:	3710      	adds	r7, #16
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
	...

08010140 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801014e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2200      	movs	r2, #0
 8010154:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2200      	movs	r2, #0
 801015a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801015c:	4b26      	ldr	r3, [pc, #152]	; (80101f8 <dhcp_handle_ack+0xb8>)
 801015e:	78db      	ldrb	r3, [r3, #3]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d003      	beq.n	801016c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8010164:	4b25      	ldr	r3, [pc, #148]	; (80101fc <dhcp_handle_ack+0xbc>)
 8010166:	68da      	ldr	r2, [r3, #12]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801016c:	4b22      	ldr	r3, [pc, #136]	; (80101f8 <dhcp_handle_ack+0xb8>)
 801016e:	791b      	ldrb	r3, [r3, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d004      	beq.n	801017e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8010174:	4b21      	ldr	r3, [pc, #132]	; (80101fc <dhcp_handle_ack+0xbc>)
 8010176:	691a      	ldr	r2, [r3, #16]
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	62da      	str	r2, [r3, #44]	; 0x2c
 801017c:	e004      	b.n	8010188 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010182:	085a      	lsrs	r2, r3, #1
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8010188:	4b1b      	ldr	r3, [pc, #108]	; (80101f8 <dhcp_handle_ack+0xb8>)
 801018a:	795b      	ldrb	r3, [r3, #5]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d004      	beq.n	801019a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8010190:	4b1a      	ldr	r3, [pc, #104]	; (80101fc <dhcp_handle_ack+0xbc>)
 8010192:	695a      	ldr	r2, [r3, #20]
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	631a      	str	r2, [r3, #48]	; 0x30
 8010198:	e007      	b.n	80101aa <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801019e:	4613      	mov	r3, r2
 80101a0:	00db      	lsls	r3, r3, #3
 80101a2:	1a9b      	subs	r3, r3, r2
 80101a4:	08da      	lsrs	r2, r3, #3
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	691a      	ldr	r2, [r3, #16]
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80101b2:	4b11      	ldr	r3, [pc, #68]	; (80101f8 <dhcp_handle_ack+0xb8>)
 80101b4:	799b      	ldrb	r3, [r3, #6]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d00b      	beq.n	80101d2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80101ba:	4b10      	ldr	r3, [pc, #64]	; (80101fc <dhcp_handle_ack+0xbc>)
 80101bc:	699b      	ldr	r3, [r3, #24]
 80101be:	4618      	mov	r0, r3
 80101c0:	f7f7 f835 	bl	800722e <lwip_htonl>
 80101c4:	4602      	mov	r2, r0
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2201      	movs	r2, #1
 80101ce:	71da      	strb	r2, [r3, #7]
 80101d0:	e002      	b.n	80101d8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2200      	movs	r2, #0
 80101d6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80101d8:	4b07      	ldr	r3, [pc, #28]	; (80101f8 <dhcp_handle_ack+0xb8>)
 80101da:	79db      	ldrb	r3, [r3, #7]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d007      	beq.n	80101f0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80101e0:	4b06      	ldr	r3, [pc, #24]	; (80101fc <dhcp_handle_ack+0xbc>)
 80101e2:	69db      	ldr	r3, [r3, #28]
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7f7 f822 	bl	800722e <lwip_htonl>
 80101ea:	4602      	mov	r2, r0
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80101f0:	bf00      	nop
 80101f2:	3710      	adds	r7, #16
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	20006d24 	.word	0x20006d24
 80101fc:	20006d2c 	.word	0x20006d2c

08010200 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d109      	bne.n	8010222 <dhcp_start+0x22>
 801020e:	4b37      	ldr	r3, [pc, #220]	; (80102ec <dhcp_start+0xec>)
 8010210:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010214:	4936      	ldr	r1, [pc, #216]	; (80102f0 <dhcp_start+0xf0>)
 8010216:	4837      	ldr	r0, [pc, #220]	; (80102f4 <dhcp_start+0xf4>)
 8010218:	f003 fdf6 	bl	8013e08 <iprintf>
 801021c:	f06f 030f 	mvn.w	r3, #15
 8010220:	e060      	b.n	80102e4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010228:	f003 0301 	and.w	r3, r3, #1
 801022c:	2b00      	cmp	r3, #0
 801022e:	d109      	bne.n	8010244 <dhcp_start+0x44>
 8010230:	4b2e      	ldr	r3, [pc, #184]	; (80102ec <dhcp_start+0xec>)
 8010232:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8010236:	4930      	ldr	r1, [pc, #192]	; (80102f8 <dhcp_start+0xf8>)
 8010238:	482e      	ldr	r0, [pc, #184]	; (80102f4 <dhcp_start+0xf4>)
 801023a:	f003 fde5 	bl	8013e08 <iprintf>
 801023e:	f06f 030f 	mvn.w	r3, #15
 8010242:	e04f      	b.n	80102e4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010248:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801024e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8010252:	d202      	bcs.n	801025a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8010254:	f04f 33ff 	mov.w	r3, #4294967295
 8010258:	e044      	b.n	80102e4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d10d      	bne.n	801027c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8010260:	2034      	movs	r0, #52	; 0x34
 8010262:	f7f7 fab7 	bl	80077d4 <mem_malloc>
 8010266:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d102      	bne.n	8010274 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801026e:	f04f 33ff 	mov.w	r3, #4294967295
 8010272:	e037      	b.n	80102e4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	68fa      	ldr	r2, [r7, #12]
 8010278:	625a      	str	r2, [r3, #36]	; 0x24
 801027a:	e005      	b.n	8010288 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	791b      	ldrb	r3, [r3, #4]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d001      	beq.n	8010288 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010284:	f7ff fc92 	bl	800fbac <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8010288:	2234      	movs	r2, #52	; 0x34
 801028a:	2100      	movs	r1, #0
 801028c:	68f8      	ldr	r0, [r7, #12]
 801028e:	f003 fdb3 	bl	8013df8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8010292:	f7ff fc39 	bl	800fb08 <dhcp_inc_pcb_refcount>
 8010296:	4603      	mov	r3, r0
 8010298:	2b00      	cmp	r3, #0
 801029a:	d002      	beq.n	80102a2 <dhcp_start+0xa2>
    return ERR_MEM;
 801029c:	f04f 33ff 	mov.w	r3, #4294967295
 80102a0:	e020      	b.n	80102e4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	2201      	movs	r2, #1
 80102a6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80102ae:	f003 0304 	and.w	r3, r3, #4
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d105      	bne.n	80102c2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80102b6:	2102      	movs	r1, #2
 80102b8:	68f8      	ldr	r0, [r7, #12]
 80102ba:	f000 fcc5 	bl	8010c48 <dhcp_set_state>
    return ERR_OK;
 80102be:	2300      	movs	r3, #0
 80102c0:	e010      	b.n	80102e4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 f8bc 	bl	8010440 <dhcp_discover>
 80102c8:	4603      	mov	r3, r0
 80102ca:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80102cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d005      	beq.n	80102e0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f000 fc1d 	bl	8010b14 <dhcp_release_and_stop>
    return ERR_MEM;
 80102da:	f04f 33ff 	mov.w	r3, #4294967295
 80102de:	e001      	b.n	80102e4 <dhcp_start+0xe4>
  }
  return result;
 80102e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3710      	adds	r7, #16
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	08017aec 	.word	0x08017aec
 80102f0:	08017bd0 	.word	0x08017bd0
 80102f4:	08017b4c 	.word	0x08017b4c
 80102f8:	08017c14 	.word	0x08017c14

080102fc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d107      	bne.n	801031c <dhcp_arp_reply+0x20>
 801030c:	4b0e      	ldr	r3, [pc, #56]	; (8010348 <dhcp_arp_reply+0x4c>)
 801030e:	f240 328b 	movw	r2, #907	; 0x38b
 8010312:	490e      	ldr	r1, [pc, #56]	; (801034c <dhcp_arp_reply+0x50>)
 8010314:	480e      	ldr	r0, [pc, #56]	; (8010350 <dhcp_arp_reply+0x54>)
 8010316:	f003 fd77 	bl	8013e08 <iprintf>
 801031a:	e012      	b.n	8010342 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010320:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d00c      	beq.n	8010342 <dhcp_arp_reply+0x46>
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	795b      	ldrb	r3, [r3, #5]
 801032c:	2b08      	cmp	r3, #8
 801032e:	d108      	bne.n	8010342 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	69db      	ldr	r3, [r3, #28]
 8010338:	429a      	cmp	r2, r3
 801033a:	d102      	bne.n	8010342 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f000 f809 	bl	8010354 <dhcp_decline>
    }
  }
}
 8010342:	3710      	adds	r7, #16
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	08017aec 	.word	0x08017aec
 801034c:	08017bd0 	.word	0x08017bd0
 8010350:	08017b4c 	.word	0x08017b4c

08010354 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8010354:	b5b0      	push	{r4, r5, r7, lr}
 8010356:	b08a      	sub	sp, #40	; 0x28
 8010358:	af02      	add	r7, sp, #8
 801035a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010360:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010362:	210c      	movs	r1, #12
 8010364:	69b8      	ldr	r0, [r7, #24]
 8010366:	f000 fc6f 	bl	8010c48 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801036a:	f107 030c 	add.w	r3, r7, #12
 801036e:	2204      	movs	r2, #4
 8010370:	69b9      	ldr	r1, [r7, #24]
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f001 f8f4 	bl	8011560 <dhcp_create_msg>
 8010378:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d035      	beq.n	80103ec <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	685b      	ldr	r3, [r3, #4]
 8010384:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010386:	89b8      	ldrh	r0, [r7, #12]
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801038e:	2304      	movs	r3, #4
 8010390:	2232      	movs	r2, #50	; 0x32
 8010392:	f000 fc73 	bl	8010c7c <dhcp_option>
 8010396:	4603      	mov	r3, r0
 8010398:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801039a:	89bc      	ldrh	r4, [r7, #12]
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80103a2:	69bb      	ldr	r3, [r7, #24]
 80103a4:	69db      	ldr	r3, [r3, #28]
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7f6 ff41 	bl	800722e <lwip_htonl>
 80103ac:	4603      	mov	r3, r0
 80103ae:	461a      	mov	r2, r3
 80103b0:	4629      	mov	r1, r5
 80103b2:	4620      	mov	r0, r4
 80103b4:	f000 fcee 	bl	8010d94 <dhcp_option_long>
 80103b8:	4603      	mov	r3, r0
 80103ba:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80103bc:	89b8      	ldrh	r0, [r7, #12]
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	33f0      	adds	r3, #240	; 0xf0
 80103c2:	697a      	ldr	r2, [r7, #20]
 80103c4:	4619      	mov	r1, r3
 80103c6:	f001 f9a1 	bl	801170c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80103ca:	4b19      	ldr	r3, [pc, #100]	; (8010430 <dhcp_decline+0xdc>)
 80103cc:	6818      	ldr	r0, [r3, #0]
 80103ce:	4b19      	ldr	r3, [pc, #100]	; (8010434 <dhcp_decline+0xe0>)
 80103d0:	9301      	str	r3, [sp, #4]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	9300      	str	r3, [sp, #0]
 80103d6:	2343      	movs	r3, #67	; 0x43
 80103d8:	4a17      	ldr	r2, [pc, #92]	; (8010438 <dhcp_decline+0xe4>)
 80103da:	6979      	ldr	r1, [r7, #20]
 80103dc:	f7ff f90e 	bl	800f5fc <udp_sendto_if_src>
 80103e0:	4603      	mov	r3, r0
 80103e2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80103e4:	6978      	ldr	r0, [r7, #20]
 80103e6:	f7f8 f9f1 	bl	80087cc <pbuf_free>
 80103ea:	e001      	b.n	80103f0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80103ec:	23ff      	movs	r3, #255	; 0xff
 80103ee:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80103f0:	69bb      	ldr	r3, [r7, #24]
 80103f2:	799b      	ldrb	r3, [r3, #6]
 80103f4:	2bff      	cmp	r3, #255	; 0xff
 80103f6:	d005      	beq.n	8010404 <dhcp_decline+0xb0>
    dhcp->tries++;
 80103f8:	69bb      	ldr	r3, [r7, #24]
 80103fa:	799b      	ldrb	r3, [r3, #6]
 80103fc:	3301      	adds	r3, #1
 80103fe:	b2da      	uxtb	r2, r3
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8010404:	f242 7310 	movw	r3, #10000	; 0x2710
 8010408:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801040a:	89fb      	ldrh	r3, [r7, #14]
 801040c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010410:	4a0a      	ldr	r2, [pc, #40]	; (801043c <dhcp_decline+0xe8>)
 8010412:	fb82 1203 	smull	r1, r2, r2, r3
 8010416:	1152      	asrs	r2, r2, #5
 8010418:	17db      	asrs	r3, r3, #31
 801041a:	1ad3      	subs	r3, r2, r3
 801041c:	b29a      	uxth	r2, r3
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010422:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010426:	4618      	mov	r0, r3
 8010428:	3720      	adds	r7, #32
 801042a:	46bd      	mov	sp, r7
 801042c:	bdb0      	pop	{r4, r5, r7, pc}
 801042e:	bf00      	nop
 8010430:	20000110 	.word	0x20000110
 8010434:	08018640 	.word	0x08018640
 8010438:	08018644 	.word	0x08018644
 801043c:	10624dd3 	.word	0x10624dd3

08010440 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b08a      	sub	sp, #40	; 0x28
 8010444:	af02      	add	r7, sp, #8
 8010446:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801044c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801044e:	2300      	movs	r3, #0
 8010450:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8010452:	69bb      	ldr	r3, [r7, #24]
 8010454:	2200      	movs	r2, #0
 8010456:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8010458:	2106      	movs	r1, #6
 801045a:	69b8      	ldr	r0, [r7, #24]
 801045c:	f000 fbf4 	bl	8010c48 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8010460:	f107 0308 	add.w	r3, r7, #8
 8010464:	2201      	movs	r2, #1
 8010466:	69b9      	ldr	r1, [r7, #24]
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f001 f879 	bl	8011560 <dhcp_create_msg>
 801046e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d04b      	beq.n	801050e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801047c:	8938      	ldrh	r0, [r7, #8]
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010484:	2302      	movs	r3, #2
 8010486:	2239      	movs	r2, #57	; 0x39
 8010488:	f000 fbf8 	bl	8010c7c <dhcp_option>
 801048c:	4603      	mov	r3, r0
 801048e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010490:	8938      	ldrh	r0, [r7, #8]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801049c:	461a      	mov	r2, r3
 801049e:	f000 fc47 	bl	8010d30 <dhcp_option_short>
 80104a2:	4603      	mov	r3, r0
 80104a4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80104a6:	8938      	ldrh	r0, [r7, #8]
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80104ae:	2303      	movs	r3, #3
 80104b0:	2237      	movs	r2, #55	; 0x37
 80104b2:	f000 fbe3 	bl	8010c7c <dhcp_option>
 80104b6:	4603      	mov	r3, r0
 80104b8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80104ba:	2300      	movs	r3, #0
 80104bc:	77fb      	strb	r3, [r7, #31]
 80104be:	e00e      	b.n	80104de <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80104c0:	8938      	ldrh	r0, [r7, #8]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80104c8:	7ffb      	ldrb	r3, [r7, #31]
 80104ca:	4a29      	ldr	r2, [pc, #164]	; (8010570 <dhcp_discover+0x130>)
 80104cc:	5cd3      	ldrb	r3, [r2, r3]
 80104ce:	461a      	mov	r2, r3
 80104d0:	f000 fc08 	bl	8010ce4 <dhcp_option_byte>
 80104d4:	4603      	mov	r3, r0
 80104d6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80104d8:	7ffb      	ldrb	r3, [r7, #31]
 80104da:	3301      	adds	r3, #1
 80104dc:	77fb      	strb	r3, [r7, #31]
 80104de:	7ffb      	ldrb	r3, [r7, #31]
 80104e0:	2b02      	cmp	r3, #2
 80104e2:	d9ed      	bls.n	80104c0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80104e4:	8938      	ldrh	r0, [r7, #8]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	33f0      	adds	r3, #240	; 0xf0
 80104ea:	693a      	ldr	r2, [r7, #16]
 80104ec:	4619      	mov	r1, r3
 80104ee:	f001 f90d 	bl	801170c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80104f2:	4b20      	ldr	r3, [pc, #128]	; (8010574 <dhcp_discover+0x134>)
 80104f4:	6818      	ldr	r0, [r3, #0]
 80104f6:	4b20      	ldr	r3, [pc, #128]	; (8010578 <dhcp_discover+0x138>)
 80104f8:	9301      	str	r3, [sp, #4]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	2343      	movs	r3, #67	; 0x43
 8010500:	4a1e      	ldr	r2, [pc, #120]	; (801057c <dhcp_discover+0x13c>)
 8010502:	6939      	ldr	r1, [r7, #16]
 8010504:	f7ff f87a 	bl	800f5fc <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8010508:	6938      	ldr	r0, [r7, #16]
 801050a:	f7f8 f95f 	bl	80087cc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801050e:	69bb      	ldr	r3, [r7, #24]
 8010510:	799b      	ldrb	r3, [r3, #6]
 8010512:	2bff      	cmp	r3, #255	; 0xff
 8010514:	d005      	beq.n	8010522 <dhcp_discover+0xe2>
    dhcp->tries++;
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	799b      	ldrb	r3, [r3, #6]
 801051a:	3301      	adds	r3, #1
 801051c:	b2da      	uxtb	r2, r3
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010522:	69bb      	ldr	r3, [r7, #24]
 8010524:	799b      	ldrb	r3, [r3, #6]
 8010526:	2b05      	cmp	r3, #5
 8010528:	d80d      	bhi.n	8010546 <dhcp_discover+0x106>
 801052a:	69bb      	ldr	r3, [r7, #24]
 801052c:	799b      	ldrb	r3, [r3, #6]
 801052e:	461a      	mov	r2, r3
 8010530:	2301      	movs	r3, #1
 8010532:	4093      	lsls	r3, r2
 8010534:	b29b      	uxth	r3, r3
 8010536:	461a      	mov	r2, r3
 8010538:	0152      	lsls	r2, r2, #5
 801053a:	1ad2      	subs	r2, r2, r3
 801053c:	0092      	lsls	r2, r2, #2
 801053e:	4413      	add	r3, r2
 8010540:	00db      	lsls	r3, r3, #3
 8010542:	b29b      	uxth	r3, r3
 8010544:	e001      	b.n	801054a <dhcp_discover+0x10a>
 8010546:	f64e 2360 	movw	r3, #60000	; 0xea60
 801054a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801054c:	897b      	ldrh	r3, [r7, #10]
 801054e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010552:	4a0b      	ldr	r2, [pc, #44]	; (8010580 <dhcp_discover+0x140>)
 8010554:	fb82 1203 	smull	r1, r2, r2, r3
 8010558:	1152      	asrs	r2, r2, #5
 801055a:	17db      	asrs	r3, r3, #31
 801055c:	1ad3      	subs	r3, r2, r3
 801055e:	b29a      	uxth	r2, r3
 8010560:	69bb      	ldr	r3, [r7, #24]
 8010562:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010564:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010568:	4618      	mov	r0, r3
 801056a:	3720      	adds	r7, #32
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	20000014 	.word	0x20000014
 8010574:	20000110 	.word	0x20000110
 8010578:	08018640 	.word	0x08018640
 801057c:	08018644 	.word	0x08018644
 8010580:	10624dd3 	.word	0x10624dd3

08010584 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b088      	sub	sp, #32
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d107      	bne.n	80105a2 <dhcp_bind+0x1e>
 8010592:	4b64      	ldr	r3, [pc, #400]	; (8010724 <dhcp_bind+0x1a0>)
 8010594:	f240 4215 	movw	r2, #1045	; 0x415
 8010598:	4963      	ldr	r1, [pc, #396]	; (8010728 <dhcp_bind+0x1a4>)
 801059a:	4864      	ldr	r0, [pc, #400]	; (801072c <dhcp_bind+0x1a8>)
 801059c:	f003 fc34 	bl	8013e08 <iprintf>
 80105a0:	e0bc      	b.n	801071c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d107      	bne.n	80105be <dhcp_bind+0x3a>
 80105ae:	4b5d      	ldr	r3, [pc, #372]	; (8010724 <dhcp_bind+0x1a0>)
 80105b0:	f240 4217 	movw	r2, #1047	; 0x417
 80105b4:	495e      	ldr	r1, [pc, #376]	; (8010730 <dhcp_bind+0x1ac>)
 80105b6:	485d      	ldr	r0, [pc, #372]	; (801072c <dhcp_bind+0x1a8>)
 80105b8:	f003 fc26 	bl	8013e08 <iprintf>
 80105bc:	e0ae      	b.n	801071c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	2200      	movs	r2, #0
 80105c2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80105c4:	69bb      	ldr	r3, [r7, #24]
 80105c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105cc:	d019      	beq.n	8010602 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105d2:	331e      	adds	r3, #30
 80105d4:	4a57      	ldr	r2, [pc, #348]	; (8010734 <dhcp_bind+0x1b0>)
 80105d6:	fba2 2303 	umull	r2, r3, r2, r3
 80105da:	095b      	lsrs	r3, r3, #5
 80105dc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80105de:	69fb      	ldr	r3, [r7, #28]
 80105e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105e4:	d302      	bcc.n	80105ec <dhcp_bind+0x68>
      timeout = 0xffff;
 80105e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105ea:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	69bb      	ldr	r3, [r7, #24]
 80105f2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80105f4:	69bb      	ldr	r3, [r7, #24]
 80105f6:	8a9b      	ldrh	r3, [r3, #20]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d102      	bne.n	8010602 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80105fc:	69bb      	ldr	r3, [r7, #24]
 80105fe:	2201      	movs	r2, #1
 8010600:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8010602:	69bb      	ldr	r3, [r7, #24]
 8010604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010606:	f1b3 3fff 	cmp.w	r3, #4294967295
 801060a:	d01d      	beq.n	8010648 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010610:	331e      	adds	r3, #30
 8010612:	4a48      	ldr	r2, [pc, #288]	; (8010734 <dhcp_bind+0x1b0>)
 8010614:	fba2 2303 	umull	r2, r3, r2, r3
 8010618:	095b      	lsrs	r3, r3, #5
 801061a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010622:	d302      	bcc.n	801062a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8010624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010628:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	b29a      	uxth	r2, r3
 801062e:	69bb      	ldr	r3, [r7, #24]
 8010630:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	895b      	ldrh	r3, [r3, #10]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d102      	bne.n	8010640 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	2201      	movs	r2, #1
 801063e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8010640:	69bb      	ldr	r3, [r7, #24]
 8010642:	895a      	ldrh	r2, [r3, #10]
 8010644:	69bb      	ldr	r3, [r7, #24]
 8010646:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801064c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010650:	d01d      	beq.n	801068e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010656:	331e      	adds	r3, #30
 8010658:	4a36      	ldr	r2, [pc, #216]	; (8010734 <dhcp_bind+0x1b0>)
 801065a:	fba2 2303 	umull	r2, r3, r2, r3
 801065e:	095b      	lsrs	r3, r3, #5
 8010660:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010662:	69fb      	ldr	r3, [r7, #28]
 8010664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010668:	d302      	bcc.n	8010670 <dhcp_bind+0xec>
      timeout = 0xffff;
 801066a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801066e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	b29a      	uxth	r2, r3
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8010678:	69bb      	ldr	r3, [r7, #24]
 801067a:	899b      	ldrh	r3, [r3, #12]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d102      	bne.n	8010686 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8010680:	69bb      	ldr	r3, [r7, #24]
 8010682:	2201      	movs	r2, #1
 8010684:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8010686:	69bb      	ldr	r3, [r7, #24]
 8010688:	899a      	ldrh	r2, [r3, #12]
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801068e:	69bb      	ldr	r3, [r7, #24]
 8010690:	895a      	ldrh	r2, [r3, #10]
 8010692:	69bb      	ldr	r3, [r7, #24]
 8010694:	899b      	ldrh	r3, [r3, #12]
 8010696:	429a      	cmp	r2, r3
 8010698:	d306      	bcc.n	80106a8 <dhcp_bind+0x124>
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	899b      	ldrh	r3, [r3, #12]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d002      	beq.n	80106a8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80106a2:	69bb      	ldr	r3, [r7, #24]
 80106a4:	2200      	movs	r2, #0
 80106a6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80106a8:	69bb      	ldr	r3, [r7, #24]
 80106aa:	79db      	ldrb	r3, [r3, #7]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d003      	beq.n	80106b8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80106b0:	69bb      	ldr	r3, [r7, #24]
 80106b2:	6a1b      	ldr	r3, [r3, #32]
 80106b4:	613b      	str	r3, [r7, #16]
 80106b6:	e014      	b.n	80106e2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	331c      	adds	r3, #28
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80106c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	db02      	blt.n	80106ce <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80106c8:	23ff      	movs	r3, #255	; 0xff
 80106ca:	613b      	str	r3, [r7, #16]
 80106cc:	e009      	b.n	80106e2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80106ce:	7dfb      	ldrb	r3, [r7, #23]
 80106d0:	2bbf      	cmp	r3, #191	; 0xbf
 80106d2:	d903      	bls.n	80106dc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80106d4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80106d8:	613b      	str	r3, [r7, #16]
 80106da:	e002      	b.n	80106e2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80106dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80106e0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80106e2:	69bb      	ldr	r3, [r7, #24]
 80106e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d108      	bne.n	8010700 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80106ee:	69bb      	ldr	r3, [r7, #24]
 80106f0:	69da      	ldr	r2, [r3, #28]
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	4013      	ands	r3, r2
 80106f6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80106fe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8010700:	210a      	movs	r1, #10
 8010702:	69b8      	ldr	r0, [r7, #24]
 8010704:	f000 faa0 	bl	8010c48 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8010708:	69bb      	ldr	r3, [r7, #24]
 801070a:	f103 011c 	add.w	r1, r3, #28
 801070e:	f107 030c 	add.w	r3, r7, #12
 8010712:	f107 0210 	add.w	r2, r7, #16
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f7f7 fbe0 	bl	8007edc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801071c:	3720      	adds	r7, #32
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
 8010722:	bf00      	nop
 8010724:	08017aec 	.word	0x08017aec
 8010728:	08017c4c 	.word	0x08017c4c
 801072c:	08017b4c 	.word	0x08017b4c
 8010730:	08017c68 	.word	0x08017c68
 8010734:	88888889 	.word	0x88888889

08010738 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b08a      	sub	sp, #40	; 0x28
 801073c:	af02      	add	r7, sp, #8
 801073e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010744:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8010746:	2105      	movs	r1, #5
 8010748:	69b8      	ldr	r0, [r7, #24]
 801074a:	f000 fa7d 	bl	8010c48 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801074e:	f107 030c 	add.w	r3, r7, #12
 8010752:	2203      	movs	r2, #3
 8010754:	69b9      	ldr	r1, [r7, #24]
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f000 ff02 	bl	8011560 <dhcp_create_msg>
 801075c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d04e      	beq.n	8010802 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801076a:	89b8      	ldrh	r0, [r7, #12]
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010772:	2302      	movs	r3, #2
 8010774:	2239      	movs	r2, #57	; 0x39
 8010776:	f000 fa81 	bl	8010c7c <dhcp_option>
 801077a:	4603      	mov	r3, r0
 801077c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801077e:	89b8      	ldrh	r0, [r7, #12]
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801078a:	461a      	mov	r2, r3
 801078c:	f000 fad0 	bl	8010d30 <dhcp_option_short>
 8010790:	4603      	mov	r3, r0
 8010792:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010794:	89b8      	ldrh	r0, [r7, #12]
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801079c:	2303      	movs	r3, #3
 801079e:	2237      	movs	r2, #55	; 0x37
 80107a0:	f000 fa6c 	bl	8010c7c <dhcp_option>
 80107a4:	4603      	mov	r3, r0
 80107a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107a8:	2300      	movs	r3, #0
 80107aa:	77bb      	strb	r3, [r7, #30]
 80107ac:	e00e      	b.n	80107cc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80107ae:	89b8      	ldrh	r0, [r7, #12]
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80107b6:	7fbb      	ldrb	r3, [r7, #30]
 80107b8:	4a2a      	ldr	r2, [pc, #168]	; (8010864 <dhcp_renew+0x12c>)
 80107ba:	5cd3      	ldrb	r3, [r2, r3]
 80107bc:	461a      	mov	r2, r3
 80107be:	f000 fa91 	bl	8010ce4 <dhcp_option_byte>
 80107c2:	4603      	mov	r3, r0
 80107c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107c6:	7fbb      	ldrb	r3, [r7, #30]
 80107c8:	3301      	adds	r3, #1
 80107ca:	77bb      	strb	r3, [r7, #30]
 80107cc:	7fbb      	ldrb	r3, [r7, #30]
 80107ce:	2b02      	cmp	r3, #2
 80107d0:	d9ed      	bls.n	80107ae <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80107d2:	89b8      	ldrh	r0, [r7, #12]
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	33f0      	adds	r3, #240	; 0xf0
 80107d8:	697a      	ldr	r2, [r7, #20]
 80107da:	4619      	mov	r1, r3
 80107dc:	f000 ff96 	bl	801170c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80107e0:	4b21      	ldr	r3, [pc, #132]	; (8010868 <dhcp_renew+0x130>)
 80107e2:	6818      	ldr	r0, [r3, #0]
 80107e4:	69bb      	ldr	r3, [r7, #24]
 80107e6:	f103 0218 	add.w	r2, r3, #24
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	9300      	str	r3, [sp, #0]
 80107ee:	2343      	movs	r3, #67	; 0x43
 80107f0:	6979      	ldr	r1, [r7, #20]
 80107f2:	f7fe fe8f 	bl	800f514 <udp_sendto_if>
 80107f6:	4603      	mov	r3, r0
 80107f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80107fa:	6978      	ldr	r0, [r7, #20]
 80107fc:	f7f7 ffe6 	bl	80087cc <pbuf_free>
 8010800:	e001      	b.n	8010806 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010802:	23ff      	movs	r3, #255	; 0xff
 8010804:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010806:	69bb      	ldr	r3, [r7, #24]
 8010808:	799b      	ldrb	r3, [r3, #6]
 801080a:	2bff      	cmp	r3, #255	; 0xff
 801080c:	d005      	beq.n	801081a <dhcp_renew+0xe2>
    dhcp->tries++;
 801080e:	69bb      	ldr	r3, [r7, #24]
 8010810:	799b      	ldrb	r3, [r3, #6]
 8010812:	3301      	adds	r3, #1
 8010814:	b2da      	uxtb	r2, r3
 8010816:	69bb      	ldr	r3, [r7, #24]
 8010818:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	799b      	ldrb	r3, [r3, #6]
 801081e:	2b09      	cmp	r3, #9
 8010820:	d80a      	bhi.n	8010838 <dhcp_renew+0x100>
 8010822:	69bb      	ldr	r3, [r7, #24]
 8010824:	799b      	ldrb	r3, [r3, #6]
 8010826:	b29b      	uxth	r3, r3
 8010828:	461a      	mov	r2, r3
 801082a:	0152      	lsls	r2, r2, #5
 801082c:	1ad2      	subs	r2, r2, r3
 801082e:	0092      	lsls	r2, r2, #2
 8010830:	4413      	add	r3, r2
 8010832:	011b      	lsls	r3, r3, #4
 8010834:	b29b      	uxth	r3, r3
 8010836:	e001      	b.n	801083c <dhcp_renew+0x104>
 8010838:	f644 6320 	movw	r3, #20000	; 0x4e20
 801083c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801083e:	89fb      	ldrh	r3, [r7, #14]
 8010840:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010844:	4a09      	ldr	r2, [pc, #36]	; (801086c <dhcp_renew+0x134>)
 8010846:	fb82 1203 	smull	r1, r2, r2, r3
 801084a:	1152      	asrs	r2, r2, #5
 801084c:	17db      	asrs	r3, r3, #31
 801084e:	1ad3      	subs	r3, r2, r3
 8010850:	b29a      	uxth	r2, r3
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010856:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801085a:	4618      	mov	r0, r3
 801085c:	3720      	adds	r7, #32
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	20000014 	.word	0x20000014
 8010868:	20000110 	.word	0x20000110
 801086c:	10624dd3 	.word	0x10624dd3

08010870 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b08a      	sub	sp, #40	; 0x28
 8010874:	af02      	add	r7, sp, #8
 8010876:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801087c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801087e:	2104      	movs	r1, #4
 8010880:	69b8      	ldr	r0, [r7, #24]
 8010882:	f000 f9e1 	bl	8010c48 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010886:	f107 030c 	add.w	r3, r7, #12
 801088a:	2203      	movs	r2, #3
 801088c:	69b9      	ldr	r1, [r7, #24]
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 fe66 	bl	8011560 <dhcp_create_msg>
 8010894:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d04c      	beq.n	8010936 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	685b      	ldr	r3, [r3, #4]
 80108a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80108a2:	89b8      	ldrh	r0, [r7, #12]
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108aa:	2302      	movs	r3, #2
 80108ac:	2239      	movs	r2, #57	; 0x39
 80108ae:	f000 f9e5 	bl	8010c7c <dhcp_option>
 80108b2:	4603      	mov	r3, r0
 80108b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80108b6:	89b8      	ldrh	r0, [r7, #12]
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80108c2:	461a      	mov	r2, r3
 80108c4:	f000 fa34 	bl	8010d30 <dhcp_option_short>
 80108c8:	4603      	mov	r3, r0
 80108ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80108cc:	89b8      	ldrh	r0, [r7, #12]
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108d4:	2303      	movs	r3, #3
 80108d6:	2237      	movs	r2, #55	; 0x37
 80108d8:	f000 f9d0 	bl	8010c7c <dhcp_option>
 80108dc:	4603      	mov	r3, r0
 80108de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80108e0:	2300      	movs	r3, #0
 80108e2:	77bb      	strb	r3, [r7, #30]
 80108e4:	e00e      	b.n	8010904 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80108e6:	89b8      	ldrh	r0, [r7, #12]
 80108e8:	693b      	ldr	r3, [r7, #16]
 80108ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108ee:	7fbb      	ldrb	r3, [r7, #30]
 80108f0:	4a29      	ldr	r2, [pc, #164]	; (8010998 <dhcp_rebind+0x128>)
 80108f2:	5cd3      	ldrb	r3, [r2, r3]
 80108f4:	461a      	mov	r2, r3
 80108f6:	f000 f9f5 	bl	8010ce4 <dhcp_option_byte>
 80108fa:	4603      	mov	r3, r0
 80108fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80108fe:	7fbb      	ldrb	r3, [r7, #30]
 8010900:	3301      	adds	r3, #1
 8010902:	77bb      	strb	r3, [r7, #30]
 8010904:	7fbb      	ldrb	r3, [r7, #30]
 8010906:	2b02      	cmp	r3, #2
 8010908:	d9ed      	bls.n	80108e6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801090a:	89b8      	ldrh	r0, [r7, #12]
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	33f0      	adds	r3, #240	; 0xf0
 8010910:	697a      	ldr	r2, [r7, #20]
 8010912:	4619      	mov	r1, r3
 8010914:	f000 fefa 	bl	801170c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010918:	4b20      	ldr	r3, [pc, #128]	; (801099c <dhcp_rebind+0x12c>)
 801091a:	6818      	ldr	r0, [r3, #0]
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	9300      	str	r3, [sp, #0]
 8010920:	2343      	movs	r3, #67	; 0x43
 8010922:	4a1f      	ldr	r2, [pc, #124]	; (80109a0 <dhcp_rebind+0x130>)
 8010924:	6979      	ldr	r1, [r7, #20]
 8010926:	f7fe fdf5 	bl	800f514 <udp_sendto_if>
 801092a:	4603      	mov	r3, r0
 801092c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801092e:	6978      	ldr	r0, [r7, #20]
 8010930:	f7f7 ff4c 	bl	80087cc <pbuf_free>
 8010934:	e001      	b.n	801093a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010936:	23ff      	movs	r3, #255	; 0xff
 8010938:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	799b      	ldrb	r3, [r3, #6]
 801093e:	2bff      	cmp	r3, #255	; 0xff
 8010940:	d005      	beq.n	801094e <dhcp_rebind+0xde>
    dhcp->tries++;
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	799b      	ldrb	r3, [r3, #6]
 8010946:	3301      	adds	r3, #1
 8010948:	b2da      	uxtb	r2, r3
 801094a:	69bb      	ldr	r3, [r7, #24]
 801094c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801094e:	69bb      	ldr	r3, [r7, #24]
 8010950:	799b      	ldrb	r3, [r3, #6]
 8010952:	2b09      	cmp	r3, #9
 8010954:	d80a      	bhi.n	801096c <dhcp_rebind+0xfc>
 8010956:	69bb      	ldr	r3, [r7, #24]
 8010958:	799b      	ldrb	r3, [r3, #6]
 801095a:	b29b      	uxth	r3, r3
 801095c:	461a      	mov	r2, r3
 801095e:	0152      	lsls	r2, r2, #5
 8010960:	1ad2      	subs	r2, r2, r3
 8010962:	0092      	lsls	r2, r2, #2
 8010964:	4413      	add	r3, r2
 8010966:	00db      	lsls	r3, r3, #3
 8010968:	b29b      	uxth	r3, r3
 801096a:	e001      	b.n	8010970 <dhcp_rebind+0x100>
 801096c:	f242 7310 	movw	r3, #10000	; 0x2710
 8010970:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010972:	89fb      	ldrh	r3, [r7, #14]
 8010974:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010978:	4a0a      	ldr	r2, [pc, #40]	; (80109a4 <dhcp_rebind+0x134>)
 801097a:	fb82 1203 	smull	r1, r2, r2, r3
 801097e:	1152      	asrs	r2, r2, #5
 8010980:	17db      	asrs	r3, r3, #31
 8010982:	1ad3      	subs	r3, r2, r3
 8010984:	b29a      	uxth	r2, r3
 8010986:	69bb      	ldr	r3, [r7, #24]
 8010988:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801098a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801098e:	4618      	mov	r0, r3
 8010990:	3720      	adds	r7, #32
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	20000014 	.word	0x20000014
 801099c:	20000110 	.word	0x20000110
 80109a0:	08018644 	.word	0x08018644
 80109a4:	10624dd3 	.word	0x10624dd3

080109a8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80109a8:	b5b0      	push	{r4, r5, r7, lr}
 80109aa:	b08a      	sub	sp, #40	; 0x28
 80109ac:	af02      	add	r7, sp, #8
 80109ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109b4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80109b6:	2103      	movs	r1, #3
 80109b8:	69b8      	ldr	r0, [r7, #24]
 80109ba:	f000 f945 	bl	8010c48 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80109be:	f107 030c 	add.w	r3, r7, #12
 80109c2:	2203      	movs	r2, #3
 80109c4:	69b9      	ldr	r1, [r7, #24]
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f000 fdca 	bl	8011560 <dhcp_create_msg>
 80109cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d066      	beq.n	8010aa2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80109da:	89b8      	ldrh	r0, [r7, #12]
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80109e2:	2302      	movs	r3, #2
 80109e4:	2239      	movs	r2, #57	; 0x39
 80109e6:	f000 f949 	bl	8010c7c <dhcp_option>
 80109ea:	4603      	mov	r3, r0
 80109ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80109ee:	89b8      	ldrh	r0, [r7, #12]
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	33f0      	adds	r3, #240	; 0xf0
 80109f4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80109f8:	4619      	mov	r1, r3
 80109fa:	f000 f999 	bl	8010d30 <dhcp_option_short>
 80109fe:	4603      	mov	r3, r0
 8010a00:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010a02:	89b8      	ldrh	r0, [r7, #12]
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a0a:	2304      	movs	r3, #4
 8010a0c:	2232      	movs	r2, #50	; 0x32
 8010a0e:	f000 f935 	bl	8010c7c <dhcp_option>
 8010a12:	4603      	mov	r3, r0
 8010a14:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010a16:	89bc      	ldrh	r4, [r7, #12]
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	69db      	ldr	r3, [r3, #28]
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7f6 fc03 	bl	800722e <lwip_htonl>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f000 f9b0 	bl	8010d94 <dhcp_option_long>
 8010a34:	4603      	mov	r3, r0
 8010a36:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010a38:	89b8      	ldrh	r0, [r7, #12]
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a40:	2303      	movs	r3, #3
 8010a42:	2237      	movs	r2, #55	; 0x37
 8010a44:	f000 f91a 	bl	8010c7c <dhcp_option>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	77bb      	strb	r3, [r7, #30]
 8010a50:	e00e      	b.n	8010a70 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010a52:	89b8      	ldrh	r0, [r7, #12]
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a5a:	7fbb      	ldrb	r3, [r7, #30]
 8010a5c:	4a29      	ldr	r2, [pc, #164]	; (8010b04 <dhcp_reboot+0x15c>)
 8010a5e:	5cd3      	ldrb	r3, [r2, r3]
 8010a60:	461a      	mov	r2, r3
 8010a62:	f000 f93f 	bl	8010ce4 <dhcp_option_byte>
 8010a66:	4603      	mov	r3, r0
 8010a68:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010a6a:	7fbb      	ldrb	r3, [r7, #30]
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	77bb      	strb	r3, [r7, #30]
 8010a70:	7fbb      	ldrb	r3, [r7, #30]
 8010a72:	2b02      	cmp	r3, #2
 8010a74:	d9ed      	bls.n	8010a52 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010a76:	89b8      	ldrh	r0, [r7, #12]
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	33f0      	adds	r3, #240	; 0xf0
 8010a7c:	697a      	ldr	r2, [r7, #20]
 8010a7e:	4619      	mov	r1, r3
 8010a80:	f000 fe44 	bl	801170c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010a84:	4b20      	ldr	r3, [pc, #128]	; (8010b08 <dhcp_reboot+0x160>)
 8010a86:	6818      	ldr	r0, [r3, #0]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	9300      	str	r3, [sp, #0]
 8010a8c:	2343      	movs	r3, #67	; 0x43
 8010a8e:	4a1f      	ldr	r2, [pc, #124]	; (8010b0c <dhcp_reboot+0x164>)
 8010a90:	6979      	ldr	r1, [r7, #20]
 8010a92:	f7fe fd3f 	bl	800f514 <udp_sendto_if>
 8010a96:	4603      	mov	r3, r0
 8010a98:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010a9a:	6978      	ldr	r0, [r7, #20]
 8010a9c:	f7f7 fe96 	bl	80087cc <pbuf_free>
 8010aa0:	e001      	b.n	8010aa6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010aa2:	23ff      	movs	r3, #255	; 0xff
 8010aa4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010aa6:	69bb      	ldr	r3, [r7, #24]
 8010aa8:	799b      	ldrb	r3, [r3, #6]
 8010aaa:	2bff      	cmp	r3, #255	; 0xff
 8010aac:	d005      	beq.n	8010aba <dhcp_reboot+0x112>
    dhcp->tries++;
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	799b      	ldrb	r3, [r3, #6]
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	b2da      	uxtb	r2, r3
 8010ab6:	69bb      	ldr	r3, [r7, #24]
 8010ab8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	799b      	ldrb	r3, [r3, #6]
 8010abe:	2b09      	cmp	r3, #9
 8010ac0:	d80a      	bhi.n	8010ad8 <dhcp_reboot+0x130>
 8010ac2:	69bb      	ldr	r3, [r7, #24]
 8010ac4:	799b      	ldrb	r3, [r3, #6]
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	461a      	mov	r2, r3
 8010aca:	0152      	lsls	r2, r2, #5
 8010acc:	1ad2      	subs	r2, r2, r3
 8010ace:	0092      	lsls	r2, r2, #2
 8010ad0:	4413      	add	r3, r2
 8010ad2:	00db      	lsls	r3, r3, #3
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	e001      	b.n	8010adc <dhcp_reboot+0x134>
 8010ad8:	f242 7310 	movw	r3, #10000	; 0x2710
 8010adc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010ade:	89fb      	ldrh	r3, [r7, #14]
 8010ae0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010ae4:	4a0a      	ldr	r2, [pc, #40]	; (8010b10 <dhcp_reboot+0x168>)
 8010ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8010aea:	1152      	asrs	r2, r2, #5
 8010aec:	17db      	asrs	r3, r3, #31
 8010aee:	1ad3      	subs	r3, r2, r3
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	69bb      	ldr	r3, [r7, #24]
 8010af4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010af6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3720      	adds	r7, #32
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bdb0      	pop	{r4, r5, r7, pc}
 8010b02:	bf00      	nop
 8010b04:	20000014 	.word	0x20000014
 8010b08:	20000110 	.word	0x20000110
 8010b0c:	08018644 	.word	0x08018644
 8010b10:	10624dd3 	.word	0x10624dd3

08010b14 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010b14:	b5b0      	push	{r4, r5, r7, lr}
 8010b16:	b08a      	sub	sp, #40	; 0x28
 8010b18:	af02      	add	r7, sp, #8
 8010b1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b20:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8010b22:	69fb      	ldr	r3, [r7, #28]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	f000 8084 	beq.w	8010c32 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	795b      	ldrb	r3, [r3, #5]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f000 8081 	beq.w	8010c36 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	699b      	ldr	r3, [r3, #24]
 8010b38:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010b3a:	69fb      	ldr	r3, [r7, #28]
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010b40:	69fb      	ldr	r3, [r7, #28]
 8010b42:	2200      	movs	r2, #0
 8010b44:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010b46:	69fb      	ldr	r3, [r7, #28]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	2200      	movs	r2, #0
 8010b50:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	2200      	movs	r2, #0
 8010b56:	631a      	str	r2, [r3, #48]	; 0x30
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	829a      	strh	r2, [r3, #20]
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	8a9a      	ldrh	r2, [r3, #20]
 8010b72:	69fb      	ldr	r3, [r7, #28]
 8010b74:	825a      	strh	r2, [r3, #18]
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	8a5a      	ldrh	r2, [r3, #18]
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	821a      	strh	r2, [r3, #16]
 8010b7e:	69fb      	ldr	r3, [r7, #28]
 8010b80:	8a1a      	ldrh	r2, [r3, #16]
 8010b82:	69fb      	ldr	r3, [r7, #28]
 8010b84:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 fdee 	bl	8011768 <dhcp_supplied_address>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d03b      	beq.n	8010c0a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010b92:	f107 030e 	add.w	r3, r7, #14
 8010b96:	2207      	movs	r2, #7
 8010b98:	69f9      	ldr	r1, [r7, #28]
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f000 fce0 	bl	8011560 <dhcp_create_msg>
 8010ba0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d030      	beq.n	8010c0a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010ba8:	69bb      	ldr	r3, [r7, #24]
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010bae:	89f8      	ldrh	r0, [r7, #14]
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010bb6:	2304      	movs	r3, #4
 8010bb8:	2236      	movs	r2, #54	; 0x36
 8010bba:	f000 f85f 	bl	8010c7c <dhcp_option>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010bc2:	89fc      	ldrh	r4, [r7, #14]
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7f6 fb2e 	bl	800722e <lwip_htonl>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	4629      	mov	r1, r5
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f000 f8db 	bl	8010d94 <dhcp_option_long>
 8010bde:	4603      	mov	r3, r0
 8010be0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010be2:	89f8      	ldrh	r0, [r7, #14]
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	33f0      	adds	r3, #240	; 0xf0
 8010be8:	69ba      	ldr	r2, [r7, #24]
 8010bea:	4619      	mov	r1, r3
 8010bec:	f000 fd8e 	bl	801170c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010bf0:	4b13      	ldr	r3, [pc, #76]	; (8010c40 <dhcp_release_and_stop+0x12c>)
 8010bf2:	6818      	ldr	r0, [r3, #0]
 8010bf4:	f107 0210 	add.w	r2, r7, #16
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	9300      	str	r3, [sp, #0]
 8010bfc:	2343      	movs	r3, #67	; 0x43
 8010bfe:	69b9      	ldr	r1, [r7, #24]
 8010c00:	f7fe fc88 	bl	800f514 <udp_sendto_if>
      pbuf_free(p_out);
 8010c04:	69b8      	ldr	r0, [r7, #24]
 8010c06:	f7f7 fde1 	bl	80087cc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010c0a:	4b0e      	ldr	r3, [pc, #56]	; (8010c44 <dhcp_release_and_stop+0x130>)
 8010c0c:	4a0d      	ldr	r2, [pc, #52]	; (8010c44 <dhcp_release_and_stop+0x130>)
 8010c0e:	490d      	ldr	r1, [pc, #52]	; (8010c44 <dhcp_release_and_stop+0x130>)
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f7f7 f963 	bl	8007edc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010c16:	2100      	movs	r1, #0
 8010c18:	69f8      	ldr	r0, [r7, #28]
 8010c1a:	f000 f815 	bl	8010c48 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010c1e:	69fb      	ldr	r3, [r7, #28]
 8010c20:	791b      	ldrb	r3, [r3, #4]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d008      	beq.n	8010c38 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010c26:	f7fe ffc1 	bl	800fbac <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	711a      	strb	r2, [r3, #4]
 8010c30:	e002      	b.n	8010c38 <dhcp_release_and_stop+0x124>
    return;
 8010c32:	bf00      	nop
 8010c34:	e000      	b.n	8010c38 <dhcp_release_and_stop+0x124>
    return;
 8010c36:	bf00      	nop
  }
}
 8010c38:	3720      	adds	r7, #32
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	20000110 	.word	0x20000110
 8010c44:	08018640 	.word	0x08018640

08010c48 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	460b      	mov	r3, r1
 8010c52:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	795b      	ldrb	r3, [r3, #5]
 8010c58:	78fa      	ldrb	r2, [r7, #3]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d008      	beq.n	8010c70 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	78fa      	ldrb	r2, [r7, #3]
 8010c62:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2200      	movs	r2, #0
 8010c68:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	811a      	strh	r2, [r3, #8]
  }
}
 8010c70:	bf00      	nop
 8010c72:	370c      	adds	r7, #12
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6039      	str	r1, [r7, #0]
 8010c84:	4611      	mov	r1, r2
 8010c86:	461a      	mov	r2, r3
 8010c88:	4603      	mov	r3, r0
 8010c8a:	80fb      	strh	r3, [r7, #6]
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	717b      	strb	r3, [r7, #5]
 8010c90:	4613      	mov	r3, r2
 8010c92:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010c94:	88fa      	ldrh	r2, [r7, #6]
 8010c96:	793b      	ldrb	r3, [r7, #4]
 8010c98:	4413      	add	r3, r2
 8010c9a:	3302      	adds	r3, #2
 8010c9c:	2b44      	cmp	r3, #68	; 0x44
 8010c9e:	d906      	bls.n	8010cae <dhcp_option+0x32>
 8010ca0:	4b0d      	ldr	r3, [pc, #52]	; (8010cd8 <dhcp_option+0x5c>)
 8010ca2:	f240 529a 	movw	r2, #1434	; 0x59a
 8010ca6:	490d      	ldr	r1, [pc, #52]	; (8010cdc <dhcp_option+0x60>)
 8010ca8:	480d      	ldr	r0, [pc, #52]	; (8010ce0 <dhcp_option+0x64>)
 8010caa:	f003 f8ad 	bl	8013e08 <iprintf>
  options[options_out_len++] = option_type;
 8010cae:	88fb      	ldrh	r3, [r7, #6]
 8010cb0:	1c5a      	adds	r2, r3, #1
 8010cb2:	80fa      	strh	r2, [r7, #6]
 8010cb4:	461a      	mov	r2, r3
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	4413      	add	r3, r2
 8010cba:	797a      	ldrb	r2, [r7, #5]
 8010cbc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010cbe:	88fb      	ldrh	r3, [r7, #6]
 8010cc0:	1c5a      	adds	r2, r3, #1
 8010cc2:	80fa      	strh	r2, [r7, #6]
 8010cc4:	461a      	mov	r2, r3
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	4413      	add	r3, r2
 8010cca:	793a      	ldrb	r2, [r7, #4]
 8010ccc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010cce:	88fb      	ldrh	r3, [r7, #6]
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3708      	adds	r7, #8
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	08017aec 	.word	0x08017aec
 8010cdc:	08017c80 	.word	0x08017c80
 8010ce0:	08017b4c 	.word	0x08017b4c

08010ce4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	4603      	mov	r3, r0
 8010cec:	6039      	str	r1, [r7, #0]
 8010cee:	80fb      	strh	r3, [r7, #6]
 8010cf0:	4613      	mov	r3, r2
 8010cf2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010cf4:	88fb      	ldrh	r3, [r7, #6]
 8010cf6:	2b43      	cmp	r3, #67	; 0x43
 8010cf8:	d906      	bls.n	8010d08 <dhcp_option_byte+0x24>
 8010cfa:	4b0a      	ldr	r3, [pc, #40]	; (8010d24 <dhcp_option_byte+0x40>)
 8010cfc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8010d00:	4909      	ldr	r1, [pc, #36]	; (8010d28 <dhcp_option_byte+0x44>)
 8010d02:	480a      	ldr	r0, [pc, #40]	; (8010d2c <dhcp_option_byte+0x48>)
 8010d04:	f003 f880 	bl	8013e08 <iprintf>
  options[options_out_len++] = value;
 8010d08:	88fb      	ldrh	r3, [r7, #6]
 8010d0a:	1c5a      	adds	r2, r3, #1
 8010d0c:	80fa      	strh	r2, [r7, #6]
 8010d0e:	461a      	mov	r2, r3
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	4413      	add	r3, r2
 8010d14:	797a      	ldrb	r2, [r7, #5]
 8010d16:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010d18:	88fb      	ldrh	r3, [r7, #6]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3708      	adds	r7, #8
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	bf00      	nop
 8010d24:	08017aec 	.word	0x08017aec
 8010d28:	08017cc4 	.word	0x08017cc4
 8010d2c:	08017b4c 	.word	0x08017b4c

08010d30 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	4603      	mov	r3, r0
 8010d38:	6039      	str	r1, [r7, #0]
 8010d3a:	80fb      	strh	r3, [r7, #6]
 8010d3c:	4613      	mov	r3, r2
 8010d3e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010d40:	88fb      	ldrh	r3, [r7, #6]
 8010d42:	3302      	adds	r3, #2
 8010d44:	2b44      	cmp	r3, #68	; 0x44
 8010d46:	d906      	bls.n	8010d56 <dhcp_option_short+0x26>
 8010d48:	4b0f      	ldr	r3, [pc, #60]	; (8010d88 <dhcp_option_short+0x58>)
 8010d4a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8010d4e:	490f      	ldr	r1, [pc, #60]	; (8010d8c <dhcp_option_short+0x5c>)
 8010d50:	480f      	ldr	r0, [pc, #60]	; (8010d90 <dhcp_option_short+0x60>)
 8010d52:	f003 f859 	bl	8013e08 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010d56:	88bb      	ldrh	r3, [r7, #4]
 8010d58:	0a1b      	lsrs	r3, r3, #8
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	88fb      	ldrh	r3, [r7, #6]
 8010d5e:	1c59      	adds	r1, r3, #1
 8010d60:	80f9      	strh	r1, [r7, #6]
 8010d62:	4619      	mov	r1, r3
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	440b      	add	r3, r1
 8010d68:	b2d2      	uxtb	r2, r2
 8010d6a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010d6c:	88fb      	ldrh	r3, [r7, #6]
 8010d6e:	1c5a      	adds	r2, r3, #1
 8010d70:	80fa      	strh	r2, [r7, #6]
 8010d72:	461a      	mov	r2, r3
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	4413      	add	r3, r2
 8010d78:	88ba      	ldrh	r2, [r7, #4]
 8010d7a:	b2d2      	uxtb	r2, r2
 8010d7c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010d7e:	88fb      	ldrh	r3, [r7, #6]
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	08017aec 	.word	0x08017aec
 8010d8c:	08017cfc 	.word	0x08017cfc
 8010d90:	08017b4c 	.word	0x08017b4c

08010d94 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	60b9      	str	r1, [r7, #8]
 8010d9e:	607a      	str	r2, [r7, #4]
 8010da0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010da2:	89fb      	ldrh	r3, [r7, #14]
 8010da4:	3304      	adds	r3, #4
 8010da6:	2b44      	cmp	r3, #68	; 0x44
 8010da8:	d906      	bls.n	8010db8 <dhcp_option_long+0x24>
 8010daa:	4b19      	ldr	r3, [pc, #100]	; (8010e10 <dhcp_option_long+0x7c>)
 8010dac:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8010db0:	4918      	ldr	r1, [pc, #96]	; (8010e14 <dhcp_option_long+0x80>)
 8010db2:	4819      	ldr	r0, [pc, #100]	; (8010e18 <dhcp_option_long+0x84>)
 8010db4:	f003 f828 	bl	8013e08 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	0e1a      	lsrs	r2, r3, #24
 8010dbc:	89fb      	ldrh	r3, [r7, #14]
 8010dbe:	1c59      	adds	r1, r3, #1
 8010dc0:	81f9      	strh	r1, [r7, #14]
 8010dc2:	4619      	mov	r1, r3
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	440b      	add	r3, r1
 8010dc8:	b2d2      	uxtb	r2, r2
 8010dca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	0c1a      	lsrs	r2, r3, #16
 8010dd0:	89fb      	ldrh	r3, [r7, #14]
 8010dd2:	1c59      	adds	r1, r3, #1
 8010dd4:	81f9      	strh	r1, [r7, #14]
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	440b      	add	r3, r1
 8010ddc:	b2d2      	uxtb	r2, r2
 8010dde:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	0a1a      	lsrs	r2, r3, #8
 8010de4:	89fb      	ldrh	r3, [r7, #14]
 8010de6:	1c59      	adds	r1, r3, #1
 8010de8:	81f9      	strh	r1, [r7, #14]
 8010dea:	4619      	mov	r1, r3
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	440b      	add	r3, r1
 8010df0:	b2d2      	uxtb	r2, r2
 8010df2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010df4:	89fb      	ldrh	r3, [r7, #14]
 8010df6:	1c5a      	adds	r2, r3, #1
 8010df8:	81fa      	strh	r2, [r7, #14]
 8010dfa:	461a      	mov	r2, r3
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	4413      	add	r3, r2
 8010e00:	687a      	ldr	r2, [r7, #4]
 8010e02:	b2d2      	uxtb	r2, r2
 8010e04:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010e06:	89fb      	ldrh	r3, [r7, #14]
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3710      	adds	r7, #16
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	08017aec 	.word	0x08017aec
 8010e14:	08017d38 	.word	0x08017d38
 8010e18:	08017b4c 	.word	0x08017b4c

08010e1c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b090      	sub	sp, #64	; 0x40
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010e26:	2300      	movs	r3, #0
 8010e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010e2e:	2208      	movs	r2, #8
 8010e30:	2100      	movs	r1, #0
 8010e32:	48be      	ldr	r0, [pc, #760]	; (801112c <dhcp_parse_reply+0x310>)
 8010e34:	f002 ffe0 	bl	8013df8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	895b      	ldrh	r3, [r3, #10]
 8010e3c:	2b2b      	cmp	r3, #43	; 0x2b
 8010e3e:	d802      	bhi.n	8010e46 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010e40:	f06f 0301 	mvn.w	r3, #1
 8010e44:	e2a8      	b.n	8011398 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010e4c:	23f0      	movs	r3, #240	; 0xf0
 8010e4e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	891b      	ldrh	r3, [r3, #8]
 8010e54:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010e5a:	e00c      	b.n	8010e76 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5e:	895b      	ldrh	r3, [r3, #10]
 8010e60:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010e62:	1ad3      	subs	r3, r2, r3
 8010e64:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e68:	895b      	ldrh	r3, [r3, #10]
 8010e6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010e6c:	1ad3      	subs	r3, r2, r3
 8010e6e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8010e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d004      	beq.n	8010e86 <dhcp_parse_reply+0x6a>
 8010e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7e:	895b      	ldrh	r3, [r3, #10]
 8010e80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d2ea      	bcs.n	8010e5c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d102      	bne.n	8010e92 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010e8c:	f06f 0301 	mvn.w	r3, #1
 8010e90:	e282      	b.n	8011398 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8010e92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010e94:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8010e96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010e98:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8010e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010ea0:	e23a      	b.n	8011318 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8010ea2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ea6:	4413      	add	r3, r2
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010eac:	2300      	movs	r3, #0
 8010eae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8010eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8010eb6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010eb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010eba:	3302      	adds	r3, #2
 8010ebc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010ebe:	8bfa      	ldrh	r2, [r7, #30]
 8010ec0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d202      	bcs.n	8010ecc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010ec6:	f06f 0301 	mvn.w	r3, #1
 8010eca:	e265      	b.n	8011398 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010ecc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ece:	3301      	adds	r3, #1
 8010ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ed2:	8952      	ldrh	r2, [r2, #10]
 8010ed4:	4293      	cmp	r3, r2
 8010ed6:	da07      	bge.n	8010ee8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010ed8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010eda:	3301      	adds	r3, #1
 8010edc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ede:	4413      	add	r3, r2
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ee6:	e00b      	b.n	8010f00 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d004      	beq.n	8010efa <dhcp_parse_reply+0xde>
 8010ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	e000      	b.n	8010efc <dhcp_parse_reply+0xe0>
 8010efa:	2300      	movs	r3, #0
 8010efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8010f08:	7dfb      	ldrb	r3, [r7, #23]
 8010f0a:	2b3b      	cmp	r3, #59	; 0x3b
 8010f0c:	f200 812d 	bhi.w	801116a <dhcp_parse_reply+0x34e>
 8010f10:	a201      	add	r2, pc, #4	; (adr r2, 8010f18 <dhcp_parse_reply+0xfc>)
 8010f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f16:	bf00      	nop
 8010f18:	08011009 	.word	0x08011009
 8010f1c:	08011019 	.word	0x08011019
 8010f20:	0801116b 	.word	0x0801116b
 8010f24:	0801103b 	.word	0x0801103b
 8010f28:	0801116b 	.word	0x0801116b
 8010f2c:	0801116b 	.word	0x0801116b
 8010f30:	0801116b 	.word	0x0801116b
 8010f34:	0801116b 	.word	0x0801116b
 8010f38:	0801116b 	.word	0x0801116b
 8010f3c:	0801116b 	.word	0x0801116b
 8010f40:	0801116b 	.word	0x0801116b
 8010f44:	0801116b 	.word	0x0801116b
 8010f48:	0801116b 	.word	0x0801116b
 8010f4c:	0801116b 	.word	0x0801116b
 8010f50:	0801116b 	.word	0x0801116b
 8010f54:	0801116b 	.word	0x0801116b
 8010f58:	0801116b 	.word	0x0801116b
 8010f5c:	0801116b 	.word	0x0801116b
 8010f60:	0801116b 	.word	0x0801116b
 8010f64:	0801116b 	.word	0x0801116b
 8010f68:	0801116b 	.word	0x0801116b
 8010f6c:	0801116b 	.word	0x0801116b
 8010f70:	0801116b 	.word	0x0801116b
 8010f74:	0801116b 	.word	0x0801116b
 8010f78:	0801116b 	.word	0x0801116b
 8010f7c:	0801116b 	.word	0x0801116b
 8010f80:	0801116b 	.word	0x0801116b
 8010f84:	0801116b 	.word	0x0801116b
 8010f88:	0801116b 	.word	0x0801116b
 8010f8c:	0801116b 	.word	0x0801116b
 8010f90:	0801116b 	.word	0x0801116b
 8010f94:	0801116b 	.word	0x0801116b
 8010f98:	0801116b 	.word	0x0801116b
 8010f9c:	0801116b 	.word	0x0801116b
 8010fa0:	0801116b 	.word	0x0801116b
 8010fa4:	0801116b 	.word	0x0801116b
 8010fa8:	0801116b 	.word	0x0801116b
 8010fac:	0801116b 	.word	0x0801116b
 8010fb0:	0801116b 	.word	0x0801116b
 8010fb4:	0801116b 	.word	0x0801116b
 8010fb8:	0801116b 	.word	0x0801116b
 8010fbc:	0801116b 	.word	0x0801116b
 8010fc0:	0801116b 	.word	0x0801116b
 8010fc4:	0801116b 	.word	0x0801116b
 8010fc8:	0801116b 	.word	0x0801116b
 8010fcc:	0801116b 	.word	0x0801116b
 8010fd0:	0801116b 	.word	0x0801116b
 8010fd4:	0801116b 	.word	0x0801116b
 8010fd8:	0801116b 	.word	0x0801116b
 8010fdc:	0801116b 	.word	0x0801116b
 8010fe0:	0801116b 	.word	0x0801116b
 8010fe4:	08011067 	.word	0x08011067
 8010fe8:	08011089 	.word	0x08011089
 8010fec:	080110c5 	.word	0x080110c5
 8010ff0:	080110e7 	.word	0x080110e7
 8010ff4:	0801116b 	.word	0x0801116b
 8010ff8:	0801116b 	.word	0x0801116b
 8010ffc:	0801116b 	.word	0x0801116b
 8011000:	08011109 	.word	0x08011109
 8011004:	08011149 	.word	0x08011149
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8011008:	2300      	movs	r3, #0
 801100a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801100e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011012:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8011016:	e0ac      	b.n	8011172 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801101c:	2b04      	cmp	r3, #4
 801101e:	d009      	beq.n	8011034 <dhcp_parse_reply+0x218>
 8011020:	4b43      	ldr	r3, [pc, #268]	; (8011130 <dhcp_parse_reply+0x314>)
 8011022:	f240 622e 	movw	r2, #1582	; 0x62e
 8011026:	4943      	ldr	r1, [pc, #268]	; (8011134 <dhcp_parse_reply+0x318>)
 8011028:	4843      	ldr	r0, [pc, #268]	; (8011138 <dhcp_parse_reply+0x31c>)
 801102a:	f002 feed 	bl	8013e08 <iprintf>
 801102e:	f06f 0305 	mvn.w	r3, #5
 8011032:	e1b1      	b.n	8011398 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8011034:	2306      	movs	r3, #6
 8011036:	623b      	str	r3, [r7, #32]
        break;
 8011038:	e09b      	b.n	8011172 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801103a:	2304      	movs	r3, #4
 801103c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8011040:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011044:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011048:	429a      	cmp	r2, r3
 801104a:	d209      	bcs.n	8011060 <dhcp_parse_reply+0x244>
 801104c:	4b38      	ldr	r3, [pc, #224]	; (8011130 <dhcp_parse_reply+0x314>)
 801104e:	f240 6233 	movw	r2, #1587	; 0x633
 8011052:	493a      	ldr	r1, [pc, #232]	; (801113c <dhcp_parse_reply+0x320>)
 8011054:	4838      	ldr	r0, [pc, #224]	; (8011138 <dhcp_parse_reply+0x31c>)
 8011056:	f002 fed7 	bl	8013e08 <iprintf>
 801105a:	f06f 0305 	mvn.w	r3, #5
 801105e:	e19b      	b.n	8011398 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8011060:	2307      	movs	r3, #7
 8011062:	623b      	str	r3, [r7, #32]
        break;
 8011064:	e085      	b.n	8011172 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801106a:	2b04      	cmp	r3, #4
 801106c:	d009      	beq.n	8011082 <dhcp_parse_reply+0x266>
 801106e:	4b30      	ldr	r3, [pc, #192]	; (8011130 <dhcp_parse_reply+0x314>)
 8011070:	f240 6241 	movw	r2, #1601	; 0x641
 8011074:	492f      	ldr	r1, [pc, #188]	; (8011134 <dhcp_parse_reply+0x318>)
 8011076:	4830      	ldr	r0, [pc, #192]	; (8011138 <dhcp_parse_reply+0x31c>)
 8011078:	f002 fec6 	bl	8013e08 <iprintf>
 801107c:	f06f 0305 	mvn.w	r3, #5
 8011080:	e18a      	b.n	8011398 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8011082:	2303      	movs	r3, #3
 8011084:	623b      	str	r3, [r7, #32]
        break;
 8011086:	e074      	b.n	8011172 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801108c:	2b01      	cmp	r3, #1
 801108e:	d009      	beq.n	80110a4 <dhcp_parse_reply+0x288>
 8011090:	4b27      	ldr	r3, [pc, #156]	; (8011130 <dhcp_parse_reply+0x314>)
 8011092:	f240 624f 	movw	r2, #1615	; 0x64f
 8011096:	492a      	ldr	r1, [pc, #168]	; (8011140 <dhcp_parse_reply+0x324>)
 8011098:	4827      	ldr	r0, [pc, #156]	; (8011138 <dhcp_parse_reply+0x31c>)
 801109a:	f002 feb5 	bl	8013e08 <iprintf>
 801109e:	f06f 0305 	mvn.w	r3, #5
 80110a2:	e179      	b.n	8011398 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80110a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80110a6:	2bf0      	cmp	r3, #240	; 0xf0
 80110a8:	d009      	beq.n	80110be <dhcp_parse_reply+0x2a2>
 80110aa:	4b21      	ldr	r3, [pc, #132]	; (8011130 <dhcp_parse_reply+0x314>)
 80110ac:	f240 6251 	movw	r2, #1617	; 0x651
 80110b0:	4924      	ldr	r1, [pc, #144]	; (8011144 <dhcp_parse_reply+0x328>)
 80110b2:	4821      	ldr	r0, [pc, #132]	; (8011138 <dhcp_parse_reply+0x31c>)
 80110b4:	f002 fea8 	bl	8013e08 <iprintf>
 80110b8:	f06f 0305 	mvn.w	r3, #5
 80110bc:	e16c      	b.n	8011398 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80110be:	2300      	movs	r3, #0
 80110c0:	623b      	str	r3, [r7, #32]
        break;
 80110c2:	e056      	b.n	8011172 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80110c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d009      	beq.n	80110e0 <dhcp_parse_reply+0x2c4>
 80110cc:	4b18      	ldr	r3, [pc, #96]	; (8011130 <dhcp_parse_reply+0x314>)
 80110ce:	f240 6255 	movw	r2, #1621	; 0x655
 80110d2:	491b      	ldr	r1, [pc, #108]	; (8011140 <dhcp_parse_reply+0x324>)
 80110d4:	4818      	ldr	r0, [pc, #96]	; (8011138 <dhcp_parse_reply+0x31c>)
 80110d6:	f002 fe97 	bl	8013e08 <iprintf>
 80110da:	f06f 0305 	mvn.w	r3, #5
 80110de:	e15b      	b.n	8011398 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80110e0:	2301      	movs	r3, #1
 80110e2:	623b      	str	r3, [r7, #32]
        break;
 80110e4:	e045      	b.n	8011172 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80110e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110ea:	2b04      	cmp	r3, #4
 80110ec:	d009      	beq.n	8011102 <dhcp_parse_reply+0x2e6>
 80110ee:	4b10      	ldr	r3, [pc, #64]	; (8011130 <dhcp_parse_reply+0x314>)
 80110f0:	f240 6259 	movw	r2, #1625	; 0x659
 80110f4:	490f      	ldr	r1, [pc, #60]	; (8011134 <dhcp_parse_reply+0x318>)
 80110f6:	4810      	ldr	r0, [pc, #64]	; (8011138 <dhcp_parse_reply+0x31c>)
 80110f8:	f002 fe86 	bl	8013e08 <iprintf>
 80110fc:	f06f 0305 	mvn.w	r3, #5
 8011100:	e14a      	b.n	8011398 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8011102:	2302      	movs	r3, #2
 8011104:	623b      	str	r3, [r7, #32]
        break;
 8011106:	e034      	b.n	8011172 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801110c:	2b04      	cmp	r3, #4
 801110e:	d009      	beq.n	8011124 <dhcp_parse_reply+0x308>
 8011110:	4b07      	ldr	r3, [pc, #28]	; (8011130 <dhcp_parse_reply+0x314>)
 8011112:	f240 625d 	movw	r2, #1629	; 0x65d
 8011116:	4907      	ldr	r1, [pc, #28]	; (8011134 <dhcp_parse_reply+0x318>)
 8011118:	4807      	ldr	r0, [pc, #28]	; (8011138 <dhcp_parse_reply+0x31c>)
 801111a:	f002 fe75 	bl	8013e08 <iprintf>
 801111e:	f06f 0305 	mvn.w	r3, #5
 8011122:	e139      	b.n	8011398 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8011124:	2304      	movs	r3, #4
 8011126:	623b      	str	r3, [r7, #32]
        break;
 8011128:	e023      	b.n	8011172 <dhcp_parse_reply+0x356>
 801112a:	bf00      	nop
 801112c:	20006d24 	.word	0x20006d24
 8011130:	08017aec 	.word	0x08017aec
 8011134:	08017d74 	.word	0x08017d74
 8011138:	08017b4c 	.word	0x08017b4c
 801113c:	08017d80 	.word	0x08017d80
 8011140:	08017d94 	.word	0x08017d94
 8011144:	08017da0 	.word	0x08017da0
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801114c:	2b04      	cmp	r3, #4
 801114e:	d009      	beq.n	8011164 <dhcp_parse_reply+0x348>
 8011150:	4b93      	ldr	r3, [pc, #588]	; (80113a0 <dhcp_parse_reply+0x584>)
 8011152:	f240 6261 	movw	r2, #1633	; 0x661
 8011156:	4993      	ldr	r1, [pc, #588]	; (80113a4 <dhcp_parse_reply+0x588>)
 8011158:	4893      	ldr	r0, [pc, #588]	; (80113a8 <dhcp_parse_reply+0x58c>)
 801115a:	f002 fe55 	bl	8013e08 <iprintf>
 801115e:	f06f 0305 	mvn.w	r3, #5
 8011162:	e119      	b.n	8011398 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8011164:	2305      	movs	r3, #5
 8011166:	623b      	str	r3, [r7, #32]
        break;
 8011168:	e003      	b.n	8011172 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801116a:	2300      	movs	r3, #0
 801116c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8011170:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8011172:	7dfb      	ldrb	r3, [r7, #23]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d103      	bne.n	8011180 <dhcp_parse_reply+0x364>
      offset++;
 8011178:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801117a:	3301      	adds	r3, #1
 801117c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801117e:	e0a1      	b.n	80112c4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8011180:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011186:	4413      	add	r3, r2
 8011188:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801118c:	4293      	cmp	r3, r2
 801118e:	dd02      	ble.n	8011196 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8011190:	f06f 0301 	mvn.w	r3, #1
 8011194:	e100      	b.n	8011398 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8011196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801119a:	b29a      	uxth	r2, r3
 801119c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801119e:	4413      	add	r3, r2
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	3302      	adds	r3, #2
 80111a4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80111a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f000 808a 	beq.w	80112c4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80111b0:	2300      	movs	r3, #0
 80111b2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	db02      	blt.n	80111c0 <dhcp_parse_reply+0x3a4>
 80111ba:	6a3b      	ldr	r3, [r7, #32]
 80111bc:	2b07      	cmp	r3, #7
 80111be:	dd06      	ble.n	80111ce <dhcp_parse_reply+0x3b2>
 80111c0:	4b77      	ldr	r3, [pc, #476]	; (80113a0 <dhcp_parse_reply+0x584>)
 80111c2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80111c6:	4979      	ldr	r1, [pc, #484]	; (80113ac <dhcp_parse_reply+0x590>)
 80111c8:	4877      	ldr	r0, [pc, #476]	; (80113a8 <dhcp_parse_reply+0x58c>)
 80111ca:	f002 fe1d 	bl	8013e08 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80111ce:	4a78      	ldr	r2, [pc, #480]	; (80113b0 <dhcp_parse_reply+0x594>)
 80111d0:	6a3b      	ldr	r3, [r7, #32]
 80111d2:	4413      	add	r3, r2
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d174      	bne.n	80112c4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80111da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111de:	2b04      	cmp	r3, #4
 80111e0:	bf28      	it	cs
 80111e2:	2304      	movcs	r3, #4
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80111e8:	8bfb      	ldrh	r3, [r7, #30]
 80111ea:	8aba      	ldrh	r2, [r7, #20]
 80111ec:	f107 0108 	add.w	r1, r7, #8
 80111f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111f2:	f7f7 fce5 	bl	8008bc0 <pbuf_copy_partial>
 80111f6:	4603      	mov	r3, r0
 80111f8:	461a      	mov	r2, r3
 80111fa:	8abb      	ldrh	r3, [r7, #20]
 80111fc:	4293      	cmp	r3, r2
 80111fe:	d002      	beq.n	8011206 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8011200:	f06f 0301 	mvn.w	r3, #1
 8011204:	e0c8      	b.n	8011398 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8011206:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801120a:	2b04      	cmp	r3, #4
 801120c:	d933      	bls.n	8011276 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801120e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011212:	f003 0303 	and.w	r3, r3, #3
 8011216:	b2db      	uxtb	r3, r3
 8011218:	2b00      	cmp	r3, #0
 801121a:	d009      	beq.n	8011230 <dhcp_parse_reply+0x414>
 801121c:	4b60      	ldr	r3, [pc, #384]	; (80113a0 <dhcp_parse_reply+0x584>)
 801121e:	f240 6281 	movw	r2, #1665	; 0x681
 8011222:	4964      	ldr	r1, [pc, #400]	; (80113b4 <dhcp_parse_reply+0x598>)
 8011224:	4860      	ldr	r0, [pc, #384]	; (80113a8 <dhcp_parse_reply+0x58c>)
 8011226:	f002 fdef 	bl	8013e08 <iprintf>
 801122a:	f06f 0305 	mvn.w	r3, #5
 801122e:	e0b3      	b.n	8011398 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8011230:	4a5f      	ldr	r2, [pc, #380]	; (80113b0 <dhcp_parse_reply+0x594>)
 8011232:	6a3b      	ldr	r3, [r7, #32]
 8011234:	4413      	add	r3, r2
 8011236:	2201      	movs	r2, #1
 8011238:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	4618      	mov	r0, r3
 801123e:	f7f5 fff6 	bl	800722e <lwip_htonl>
 8011242:	4602      	mov	r2, r0
 8011244:	495c      	ldr	r1, [pc, #368]	; (80113b8 <dhcp_parse_reply+0x59c>)
 8011246:	6a3b      	ldr	r3, [r7, #32]
 8011248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801124c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011250:	3b04      	subs	r3, #4
 8011252:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011256:	8bfb      	ldrh	r3, [r7, #30]
 8011258:	3304      	adds	r3, #4
 801125a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801125c:	8a7a      	ldrh	r2, [r7, #18]
 801125e:	8bfb      	ldrh	r3, [r7, #30]
 8011260:	429a      	cmp	r2, r3
 8011262:	d202      	bcs.n	801126a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8011264:	f06f 0301 	mvn.w	r3, #1
 8011268:	e096      	b.n	8011398 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801126a:	8a7b      	ldrh	r3, [r7, #18]
 801126c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801126e:	6a3b      	ldr	r3, [r7, #32]
 8011270:	3301      	adds	r3, #1
 8011272:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8011274:	e79e      	b.n	80111b4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8011276:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801127a:	2b04      	cmp	r3, #4
 801127c:	d106      	bne.n	801128c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	4618      	mov	r0, r3
 8011282:	f7f5 ffd4 	bl	800722e <lwip_htonl>
 8011286:	4603      	mov	r3, r0
 8011288:	60bb      	str	r3, [r7, #8]
 801128a:	e011      	b.n	80112b0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801128c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011290:	2b01      	cmp	r3, #1
 8011292:	d009      	beq.n	80112a8 <dhcp_parse_reply+0x48c>
 8011294:	4b42      	ldr	r3, [pc, #264]	; (80113a0 <dhcp_parse_reply+0x584>)
 8011296:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801129a:	4948      	ldr	r1, [pc, #288]	; (80113bc <dhcp_parse_reply+0x5a0>)
 801129c:	4842      	ldr	r0, [pc, #264]	; (80113a8 <dhcp_parse_reply+0x58c>)
 801129e:	f002 fdb3 	bl	8013e08 <iprintf>
 80112a2:	f06f 0305 	mvn.w	r3, #5
 80112a6:	e077      	b.n	8011398 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 80112a8:	f107 0308 	add.w	r3, r7, #8
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80112b0:	4a3f      	ldr	r2, [pc, #252]	; (80113b0 <dhcp_parse_reply+0x594>)
 80112b2:	6a3b      	ldr	r3, [r7, #32]
 80112b4:	4413      	add	r3, r2
 80112b6:	2201      	movs	r2, #1
 80112b8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80112ba:	68ba      	ldr	r2, [r7, #8]
 80112bc:	493e      	ldr	r1, [pc, #248]	; (80113b8 <dhcp_parse_reply+0x59c>)
 80112be:	6a3b      	ldr	r3, [r7, #32]
 80112c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80112c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c6:	895b      	ldrh	r3, [r3, #10]
 80112c8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d324      	bcc.n	8011318 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80112ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d0:	895b      	ldrh	r3, [r3, #10]
 80112d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80112d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112da:	895b      	ldrh	r3, [r3, #10]
 80112dc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80112de:	1ad3      	subs	r3, r2, r3
 80112e0:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80112e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80112e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d213      	bcs.n	8011312 <dhcp_parse_reply+0x4f6>
        q = q->next;
 80112ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80112f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d109      	bne.n	801130a <dhcp_parse_reply+0x4ee>
 80112f6:	4b2a      	ldr	r3, [pc, #168]	; (80113a0 <dhcp_parse_reply+0x584>)
 80112f8:	f240 629d 	movw	r2, #1693	; 0x69d
 80112fc:	4930      	ldr	r1, [pc, #192]	; (80113c0 <dhcp_parse_reply+0x5a4>)
 80112fe:	482a      	ldr	r0, [pc, #168]	; (80113a8 <dhcp_parse_reply+0x58c>)
 8011300:	f002 fd82 	bl	8013e08 <iprintf>
 8011304:	f06f 0305 	mvn.w	r3, #5
 8011308:	e046      	b.n	8011398 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801130c:	685b      	ldr	r3, [r3, #4]
 801130e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011310:	e002      	b.n	8011318 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8011312:	f06f 0301 	mvn.w	r3, #1
 8011316:	e03f      	b.n	8011398 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131a:	2b00      	cmp	r3, #0
 801131c:	d00a      	beq.n	8011334 <dhcp_parse_reply+0x518>
 801131e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011320:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011322:	429a      	cmp	r2, r3
 8011324:	d206      	bcs.n	8011334 <dhcp_parse_reply+0x518>
 8011326:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801132a:	4413      	add	r3, r2
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	2bff      	cmp	r3, #255	; 0xff
 8011330:	f47f adb7 	bne.w	8010ea2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8011334:	4b1e      	ldr	r3, [pc, #120]	; (80113b0 <dhcp_parse_reply+0x594>)
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d018      	beq.n	801136e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801133c:	4b1e      	ldr	r3, [pc, #120]	; (80113b8 <dhcp_parse_reply+0x59c>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011342:	4b1b      	ldr	r3, [pc, #108]	; (80113b0 <dhcp_parse_reply+0x594>)
 8011344:	2200      	movs	r2, #0
 8011346:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	2b01      	cmp	r3, #1
 801134c:	d102      	bne.n	8011354 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801134e:	2301      	movs	r3, #1
 8011350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011352:	e00c      	b.n	801136e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2b02      	cmp	r3, #2
 8011358:	d102      	bne.n	8011360 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801135a:	2301      	movs	r3, #1
 801135c:	62bb      	str	r3, [r7, #40]	; 0x28
 801135e:	e006      	b.n	801136e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2b03      	cmp	r3, #3
 8011364:	d103      	bne.n	801136e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8011366:	2301      	movs	r3, #1
 8011368:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801136a:	2301      	movs	r3, #1
 801136c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011370:	2b00      	cmp	r3, #0
 8011372:	d006      	beq.n	8011382 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8011374:	2300      	movs	r3, #0
 8011376:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8011378:	236c      	movs	r3, #108	; 0x6c
 801137a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801137c:	23ec      	movs	r3, #236	; 0xec
 801137e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8011380:	e569      	b.n	8010e56 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8011382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011384:	2b00      	cmp	r3, #0
 8011386:	d006      	beq.n	8011396 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8011388:	2300      	movs	r3, #0
 801138a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801138c:	232c      	movs	r3, #44	; 0x2c
 801138e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8011390:	236c      	movs	r3, #108	; 0x6c
 8011392:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8011394:	e55f      	b.n	8010e56 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8011396:	2300      	movs	r3, #0
}
 8011398:	4618      	mov	r0, r3
 801139a:	3740      	adds	r7, #64	; 0x40
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	08017aec 	.word	0x08017aec
 80113a4:	08017d74 	.word	0x08017d74
 80113a8:	08017b4c 	.word	0x08017b4c
 80113ac:	08017db8 	.word	0x08017db8
 80113b0:	20006d24 	.word	0x20006d24
 80113b4:	08017dcc 	.word	0x08017dcc
 80113b8:	20006d2c 	.word	0x20006d2c
 80113bc:	08017de4 	.word	0x08017de4
 80113c0:	08017df8 	.word	0x08017df8

080113c4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b08a      	sub	sp, #40	; 0x28
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	60b9      	str	r1, [r7, #8]
 80113ce:	607a      	str	r2, [r7, #4]
 80113d0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80113d2:	4b60      	ldr	r3, [pc, #384]	; (8011554 <dhcp_recv+0x190>)
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80113d8:	6a3b      	ldr	r3, [r7, #32]
 80113da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113dc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80113e4:	69fb      	ldr	r3, [r7, #28]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	f000 809d 	beq.w	8011526 <dhcp_recv+0x162>
 80113ec:	69fb      	ldr	r3, [r7, #28]
 80113ee:	791b      	ldrb	r3, [r3, #4]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	f000 8098 	beq.w	8011526 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	895b      	ldrh	r3, [r3, #10]
 80113fa:	2b2b      	cmp	r3, #43	; 0x2b
 80113fc:	f240 8095 	bls.w	801152a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8011400:	69bb      	ldr	r3, [r7, #24]
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	2b02      	cmp	r3, #2
 8011406:	f040 8092 	bne.w	801152e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801140a:	2300      	movs	r3, #0
 801140c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011410:	e012      	b.n	8011438 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8011412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011416:	6a3a      	ldr	r2, [r7, #32]
 8011418:	4413      	add	r3, r2
 801141a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801141e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011422:	69b9      	ldr	r1, [r7, #24]
 8011424:	440b      	add	r3, r1
 8011426:	7f1b      	ldrb	r3, [r3, #28]
 8011428:	429a      	cmp	r2, r3
 801142a:	f040 8082 	bne.w	8011532 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801142e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011432:	3301      	adds	r3, #1
 8011434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011438:	6a3b      	ldr	r3, [r7, #32]
 801143a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801143e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011442:	429a      	cmp	r2, r3
 8011444:	d203      	bcs.n	801144e <dhcp_recv+0x8a>
 8011446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801144a:	2b05      	cmp	r3, #5
 801144c:	d9e1      	bls.n	8011412 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801144e:	69bb      	ldr	r3, [r7, #24]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	4618      	mov	r0, r3
 8011454:	f7f5 feeb 	bl	800722e <lwip_htonl>
 8011458:	4602      	mov	r2, r0
 801145a:	69fb      	ldr	r3, [r7, #28]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	429a      	cmp	r2, r3
 8011460:	d169      	bne.n	8011536 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8011462:	69f9      	ldr	r1, [r7, #28]
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f7ff fcd9 	bl	8010e1c <dhcp_parse_reply>
 801146a:	4603      	mov	r3, r0
 801146c:	2b00      	cmp	r3, #0
 801146e:	d164      	bne.n	801153a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8011470:	4b39      	ldr	r3, [pc, #228]	; (8011558 <dhcp_recv+0x194>)
 8011472:	785b      	ldrb	r3, [r3, #1]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d062      	beq.n	801153e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801147e:	4b37      	ldr	r3, [pc, #220]	; (801155c <dhcp_recv+0x198>)
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8011484:	7cfb      	ldrb	r3, [r7, #19]
 8011486:	2b05      	cmp	r3, #5
 8011488:	d12a      	bne.n	80114e0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801148a:	69fb      	ldr	r3, [r7, #28]
 801148c:	795b      	ldrb	r3, [r3, #5]
 801148e:	2b01      	cmp	r3, #1
 8011490:	d112      	bne.n	80114b8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8011492:	6979      	ldr	r1, [r7, #20]
 8011494:	6a38      	ldr	r0, [r7, #32]
 8011496:	f7fe fe53 	bl	8010140 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801149a:	6a3b      	ldr	r3, [r7, #32]
 801149c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80114a0:	f003 0308 	and.w	r3, r3, #8
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d003      	beq.n	80114b0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80114a8:	6a38      	ldr	r0, [r7, #32]
 80114aa:	f7fe fbc3 	bl	800fc34 <dhcp_check>
 80114ae:	e049      	b.n	8011544 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80114b0:	6a38      	ldr	r0, [r7, #32]
 80114b2:	f7ff f867 	bl	8010584 <dhcp_bind>
 80114b6:	e045      	b.n	8011544 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80114b8:	69fb      	ldr	r3, [r7, #28]
 80114ba:	795b      	ldrb	r3, [r3, #5]
 80114bc:	2b03      	cmp	r3, #3
 80114be:	d007      	beq.n	80114d0 <dhcp_recv+0x10c>
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	795b      	ldrb	r3, [r3, #5]
 80114c4:	2b04      	cmp	r3, #4
 80114c6:	d003      	beq.n	80114d0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80114cc:	2b05      	cmp	r3, #5
 80114ce:	d139      	bne.n	8011544 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80114d0:	6979      	ldr	r1, [r7, #20]
 80114d2:	6a38      	ldr	r0, [r7, #32]
 80114d4:	f7fe fe34 	bl	8010140 <dhcp_handle_ack>
      dhcp_bind(netif);
 80114d8:	6a38      	ldr	r0, [r7, #32]
 80114da:	f7ff f853 	bl	8010584 <dhcp_bind>
 80114de:	e031      	b.n	8011544 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80114e0:	7cfb      	ldrb	r3, [r7, #19]
 80114e2:	2b06      	cmp	r3, #6
 80114e4:	d113      	bne.n	801150e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80114ea:	2b03      	cmp	r3, #3
 80114ec:	d00b      	beq.n	8011506 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80114ee:	69fb      	ldr	r3, [r7, #28]
 80114f0:	795b      	ldrb	r3, [r3, #5]
 80114f2:	2b01      	cmp	r3, #1
 80114f4:	d007      	beq.n	8011506 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80114fa:	2b04      	cmp	r3, #4
 80114fc:	d003      	beq.n	8011506 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80114fe:	69fb      	ldr	r3, [r7, #28]
 8011500:	795b      	ldrb	r3, [r3, #5]
 8011502:	2b05      	cmp	r3, #5
 8011504:	d103      	bne.n	801150e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8011506:	6a38      	ldr	r0, [r7, #32]
 8011508:	f7fe fb7a 	bl	800fc00 <dhcp_handle_nak>
 801150c:	e01a      	b.n	8011544 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801150e:	7cfb      	ldrb	r3, [r7, #19]
 8011510:	2b02      	cmp	r3, #2
 8011512:	d116      	bne.n	8011542 <dhcp_recv+0x17e>
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	795b      	ldrb	r3, [r3, #5]
 8011518:	2b06      	cmp	r3, #6
 801151a:	d112      	bne.n	8011542 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801151c:	6979      	ldr	r1, [r7, #20]
 801151e:	6a38      	ldr	r0, [r7, #32]
 8011520:	f7fe fbbc 	bl	800fc9c <dhcp_handle_offer>
 8011524:	e00e      	b.n	8011544 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011526:	bf00      	nop
 8011528:	e00c      	b.n	8011544 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801152a:	bf00      	nop
 801152c:	e00a      	b.n	8011544 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801152e:	bf00      	nop
 8011530:	e008      	b.n	8011544 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8011532:	bf00      	nop
 8011534:	e006      	b.n	8011544 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011536:	bf00      	nop
 8011538:	e004      	b.n	8011544 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801153a:	bf00      	nop
 801153c:	e002      	b.n	8011544 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801153e:	bf00      	nop
 8011540:	e000      	b.n	8011544 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8011542:	bf00      	nop
  pbuf_free(p);
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f7f7 f941 	bl	80087cc <pbuf_free>
}
 801154a:	bf00      	nop
 801154c:	3728      	adds	r7, #40	; 0x28
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	200037a4 	.word	0x200037a4
 8011558:	20006d24 	.word	0x20006d24
 801155c:	20006d2c 	.word	0x20006d2c

08011560 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b088      	sub	sp, #32
 8011564:	af00      	add	r7, sp, #0
 8011566:	60f8      	str	r0, [r7, #12]
 8011568:	60b9      	str	r1, [r7, #8]
 801156a:	603b      	str	r3, [r7, #0]
 801156c:	4613      	mov	r3, r2
 801156e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d108      	bne.n	8011588 <dhcp_create_msg+0x28>
 8011576:	4b5f      	ldr	r3, [pc, #380]	; (80116f4 <dhcp_create_msg+0x194>)
 8011578:	f240 7269 	movw	r2, #1897	; 0x769
 801157c:	495e      	ldr	r1, [pc, #376]	; (80116f8 <dhcp_create_msg+0x198>)
 801157e:	485f      	ldr	r0, [pc, #380]	; (80116fc <dhcp_create_msg+0x19c>)
 8011580:	f002 fc42 	bl	8013e08 <iprintf>
 8011584:	2300      	movs	r3, #0
 8011586:	e0b1      	b.n	80116ec <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d108      	bne.n	80115a0 <dhcp_create_msg+0x40>
 801158e:	4b59      	ldr	r3, [pc, #356]	; (80116f4 <dhcp_create_msg+0x194>)
 8011590:	f240 726a 	movw	r2, #1898	; 0x76a
 8011594:	495a      	ldr	r1, [pc, #360]	; (8011700 <dhcp_create_msg+0x1a0>)
 8011596:	4859      	ldr	r0, [pc, #356]	; (80116fc <dhcp_create_msg+0x19c>)
 8011598:	f002 fc36 	bl	8013e08 <iprintf>
 801159c:	2300      	movs	r3, #0
 801159e:	e0a5      	b.n	80116ec <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80115a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80115a4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80115a8:	2036      	movs	r0, #54	; 0x36
 80115aa:	f7f6 fe2b 	bl	8008204 <pbuf_alloc>
 80115ae:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80115b0:	69bb      	ldr	r3, [r7, #24]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d101      	bne.n	80115ba <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80115b6:	2300      	movs	r3, #0
 80115b8:	e098      	b.n	80116ec <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80115ba:	69bb      	ldr	r3, [r7, #24]
 80115bc:	895b      	ldrh	r3, [r3, #10]
 80115be:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80115c2:	d206      	bcs.n	80115d2 <dhcp_create_msg+0x72>
 80115c4:	4b4b      	ldr	r3, [pc, #300]	; (80116f4 <dhcp_create_msg+0x194>)
 80115c6:	f240 7271 	movw	r2, #1905	; 0x771
 80115ca:	494e      	ldr	r1, [pc, #312]	; (8011704 <dhcp_create_msg+0x1a4>)
 80115cc:	484b      	ldr	r0, [pc, #300]	; (80116fc <dhcp_create_msg+0x19c>)
 80115ce:	f002 fc1b 	bl	8013e08 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80115d2:	79fb      	ldrb	r3, [r7, #7]
 80115d4:	2b03      	cmp	r3, #3
 80115d6:	d103      	bne.n	80115e0 <dhcp_create_msg+0x80>
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	795b      	ldrb	r3, [r3, #5]
 80115dc:	2b03      	cmp	r3, #3
 80115de:	d10d      	bne.n	80115fc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	799b      	ldrb	r3, [r3, #6]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d105      	bne.n	80115f4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80115e8:	f002 fc9c 	bl	8013f24 <rand>
 80115ec:	4603      	mov	r3, r0
 80115ee:	461a      	mov	r2, r3
 80115f0:	4b45      	ldr	r3, [pc, #276]	; (8011708 <dhcp_create_msg+0x1a8>)
 80115f2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80115f4:	4b44      	ldr	r3, [pc, #272]	; (8011708 <dhcp_create_msg+0x1a8>)
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80115fc:	69bb      	ldr	r3, [r7, #24]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8011602:	f44f 729a 	mov.w	r2, #308	; 0x134
 8011606:	2100      	movs	r1, #0
 8011608:	6978      	ldr	r0, [r7, #20]
 801160a:	f002 fbf5 	bl	8013df8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	2201      	movs	r2, #1
 8011612:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	2201      	movs	r2, #1
 8011618:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4618      	mov	r0, r3
 801162a:	f7f5 fe00 	bl	800722e <lwip_htonl>
 801162e:	4602      	mov	r2, r0
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8011634:	79fb      	ldrb	r3, [r7, #7]
 8011636:	2b08      	cmp	r3, #8
 8011638:	d010      	beq.n	801165c <dhcp_create_msg+0xfc>
 801163a:	79fb      	ldrb	r3, [r7, #7]
 801163c:	2b04      	cmp	r3, #4
 801163e:	d00d      	beq.n	801165c <dhcp_create_msg+0xfc>
 8011640:	79fb      	ldrb	r3, [r7, #7]
 8011642:	2b07      	cmp	r3, #7
 8011644:	d00a      	beq.n	801165c <dhcp_create_msg+0xfc>
 8011646:	79fb      	ldrb	r3, [r7, #7]
 8011648:	2b03      	cmp	r3, #3
 801164a:	d10c      	bne.n	8011666 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8011650:	2b05      	cmp	r3, #5
 8011652:	d003      	beq.n	801165c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	795b      	ldrb	r3, [r3, #5]
 8011658:	2b04      	cmp	r3, #4
 801165a:	d104      	bne.n	8011666 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	3304      	adds	r3, #4
 8011660:	681a      	ldr	r2, [r3, #0]
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011666:	2300      	movs	r3, #0
 8011668:	83fb      	strh	r3, [r7, #30]
 801166a:	e00c      	b.n	8011686 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801166c:	8bfa      	ldrh	r2, [r7, #30]
 801166e:	8bfb      	ldrh	r3, [r7, #30]
 8011670:	68f9      	ldr	r1, [r7, #12]
 8011672:	440a      	add	r2, r1
 8011674:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8011678:	697a      	ldr	r2, [r7, #20]
 801167a:	4413      	add	r3, r2
 801167c:	460a      	mov	r2, r1
 801167e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011680:	8bfb      	ldrh	r3, [r7, #30]
 8011682:	3301      	adds	r3, #1
 8011684:	83fb      	strh	r3, [r7, #30]
 8011686:	8bfb      	ldrh	r3, [r7, #30]
 8011688:	2b05      	cmp	r3, #5
 801168a:	d9ef      	bls.n	801166c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	2200      	movs	r2, #0
 8011690:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8011694:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8011698:	2200      	movs	r2, #0
 801169a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801169e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80116a2:	2200      	movs	r2, #0
 80116a4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80116a8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80116ac:	2200      	movs	r2, #0
 80116ae:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80116b2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80116bc:	2301      	movs	r3, #1
 80116be:	2235      	movs	r2, #53	; 0x35
 80116c0:	2000      	movs	r0, #0
 80116c2:	f7ff fadb 	bl	8010c7c <dhcp_option>
 80116c6:	4603      	mov	r3, r0
 80116c8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80116d0:	79fa      	ldrb	r2, [r7, #7]
 80116d2:	8a7b      	ldrh	r3, [r7, #18]
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7ff fb05 	bl	8010ce4 <dhcp_option_byte>
 80116da:	4603      	mov	r3, r0
 80116dc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d002      	beq.n	80116ea <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	8a7a      	ldrh	r2, [r7, #18]
 80116e8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80116ea:	69bb      	ldr	r3, [r7, #24]
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3720      	adds	r7, #32
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	08017aec 	.word	0x08017aec
 80116f8:	08017e0c 	.word	0x08017e0c
 80116fc:	08017b4c 	.word	0x08017b4c
 8011700:	08017e2c 	.word	0x08017e2c
 8011704:	08017e4c 	.word	0x08017e4c
 8011708:	20000118 	.word	0x20000118

0801170c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b084      	sub	sp, #16
 8011710:	af00      	add	r7, sp, #0
 8011712:	4603      	mov	r3, r0
 8011714:	60b9      	str	r1, [r7, #8]
 8011716:	607a      	str	r2, [r7, #4]
 8011718:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801171a:	89fb      	ldrh	r3, [r7, #14]
 801171c:	1c5a      	adds	r2, r3, #1
 801171e:	81fa      	strh	r2, [r7, #14]
 8011720:	461a      	mov	r2, r3
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	4413      	add	r3, r2
 8011726:	22ff      	movs	r2, #255	; 0xff
 8011728:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801172a:	e007      	b.n	801173c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801172c:	89fb      	ldrh	r3, [r7, #14]
 801172e:	1c5a      	adds	r2, r3, #1
 8011730:	81fa      	strh	r2, [r7, #14]
 8011732:	461a      	mov	r2, r3
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	4413      	add	r3, r2
 8011738:	2200      	movs	r2, #0
 801173a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801173c:	89fb      	ldrh	r3, [r7, #14]
 801173e:	2b43      	cmp	r3, #67	; 0x43
 8011740:	d904      	bls.n	801174c <dhcp_option_trailer+0x40>
 8011742:	89fb      	ldrh	r3, [r7, #14]
 8011744:	f003 0303 	and.w	r3, r3, #3
 8011748:	2b00      	cmp	r3, #0
 801174a:	d002      	beq.n	8011752 <dhcp_option_trailer+0x46>
 801174c:	89fb      	ldrh	r3, [r7, #14]
 801174e:	2b43      	cmp	r3, #67	; 0x43
 8011750:	d9ec      	bls.n	801172c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8011752:	89fb      	ldrh	r3, [r7, #14]
 8011754:	33f0      	adds	r3, #240	; 0xf0
 8011756:	b29b      	uxth	r3, r3
 8011758:	4619      	mov	r1, r3
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f7f6 feb0 	bl	80084c0 <pbuf_realloc>
}
 8011760:	bf00      	nop
 8011762:	3710      	adds	r7, #16
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8011768:	b480      	push	{r7}
 801176a:	b085      	sub	sp, #20
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d017      	beq.n	80117a6 <dhcp_supplied_address+0x3e>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801177a:	2b00      	cmp	r3, #0
 801177c:	d013      	beq.n	80117a6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011782:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	795b      	ldrb	r3, [r3, #5]
 8011788:	2b0a      	cmp	r3, #10
 801178a:	d007      	beq.n	801179c <dhcp_supplied_address+0x34>
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	795b      	ldrb	r3, [r3, #5]
 8011790:	2b05      	cmp	r3, #5
 8011792:	d003      	beq.n	801179c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011798:	2b04      	cmp	r3, #4
 801179a:	d101      	bne.n	80117a0 <dhcp_supplied_address+0x38>
 801179c:	2301      	movs	r3, #1
 801179e:	e000      	b.n	80117a2 <dhcp_supplied_address+0x3a>
 80117a0:	2300      	movs	r3, #0
 80117a2:	b2db      	uxtb	r3, r3
 80117a4:	e000      	b.n	80117a8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80117a6:	2300      	movs	r3, #0
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	3714      	adds	r7, #20
 80117ac:	46bd      	mov	sp, r7
 80117ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b2:	4770      	bx	lr

080117b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80117bc:	4915      	ldr	r1, [pc, #84]	; (8011814 <etharp_free_entry+0x60>)
 80117be:	687a      	ldr	r2, [r7, #4]
 80117c0:	4613      	mov	r3, r2
 80117c2:	005b      	lsls	r3, r3, #1
 80117c4:	4413      	add	r3, r2
 80117c6:	00db      	lsls	r3, r3, #3
 80117c8:	440b      	add	r3, r1
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d013      	beq.n	80117f8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80117d0:	4910      	ldr	r1, [pc, #64]	; (8011814 <etharp_free_entry+0x60>)
 80117d2:	687a      	ldr	r2, [r7, #4]
 80117d4:	4613      	mov	r3, r2
 80117d6:	005b      	lsls	r3, r3, #1
 80117d8:	4413      	add	r3, r2
 80117da:	00db      	lsls	r3, r3, #3
 80117dc:	440b      	add	r3, r1
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	4618      	mov	r0, r3
 80117e2:	f7f6 fff3 	bl	80087cc <pbuf_free>
    arp_table[i].q = NULL;
 80117e6:	490b      	ldr	r1, [pc, #44]	; (8011814 <etharp_free_entry+0x60>)
 80117e8:	687a      	ldr	r2, [r7, #4]
 80117ea:	4613      	mov	r3, r2
 80117ec:	005b      	lsls	r3, r3, #1
 80117ee:	4413      	add	r3, r2
 80117f0:	00db      	lsls	r3, r3, #3
 80117f2:	440b      	add	r3, r1
 80117f4:	2200      	movs	r2, #0
 80117f6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80117f8:	4906      	ldr	r1, [pc, #24]	; (8011814 <etharp_free_entry+0x60>)
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	4613      	mov	r3, r2
 80117fe:	005b      	lsls	r3, r3, #1
 8011800:	4413      	add	r3, r2
 8011802:	00db      	lsls	r3, r3, #3
 8011804:	440b      	add	r3, r1
 8011806:	3314      	adds	r3, #20
 8011808:	2200      	movs	r2, #0
 801180a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801180c:	bf00      	nop
 801180e:	3708      	adds	r7, #8
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}
 8011814:	2000011c 	.word	0x2000011c

08011818 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801181e:	2300      	movs	r3, #0
 8011820:	607b      	str	r3, [r7, #4]
 8011822:	e096      	b.n	8011952 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011824:	494f      	ldr	r1, [pc, #316]	; (8011964 <etharp_tmr+0x14c>)
 8011826:	687a      	ldr	r2, [r7, #4]
 8011828:	4613      	mov	r3, r2
 801182a:	005b      	lsls	r3, r3, #1
 801182c:	4413      	add	r3, r2
 801182e:	00db      	lsls	r3, r3, #3
 8011830:	440b      	add	r3, r1
 8011832:	3314      	adds	r3, #20
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011838:	78fb      	ldrb	r3, [r7, #3]
 801183a:	2b00      	cmp	r3, #0
 801183c:	f000 8086 	beq.w	801194c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011840:	4948      	ldr	r1, [pc, #288]	; (8011964 <etharp_tmr+0x14c>)
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	4613      	mov	r3, r2
 8011846:	005b      	lsls	r3, r3, #1
 8011848:	4413      	add	r3, r2
 801184a:	00db      	lsls	r3, r3, #3
 801184c:	440b      	add	r3, r1
 801184e:	3312      	adds	r3, #18
 8011850:	881b      	ldrh	r3, [r3, #0]
 8011852:	3301      	adds	r3, #1
 8011854:	b298      	uxth	r0, r3
 8011856:	4943      	ldr	r1, [pc, #268]	; (8011964 <etharp_tmr+0x14c>)
 8011858:	687a      	ldr	r2, [r7, #4]
 801185a:	4613      	mov	r3, r2
 801185c:	005b      	lsls	r3, r3, #1
 801185e:	4413      	add	r3, r2
 8011860:	00db      	lsls	r3, r3, #3
 8011862:	440b      	add	r3, r1
 8011864:	3312      	adds	r3, #18
 8011866:	4602      	mov	r2, r0
 8011868:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801186a:	493e      	ldr	r1, [pc, #248]	; (8011964 <etharp_tmr+0x14c>)
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	4613      	mov	r3, r2
 8011870:	005b      	lsls	r3, r3, #1
 8011872:	4413      	add	r3, r2
 8011874:	00db      	lsls	r3, r3, #3
 8011876:	440b      	add	r3, r1
 8011878:	3312      	adds	r3, #18
 801187a:	881b      	ldrh	r3, [r3, #0]
 801187c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011880:	d215      	bcs.n	80118ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011882:	4938      	ldr	r1, [pc, #224]	; (8011964 <etharp_tmr+0x14c>)
 8011884:	687a      	ldr	r2, [r7, #4]
 8011886:	4613      	mov	r3, r2
 8011888:	005b      	lsls	r3, r3, #1
 801188a:	4413      	add	r3, r2
 801188c:	00db      	lsls	r3, r3, #3
 801188e:	440b      	add	r3, r1
 8011890:	3314      	adds	r3, #20
 8011892:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011894:	2b01      	cmp	r3, #1
 8011896:	d10e      	bne.n	80118b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011898:	4932      	ldr	r1, [pc, #200]	; (8011964 <etharp_tmr+0x14c>)
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	4613      	mov	r3, r2
 801189e:	005b      	lsls	r3, r3, #1
 80118a0:	4413      	add	r3, r2
 80118a2:	00db      	lsls	r3, r3, #3
 80118a4:	440b      	add	r3, r1
 80118a6:	3312      	adds	r3, #18
 80118a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80118aa:	2b04      	cmp	r3, #4
 80118ac:	d903      	bls.n	80118b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f7ff ff80 	bl	80117b4 <etharp_free_entry>
 80118b4:	e04a      	b.n	801194c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80118b6:	492b      	ldr	r1, [pc, #172]	; (8011964 <etharp_tmr+0x14c>)
 80118b8:	687a      	ldr	r2, [r7, #4]
 80118ba:	4613      	mov	r3, r2
 80118bc:	005b      	lsls	r3, r3, #1
 80118be:	4413      	add	r3, r2
 80118c0:	00db      	lsls	r3, r3, #3
 80118c2:	440b      	add	r3, r1
 80118c4:	3314      	adds	r3, #20
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	2b03      	cmp	r3, #3
 80118ca:	d10a      	bne.n	80118e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80118cc:	4925      	ldr	r1, [pc, #148]	; (8011964 <etharp_tmr+0x14c>)
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	4613      	mov	r3, r2
 80118d2:	005b      	lsls	r3, r3, #1
 80118d4:	4413      	add	r3, r2
 80118d6:	00db      	lsls	r3, r3, #3
 80118d8:	440b      	add	r3, r1
 80118da:	3314      	adds	r3, #20
 80118dc:	2204      	movs	r2, #4
 80118de:	701a      	strb	r2, [r3, #0]
 80118e0:	e034      	b.n	801194c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80118e2:	4920      	ldr	r1, [pc, #128]	; (8011964 <etharp_tmr+0x14c>)
 80118e4:	687a      	ldr	r2, [r7, #4]
 80118e6:	4613      	mov	r3, r2
 80118e8:	005b      	lsls	r3, r3, #1
 80118ea:	4413      	add	r3, r2
 80118ec:	00db      	lsls	r3, r3, #3
 80118ee:	440b      	add	r3, r1
 80118f0:	3314      	adds	r3, #20
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	2b04      	cmp	r3, #4
 80118f6:	d10a      	bne.n	801190e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80118f8:	491a      	ldr	r1, [pc, #104]	; (8011964 <etharp_tmr+0x14c>)
 80118fa:	687a      	ldr	r2, [r7, #4]
 80118fc:	4613      	mov	r3, r2
 80118fe:	005b      	lsls	r3, r3, #1
 8011900:	4413      	add	r3, r2
 8011902:	00db      	lsls	r3, r3, #3
 8011904:	440b      	add	r3, r1
 8011906:	3314      	adds	r3, #20
 8011908:	2202      	movs	r2, #2
 801190a:	701a      	strb	r2, [r3, #0]
 801190c:	e01e      	b.n	801194c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801190e:	4915      	ldr	r1, [pc, #84]	; (8011964 <etharp_tmr+0x14c>)
 8011910:	687a      	ldr	r2, [r7, #4]
 8011912:	4613      	mov	r3, r2
 8011914:	005b      	lsls	r3, r3, #1
 8011916:	4413      	add	r3, r2
 8011918:	00db      	lsls	r3, r3, #3
 801191a:	440b      	add	r3, r1
 801191c:	3314      	adds	r3, #20
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	2b01      	cmp	r3, #1
 8011922:	d113      	bne.n	801194c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011924:	490f      	ldr	r1, [pc, #60]	; (8011964 <etharp_tmr+0x14c>)
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	4613      	mov	r3, r2
 801192a:	005b      	lsls	r3, r3, #1
 801192c:	4413      	add	r3, r2
 801192e:	00db      	lsls	r3, r3, #3
 8011930:	440b      	add	r3, r1
 8011932:	3308      	adds	r3, #8
 8011934:	6818      	ldr	r0, [r3, #0]
 8011936:	687a      	ldr	r2, [r7, #4]
 8011938:	4613      	mov	r3, r2
 801193a:	005b      	lsls	r3, r3, #1
 801193c:	4413      	add	r3, r2
 801193e:	00db      	lsls	r3, r3, #3
 8011940:	4a08      	ldr	r2, [pc, #32]	; (8011964 <etharp_tmr+0x14c>)
 8011942:	4413      	add	r3, r2
 8011944:	3304      	adds	r3, #4
 8011946:	4619      	mov	r1, r3
 8011948:	f000 fe72 	bl	8012630 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	3301      	adds	r3, #1
 8011950:	607b      	str	r3, [r7, #4]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2b09      	cmp	r3, #9
 8011956:	f77f af65 	ble.w	8011824 <etharp_tmr+0xc>
      }
    }
  }
}
 801195a:	bf00      	nop
 801195c:	bf00      	nop
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}
 8011964:	2000011c 	.word	0x2000011c

08011968 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b08a      	sub	sp, #40	; 0x28
 801196c:	af00      	add	r7, sp, #0
 801196e:	60f8      	str	r0, [r7, #12]
 8011970:	460b      	mov	r3, r1
 8011972:	607a      	str	r2, [r7, #4]
 8011974:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011976:	230a      	movs	r3, #10
 8011978:	84fb      	strh	r3, [r7, #38]	; 0x26
 801197a:	230a      	movs	r3, #10
 801197c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801197e:	230a      	movs	r3, #10
 8011980:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011982:	2300      	movs	r3, #0
 8011984:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011986:	230a      	movs	r3, #10
 8011988:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801198a:	2300      	movs	r3, #0
 801198c:	83bb      	strh	r3, [r7, #28]
 801198e:	2300      	movs	r3, #0
 8011990:	837b      	strh	r3, [r7, #26]
 8011992:	2300      	movs	r3, #0
 8011994:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011996:	2300      	movs	r3, #0
 8011998:	843b      	strh	r3, [r7, #32]
 801199a:	e0ae      	b.n	8011afa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801199c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119a0:	49a6      	ldr	r1, [pc, #664]	; (8011c3c <etharp_find_entry+0x2d4>)
 80119a2:	4613      	mov	r3, r2
 80119a4:	005b      	lsls	r3, r3, #1
 80119a6:	4413      	add	r3, r2
 80119a8:	00db      	lsls	r3, r3, #3
 80119aa:	440b      	add	r3, r1
 80119ac:	3314      	adds	r3, #20
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80119b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80119b6:	2b0a      	cmp	r3, #10
 80119b8:	d105      	bne.n	80119c6 <etharp_find_entry+0x5e>
 80119ba:	7dfb      	ldrb	r3, [r7, #23]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d102      	bne.n	80119c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80119c0:	8c3b      	ldrh	r3, [r7, #32]
 80119c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80119c4:	e095      	b.n	8011af2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80119c6:	7dfb      	ldrb	r3, [r7, #23]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	f000 8092 	beq.w	8011af2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80119ce:	7dfb      	ldrb	r3, [r7, #23]
 80119d0:	2b01      	cmp	r3, #1
 80119d2:	d009      	beq.n	80119e8 <etharp_find_entry+0x80>
 80119d4:	7dfb      	ldrb	r3, [r7, #23]
 80119d6:	2b01      	cmp	r3, #1
 80119d8:	d806      	bhi.n	80119e8 <etharp_find_entry+0x80>
 80119da:	4b99      	ldr	r3, [pc, #612]	; (8011c40 <etharp_find_entry+0x2d8>)
 80119dc:	f240 1223 	movw	r2, #291	; 0x123
 80119e0:	4998      	ldr	r1, [pc, #608]	; (8011c44 <etharp_find_entry+0x2dc>)
 80119e2:	4899      	ldr	r0, [pc, #612]	; (8011c48 <etharp_find_entry+0x2e0>)
 80119e4:	f002 fa10 	bl	8013e08 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d020      	beq.n	8011a30 <etharp_find_entry+0xc8>
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	6819      	ldr	r1, [r3, #0]
 80119f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119f6:	4891      	ldr	r0, [pc, #580]	; (8011c3c <etharp_find_entry+0x2d4>)
 80119f8:	4613      	mov	r3, r2
 80119fa:	005b      	lsls	r3, r3, #1
 80119fc:	4413      	add	r3, r2
 80119fe:	00db      	lsls	r3, r3, #3
 8011a00:	4403      	add	r3, r0
 8011a02:	3304      	adds	r3, #4
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	4299      	cmp	r1, r3
 8011a08:	d112      	bne.n	8011a30 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d00c      	beq.n	8011a2a <etharp_find_entry+0xc2>
 8011a10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a14:	4989      	ldr	r1, [pc, #548]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011a16:	4613      	mov	r3, r2
 8011a18:	005b      	lsls	r3, r3, #1
 8011a1a:	4413      	add	r3, r2
 8011a1c:	00db      	lsls	r3, r3, #3
 8011a1e:	440b      	add	r3, r1
 8011a20:	3308      	adds	r3, #8
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	687a      	ldr	r2, [r7, #4]
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d102      	bne.n	8011a30 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011a2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a2e:	e100      	b.n	8011c32 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011a30:	7dfb      	ldrb	r3, [r7, #23]
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d140      	bne.n	8011ab8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011a36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a3a:	4980      	ldr	r1, [pc, #512]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011a3c:	4613      	mov	r3, r2
 8011a3e:	005b      	lsls	r3, r3, #1
 8011a40:	4413      	add	r3, r2
 8011a42:	00db      	lsls	r3, r3, #3
 8011a44:	440b      	add	r3, r1
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d01a      	beq.n	8011a82 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011a4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a50:	497a      	ldr	r1, [pc, #488]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011a52:	4613      	mov	r3, r2
 8011a54:	005b      	lsls	r3, r3, #1
 8011a56:	4413      	add	r3, r2
 8011a58:	00db      	lsls	r3, r3, #3
 8011a5a:	440b      	add	r3, r1
 8011a5c:	3312      	adds	r3, #18
 8011a5e:	881b      	ldrh	r3, [r3, #0]
 8011a60:	8bba      	ldrh	r2, [r7, #28]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d845      	bhi.n	8011af2 <etharp_find_entry+0x18a>
            old_queue = i;
 8011a66:	8c3b      	ldrh	r3, [r7, #32]
 8011a68:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011a6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a6e:	4973      	ldr	r1, [pc, #460]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011a70:	4613      	mov	r3, r2
 8011a72:	005b      	lsls	r3, r3, #1
 8011a74:	4413      	add	r3, r2
 8011a76:	00db      	lsls	r3, r3, #3
 8011a78:	440b      	add	r3, r1
 8011a7a:	3312      	adds	r3, #18
 8011a7c:	881b      	ldrh	r3, [r3, #0]
 8011a7e:	83bb      	strh	r3, [r7, #28]
 8011a80:	e037      	b.n	8011af2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011a82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a86:	496d      	ldr	r1, [pc, #436]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011a88:	4613      	mov	r3, r2
 8011a8a:	005b      	lsls	r3, r3, #1
 8011a8c:	4413      	add	r3, r2
 8011a8e:	00db      	lsls	r3, r3, #3
 8011a90:	440b      	add	r3, r1
 8011a92:	3312      	adds	r3, #18
 8011a94:	881b      	ldrh	r3, [r3, #0]
 8011a96:	8b7a      	ldrh	r2, [r7, #26]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d82a      	bhi.n	8011af2 <etharp_find_entry+0x18a>
            old_pending = i;
 8011a9c:	8c3b      	ldrh	r3, [r7, #32]
 8011a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011aa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011aa4:	4965      	ldr	r1, [pc, #404]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	005b      	lsls	r3, r3, #1
 8011aaa:	4413      	add	r3, r2
 8011aac:	00db      	lsls	r3, r3, #3
 8011aae:	440b      	add	r3, r1
 8011ab0:	3312      	adds	r3, #18
 8011ab2:	881b      	ldrh	r3, [r3, #0]
 8011ab4:	837b      	strh	r3, [r7, #26]
 8011ab6:	e01c      	b.n	8011af2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011ab8:	7dfb      	ldrb	r3, [r7, #23]
 8011aba:	2b01      	cmp	r3, #1
 8011abc:	d919      	bls.n	8011af2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011abe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ac2:	495e      	ldr	r1, [pc, #376]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011ac4:	4613      	mov	r3, r2
 8011ac6:	005b      	lsls	r3, r3, #1
 8011ac8:	4413      	add	r3, r2
 8011aca:	00db      	lsls	r3, r3, #3
 8011acc:	440b      	add	r3, r1
 8011ace:	3312      	adds	r3, #18
 8011ad0:	881b      	ldrh	r3, [r3, #0]
 8011ad2:	8b3a      	ldrh	r2, [r7, #24]
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d80c      	bhi.n	8011af2 <etharp_find_entry+0x18a>
            old_stable = i;
 8011ad8:	8c3b      	ldrh	r3, [r7, #32]
 8011ada:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011adc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ae0:	4956      	ldr	r1, [pc, #344]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011ae2:	4613      	mov	r3, r2
 8011ae4:	005b      	lsls	r3, r3, #1
 8011ae6:	4413      	add	r3, r2
 8011ae8:	00db      	lsls	r3, r3, #3
 8011aea:	440b      	add	r3, r1
 8011aec:	3312      	adds	r3, #18
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011af2:	8c3b      	ldrh	r3, [r7, #32]
 8011af4:	3301      	adds	r3, #1
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	843b      	strh	r3, [r7, #32]
 8011afa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011afe:	2b09      	cmp	r3, #9
 8011b00:	f77f af4c 	ble.w	801199c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011b04:	7afb      	ldrb	r3, [r7, #11]
 8011b06:	f003 0302 	and.w	r3, r3, #2
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d108      	bne.n	8011b20 <etharp_find_entry+0x1b8>
 8011b0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011b12:	2b0a      	cmp	r3, #10
 8011b14:	d107      	bne.n	8011b26 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011b16:	7afb      	ldrb	r3, [r7, #11]
 8011b18:	f003 0301 	and.w	r3, r3, #1
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d102      	bne.n	8011b26 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011b20:	f04f 33ff 	mov.w	r3, #4294967295
 8011b24:	e085      	b.n	8011c32 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011b26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011b2a:	2b09      	cmp	r3, #9
 8011b2c:	dc02      	bgt.n	8011b34 <etharp_find_entry+0x1cc>
    i = empty;
 8011b2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b30:	843b      	strh	r3, [r7, #32]
 8011b32:	e039      	b.n	8011ba8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011b34:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011b38:	2b09      	cmp	r3, #9
 8011b3a:	dc14      	bgt.n	8011b66 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011b3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b3e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011b40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b44:	493d      	ldr	r1, [pc, #244]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011b46:	4613      	mov	r3, r2
 8011b48:	005b      	lsls	r3, r3, #1
 8011b4a:	4413      	add	r3, r2
 8011b4c:	00db      	lsls	r3, r3, #3
 8011b4e:	440b      	add	r3, r1
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d018      	beq.n	8011b88 <etharp_find_entry+0x220>
 8011b56:	4b3a      	ldr	r3, [pc, #232]	; (8011c40 <etharp_find_entry+0x2d8>)
 8011b58:	f240 126d 	movw	r2, #365	; 0x16d
 8011b5c:	493b      	ldr	r1, [pc, #236]	; (8011c4c <etharp_find_entry+0x2e4>)
 8011b5e:	483a      	ldr	r0, [pc, #232]	; (8011c48 <etharp_find_entry+0x2e0>)
 8011b60:	f002 f952 	bl	8013e08 <iprintf>
 8011b64:	e010      	b.n	8011b88 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011b66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011b6a:	2b09      	cmp	r3, #9
 8011b6c:	dc02      	bgt.n	8011b74 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011b6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b70:	843b      	strh	r3, [r7, #32]
 8011b72:	e009      	b.n	8011b88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011b74:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b78:	2b09      	cmp	r3, #9
 8011b7a:	dc02      	bgt.n	8011b82 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011b7c:	8bfb      	ldrh	r3, [r7, #30]
 8011b7e:	843b      	strh	r3, [r7, #32]
 8011b80:	e002      	b.n	8011b88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011b82:	f04f 33ff 	mov.w	r3, #4294967295
 8011b86:	e054      	b.n	8011c32 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011b88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b8c:	2b09      	cmp	r3, #9
 8011b8e:	dd06      	ble.n	8011b9e <etharp_find_entry+0x236>
 8011b90:	4b2b      	ldr	r3, [pc, #172]	; (8011c40 <etharp_find_entry+0x2d8>)
 8011b92:	f240 127f 	movw	r2, #383	; 0x17f
 8011b96:	492e      	ldr	r1, [pc, #184]	; (8011c50 <etharp_find_entry+0x2e8>)
 8011b98:	482b      	ldr	r0, [pc, #172]	; (8011c48 <etharp_find_entry+0x2e0>)
 8011b9a:	f002 f935 	bl	8013e08 <iprintf>
    etharp_free_entry(i);
 8011b9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7ff fe06 	bl	80117b4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011ba8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011bac:	2b09      	cmp	r3, #9
 8011bae:	dd06      	ble.n	8011bbe <etharp_find_entry+0x256>
 8011bb0:	4b23      	ldr	r3, [pc, #140]	; (8011c40 <etharp_find_entry+0x2d8>)
 8011bb2:	f240 1283 	movw	r2, #387	; 0x183
 8011bb6:	4926      	ldr	r1, [pc, #152]	; (8011c50 <etharp_find_entry+0x2e8>)
 8011bb8:	4823      	ldr	r0, [pc, #140]	; (8011c48 <etharp_find_entry+0x2e0>)
 8011bba:	f002 f925 	bl	8013e08 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011bbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bc2:	491e      	ldr	r1, [pc, #120]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011bc4:	4613      	mov	r3, r2
 8011bc6:	005b      	lsls	r3, r3, #1
 8011bc8:	4413      	add	r3, r2
 8011bca:	00db      	lsls	r3, r3, #3
 8011bcc:	440b      	add	r3, r1
 8011bce:	3314      	adds	r3, #20
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d006      	beq.n	8011be4 <etharp_find_entry+0x27c>
 8011bd6:	4b1a      	ldr	r3, [pc, #104]	; (8011c40 <etharp_find_entry+0x2d8>)
 8011bd8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011bdc:	491d      	ldr	r1, [pc, #116]	; (8011c54 <etharp_find_entry+0x2ec>)
 8011bde:	481a      	ldr	r0, [pc, #104]	; (8011c48 <etharp_find_entry+0x2e0>)
 8011be0:	f002 f912 	bl	8013e08 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d00b      	beq.n	8011c02 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011bea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	6819      	ldr	r1, [r3, #0]
 8011bf2:	4812      	ldr	r0, [pc, #72]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011bf4:	4613      	mov	r3, r2
 8011bf6:	005b      	lsls	r3, r3, #1
 8011bf8:	4413      	add	r3, r2
 8011bfa:	00db      	lsls	r3, r3, #3
 8011bfc:	4403      	add	r3, r0
 8011bfe:	3304      	adds	r3, #4
 8011c00:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011c02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c06:	490d      	ldr	r1, [pc, #52]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011c08:	4613      	mov	r3, r2
 8011c0a:	005b      	lsls	r3, r3, #1
 8011c0c:	4413      	add	r3, r2
 8011c0e:	00db      	lsls	r3, r3, #3
 8011c10:	440b      	add	r3, r1
 8011c12:	3312      	adds	r3, #18
 8011c14:	2200      	movs	r2, #0
 8011c16:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011c18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c1c:	4907      	ldr	r1, [pc, #28]	; (8011c3c <etharp_find_entry+0x2d4>)
 8011c1e:	4613      	mov	r3, r2
 8011c20:	005b      	lsls	r3, r3, #1
 8011c22:	4413      	add	r3, r2
 8011c24:	00db      	lsls	r3, r3, #3
 8011c26:	440b      	add	r3, r1
 8011c28:	3308      	adds	r3, #8
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011c2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3728      	adds	r7, #40	; 0x28
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	2000011c 	.word	0x2000011c
 8011c40:	08017e8c 	.word	0x08017e8c
 8011c44:	08017ec4 	.word	0x08017ec4
 8011c48:	08017f04 	.word	0x08017f04
 8011c4c:	08017f2c 	.word	0x08017f2c
 8011c50:	08017f44 	.word	0x08017f44
 8011c54:	08017f58 	.word	0x08017f58

08011c58 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b088      	sub	sp, #32
 8011c5c:	af02      	add	r7, sp, #8
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]
 8011c64:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c6c:	2b06      	cmp	r3, #6
 8011c6e:	d006      	beq.n	8011c7e <etharp_update_arp_entry+0x26>
 8011c70:	4b48      	ldr	r3, [pc, #288]	; (8011d94 <etharp_update_arp_entry+0x13c>)
 8011c72:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011c76:	4948      	ldr	r1, [pc, #288]	; (8011d98 <etharp_update_arp_entry+0x140>)
 8011c78:	4848      	ldr	r0, [pc, #288]	; (8011d9c <etharp_update_arp_entry+0x144>)
 8011c7a:	f002 f8c5 	bl	8013e08 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d012      	beq.n	8011caa <etharp_update_arp_entry+0x52>
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d00e      	beq.n	8011caa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	68f9      	ldr	r1, [r7, #12]
 8011c92:	4618      	mov	r0, r3
 8011c94:	f001 f920 	bl	8012ed8 <ip4_addr_isbroadcast_u32>
 8011c98:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d105      	bne.n	8011caa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ca6:	2be0      	cmp	r3, #224	; 0xe0
 8011ca8:	d102      	bne.n	8011cb0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011caa:	f06f 030f 	mvn.w	r3, #15
 8011cae:	e06c      	b.n	8011d8a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011cb0:	78fb      	ldrb	r3, [r7, #3]
 8011cb2:	68fa      	ldr	r2, [r7, #12]
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	68b8      	ldr	r0, [r7, #8]
 8011cb8:	f7ff fe56 	bl	8011968 <etharp_find_entry>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011cc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	da02      	bge.n	8011cce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011cc8:	8afb      	ldrh	r3, [r7, #22]
 8011cca:	b25b      	sxtb	r3, r3
 8011ccc:	e05d      	b.n	8011d8a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011cce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cd2:	4933      	ldr	r1, [pc, #204]	; (8011da0 <etharp_update_arp_entry+0x148>)
 8011cd4:	4613      	mov	r3, r2
 8011cd6:	005b      	lsls	r3, r3, #1
 8011cd8:	4413      	add	r3, r2
 8011cda:	00db      	lsls	r3, r3, #3
 8011cdc:	440b      	add	r3, r1
 8011cde:	3314      	adds	r3, #20
 8011ce0:	2202      	movs	r2, #2
 8011ce2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011ce4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ce8:	492d      	ldr	r1, [pc, #180]	; (8011da0 <etharp_update_arp_entry+0x148>)
 8011cea:	4613      	mov	r3, r2
 8011cec:	005b      	lsls	r3, r3, #1
 8011cee:	4413      	add	r3, r2
 8011cf0:	00db      	lsls	r3, r3, #3
 8011cf2:	440b      	add	r3, r1
 8011cf4:	3308      	adds	r3, #8
 8011cf6:	68fa      	ldr	r2, [r7, #12]
 8011cf8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011cfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	005b      	lsls	r3, r3, #1
 8011d02:	4413      	add	r3, r2
 8011d04:	00db      	lsls	r3, r3, #3
 8011d06:	3308      	adds	r3, #8
 8011d08:	4a25      	ldr	r2, [pc, #148]	; (8011da0 <etharp_update_arp_entry+0x148>)
 8011d0a:	4413      	add	r3, r2
 8011d0c:	3304      	adds	r3, #4
 8011d0e:	2206      	movs	r2, #6
 8011d10:	6879      	ldr	r1, [r7, #4]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f002 f862 	bl	8013ddc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011d18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d1c:	4920      	ldr	r1, [pc, #128]	; (8011da0 <etharp_update_arp_entry+0x148>)
 8011d1e:	4613      	mov	r3, r2
 8011d20:	005b      	lsls	r3, r3, #1
 8011d22:	4413      	add	r3, r2
 8011d24:	00db      	lsls	r3, r3, #3
 8011d26:	440b      	add	r3, r1
 8011d28:	3312      	adds	r3, #18
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011d2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d32:	491b      	ldr	r1, [pc, #108]	; (8011da0 <etharp_update_arp_entry+0x148>)
 8011d34:	4613      	mov	r3, r2
 8011d36:	005b      	lsls	r3, r3, #1
 8011d38:	4413      	add	r3, r2
 8011d3a:	00db      	lsls	r3, r3, #3
 8011d3c:	440b      	add	r3, r1
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d021      	beq.n	8011d88 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011d44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d48:	4915      	ldr	r1, [pc, #84]	; (8011da0 <etharp_update_arp_entry+0x148>)
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	005b      	lsls	r3, r3, #1
 8011d4e:	4413      	add	r3, r2
 8011d50:	00db      	lsls	r3, r3, #3
 8011d52:	440b      	add	r3, r1
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011d58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d5c:	4910      	ldr	r1, [pc, #64]	; (8011da0 <etharp_update_arp_entry+0x148>)
 8011d5e:	4613      	mov	r3, r2
 8011d60:	005b      	lsls	r3, r3, #1
 8011d62:	4413      	add	r3, r2
 8011d64:	00db      	lsls	r3, r3, #3
 8011d66:	440b      	add	r3, r1
 8011d68:	2200      	movs	r2, #0
 8011d6a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011d72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011d76:	9300      	str	r3, [sp, #0]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6939      	ldr	r1, [r7, #16]
 8011d7c:	68f8      	ldr	r0, [r7, #12]
 8011d7e:	f001 ffb3 	bl	8013ce8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011d82:	6938      	ldr	r0, [r7, #16]
 8011d84:	f7f6 fd22 	bl	80087cc <pbuf_free>
  }
  return ERR_OK;
 8011d88:	2300      	movs	r3, #0
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3718      	adds	r7, #24
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop
 8011d94:	08017e8c 	.word	0x08017e8c
 8011d98:	08017f84 	.word	0x08017f84
 8011d9c:	08017f04 	.word	0x08017f04
 8011da0:	2000011c 	.word	0x2000011c

08011da4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b084      	sub	sp, #16
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011dac:	2300      	movs	r3, #0
 8011dae:	60fb      	str	r3, [r7, #12]
 8011db0:	e01e      	b.n	8011df0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011db2:	4913      	ldr	r1, [pc, #76]	; (8011e00 <etharp_cleanup_netif+0x5c>)
 8011db4:	68fa      	ldr	r2, [r7, #12]
 8011db6:	4613      	mov	r3, r2
 8011db8:	005b      	lsls	r3, r3, #1
 8011dba:	4413      	add	r3, r2
 8011dbc:	00db      	lsls	r3, r3, #3
 8011dbe:	440b      	add	r3, r1
 8011dc0:	3314      	adds	r3, #20
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011dc6:	7afb      	ldrb	r3, [r7, #11]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d00e      	beq.n	8011dea <etharp_cleanup_netif+0x46>
 8011dcc:	490c      	ldr	r1, [pc, #48]	; (8011e00 <etharp_cleanup_netif+0x5c>)
 8011dce:	68fa      	ldr	r2, [r7, #12]
 8011dd0:	4613      	mov	r3, r2
 8011dd2:	005b      	lsls	r3, r3, #1
 8011dd4:	4413      	add	r3, r2
 8011dd6:	00db      	lsls	r3, r3, #3
 8011dd8:	440b      	add	r3, r1
 8011dda:	3308      	adds	r3, #8
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	687a      	ldr	r2, [r7, #4]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d102      	bne.n	8011dea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011de4:	68f8      	ldr	r0, [r7, #12]
 8011de6:	f7ff fce5 	bl	80117b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	3301      	adds	r3, #1
 8011dee:	60fb      	str	r3, [r7, #12]
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	2b09      	cmp	r3, #9
 8011df4:	dddd      	ble.n	8011db2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011df6:	bf00      	nop
 8011df8:	bf00      	nop
 8011dfa:	3710      	adds	r7, #16
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}
 8011e00:	2000011c 	.word	0x2000011c

08011e04 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011e04:	b5b0      	push	{r4, r5, r7, lr}
 8011e06:	b08a      	sub	sp, #40	; 0x28
 8011e08:	af04      	add	r7, sp, #16
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d107      	bne.n	8011e24 <etharp_input+0x20>
 8011e14:	4b3f      	ldr	r3, [pc, #252]	; (8011f14 <etharp_input+0x110>)
 8011e16:	f240 228a 	movw	r2, #650	; 0x28a
 8011e1a:	493f      	ldr	r1, [pc, #252]	; (8011f18 <etharp_input+0x114>)
 8011e1c:	483f      	ldr	r0, [pc, #252]	; (8011f1c <etharp_input+0x118>)
 8011e1e:	f001 fff3 	bl	8013e08 <iprintf>
 8011e22:	e074      	b.n	8011f0e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	881b      	ldrh	r3, [r3, #0]
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e34:	d10c      	bne.n	8011e50 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011e36:	693b      	ldr	r3, [r7, #16]
 8011e38:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011e3a:	2b06      	cmp	r3, #6
 8011e3c:	d108      	bne.n	8011e50 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011e42:	2b04      	cmp	r3, #4
 8011e44:	d104      	bne.n	8011e50 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	885b      	ldrh	r3, [r3, #2]
 8011e4a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e4c:	2b08      	cmp	r3, #8
 8011e4e:	d003      	beq.n	8011e58 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f7f6 fcbb 	bl	80087cc <pbuf_free>
    return;
 8011e56:	e05a      	b.n	8011f0e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	330e      	adds	r3, #14
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	3318      	adds	r3, #24
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	3304      	adds	r3, #4
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d102      	bne.n	8011e78 <etharp_input+0x74>
    for_us = 0;
 8011e72:	2300      	movs	r3, #0
 8011e74:	75fb      	strb	r3, [r7, #23]
 8011e76:	e009      	b.n	8011e8c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011e78:	68ba      	ldr	r2, [r7, #8]
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	3304      	adds	r3, #4
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	bf0c      	ite	eq
 8011e84:	2301      	moveq	r3, #1
 8011e86:	2300      	movne	r3, #0
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	f103 0208 	add.w	r2, r3, #8
 8011e92:	7dfb      	ldrb	r3, [r7, #23]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d001      	beq.n	8011e9c <etharp_input+0x98>
 8011e98:	2301      	movs	r3, #1
 8011e9a:	e000      	b.n	8011e9e <etharp_input+0x9a>
 8011e9c:	2302      	movs	r3, #2
 8011e9e:	f107 010c 	add.w	r1, r7, #12
 8011ea2:	6838      	ldr	r0, [r7, #0]
 8011ea4:	f7ff fed8 	bl	8011c58 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	88db      	ldrh	r3, [r3, #6]
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011eb2:	d003      	beq.n	8011ebc <etharp_input+0xb8>
 8011eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011eb8:	d01e      	beq.n	8011ef8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011eba:	e025      	b.n	8011f08 <etharp_input+0x104>
      if (for_us) {
 8011ebc:	7dfb      	ldrb	r3, [r7, #23]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d021      	beq.n	8011f06 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011ec8:	693b      	ldr	r3, [r7, #16]
 8011eca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011ed8:	693a      	ldr	r2, [r7, #16]
 8011eda:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011edc:	2102      	movs	r1, #2
 8011ede:	9103      	str	r1, [sp, #12]
 8011ee0:	f107 010c 	add.w	r1, r7, #12
 8011ee4:	9102      	str	r1, [sp, #8]
 8011ee6:	9201      	str	r2, [sp, #4]
 8011ee8:	9300      	str	r3, [sp, #0]
 8011eea:	462b      	mov	r3, r5
 8011eec:	4622      	mov	r2, r4
 8011eee:	4601      	mov	r1, r0
 8011ef0:	6838      	ldr	r0, [r7, #0]
 8011ef2:	f000 faef 	bl	80124d4 <etharp_raw>
      break;
 8011ef6:	e006      	b.n	8011f06 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011ef8:	f107 030c 	add.w	r3, r7, #12
 8011efc:	4619      	mov	r1, r3
 8011efe:	6838      	ldr	r0, [r7, #0]
 8011f00:	f7fe f9fc 	bl	80102fc <dhcp_arp_reply>
      break;
 8011f04:	e000      	b.n	8011f08 <etharp_input+0x104>
      break;
 8011f06:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f7f6 fc5f 	bl	80087cc <pbuf_free>
}
 8011f0e:	3718      	adds	r7, #24
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bdb0      	pop	{r4, r5, r7, pc}
 8011f14:	08017e8c 	.word	0x08017e8c
 8011f18:	08017fdc 	.word	0x08017fdc
 8011f1c:	08017f04 	.word	0x08017f04

08011f20 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b086      	sub	sp, #24
 8011f24:	af02      	add	r7, sp, #8
 8011f26:	60f8      	str	r0, [r7, #12]
 8011f28:	60b9      	str	r1, [r7, #8]
 8011f2a:	4613      	mov	r3, r2
 8011f2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011f2e:	79fa      	ldrb	r2, [r7, #7]
 8011f30:	4944      	ldr	r1, [pc, #272]	; (8012044 <etharp_output_to_arp_index+0x124>)
 8011f32:	4613      	mov	r3, r2
 8011f34:	005b      	lsls	r3, r3, #1
 8011f36:	4413      	add	r3, r2
 8011f38:	00db      	lsls	r3, r3, #3
 8011f3a:	440b      	add	r3, r1
 8011f3c:	3314      	adds	r3, #20
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d806      	bhi.n	8011f52 <etharp_output_to_arp_index+0x32>
 8011f44:	4b40      	ldr	r3, [pc, #256]	; (8012048 <etharp_output_to_arp_index+0x128>)
 8011f46:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011f4a:	4940      	ldr	r1, [pc, #256]	; (801204c <etharp_output_to_arp_index+0x12c>)
 8011f4c:	4840      	ldr	r0, [pc, #256]	; (8012050 <etharp_output_to_arp_index+0x130>)
 8011f4e:	f001 ff5b 	bl	8013e08 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011f52:	79fa      	ldrb	r2, [r7, #7]
 8011f54:	493b      	ldr	r1, [pc, #236]	; (8012044 <etharp_output_to_arp_index+0x124>)
 8011f56:	4613      	mov	r3, r2
 8011f58:	005b      	lsls	r3, r3, #1
 8011f5a:	4413      	add	r3, r2
 8011f5c:	00db      	lsls	r3, r3, #3
 8011f5e:	440b      	add	r3, r1
 8011f60:	3314      	adds	r3, #20
 8011f62:	781b      	ldrb	r3, [r3, #0]
 8011f64:	2b02      	cmp	r3, #2
 8011f66:	d153      	bne.n	8012010 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011f68:	79fa      	ldrb	r2, [r7, #7]
 8011f6a:	4936      	ldr	r1, [pc, #216]	; (8012044 <etharp_output_to_arp_index+0x124>)
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	005b      	lsls	r3, r3, #1
 8011f70:	4413      	add	r3, r2
 8011f72:	00db      	lsls	r3, r3, #3
 8011f74:	440b      	add	r3, r1
 8011f76:	3312      	adds	r3, #18
 8011f78:	881b      	ldrh	r3, [r3, #0]
 8011f7a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011f7e:	d919      	bls.n	8011fb4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011f80:	79fa      	ldrb	r2, [r7, #7]
 8011f82:	4613      	mov	r3, r2
 8011f84:	005b      	lsls	r3, r3, #1
 8011f86:	4413      	add	r3, r2
 8011f88:	00db      	lsls	r3, r3, #3
 8011f8a:	4a2e      	ldr	r2, [pc, #184]	; (8012044 <etharp_output_to_arp_index+0x124>)
 8011f8c:	4413      	add	r3, r2
 8011f8e:	3304      	adds	r3, #4
 8011f90:	4619      	mov	r1, r3
 8011f92:	68f8      	ldr	r0, [r7, #12]
 8011f94:	f000 fb4c 	bl	8012630 <etharp_request>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d138      	bne.n	8012010 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011f9e:	79fa      	ldrb	r2, [r7, #7]
 8011fa0:	4928      	ldr	r1, [pc, #160]	; (8012044 <etharp_output_to_arp_index+0x124>)
 8011fa2:	4613      	mov	r3, r2
 8011fa4:	005b      	lsls	r3, r3, #1
 8011fa6:	4413      	add	r3, r2
 8011fa8:	00db      	lsls	r3, r3, #3
 8011faa:	440b      	add	r3, r1
 8011fac:	3314      	adds	r3, #20
 8011fae:	2203      	movs	r2, #3
 8011fb0:	701a      	strb	r2, [r3, #0]
 8011fb2:	e02d      	b.n	8012010 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011fb4:	79fa      	ldrb	r2, [r7, #7]
 8011fb6:	4923      	ldr	r1, [pc, #140]	; (8012044 <etharp_output_to_arp_index+0x124>)
 8011fb8:	4613      	mov	r3, r2
 8011fba:	005b      	lsls	r3, r3, #1
 8011fbc:	4413      	add	r3, r2
 8011fbe:	00db      	lsls	r3, r3, #3
 8011fc0:	440b      	add	r3, r1
 8011fc2:	3312      	adds	r3, #18
 8011fc4:	881b      	ldrh	r3, [r3, #0]
 8011fc6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011fca:	d321      	bcc.n	8012010 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011fcc:	79fa      	ldrb	r2, [r7, #7]
 8011fce:	4613      	mov	r3, r2
 8011fd0:	005b      	lsls	r3, r3, #1
 8011fd2:	4413      	add	r3, r2
 8011fd4:	00db      	lsls	r3, r3, #3
 8011fd6:	4a1b      	ldr	r2, [pc, #108]	; (8012044 <etharp_output_to_arp_index+0x124>)
 8011fd8:	4413      	add	r3, r2
 8011fda:	1d19      	adds	r1, r3, #4
 8011fdc:	79fa      	ldrb	r2, [r7, #7]
 8011fde:	4613      	mov	r3, r2
 8011fe0:	005b      	lsls	r3, r3, #1
 8011fe2:	4413      	add	r3, r2
 8011fe4:	00db      	lsls	r3, r3, #3
 8011fe6:	3308      	adds	r3, #8
 8011fe8:	4a16      	ldr	r2, [pc, #88]	; (8012044 <etharp_output_to_arp_index+0x124>)
 8011fea:	4413      	add	r3, r2
 8011fec:	3304      	adds	r3, #4
 8011fee:	461a      	mov	r2, r3
 8011ff0:	68f8      	ldr	r0, [r7, #12]
 8011ff2:	f000 fafb 	bl	80125ec <etharp_request_dst>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d109      	bne.n	8012010 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011ffc:	79fa      	ldrb	r2, [r7, #7]
 8011ffe:	4911      	ldr	r1, [pc, #68]	; (8012044 <etharp_output_to_arp_index+0x124>)
 8012000:	4613      	mov	r3, r2
 8012002:	005b      	lsls	r3, r3, #1
 8012004:	4413      	add	r3, r2
 8012006:	00db      	lsls	r3, r3, #3
 8012008:	440b      	add	r3, r1
 801200a:	3314      	adds	r3, #20
 801200c:	2203      	movs	r2, #3
 801200e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8012016:	79fa      	ldrb	r2, [r7, #7]
 8012018:	4613      	mov	r3, r2
 801201a:	005b      	lsls	r3, r3, #1
 801201c:	4413      	add	r3, r2
 801201e:	00db      	lsls	r3, r3, #3
 8012020:	3308      	adds	r3, #8
 8012022:	4a08      	ldr	r2, [pc, #32]	; (8012044 <etharp_output_to_arp_index+0x124>)
 8012024:	4413      	add	r3, r2
 8012026:	3304      	adds	r3, #4
 8012028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801202c:	9200      	str	r2, [sp, #0]
 801202e:	460a      	mov	r2, r1
 8012030:	68b9      	ldr	r1, [r7, #8]
 8012032:	68f8      	ldr	r0, [r7, #12]
 8012034:	f001 fe58 	bl	8013ce8 <ethernet_output>
 8012038:	4603      	mov	r3, r0
}
 801203a:	4618      	mov	r0, r3
 801203c:	3710      	adds	r7, #16
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	2000011c 	.word	0x2000011c
 8012048:	08017e8c 	.word	0x08017e8c
 801204c:	08017ffc 	.word	0x08017ffc
 8012050:	08017f04 	.word	0x08017f04

08012054 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b08a      	sub	sp, #40	; 0x28
 8012058:	af02      	add	r7, sp, #8
 801205a:	60f8      	str	r0, [r7, #12]
 801205c:	60b9      	str	r1, [r7, #8]
 801205e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d106      	bne.n	8012078 <etharp_output+0x24>
 801206a:	4b73      	ldr	r3, [pc, #460]	; (8012238 <etharp_output+0x1e4>)
 801206c:	f240 321e 	movw	r2, #798	; 0x31e
 8012070:	4972      	ldr	r1, [pc, #456]	; (801223c <etharp_output+0x1e8>)
 8012072:	4873      	ldr	r0, [pc, #460]	; (8012240 <etharp_output+0x1ec>)
 8012074:	f001 fec8 	bl	8013e08 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d106      	bne.n	801208c <etharp_output+0x38>
 801207e:	4b6e      	ldr	r3, [pc, #440]	; (8012238 <etharp_output+0x1e4>)
 8012080:	f240 321f 	movw	r2, #799	; 0x31f
 8012084:	496f      	ldr	r1, [pc, #444]	; (8012244 <etharp_output+0x1f0>)
 8012086:	486e      	ldr	r0, [pc, #440]	; (8012240 <etharp_output+0x1ec>)
 8012088:	f001 febe 	bl	8013e08 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d106      	bne.n	80120a0 <etharp_output+0x4c>
 8012092:	4b69      	ldr	r3, [pc, #420]	; (8012238 <etharp_output+0x1e4>)
 8012094:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012098:	496b      	ldr	r1, [pc, #428]	; (8012248 <etharp_output+0x1f4>)
 801209a:	4869      	ldr	r0, [pc, #420]	; (8012240 <etharp_output+0x1ec>)
 801209c:	f001 feb4 	bl	8013e08 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	68f9      	ldr	r1, [r7, #12]
 80120a6:	4618      	mov	r0, r3
 80120a8:	f000 ff16 	bl	8012ed8 <ip4_addr_isbroadcast_u32>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d002      	beq.n	80120b8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80120b2:	4b66      	ldr	r3, [pc, #408]	; (801224c <etharp_output+0x1f8>)
 80120b4:	61fb      	str	r3, [r7, #28]
 80120b6:	e0af      	b.n	8012218 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80120c0:	2be0      	cmp	r3, #224	; 0xe0
 80120c2:	d118      	bne.n	80120f6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80120c4:	2301      	movs	r3, #1
 80120c6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80120c8:	2300      	movs	r3, #0
 80120ca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80120cc:	235e      	movs	r3, #94	; 0x5e
 80120ce:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	3301      	adds	r3, #1
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120da:	b2db      	uxtb	r3, r3
 80120dc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	3302      	adds	r3, #2
 80120e2:	781b      	ldrb	r3, [r3, #0]
 80120e4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	3303      	adds	r3, #3
 80120ea:	781b      	ldrb	r3, [r3, #0]
 80120ec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80120ee:	f107 0310 	add.w	r3, r7, #16
 80120f2:	61fb      	str	r3, [r7, #28]
 80120f4:	e090      	b.n	8012218 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681a      	ldr	r2, [r3, #0]
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	3304      	adds	r3, #4
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	405a      	eors	r2, r3
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	3308      	adds	r3, #8
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	4013      	ands	r3, r2
 801210a:	2b00      	cmp	r3, #0
 801210c:	d012      	beq.n	8012134 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012114:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012118:	4293      	cmp	r3, r2
 801211a:	d00b      	beq.n	8012134 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	330c      	adds	r3, #12
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d003      	beq.n	801212e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	330c      	adds	r3, #12
 801212a:	61bb      	str	r3, [r7, #24]
 801212c:	e002      	b.n	8012134 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801212e:	f06f 0303 	mvn.w	r3, #3
 8012132:	e07d      	b.n	8012230 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012134:	4b46      	ldr	r3, [pc, #280]	; (8012250 <etharp_output+0x1fc>)
 8012136:	781b      	ldrb	r3, [r3, #0]
 8012138:	4619      	mov	r1, r3
 801213a:	4a46      	ldr	r2, [pc, #280]	; (8012254 <etharp_output+0x200>)
 801213c:	460b      	mov	r3, r1
 801213e:	005b      	lsls	r3, r3, #1
 8012140:	440b      	add	r3, r1
 8012142:	00db      	lsls	r3, r3, #3
 8012144:	4413      	add	r3, r2
 8012146:	3314      	adds	r3, #20
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	2b01      	cmp	r3, #1
 801214c:	d925      	bls.n	801219a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801214e:	4b40      	ldr	r3, [pc, #256]	; (8012250 <etharp_output+0x1fc>)
 8012150:	781b      	ldrb	r3, [r3, #0]
 8012152:	4619      	mov	r1, r3
 8012154:	4a3f      	ldr	r2, [pc, #252]	; (8012254 <etharp_output+0x200>)
 8012156:	460b      	mov	r3, r1
 8012158:	005b      	lsls	r3, r3, #1
 801215a:	440b      	add	r3, r1
 801215c:	00db      	lsls	r3, r3, #3
 801215e:	4413      	add	r3, r2
 8012160:	3308      	adds	r3, #8
 8012162:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012164:	68fa      	ldr	r2, [r7, #12]
 8012166:	429a      	cmp	r2, r3
 8012168:	d117      	bne.n	801219a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801216a:	69bb      	ldr	r3, [r7, #24]
 801216c:	681a      	ldr	r2, [r3, #0]
 801216e:	4b38      	ldr	r3, [pc, #224]	; (8012250 <etharp_output+0x1fc>)
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	4618      	mov	r0, r3
 8012174:	4937      	ldr	r1, [pc, #220]	; (8012254 <etharp_output+0x200>)
 8012176:	4603      	mov	r3, r0
 8012178:	005b      	lsls	r3, r3, #1
 801217a:	4403      	add	r3, r0
 801217c:	00db      	lsls	r3, r3, #3
 801217e:	440b      	add	r3, r1
 8012180:	3304      	adds	r3, #4
 8012182:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012184:	429a      	cmp	r2, r3
 8012186:	d108      	bne.n	801219a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012188:	4b31      	ldr	r3, [pc, #196]	; (8012250 <etharp_output+0x1fc>)
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	461a      	mov	r2, r3
 801218e:	68b9      	ldr	r1, [r7, #8]
 8012190:	68f8      	ldr	r0, [r7, #12]
 8012192:	f7ff fec5 	bl	8011f20 <etharp_output_to_arp_index>
 8012196:	4603      	mov	r3, r0
 8012198:	e04a      	b.n	8012230 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801219a:	2300      	movs	r3, #0
 801219c:	75fb      	strb	r3, [r7, #23]
 801219e:	e031      	b.n	8012204 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80121a0:	7dfa      	ldrb	r2, [r7, #23]
 80121a2:	492c      	ldr	r1, [pc, #176]	; (8012254 <etharp_output+0x200>)
 80121a4:	4613      	mov	r3, r2
 80121a6:	005b      	lsls	r3, r3, #1
 80121a8:	4413      	add	r3, r2
 80121aa:	00db      	lsls	r3, r3, #3
 80121ac:	440b      	add	r3, r1
 80121ae:	3314      	adds	r3, #20
 80121b0:	781b      	ldrb	r3, [r3, #0]
 80121b2:	2b01      	cmp	r3, #1
 80121b4:	d923      	bls.n	80121fe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80121b6:	7dfa      	ldrb	r2, [r7, #23]
 80121b8:	4926      	ldr	r1, [pc, #152]	; (8012254 <etharp_output+0x200>)
 80121ba:	4613      	mov	r3, r2
 80121bc:	005b      	lsls	r3, r3, #1
 80121be:	4413      	add	r3, r2
 80121c0:	00db      	lsls	r3, r3, #3
 80121c2:	440b      	add	r3, r1
 80121c4:	3308      	adds	r3, #8
 80121c6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80121c8:	68fa      	ldr	r2, [r7, #12]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d117      	bne.n	80121fe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80121ce:	69bb      	ldr	r3, [r7, #24]
 80121d0:	6819      	ldr	r1, [r3, #0]
 80121d2:	7dfa      	ldrb	r2, [r7, #23]
 80121d4:	481f      	ldr	r0, [pc, #124]	; (8012254 <etharp_output+0x200>)
 80121d6:	4613      	mov	r3, r2
 80121d8:	005b      	lsls	r3, r3, #1
 80121da:	4413      	add	r3, r2
 80121dc:	00db      	lsls	r3, r3, #3
 80121de:	4403      	add	r3, r0
 80121e0:	3304      	adds	r3, #4
 80121e2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80121e4:	4299      	cmp	r1, r3
 80121e6:	d10a      	bne.n	80121fe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80121e8:	4a19      	ldr	r2, [pc, #100]	; (8012250 <etharp_output+0x1fc>)
 80121ea:	7dfb      	ldrb	r3, [r7, #23]
 80121ec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80121ee:	7dfb      	ldrb	r3, [r7, #23]
 80121f0:	461a      	mov	r2, r3
 80121f2:	68b9      	ldr	r1, [r7, #8]
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f7ff fe93 	bl	8011f20 <etharp_output_to_arp_index>
 80121fa:	4603      	mov	r3, r0
 80121fc:	e018      	b.n	8012230 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80121fe:	7dfb      	ldrb	r3, [r7, #23]
 8012200:	3301      	adds	r3, #1
 8012202:	75fb      	strb	r3, [r7, #23]
 8012204:	7dfb      	ldrb	r3, [r7, #23]
 8012206:	2b09      	cmp	r3, #9
 8012208:	d9ca      	bls.n	80121a0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801220a:	68ba      	ldr	r2, [r7, #8]
 801220c:	69b9      	ldr	r1, [r7, #24]
 801220e:	68f8      	ldr	r0, [r7, #12]
 8012210:	f000 f822 	bl	8012258 <etharp_query>
 8012214:	4603      	mov	r3, r0
 8012216:	e00b      	b.n	8012230 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801221e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012222:	9300      	str	r3, [sp, #0]
 8012224:	69fb      	ldr	r3, [r7, #28]
 8012226:	68b9      	ldr	r1, [r7, #8]
 8012228:	68f8      	ldr	r0, [r7, #12]
 801222a:	f001 fd5d 	bl	8013ce8 <ethernet_output>
 801222e:	4603      	mov	r3, r0
}
 8012230:	4618      	mov	r0, r3
 8012232:	3720      	adds	r7, #32
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}
 8012238:	08017e8c 	.word	0x08017e8c
 801223c:	08017fdc 	.word	0x08017fdc
 8012240:	08017f04 	.word	0x08017f04
 8012244:	0801802c 	.word	0x0801802c
 8012248:	08017fcc 	.word	0x08017fcc
 801224c:	08018648 	.word	0x08018648
 8012250:	2000020c 	.word	0x2000020c
 8012254:	2000011c 	.word	0x2000011c

08012258 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b08c      	sub	sp, #48	; 0x30
 801225c:	af02      	add	r7, sp, #8
 801225e:	60f8      	str	r0, [r7, #12]
 8012260:	60b9      	str	r1, [r7, #8]
 8012262:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	332a      	adds	r3, #42	; 0x2a
 8012268:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801226a:	23ff      	movs	r3, #255	; 0xff
 801226c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012270:	2300      	movs	r3, #0
 8012272:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	68f9      	ldr	r1, [r7, #12]
 801227a:	4618      	mov	r0, r3
 801227c:	f000 fe2c 	bl	8012ed8 <ip4_addr_isbroadcast_u32>
 8012280:	4603      	mov	r3, r0
 8012282:	2b00      	cmp	r3, #0
 8012284:	d10c      	bne.n	80122a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801228e:	2be0      	cmp	r3, #224	; 0xe0
 8012290:	d006      	beq.n	80122a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d003      	beq.n	80122a0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d102      	bne.n	80122a6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80122a0:	f06f 030f 	mvn.w	r3, #15
 80122a4:	e101      	b.n	80124aa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80122a6:	68fa      	ldr	r2, [r7, #12]
 80122a8:	2101      	movs	r1, #1
 80122aa:	68b8      	ldr	r0, [r7, #8]
 80122ac:	f7ff fb5c 	bl	8011968 <etharp_find_entry>
 80122b0:	4603      	mov	r3, r0
 80122b2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80122b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	da02      	bge.n	80122c2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80122bc:	8a7b      	ldrh	r3, [r7, #18]
 80122be:	b25b      	sxtb	r3, r3
 80122c0:	e0f3      	b.n	80124aa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80122c2:	8a7b      	ldrh	r3, [r7, #18]
 80122c4:	2b7e      	cmp	r3, #126	; 0x7e
 80122c6:	d906      	bls.n	80122d6 <etharp_query+0x7e>
 80122c8:	4b7a      	ldr	r3, [pc, #488]	; (80124b4 <etharp_query+0x25c>)
 80122ca:	f240 32c1 	movw	r2, #961	; 0x3c1
 80122ce:	497a      	ldr	r1, [pc, #488]	; (80124b8 <etharp_query+0x260>)
 80122d0:	487a      	ldr	r0, [pc, #488]	; (80124bc <etharp_query+0x264>)
 80122d2:	f001 fd99 	bl	8013e08 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80122d6:	8a7b      	ldrh	r3, [r7, #18]
 80122d8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80122da:	7c7a      	ldrb	r2, [r7, #17]
 80122dc:	4978      	ldr	r1, [pc, #480]	; (80124c0 <etharp_query+0x268>)
 80122de:	4613      	mov	r3, r2
 80122e0:	005b      	lsls	r3, r3, #1
 80122e2:	4413      	add	r3, r2
 80122e4:	00db      	lsls	r3, r3, #3
 80122e6:	440b      	add	r3, r1
 80122e8:	3314      	adds	r3, #20
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d115      	bne.n	801231c <etharp_query+0xc4>
    is_new_entry = 1;
 80122f0:	2301      	movs	r3, #1
 80122f2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80122f4:	7c7a      	ldrb	r2, [r7, #17]
 80122f6:	4972      	ldr	r1, [pc, #456]	; (80124c0 <etharp_query+0x268>)
 80122f8:	4613      	mov	r3, r2
 80122fa:	005b      	lsls	r3, r3, #1
 80122fc:	4413      	add	r3, r2
 80122fe:	00db      	lsls	r3, r3, #3
 8012300:	440b      	add	r3, r1
 8012302:	3314      	adds	r3, #20
 8012304:	2201      	movs	r2, #1
 8012306:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012308:	7c7a      	ldrb	r2, [r7, #17]
 801230a:	496d      	ldr	r1, [pc, #436]	; (80124c0 <etharp_query+0x268>)
 801230c:	4613      	mov	r3, r2
 801230e:	005b      	lsls	r3, r3, #1
 8012310:	4413      	add	r3, r2
 8012312:	00db      	lsls	r3, r3, #3
 8012314:	440b      	add	r3, r1
 8012316:	3308      	adds	r3, #8
 8012318:	68fa      	ldr	r2, [r7, #12]
 801231a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801231c:	7c7a      	ldrb	r2, [r7, #17]
 801231e:	4968      	ldr	r1, [pc, #416]	; (80124c0 <etharp_query+0x268>)
 8012320:	4613      	mov	r3, r2
 8012322:	005b      	lsls	r3, r3, #1
 8012324:	4413      	add	r3, r2
 8012326:	00db      	lsls	r3, r3, #3
 8012328:	440b      	add	r3, r1
 801232a:	3314      	adds	r3, #20
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	2b01      	cmp	r3, #1
 8012330:	d011      	beq.n	8012356 <etharp_query+0xfe>
 8012332:	7c7a      	ldrb	r2, [r7, #17]
 8012334:	4962      	ldr	r1, [pc, #392]	; (80124c0 <etharp_query+0x268>)
 8012336:	4613      	mov	r3, r2
 8012338:	005b      	lsls	r3, r3, #1
 801233a:	4413      	add	r3, r2
 801233c:	00db      	lsls	r3, r3, #3
 801233e:	440b      	add	r3, r1
 8012340:	3314      	adds	r3, #20
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	2b01      	cmp	r3, #1
 8012346:	d806      	bhi.n	8012356 <etharp_query+0xfe>
 8012348:	4b5a      	ldr	r3, [pc, #360]	; (80124b4 <etharp_query+0x25c>)
 801234a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801234e:	495d      	ldr	r1, [pc, #372]	; (80124c4 <etharp_query+0x26c>)
 8012350:	485a      	ldr	r0, [pc, #360]	; (80124bc <etharp_query+0x264>)
 8012352:	f001 fd59 	bl	8013e08 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012356:	6a3b      	ldr	r3, [r7, #32]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d102      	bne.n	8012362 <etharp_query+0x10a>
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d10c      	bne.n	801237c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012362:	68b9      	ldr	r1, [r7, #8]
 8012364:	68f8      	ldr	r0, [r7, #12]
 8012366:	f000 f963 	bl	8012630 <etharp_request>
 801236a:	4603      	mov	r3, r0
 801236c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d102      	bne.n	801237c <etharp_query+0x124>
      return result;
 8012376:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801237a:	e096      	b.n	80124aa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d106      	bne.n	8012390 <etharp_query+0x138>
 8012382:	4b4c      	ldr	r3, [pc, #304]	; (80124b4 <etharp_query+0x25c>)
 8012384:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012388:	494f      	ldr	r1, [pc, #316]	; (80124c8 <etharp_query+0x270>)
 801238a:	484c      	ldr	r0, [pc, #304]	; (80124bc <etharp_query+0x264>)
 801238c:	f001 fd3c 	bl	8013e08 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012390:	7c7a      	ldrb	r2, [r7, #17]
 8012392:	494b      	ldr	r1, [pc, #300]	; (80124c0 <etharp_query+0x268>)
 8012394:	4613      	mov	r3, r2
 8012396:	005b      	lsls	r3, r3, #1
 8012398:	4413      	add	r3, r2
 801239a:	00db      	lsls	r3, r3, #3
 801239c:	440b      	add	r3, r1
 801239e:	3314      	adds	r3, #20
 80123a0:	781b      	ldrb	r3, [r3, #0]
 80123a2:	2b01      	cmp	r3, #1
 80123a4:	d917      	bls.n	80123d6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80123a6:	4a49      	ldr	r2, [pc, #292]	; (80124cc <etharp_query+0x274>)
 80123a8:	7c7b      	ldrb	r3, [r7, #17]
 80123aa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80123ac:	7c7a      	ldrb	r2, [r7, #17]
 80123ae:	4613      	mov	r3, r2
 80123b0:	005b      	lsls	r3, r3, #1
 80123b2:	4413      	add	r3, r2
 80123b4:	00db      	lsls	r3, r3, #3
 80123b6:	3308      	adds	r3, #8
 80123b8:	4a41      	ldr	r2, [pc, #260]	; (80124c0 <etharp_query+0x268>)
 80123ba:	4413      	add	r3, r2
 80123bc:	3304      	adds	r3, #4
 80123be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80123c2:	9200      	str	r2, [sp, #0]
 80123c4:	697a      	ldr	r2, [r7, #20]
 80123c6:	6879      	ldr	r1, [r7, #4]
 80123c8:	68f8      	ldr	r0, [r7, #12]
 80123ca:	f001 fc8d 	bl	8013ce8 <ethernet_output>
 80123ce:	4603      	mov	r3, r0
 80123d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123d4:	e067      	b.n	80124a6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80123d6:	7c7a      	ldrb	r2, [r7, #17]
 80123d8:	4939      	ldr	r1, [pc, #228]	; (80124c0 <etharp_query+0x268>)
 80123da:	4613      	mov	r3, r2
 80123dc:	005b      	lsls	r3, r3, #1
 80123de:	4413      	add	r3, r2
 80123e0:	00db      	lsls	r3, r3, #3
 80123e2:	440b      	add	r3, r1
 80123e4:	3314      	adds	r3, #20
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	2b01      	cmp	r3, #1
 80123ea:	d15c      	bne.n	80124a6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80123ec:	2300      	movs	r3, #0
 80123ee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80123f4:	e01c      	b.n	8012430 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	895a      	ldrh	r2, [r3, #10]
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	891b      	ldrh	r3, [r3, #8]
 80123fe:	429a      	cmp	r2, r3
 8012400:	d10a      	bne.n	8012418 <etharp_query+0x1c0>
 8012402:	69fb      	ldr	r3, [r7, #28]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d006      	beq.n	8012418 <etharp_query+0x1c0>
 801240a:	4b2a      	ldr	r3, [pc, #168]	; (80124b4 <etharp_query+0x25c>)
 801240c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012410:	492f      	ldr	r1, [pc, #188]	; (80124d0 <etharp_query+0x278>)
 8012412:	482a      	ldr	r0, [pc, #168]	; (80124bc <etharp_query+0x264>)
 8012414:	f001 fcf8 	bl	8013e08 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012418:	69fb      	ldr	r3, [r7, #28]
 801241a:	7b1b      	ldrb	r3, [r3, #12]
 801241c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012420:	2b00      	cmp	r3, #0
 8012422:	d002      	beq.n	801242a <etharp_query+0x1d2>
        copy_needed = 1;
 8012424:	2301      	movs	r3, #1
 8012426:	61bb      	str	r3, [r7, #24]
        break;
 8012428:	e005      	b.n	8012436 <etharp_query+0x1de>
      }
      p = p->next;
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d1df      	bne.n	80123f6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012436:	69bb      	ldr	r3, [r7, #24]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d007      	beq.n	801244c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801243c:	687a      	ldr	r2, [r7, #4]
 801243e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012442:	200e      	movs	r0, #14
 8012444:	f7f6 fc58 	bl	8008cf8 <pbuf_clone>
 8012448:	61f8      	str	r0, [r7, #28]
 801244a:	e004      	b.n	8012456 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012450:	69f8      	ldr	r0, [r7, #28]
 8012452:	f7f6 fa5b 	bl	800890c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012456:	69fb      	ldr	r3, [r7, #28]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d021      	beq.n	80124a0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801245c:	7c7a      	ldrb	r2, [r7, #17]
 801245e:	4918      	ldr	r1, [pc, #96]	; (80124c0 <etharp_query+0x268>)
 8012460:	4613      	mov	r3, r2
 8012462:	005b      	lsls	r3, r3, #1
 8012464:	4413      	add	r3, r2
 8012466:	00db      	lsls	r3, r3, #3
 8012468:	440b      	add	r3, r1
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d00a      	beq.n	8012486 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012470:	7c7a      	ldrb	r2, [r7, #17]
 8012472:	4913      	ldr	r1, [pc, #76]	; (80124c0 <etharp_query+0x268>)
 8012474:	4613      	mov	r3, r2
 8012476:	005b      	lsls	r3, r3, #1
 8012478:	4413      	add	r3, r2
 801247a:	00db      	lsls	r3, r3, #3
 801247c:	440b      	add	r3, r1
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	4618      	mov	r0, r3
 8012482:	f7f6 f9a3 	bl	80087cc <pbuf_free>
      }
      arp_table[i].q = p;
 8012486:	7c7a      	ldrb	r2, [r7, #17]
 8012488:	490d      	ldr	r1, [pc, #52]	; (80124c0 <etharp_query+0x268>)
 801248a:	4613      	mov	r3, r2
 801248c:	005b      	lsls	r3, r3, #1
 801248e:	4413      	add	r3, r2
 8012490:	00db      	lsls	r3, r3, #3
 8012492:	440b      	add	r3, r1
 8012494:	69fa      	ldr	r2, [r7, #28]
 8012496:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012498:	2300      	movs	r3, #0
 801249a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801249e:	e002      	b.n	80124a6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80124a0:	23ff      	movs	r3, #255	; 0xff
 80124a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80124a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3728      	adds	r7, #40	; 0x28
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
 80124b2:	bf00      	nop
 80124b4:	08017e8c 	.word	0x08017e8c
 80124b8:	08018038 	.word	0x08018038
 80124bc:	08017f04 	.word	0x08017f04
 80124c0:	2000011c 	.word	0x2000011c
 80124c4:	08018048 	.word	0x08018048
 80124c8:	0801802c 	.word	0x0801802c
 80124cc:	2000020c 	.word	0x2000020c
 80124d0:	08018070 	.word	0x08018070

080124d4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b08a      	sub	sp, #40	; 0x28
 80124d8:	af02      	add	r7, sp, #8
 80124da:	60f8      	str	r0, [r7, #12]
 80124dc:	60b9      	str	r1, [r7, #8]
 80124de:	607a      	str	r2, [r7, #4]
 80124e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80124e2:	2300      	movs	r3, #0
 80124e4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d106      	bne.n	80124fa <etharp_raw+0x26>
 80124ec:	4b3a      	ldr	r3, [pc, #232]	; (80125d8 <etharp_raw+0x104>)
 80124ee:	f240 4257 	movw	r2, #1111	; 0x457
 80124f2:	493a      	ldr	r1, [pc, #232]	; (80125dc <etharp_raw+0x108>)
 80124f4:	483a      	ldr	r0, [pc, #232]	; (80125e0 <etharp_raw+0x10c>)
 80124f6:	f001 fc87 	bl	8013e08 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80124fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80124fe:	211c      	movs	r1, #28
 8012500:	200e      	movs	r0, #14
 8012502:	f7f5 fe7f 	bl	8008204 <pbuf_alloc>
 8012506:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012508:	69bb      	ldr	r3, [r7, #24]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d102      	bne.n	8012514 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801250e:	f04f 33ff 	mov.w	r3, #4294967295
 8012512:	e05d      	b.n	80125d0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012514:	69bb      	ldr	r3, [r7, #24]
 8012516:	895b      	ldrh	r3, [r3, #10]
 8012518:	2b1b      	cmp	r3, #27
 801251a:	d806      	bhi.n	801252a <etharp_raw+0x56>
 801251c:	4b2e      	ldr	r3, [pc, #184]	; (80125d8 <etharp_raw+0x104>)
 801251e:	f240 4262 	movw	r2, #1122	; 0x462
 8012522:	4930      	ldr	r1, [pc, #192]	; (80125e4 <etharp_raw+0x110>)
 8012524:	482e      	ldr	r0, [pc, #184]	; (80125e0 <etharp_raw+0x10c>)
 8012526:	f001 fc6f 	bl	8013e08 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801252a:	69bb      	ldr	r3, [r7, #24]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012530:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012532:	4618      	mov	r0, r3
 8012534:	f7f4 fe66 	bl	8007204 <lwip_htons>
 8012538:	4603      	mov	r3, r0
 801253a:	461a      	mov	r2, r3
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012546:	2b06      	cmp	r3, #6
 8012548:	d006      	beq.n	8012558 <etharp_raw+0x84>
 801254a:	4b23      	ldr	r3, [pc, #140]	; (80125d8 <etharp_raw+0x104>)
 801254c:	f240 4269 	movw	r2, #1129	; 0x469
 8012550:	4925      	ldr	r1, [pc, #148]	; (80125e8 <etharp_raw+0x114>)
 8012552:	4823      	ldr	r0, [pc, #140]	; (80125e0 <etharp_raw+0x10c>)
 8012554:	f001 fc58 	bl	8013e08 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	3308      	adds	r3, #8
 801255c:	2206      	movs	r2, #6
 801255e:	6839      	ldr	r1, [r7, #0]
 8012560:	4618      	mov	r0, r3
 8012562:	f001 fc3b 	bl	8013ddc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	3312      	adds	r3, #18
 801256a:	2206      	movs	r2, #6
 801256c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801256e:	4618      	mov	r0, r3
 8012570:	f001 fc34 	bl	8013ddc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	330e      	adds	r3, #14
 8012578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801257a:	6812      	ldr	r2, [r2, #0]
 801257c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	3318      	adds	r3, #24
 8012582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012584:	6812      	ldr	r2, [r2, #0]
 8012586:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	2200      	movs	r2, #0
 801258c:	701a      	strb	r2, [r3, #0]
 801258e:	2200      	movs	r2, #0
 8012590:	f042 0201 	orr.w	r2, r2, #1
 8012594:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	2200      	movs	r2, #0
 801259a:	f042 0208 	orr.w	r2, r2, #8
 801259e:	709a      	strb	r2, [r3, #2]
 80125a0:	2200      	movs	r2, #0
 80125a2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	2206      	movs	r2, #6
 80125a8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	2204      	movs	r2, #4
 80125ae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80125b0:	f640 0306 	movw	r3, #2054	; 0x806
 80125b4:	9300      	str	r3, [sp, #0]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	68ba      	ldr	r2, [r7, #8]
 80125ba:	69b9      	ldr	r1, [r7, #24]
 80125bc:	68f8      	ldr	r0, [r7, #12]
 80125be:	f001 fb93 	bl	8013ce8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80125c2:	69b8      	ldr	r0, [r7, #24]
 80125c4:	f7f6 f902 	bl	80087cc <pbuf_free>
  p = NULL;
 80125c8:	2300      	movs	r3, #0
 80125ca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80125cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3720      	adds	r7, #32
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	08017e8c 	.word	0x08017e8c
 80125dc:	08017fdc 	.word	0x08017fdc
 80125e0:	08017f04 	.word	0x08017f04
 80125e4:	0801808c 	.word	0x0801808c
 80125e8:	080180c0 	.word	0x080180c0

080125ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b088      	sub	sp, #32
 80125f0:	af04      	add	r7, sp, #16
 80125f2:	60f8      	str	r0, [r7, #12]
 80125f4:	60b9      	str	r1, [r7, #8]
 80125f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012608:	2201      	movs	r2, #1
 801260a:	9203      	str	r2, [sp, #12]
 801260c:	68ba      	ldr	r2, [r7, #8]
 801260e:	9202      	str	r2, [sp, #8]
 8012610:	4a06      	ldr	r2, [pc, #24]	; (801262c <etharp_request_dst+0x40>)
 8012612:	9201      	str	r2, [sp, #4]
 8012614:	9300      	str	r3, [sp, #0]
 8012616:	4603      	mov	r3, r0
 8012618:	687a      	ldr	r2, [r7, #4]
 801261a:	68f8      	ldr	r0, [r7, #12]
 801261c:	f7ff ff5a 	bl	80124d4 <etharp_raw>
 8012620:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012622:	4618      	mov	r0, r3
 8012624:	3710      	adds	r7, #16
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}
 801262a:	bf00      	nop
 801262c:	08018650 	.word	0x08018650

08012630 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801263a:	4a05      	ldr	r2, [pc, #20]	; (8012650 <etharp_request+0x20>)
 801263c:	6839      	ldr	r1, [r7, #0]
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f7ff ffd4 	bl	80125ec <etharp_request_dst>
 8012644:	4603      	mov	r3, r0
}
 8012646:	4618      	mov	r0, r3
 8012648:	3708      	adds	r7, #8
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}
 801264e:	bf00      	nop
 8012650:	08018648 	.word	0x08018648

08012654 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b08e      	sub	sp, #56	; 0x38
 8012658:	af04      	add	r7, sp, #16
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801265e:	4b79      	ldr	r3, [pc, #484]	; (8012844 <icmp_input+0x1f0>)
 8012660:	689b      	ldr	r3, [r3, #8]
 8012662:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012666:	781b      	ldrb	r3, [r3, #0]
 8012668:	f003 030f 	and.w	r3, r3, #15
 801266c:	b2db      	uxtb	r3, r3
 801266e:	009b      	lsls	r3, r3, #2
 8012670:	b2db      	uxtb	r3, r3
 8012672:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012674:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012676:	2b13      	cmp	r3, #19
 8012678:	f240 80cd 	bls.w	8012816 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	895b      	ldrh	r3, [r3, #10]
 8012680:	2b03      	cmp	r3, #3
 8012682:	f240 80ca 	bls.w	801281a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	781b      	ldrb	r3, [r3, #0]
 801268c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012690:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012694:	2b00      	cmp	r3, #0
 8012696:	f000 80b7 	beq.w	8012808 <icmp_input+0x1b4>
 801269a:	2b08      	cmp	r3, #8
 801269c:	f040 80b7 	bne.w	801280e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80126a0:	4b69      	ldr	r3, [pc, #420]	; (8012848 <icmp_input+0x1f4>)
 80126a2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80126a4:	4b67      	ldr	r3, [pc, #412]	; (8012844 <icmp_input+0x1f0>)
 80126a6:	695b      	ldr	r3, [r3, #20]
 80126a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80126ac:	2be0      	cmp	r3, #224	; 0xe0
 80126ae:	f000 80bb 	beq.w	8012828 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80126b2:	4b64      	ldr	r3, [pc, #400]	; (8012844 <icmp_input+0x1f0>)
 80126b4:	695b      	ldr	r3, [r3, #20]
 80126b6:	4a63      	ldr	r2, [pc, #396]	; (8012844 <icmp_input+0x1f0>)
 80126b8:	6812      	ldr	r2, [r2, #0]
 80126ba:	4611      	mov	r1, r2
 80126bc:	4618      	mov	r0, r3
 80126be:	f000 fc0b 	bl	8012ed8 <ip4_addr_isbroadcast_u32>
 80126c2:	4603      	mov	r3, r0
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	f040 80b1 	bne.w	801282c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	891b      	ldrh	r3, [r3, #8]
 80126ce:	2b07      	cmp	r3, #7
 80126d0:	f240 80a5 	bls.w	801281e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80126d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126d6:	330e      	adds	r3, #14
 80126d8:	4619      	mov	r1, r3
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f7f5 ffe0 	bl	80086a0 <pbuf_add_header>
 80126e0:	4603      	mov	r3, r0
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d04b      	beq.n	801277e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	891a      	ldrh	r2, [r3, #8]
 80126ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126ec:	4413      	add	r3, r2
 80126ee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	891b      	ldrh	r3, [r3, #8]
 80126f4:	8b7a      	ldrh	r2, [r7, #26]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	f0c0 809a 	bcc.w	8012830 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80126fc:	8b7b      	ldrh	r3, [r7, #26]
 80126fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012702:	4619      	mov	r1, r3
 8012704:	200e      	movs	r0, #14
 8012706:	f7f5 fd7d 	bl	8008204 <pbuf_alloc>
 801270a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	2b00      	cmp	r3, #0
 8012710:	f000 8090 	beq.w	8012834 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	895b      	ldrh	r3, [r3, #10]
 8012718:	461a      	mov	r2, r3
 801271a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801271c:	3308      	adds	r3, #8
 801271e:	429a      	cmp	r2, r3
 8012720:	d203      	bcs.n	801272a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012722:	6978      	ldr	r0, [r7, #20]
 8012724:	f7f6 f852 	bl	80087cc <pbuf_free>
          goto icmperr;
 8012728:	e085      	b.n	8012836 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	685b      	ldr	r3, [r3, #4]
 801272e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012732:	4618      	mov	r0, r3
 8012734:	f001 fb52 	bl	8013ddc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801273a:	4619      	mov	r1, r3
 801273c:	6978      	ldr	r0, [r7, #20]
 801273e:	f7f5 ffbf 	bl	80086c0 <pbuf_remove_header>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d009      	beq.n	801275c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012748:	4b40      	ldr	r3, [pc, #256]	; (801284c <icmp_input+0x1f8>)
 801274a:	22b6      	movs	r2, #182	; 0xb6
 801274c:	4940      	ldr	r1, [pc, #256]	; (8012850 <icmp_input+0x1fc>)
 801274e:	4841      	ldr	r0, [pc, #260]	; (8012854 <icmp_input+0x200>)
 8012750:	f001 fb5a 	bl	8013e08 <iprintf>
          pbuf_free(r);
 8012754:	6978      	ldr	r0, [r7, #20]
 8012756:	f7f6 f839 	bl	80087cc <pbuf_free>
          goto icmperr;
 801275a:	e06c      	b.n	8012836 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801275c:	6879      	ldr	r1, [r7, #4]
 801275e:	6978      	ldr	r0, [r7, #20]
 8012760:	f7f6 f95c 	bl	8008a1c <pbuf_copy>
 8012764:	4603      	mov	r3, r0
 8012766:	2b00      	cmp	r3, #0
 8012768:	d003      	beq.n	8012772 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801276a:	6978      	ldr	r0, [r7, #20]
 801276c:	f7f6 f82e 	bl	80087cc <pbuf_free>
          goto icmperr;
 8012770:	e061      	b.n	8012836 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f7f6 f82a 	bl	80087cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	607b      	str	r3, [r7, #4]
 801277c:	e00f      	b.n	801279e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801277e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012780:	330e      	adds	r3, #14
 8012782:	4619      	mov	r1, r3
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f7f5 ff9b 	bl	80086c0 <pbuf_remove_header>
 801278a:	4603      	mov	r3, r0
 801278c:	2b00      	cmp	r3, #0
 801278e:	d006      	beq.n	801279e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012790:	4b2e      	ldr	r3, [pc, #184]	; (801284c <icmp_input+0x1f8>)
 8012792:	22c7      	movs	r2, #199	; 0xc7
 8012794:	4930      	ldr	r1, [pc, #192]	; (8012858 <icmp_input+0x204>)
 8012796:	482f      	ldr	r0, [pc, #188]	; (8012854 <icmp_input+0x200>)
 8012798:	f001 fb36 	bl	8013e08 <iprintf>
          goto icmperr;
 801279c:	e04b      	b.n	8012836 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80127a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80127a6:	4619      	mov	r1, r3
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f7f5 ff79 	bl	80086a0 <pbuf_add_header>
 80127ae:	4603      	mov	r3, r0
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d12b      	bne.n	801280c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80127ba:	69fb      	ldr	r3, [r7, #28]
 80127bc:	681a      	ldr	r2, [r3, #0]
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80127c2:	4b20      	ldr	r3, [pc, #128]	; (8012844 <icmp_input+0x1f0>)
 80127c4:	691a      	ldr	r2, [r3, #16]
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	2200      	movs	r2, #0
 80127ce:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	2200      	movs	r2, #0
 80127d4:	709a      	strb	r2, [r3, #2]
 80127d6:	2200      	movs	r2, #0
 80127d8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	22ff      	movs	r2, #255	; 0xff
 80127de:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	2200      	movs	r2, #0
 80127e4:	729a      	strb	r2, [r3, #10]
 80127e6:	2200      	movs	r2, #0
 80127e8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	9302      	str	r3, [sp, #8]
 80127ee:	2301      	movs	r3, #1
 80127f0:	9301      	str	r3, [sp, #4]
 80127f2:	2300      	movs	r3, #0
 80127f4:	9300      	str	r3, [sp, #0]
 80127f6:	23ff      	movs	r3, #255	; 0xff
 80127f8:	2200      	movs	r2, #0
 80127fa:	69f9      	ldr	r1, [r7, #28]
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 fa93 	bl	8012d28 <ip4_output_if>
 8012802:	4603      	mov	r3, r0
 8012804:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012806:	e001      	b.n	801280c <icmp_input+0x1b8>
      break;
 8012808:	bf00      	nop
 801280a:	e000      	b.n	801280e <icmp_input+0x1ba>
      break;
 801280c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f7f5 ffdc 	bl	80087cc <pbuf_free>
  return;
 8012814:	e013      	b.n	801283e <icmp_input+0x1ea>
    goto lenerr;
 8012816:	bf00      	nop
 8012818:	e002      	b.n	8012820 <icmp_input+0x1cc>
    goto lenerr;
 801281a:	bf00      	nop
 801281c:	e000      	b.n	8012820 <icmp_input+0x1cc>
        goto lenerr;
 801281e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	f7f5 ffd3 	bl	80087cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012826:	e00a      	b.n	801283e <icmp_input+0x1ea>
        goto icmperr;
 8012828:	bf00      	nop
 801282a:	e004      	b.n	8012836 <icmp_input+0x1e2>
        goto icmperr;
 801282c:	bf00      	nop
 801282e:	e002      	b.n	8012836 <icmp_input+0x1e2>
          goto icmperr;
 8012830:	bf00      	nop
 8012832:	e000      	b.n	8012836 <icmp_input+0x1e2>
          goto icmperr;
 8012834:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f7f5 ffc8 	bl	80087cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801283c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801283e:	3728      	adds	r7, #40	; 0x28
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}
 8012844:	200037a4 	.word	0x200037a4
 8012848:	200037b8 	.word	0x200037b8
 801284c:	08018104 	.word	0x08018104
 8012850:	0801813c 	.word	0x0801813c
 8012854:	08018174 	.word	0x08018174
 8012858:	0801819c 	.word	0x0801819c

0801285c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	460b      	mov	r3, r1
 8012866:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012868:	78fb      	ldrb	r3, [r7, #3]
 801286a:	461a      	mov	r2, r3
 801286c:	2103      	movs	r1, #3
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f000 f814 	bl	801289c <icmp_send_response>
}
 8012874:	bf00      	nop
 8012876:	3708      	adds	r7, #8
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	460b      	mov	r3, r1
 8012886:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012888:	78fb      	ldrb	r3, [r7, #3]
 801288a:	461a      	mov	r2, r3
 801288c:	210b      	movs	r1, #11
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f000 f804 	bl	801289c <icmp_send_response>
}
 8012894:	bf00      	nop
 8012896:	3708      	adds	r7, #8
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b08c      	sub	sp, #48	; 0x30
 80128a0:	af04      	add	r7, sp, #16
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	460b      	mov	r3, r1
 80128a6:	70fb      	strb	r3, [r7, #3]
 80128a8:	4613      	mov	r3, r2
 80128aa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80128ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128b0:	2124      	movs	r1, #36	; 0x24
 80128b2:	2022      	movs	r0, #34	; 0x22
 80128b4:	f7f5 fca6 	bl	8008204 <pbuf_alloc>
 80128b8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80128ba:	69fb      	ldr	r3, [r7, #28]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d04c      	beq.n	801295a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80128c0:	69fb      	ldr	r3, [r7, #28]
 80128c2:	895b      	ldrh	r3, [r3, #10]
 80128c4:	2b23      	cmp	r3, #35	; 0x23
 80128c6:	d806      	bhi.n	80128d6 <icmp_send_response+0x3a>
 80128c8:	4b26      	ldr	r3, [pc, #152]	; (8012964 <icmp_send_response+0xc8>)
 80128ca:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80128ce:	4926      	ldr	r1, [pc, #152]	; (8012968 <icmp_send_response+0xcc>)
 80128d0:	4826      	ldr	r0, [pc, #152]	; (801296c <icmp_send_response+0xd0>)
 80128d2:	f001 fa99 	bl	8013e08 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	685b      	ldr	r3, [r3, #4]
 80128da:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80128dc:	69fb      	ldr	r3, [r7, #28]
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	78fa      	ldrb	r2, [r7, #3]
 80128e6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	78ba      	ldrb	r2, [r7, #2]
 80128ec:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	2200      	movs	r2, #0
 80128f2:	711a      	strb	r2, [r3, #4]
 80128f4:	2200      	movs	r2, #0
 80128f6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	2200      	movs	r2, #0
 80128fc:	719a      	strb	r2, [r3, #6]
 80128fe:	2200      	movs	r2, #0
 8012900:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012902:	69fb      	ldr	r3, [r7, #28]
 8012904:	685b      	ldr	r3, [r3, #4]
 8012906:	f103 0008 	add.w	r0, r3, #8
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	685b      	ldr	r3, [r3, #4]
 801290e:	221c      	movs	r2, #28
 8012910:	4619      	mov	r1, r3
 8012912:	f001 fa63 	bl	8013ddc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012916:	69bb      	ldr	r3, [r7, #24]
 8012918:	68db      	ldr	r3, [r3, #12]
 801291a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801291c:	f107 030c 	add.w	r3, r7, #12
 8012920:	4618      	mov	r0, r3
 8012922:	f000 f825 	bl	8012970 <ip4_route>
 8012926:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d011      	beq.n	8012952 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	2200      	movs	r2, #0
 8012932:	709a      	strb	r2, [r3, #2]
 8012934:	2200      	movs	r2, #0
 8012936:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012938:	f107 020c 	add.w	r2, r7, #12
 801293c:	693b      	ldr	r3, [r7, #16]
 801293e:	9302      	str	r3, [sp, #8]
 8012940:	2301      	movs	r3, #1
 8012942:	9301      	str	r3, [sp, #4]
 8012944:	2300      	movs	r3, #0
 8012946:	9300      	str	r3, [sp, #0]
 8012948:	23ff      	movs	r3, #255	; 0xff
 801294a:	2100      	movs	r1, #0
 801294c:	69f8      	ldr	r0, [r7, #28]
 801294e:	f000 f9eb 	bl	8012d28 <ip4_output_if>
  }
  pbuf_free(q);
 8012952:	69f8      	ldr	r0, [r7, #28]
 8012954:	f7f5 ff3a 	bl	80087cc <pbuf_free>
 8012958:	e000      	b.n	801295c <icmp_send_response+0xc0>
    return;
 801295a:	bf00      	nop
}
 801295c:	3720      	adds	r7, #32
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	08018104 	.word	0x08018104
 8012968:	080181d0 	.word	0x080181d0
 801296c:	08018174 	.word	0x08018174

08012970 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012970:	b480      	push	{r7}
 8012972:	b085      	sub	sp, #20
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012978:	4b33      	ldr	r3, [pc, #204]	; (8012a48 <ip4_route+0xd8>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	60fb      	str	r3, [r7, #12]
 801297e:	e036      	b.n	80129ee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012986:	f003 0301 	and.w	r3, r3, #1
 801298a:	b2db      	uxtb	r3, r3
 801298c:	2b00      	cmp	r3, #0
 801298e:	d02b      	beq.n	80129e8 <ip4_route+0x78>
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012996:	089b      	lsrs	r3, r3, #2
 8012998:	f003 0301 	and.w	r3, r3, #1
 801299c:	b2db      	uxtb	r3, r3
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d022      	beq.n	80129e8 <ip4_route+0x78>
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	3304      	adds	r3, #4
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d01d      	beq.n	80129e8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681a      	ldr	r2, [r3, #0]
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	3304      	adds	r3, #4
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	405a      	eors	r2, r3
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	3308      	adds	r3, #8
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	4013      	ands	r3, r2
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d101      	bne.n	80129c8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	e038      	b.n	8012a3a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80129ce:	f003 0302 	and.w	r3, r3, #2
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d108      	bne.n	80129e8 <ip4_route+0x78>
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	330c      	adds	r3, #12
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d101      	bne.n	80129e8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	e028      	b.n	8012a3a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	60fb      	str	r3, [r7, #12]
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d1c5      	bne.n	8012980 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80129f4:	4b15      	ldr	r3, [pc, #84]	; (8012a4c <ip4_route+0xdc>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d01a      	beq.n	8012a32 <ip4_route+0xc2>
 80129fc:	4b13      	ldr	r3, [pc, #76]	; (8012a4c <ip4_route+0xdc>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a04:	f003 0301 	and.w	r3, r3, #1
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d012      	beq.n	8012a32 <ip4_route+0xc2>
 8012a0c:	4b0f      	ldr	r3, [pc, #60]	; (8012a4c <ip4_route+0xdc>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a14:	f003 0304 	and.w	r3, r3, #4
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d00a      	beq.n	8012a32 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012a1c:	4b0b      	ldr	r3, [pc, #44]	; (8012a4c <ip4_route+0xdc>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	3304      	adds	r3, #4
 8012a22:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d004      	beq.n	8012a32 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	b2db      	uxtb	r3, r3
 8012a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8012a30:	d101      	bne.n	8012a36 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012a32:	2300      	movs	r3, #0
 8012a34:	e001      	b.n	8012a3a <ip4_route+0xca>
  }

  return netif_default;
 8012a36:	4b05      	ldr	r3, [pc, #20]	; (8012a4c <ip4_route+0xdc>)
 8012a38:	681b      	ldr	r3, [r3, #0]
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3714      	adds	r7, #20
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr
 8012a46:	bf00      	nop
 8012a48:	20006cf8 	.word	0x20006cf8
 8012a4c:	20006cfc 	.word	0x20006cfc

08012a50 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b082      	sub	sp, #8
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a5e:	f003 0301 	and.w	r3, r3, #1
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d016      	beq.n	8012a96 <ip4_input_accept+0x46>
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	3304      	adds	r3, #4
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d011      	beq.n	8012a96 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012a72:	4b0b      	ldr	r3, [pc, #44]	; (8012aa0 <ip4_input_accept+0x50>)
 8012a74:	695a      	ldr	r2, [r3, #20]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	3304      	adds	r3, #4
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	429a      	cmp	r2, r3
 8012a7e:	d008      	beq.n	8012a92 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012a80:	4b07      	ldr	r3, [pc, #28]	; (8012aa0 <ip4_input_accept+0x50>)
 8012a82:	695b      	ldr	r3, [r3, #20]
 8012a84:	6879      	ldr	r1, [r7, #4]
 8012a86:	4618      	mov	r0, r3
 8012a88:	f000 fa26 	bl	8012ed8 <ip4_addr_isbroadcast_u32>
 8012a8c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d001      	beq.n	8012a96 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012a92:	2301      	movs	r3, #1
 8012a94:	e000      	b.n	8012a98 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012a96:	2300      	movs	r3, #0
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3708      	adds	r7, #8
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	200037a4 	.word	0x200037a4

08012aa4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b088      	sub	sp, #32
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8012aae:	2301      	movs	r3, #1
 8012ab0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8012ab8:	69fb      	ldr	r3, [r7, #28]
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	091b      	lsrs	r3, r3, #4
 8012abe:	b2db      	uxtb	r3, r3
 8012ac0:	2b04      	cmp	r3, #4
 8012ac2:	d004      	beq.n	8012ace <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f7f5 fe81 	bl	80087cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012aca:	2300      	movs	r3, #0
 8012acc:	e123      	b.n	8012d16 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012ace:	69fb      	ldr	r3, [r7, #28]
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	f003 030f 	and.w	r3, r3, #15
 8012ad6:	b2db      	uxtb	r3, r3
 8012ad8:	009b      	lsls	r3, r3, #2
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012ade:	69fb      	ldr	r3, [r7, #28]
 8012ae0:	885b      	ldrh	r3, [r3, #2]
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7f4 fb8d 	bl	8007204 <lwip_htons>
 8012aea:	4603      	mov	r3, r0
 8012aec:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	891b      	ldrh	r3, [r3, #8]
 8012af2:	8a3a      	ldrh	r2, [r7, #16]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d204      	bcs.n	8012b02 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8012af8:	8a3b      	ldrh	r3, [r7, #16]
 8012afa:	4619      	mov	r1, r3
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f7f5 fcdf 	bl	80084c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	895b      	ldrh	r3, [r3, #10]
 8012b06:	8a7a      	ldrh	r2, [r7, #18]
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d807      	bhi.n	8012b1c <ip4_input+0x78>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	891b      	ldrh	r3, [r3, #8]
 8012b10:	8a3a      	ldrh	r2, [r7, #16]
 8012b12:	429a      	cmp	r2, r3
 8012b14:	d802      	bhi.n	8012b1c <ip4_input+0x78>
 8012b16:	8a7b      	ldrh	r3, [r7, #18]
 8012b18:	2b13      	cmp	r3, #19
 8012b1a:	d804      	bhi.n	8012b26 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f7f5 fe55 	bl	80087cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012b22:	2300      	movs	r3, #0
 8012b24:	e0f7      	b.n	8012d16 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012b26:	69fb      	ldr	r3, [r7, #28]
 8012b28:	691b      	ldr	r3, [r3, #16]
 8012b2a:	4a7d      	ldr	r2, [pc, #500]	; (8012d20 <ip4_input+0x27c>)
 8012b2c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012b2e:	69fb      	ldr	r3, [r7, #28]
 8012b30:	68db      	ldr	r3, [r3, #12]
 8012b32:	4a7b      	ldr	r2, [pc, #492]	; (8012d20 <ip4_input+0x27c>)
 8012b34:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012b36:	4b7a      	ldr	r3, [pc, #488]	; (8012d20 <ip4_input+0x27c>)
 8012b38:	695b      	ldr	r3, [r3, #20]
 8012b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012b3e:	2be0      	cmp	r3, #224	; 0xe0
 8012b40:	d112      	bne.n	8012b68 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012b48:	f003 0301 	and.w	r3, r3, #1
 8012b4c:	b2db      	uxtb	r3, r3
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d007      	beq.n	8012b62 <ip4_input+0xbe>
 8012b52:	683b      	ldr	r3, [r7, #0]
 8012b54:	3304      	adds	r3, #4
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d002      	beq.n	8012b62 <ip4_input+0xbe>
      netif = inp;
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	61bb      	str	r3, [r7, #24]
 8012b60:	e02a      	b.n	8012bb8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8012b62:	2300      	movs	r3, #0
 8012b64:	61bb      	str	r3, [r7, #24]
 8012b66:	e027      	b.n	8012bb8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012b68:	6838      	ldr	r0, [r7, #0]
 8012b6a:	f7ff ff71 	bl	8012a50 <ip4_input_accept>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d002      	beq.n	8012b7a <ip4_input+0xd6>
      netif = inp;
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	61bb      	str	r3, [r7, #24]
 8012b78:	e01e      	b.n	8012bb8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012b7e:	4b68      	ldr	r3, [pc, #416]	; (8012d20 <ip4_input+0x27c>)
 8012b80:	695b      	ldr	r3, [r3, #20]
 8012b82:	b2db      	uxtb	r3, r3
 8012b84:	2b7f      	cmp	r3, #127	; 0x7f
 8012b86:	d017      	beq.n	8012bb8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012b88:	4b66      	ldr	r3, [pc, #408]	; (8012d24 <ip4_input+0x280>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	61bb      	str	r3, [r7, #24]
 8012b8e:	e00e      	b.n	8012bae <ip4_input+0x10a>
          if (netif == inp) {
 8012b90:	69ba      	ldr	r2, [r7, #24]
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d006      	beq.n	8012ba6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012b98:	69b8      	ldr	r0, [r7, #24]
 8012b9a:	f7ff ff59 	bl	8012a50 <ip4_input_accept>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d108      	bne.n	8012bb6 <ip4_input+0x112>
 8012ba4:	e000      	b.n	8012ba8 <ip4_input+0x104>
            continue;
 8012ba6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012ba8:	69bb      	ldr	r3, [r7, #24]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	61bb      	str	r3, [r7, #24]
 8012bae:	69bb      	ldr	r3, [r7, #24]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d1ed      	bne.n	8012b90 <ip4_input+0xec>
 8012bb4:	e000      	b.n	8012bb8 <ip4_input+0x114>
            break;
 8012bb6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012bb8:	69bb      	ldr	r3, [r7, #24]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d111      	bne.n	8012be2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012bbe:	69fb      	ldr	r3, [r7, #28]
 8012bc0:	7a5b      	ldrb	r3, [r3, #9]
 8012bc2:	2b11      	cmp	r3, #17
 8012bc4:	d10d      	bne.n	8012be2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012bc6:	8a7b      	ldrh	r3, [r7, #18]
 8012bc8:	69fa      	ldr	r2, [r7, #28]
 8012bca:	4413      	add	r3, r2
 8012bcc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	885b      	ldrh	r3, [r3, #2]
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8012bd8:	d103      	bne.n	8012be2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012bde:	2300      	movs	r3, #0
 8012be0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d017      	beq.n	8012c18 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012be8:	4b4d      	ldr	r3, [pc, #308]	; (8012d20 <ip4_input+0x27c>)
 8012bea:	691b      	ldr	r3, [r3, #16]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d013      	beq.n	8012c18 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012bf0:	4b4b      	ldr	r3, [pc, #300]	; (8012d20 <ip4_input+0x27c>)
 8012bf2:	691b      	ldr	r3, [r3, #16]
 8012bf4:	6839      	ldr	r1, [r7, #0]
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f000 f96e 	bl	8012ed8 <ip4_addr_isbroadcast_u32>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d105      	bne.n	8012c0e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012c02:	4b47      	ldr	r3, [pc, #284]	; (8012d20 <ip4_input+0x27c>)
 8012c04:	691b      	ldr	r3, [r3, #16]
 8012c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012c0a:	2be0      	cmp	r3, #224	; 0xe0
 8012c0c:	d104      	bne.n	8012c18 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f7f5 fddc 	bl	80087cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012c14:	2300      	movs	r3, #0
 8012c16:	e07e      	b.n	8012d16 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012c18:	69bb      	ldr	r3, [r7, #24]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d104      	bne.n	8012c28 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f7f5 fdd4 	bl	80087cc <pbuf_free>
    return ERR_OK;
 8012c24:	2300      	movs	r3, #0
 8012c26:	e076      	b.n	8012d16 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012c28:	69fb      	ldr	r3, [r7, #28]
 8012c2a:	88db      	ldrh	r3, [r3, #6]
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	461a      	mov	r2, r3
 8012c30:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012c34:	4013      	ands	r3, r2
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d00b      	beq.n	8012c52 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	f000 fc92 	bl	8013564 <ip4_reass>
 8012c40:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d101      	bne.n	8012c4c <ip4_input+0x1a8>
      return ERR_OK;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	e064      	b.n	8012d16 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012c52:	4a33      	ldr	r2, [pc, #204]	; (8012d20 <ip4_input+0x27c>)
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012c58:	4a31      	ldr	r2, [pc, #196]	; (8012d20 <ip4_input+0x27c>)
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012c5e:	4a30      	ldr	r2, [pc, #192]	; (8012d20 <ip4_input+0x27c>)
 8012c60:	69fb      	ldr	r3, [r7, #28]
 8012c62:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	f003 030f 	and.w	r3, r3, #15
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	b29a      	uxth	r2, r3
 8012c74:	4b2a      	ldr	r3, [pc, #168]	; (8012d20 <ip4_input+0x27c>)
 8012c76:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012c78:	8a7b      	ldrh	r3, [r7, #18]
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f7f5 fd1f 	bl	80086c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012c82:	69fb      	ldr	r3, [r7, #28]
 8012c84:	7a5b      	ldrb	r3, [r3, #9]
 8012c86:	2b11      	cmp	r3, #17
 8012c88:	d006      	beq.n	8012c98 <ip4_input+0x1f4>
 8012c8a:	2b11      	cmp	r3, #17
 8012c8c:	dc13      	bgt.n	8012cb6 <ip4_input+0x212>
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d00c      	beq.n	8012cac <ip4_input+0x208>
 8012c92:	2b06      	cmp	r3, #6
 8012c94:	d005      	beq.n	8012ca2 <ip4_input+0x1fe>
 8012c96:	e00e      	b.n	8012cb6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012c98:	6839      	ldr	r1, [r7, #0]
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f7fc fb26 	bl	800f2ec <udp_input>
        break;
 8012ca0:	e026      	b.n	8012cf0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012ca2:	6839      	ldr	r1, [r7, #0]
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f7f7 fed9 	bl	800aa5c <tcp_input>
        break;
 8012caa:	e021      	b.n	8012cf0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012cac:	6839      	ldr	r1, [r7, #0]
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f7ff fcd0 	bl	8012654 <icmp_input>
        break;
 8012cb4:	e01c      	b.n	8012cf0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012cb6:	4b1a      	ldr	r3, [pc, #104]	; (8012d20 <ip4_input+0x27c>)
 8012cb8:	695b      	ldr	r3, [r3, #20]
 8012cba:	69b9      	ldr	r1, [r7, #24]
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f000 f90b 	bl	8012ed8 <ip4_addr_isbroadcast_u32>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d10f      	bne.n	8012ce8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012cc8:	4b15      	ldr	r3, [pc, #84]	; (8012d20 <ip4_input+0x27c>)
 8012cca:	695b      	ldr	r3, [r3, #20]
 8012ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012cd0:	2be0      	cmp	r3, #224	; 0xe0
 8012cd2:	d009      	beq.n	8012ce8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012cd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012cd8:	4619      	mov	r1, r3
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f7f5 fd63 	bl	80087a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012ce0:	2102      	movs	r1, #2
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f7ff fdba 	bl	801285c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f7f5 fd6f 	bl	80087cc <pbuf_free>
        break;
 8012cee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012cf0:	4b0b      	ldr	r3, [pc, #44]	; (8012d20 <ip4_input+0x27c>)
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012cf6:	4b0a      	ldr	r3, [pc, #40]	; (8012d20 <ip4_input+0x27c>)
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012cfc:	4b08      	ldr	r3, [pc, #32]	; (8012d20 <ip4_input+0x27c>)
 8012cfe:	2200      	movs	r2, #0
 8012d00:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012d02:	4b07      	ldr	r3, [pc, #28]	; (8012d20 <ip4_input+0x27c>)
 8012d04:	2200      	movs	r2, #0
 8012d06:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012d08:	4b05      	ldr	r3, [pc, #20]	; (8012d20 <ip4_input+0x27c>)
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012d0e:	4b04      	ldr	r3, [pc, #16]	; (8012d20 <ip4_input+0x27c>)
 8012d10:	2200      	movs	r2, #0
 8012d12:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012d14:	2300      	movs	r3, #0
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3720      	adds	r7, #32
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	200037a4 	.word	0x200037a4
 8012d24:	20006cf8 	.word	0x20006cf8

08012d28 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b08a      	sub	sp, #40	; 0x28
 8012d2c:	af04      	add	r7, sp, #16
 8012d2e:	60f8      	str	r0, [r7, #12]
 8012d30:	60b9      	str	r1, [r7, #8]
 8012d32:	607a      	str	r2, [r7, #4]
 8012d34:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d009      	beq.n	8012d54 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d003      	beq.n	8012d4e <ip4_output_if+0x26>
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d102      	bne.n	8012d54 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d50:	3304      	adds	r3, #4
 8012d52:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012d54:	78fa      	ldrb	r2, [r7, #3]
 8012d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d58:	9302      	str	r3, [sp, #8]
 8012d5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012d5e:	9301      	str	r3, [sp, #4]
 8012d60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d64:	9300      	str	r3, [sp, #0]
 8012d66:	4613      	mov	r3, r2
 8012d68:	687a      	ldr	r2, [r7, #4]
 8012d6a:	6979      	ldr	r1, [r7, #20]
 8012d6c:	68f8      	ldr	r0, [r7, #12]
 8012d6e:	f000 f805 	bl	8012d7c <ip4_output_if_src>
 8012d72:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3718      	adds	r7, #24
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}

08012d7c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b088      	sub	sp, #32
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	60f8      	str	r0, [r7, #12]
 8012d84:	60b9      	str	r1, [r7, #8]
 8012d86:	607a      	str	r2, [r7, #4]
 8012d88:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	7b9b      	ldrb	r3, [r3, #14]
 8012d8e:	2b01      	cmp	r3, #1
 8012d90:	d006      	beq.n	8012da0 <ip4_output_if_src+0x24>
 8012d92:	4b4b      	ldr	r3, [pc, #300]	; (8012ec0 <ip4_output_if_src+0x144>)
 8012d94:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012d98:	494a      	ldr	r1, [pc, #296]	; (8012ec4 <ip4_output_if_src+0x148>)
 8012d9a:	484b      	ldr	r0, [pc, #300]	; (8012ec8 <ip4_output_if_src+0x14c>)
 8012d9c:	f001 f834 	bl	8013e08 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d060      	beq.n	8012e68 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012da6:	2314      	movs	r3, #20
 8012da8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012daa:	2114      	movs	r1, #20
 8012dac:	68f8      	ldr	r0, [r7, #12]
 8012dae:	f7f5 fc77 	bl	80086a0 <pbuf_add_header>
 8012db2:	4603      	mov	r3, r0
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d002      	beq.n	8012dbe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012db8:	f06f 0301 	mvn.w	r3, #1
 8012dbc:	e07c      	b.n	8012eb8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	685b      	ldr	r3, [r3, #4]
 8012dc2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	895b      	ldrh	r3, [r3, #10]
 8012dc8:	2b13      	cmp	r3, #19
 8012dca:	d806      	bhi.n	8012dda <ip4_output_if_src+0x5e>
 8012dcc:	4b3c      	ldr	r3, [pc, #240]	; (8012ec0 <ip4_output_if_src+0x144>)
 8012dce:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012dd2:	493e      	ldr	r1, [pc, #248]	; (8012ecc <ip4_output_if_src+0x150>)
 8012dd4:	483c      	ldr	r0, [pc, #240]	; (8012ec8 <ip4_output_if_src+0x14c>)
 8012dd6:	f001 f817 	bl	8013e08 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	78fa      	ldrb	r2, [r7, #3]
 8012dde:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012de6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012df0:	8b7b      	ldrh	r3, [r7, #26]
 8012df2:	089b      	lsrs	r3, r3, #2
 8012df4:	b29b      	uxth	r3, r3
 8012df6:	b2db      	uxtb	r3, r3
 8012df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dfc:	b2da      	uxtb	r2, r3
 8012dfe:	69fb      	ldr	r3, [r7, #28]
 8012e00:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012e02:	69fb      	ldr	r3, [r7, #28]
 8012e04:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012e08:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	891b      	ldrh	r3, [r3, #8]
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7f4 f9f8 	bl	8007204 <lwip_htons>
 8012e14:	4603      	mov	r3, r0
 8012e16:	461a      	mov	r2, r3
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012e1c:	69fb      	ldr	r3, [r7, #28]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	719a      	strb	r2, [r3, #6]
 8012e22:	2200      	movs	r2, #0
 8012e24:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012e26:	4b2a      	ldr	r3, [pc, #168]	; (8012ed0 <ip4_output_if_src+0x154>)
 8012e28:	881b      	ldrh	r3, [r3, #0]
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7f4 f9ea 	bl	8007204 <lwip_htons>
 8012e30:	4603      	mov	r3, r0
 8012e32:	461a      	mov	r2, r3
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012e38:	4b25      	ldr	r3, [pc, #148]	; (8012ed0 <ip4_output_if_src+0x154>)
 8012e3a:	881b      	ldrh	r3, [r3, #0]
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	b29a      	uxth	r2, r3
 8012e40:	4b23      	ldr	r3, [pc, #140]	; (8012ed0 <ip4_output_if_src+0x154>)
 8012e42:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d104      	bne.n	8012e54 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012e4a:	4b22      	ldr	r3, [pc, #136]	; (8012ed4 <ip4_output_if_src+0x158>)
 8012e4c:	681a      	ldr	r2, [r3, #0]
 8012e4e:	69fb      	ldr	r3, [r7, #28]
 8012e50:	60da      	str	r2, [r3, #12]
 8012e52:	e003      	b.n	8012e5c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	681a      	ldr	r2, [r3, #0]
 8012e58:	69fb      	ldr	r3, [r7, #28]
 8012e5a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012e5c:	69fb      	ldr	r3, [r7, #28]
 8012e5e:	2200      	movs	r2, #0
 8012e60:	729a      	strb	r2, [r3, #10]
 8012e62:	2200      	movs	r2, #0
 8012e64:	72da      	strb	r2, [r3, #11]
 8012e66:	e00f      	b.n	8012e88 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	895b      	ldrh	r3, [r3, #10]
 8012e6c:	2b13      	cmp	r3, #19
 8012e6e:	d802      	bhi.n	8012e76 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012e70:	f06f 0301 	mvn.w	r3, #1
 8012e74:	e020      	b.n	8012eb8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	685b      	ldr	r3, [r3, #4]
 8012e7a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012e7c:	69fb      	ldr	r3, [r7, #28]
 8012e7e:	691b      	ldr	r3, [r3, #16]
 8012e80:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012e82:	f107 0314 	add.w	r3, r7, #20
 8012e86:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d00c      	beq.n	8012eaa <ip4_output_if_src+0x12e>
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	891a      	ldrh	r2, [r3, #8]
 8012e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	d906      	bls.n	8012eaa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012e9c:	687a      	ldr	r2, [r7, #4]
 8012e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012ea0:	68f8      	ldr	r0, [r7, #12]
 8012ea2:	f000 fd4d 	bl	8013940 <ip4_frag>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	e006      	b.n	8012eb8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eac:	695b      	ldr	r3, [r3, #20]
 8012eae:	687a      	ldr	r2, [r7, #4]
 8012eb0:	68f9      	ldr	r1, [r7, #12]
 8012eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012eb4:	4798      	blx	r3
 8012eb6:	4603      	mov	r3, r0
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3720      	adds	r7, #32
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}
 8012ec0:	080181fc 	.word	0x080181fc
 8012ec4:	08018230 	.word	0x08018230
 8012ec8:	0801823c 	.word	0x0801823c
 8012ecc:	08018264 	.word	0x08018264
 8012ed0:	2000020e 	.word	0x2000020e
 8012ed4:	08018640 	.word	0x08018640

08012ed8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012ed8:	b480      	push	{r7}
 8012eda:	b085      	sub	sp, #20
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
 8012ee0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eec:	d002      	beq.n	8012ef4 <ip4_addr_isbroadcast_u32+0x1c>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d101      	bne.n	8012ef8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	e02a      	b.n	8012f4e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012efe:	f003 0302 	and.w	r3, r3, #2
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d101      	bne.n	8012f0a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012f06:	2300      	movs	r3, #0
 8012f08:	e021      	b.n	8012f4e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	3304      	adds	r3, #4
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	687a      	ldr	r2, [r7, #4]
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d101      	bne.n	8012f1a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012f16:	2300      	movs	r3, #0
 8012f18:	e019      	b.n	8012f4e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012f1a:	68fa      	ldr	r2, [r7, #12]
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	3304      	adds	r3, #4
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	405a      	eors	r2, r3
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	3308      	adds	r3, #8
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	4013      	ands	r3, r2
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d10d      	bne.n	8012f4c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	3308      	adds	r3, #8
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	43da      	mvns	r2, r3
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	3308      	adds	r3, #8
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d101      	bne.n	8012f4c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	e000      	b.n	8012f4e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012f4c:	2300      	movs	r3, #0
  }
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3714      	adds	r7, #20
 8012f52:	46bd      	mov	sp, r7
 8012f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f58:	4770      	bx	lr
	...

08012f5c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012f62:	2300      	movs	r3, #0
 8012f64:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012f66:	4b12      	ldr	r3, [pc, #72]	; (8012fb0 <ip_reass_tmr+0x54>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012f6c:	e018      	b.n	8012fa0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	7fdb      	ldrb	r3, [r3, #31]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d00b      	beq.n	8012f8e <ip_reass_tmr+0x32>
      r->timer--;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	7fdb      	ldrb	r3, [r3, #31]
 8012f7a:	3b01      	subs	r3, #1
 8012f7c:	b2da      	uxtb	r2, r3
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	60fb      	str	r3, [r7, #12]
 8012f8c:	e008      	b.n	8012fa0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012f98:	68b9      	ldr	r1, [r7, #8]
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f000 f80a 	bl	8012fb4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d1e3      	bne.n	8012f6e <ip_reass_tmr+0x12>
    }
  }
}
 8012fa6:	bf00      	nop
 8012fa8:	bf00      	nop
 8012faa:	3710      	adds	r7, #16
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}
 8012fb0:	20000210 	.word	0x20000210

08012fb4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b088      	sub	sp, #32
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012fc2:	683a      	ldr	r2, [r7, #0]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d105      	bne.n	8012fd6 <ip_reass_free_complete_datagram+0x22>
 8012fca:	4b45      	ldr	r3, [pc, #276]	; (80130e0 <ip_reass_free_complete_datagram+0x12c>)
 8012fcc:	22ab      	movs	r2, #171	; 0xab
 8012fce:	4945      	ldr	r1, [pc, #276]	; (80130e4 <ip_reass_free_complete_datagram+0x130>)
 8012fd0:	4845      	ldr	r0, [pc, #276]	; (80130e8 <ip_reass_free_complete_datagram+0x134>)
 8012fd2:	f000 ff19 	bl	8013e08 <iprintf>
  if (prev != NULL) {
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d00a      	beq.n	8012ff2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d005      	beq.n	8012ff2 <ip_reass_free_complete_datagram+0x3e>
 8012fe6:	4b3e      	ldr	r3, [pc, #248]	; (80130e0 <ip_reass_free_complete_datagram+0x12c>)
 8012fe8:	22ad      	movs	r2, #173	; 0xad
 8012fea:	4940      	ldr	r1, [pc, #256]	; (80130ec <ip_reass_free_complete_datagram+0x138>)
 8012fec:	483e      	ldr	r0, [pc, #248]	; (80130e8 <ip_reass_free_complete_datagram+0x134>)
 8012fee:	f000 ff0b 	bl	8013e08 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012ffa:	697b      	ldr	r3, [r7, #20]
 8012ffc:	889b      	ldrh	r3, [r3, #4]
 8012ffe:	b29b      	uxth	r3, r3
 8013000:	2b00      	cmp	r3, #0
 8013002:	d12a      	bne.n	801305a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	685b      	ldr	r3, [r3, #4]
 8013008:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801300a:	697b      	ldr	r3, [r7, #20]
 801300c:	681a      	ldr	r2, [r3, #0]
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013012:	69bb      	ldr	r3, [r7, #24]
 8013014:	6858      	ldr	r0, [r3, #4]
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	3308      	adds	r3, #8
 801301a:	2214      	movs	r2, #20
 801301c:	4619      	mov	r1, r3
 801301e:	f000 fedd 	bl	8013ddc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013022:	2101      	movs	r1, #1
 8013024:	69b8      	ldr	r0, [r7, #24]
 8013026:	f7ff fc29 	bl	801287c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801302a:	69b8      	ldr	r0, [r7, #24]
 801302c:	f7f5 fc56 	bl	80088dc <pbuf_clen>
 8013030:	4603      	mov	r3, r0
 8013032:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013034:	8bfa      	ldrh	r2, [r7, #30]
 8013036:	8a7b      	ldrh	r3, [r7, #18]
 8013038:	4413      	add	r3, r2
 801303a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801303e:	db05      	blt.n	801304c <ip_reass_free_complete_datagram+0x98>
 8013040:	4b27      	ldr	r3, [pc, #156]	; (80130e0 <ip_reass_free_complete_datagram+0x12c>)
 8013042:	22bc      	movs	r2, #188	; 0xbc
 8013044:	492a      	ldr	r1, [pc, #168]	; (80130f0 <ip_reass_free_complete_datagram+0x13c>)
 8013046:	4828      	ldr	r0, [pc, #160]	; (80130e8 <ip_reass_free_complete_datagram+0x134>)
 8013048:	f000 fede 	bl	8013e08 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801304c:	8bfa      	ldrh	r2, [r7, #30]
 801304e:	8a7b      	ldrh	r3, [r7, #18]
 8013050:	4413      	add	r3, r2
 8013052:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013054:	69b8      	ldr	r0, [r7, #24]
 8013056:	f7f5 fbb9 	bl	80087cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	685b      	ldr	r3, [r3, #4]
 801305e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013060:	e01f      	b.n	80130a2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013062:	69bb      	ldr	r3, [r7, #24]
 8013064:	685b      	ldr	r3, [r3, #4]
 8013066:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013068:	69bb      	ldr	r3, [r7, #24]
 801306a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	f7f5 fc32 	bl	80088dc <pbuf_clen>
 8013078:	4603      	mov	r3, r0
 801307a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801307c:	8bfa      	ldrh	r2, [r7, #30]
 801307e:	8a7b      	ldrh	r3, [r7, #18]
 8013080:	4413      	add	r3, r2
 8013082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013086:	db05      	blt.n	8013094 <ip_reass_free_complete_datagram+0xe0>
 8013088:	4b15      	ldr	r3, [pc, #84]	; (80130e0 <ip_reass_free_complete_datagram+0x12c>)
 801308a:	22cc      	movs	r2, #204	; 0xcc
 801308c:	4918      	ldr	r1, [pc, #96]	; (80130f0 <ip_reass_free_complete_datagram+0x13c>)
 801308e:	4816      	ldr	r0, [pc, #88]	; (80130e8 <ip_reass_free_complete_datagram+0x134>)
 8013090:	f000 feba 	bl	8013e08 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013094:	8bfa      	ldrh	r2, [r7, #30]
 8013096:	8a7b      	ldrh	r3, [r7, #18]
 8013098:	4413      	add	r3, r2
 801309a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801309c:	68f8      	ldr	r0, [r7, #12]
 801309e:	f7f5 fb95 	bl	80087cc <pbuf_free>
  while (p != NULL) {
 80130a2:	69bb      	ldr	r3, [r7, #24]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d1dc      	bne.n	8013062 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80130a8:	6839      	ldr	r1, [r7, #0]
 80130aa:	6878      	ldr	r0, [r7, #4]
 80130ac:	f000 f8c2 	bl	8013234 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80130b0:	4b10      	ldr	r3, [pc, #64]	; (80130f4 <ip_reass_free_complete_datagram+0x140>)
 80130b2:	881b      	ldrh	r3, [r3, #0]
 80130b4:	8bfa      	ldrh	r2, [r7, #30]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d905      	bls.n	80130c6 <ip_reass_free_complete_datagram+0x112>
 80130ba:	4b09      	ldr	r3, [pc, #36]	; (80130e0 <ip_reass_free_complete_datagram+0x12c>)
 80130bc:	22d2      	movs	r2, #210	; 0xd2
 80130be:	490e      	ldr	r1, [pc, #56]	; (80130f8 <ip_reass_free_complete_datagram+0x144>)
 80130c0:	4809      	ldr	r0, [pc, #36]	; (80130e8 <ip_reass_free_complete_datagram+0x134>)
 80130c2:	f000 fea1 	bl	8013e08 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80130c6:	4b0b      	ldr	r3, [pc, #44]	; (80130f4 <ip_reass_free_complete_datagram+0x140>)
 80130c8:	881a      	ldrh	r2, [r3, #0]
 80130ca:	8bfb      	ldrh	r3, [r7, #30]
 80130cc:	1ad3      	subs	r3, r2, r3
 80130ce:	b29a      	uxth	r2, r3
 80130d0:	4b08      	ldr	r3, [pc, #32]	; (80130f4 <ip_reass_free_complete_datagram+0x140>)
 80130d2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80130d4:	8bfb      	ldrh	r3, [r7, #30]
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3720      	adds	r7, #32
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	08018294 	.word	0x08018294
 80130e4:	080182d0 	.word	0x080182d0
 80130e8:	080182dc 	.word	0x080182dc
 80130ec:	08018304 	.word	0x08018304
 80130f0:	08018318 	.word	0x08018318
 80130f4:	20000214 	.word	0x20000214
 80130f8:	08018338 	.word	0x08018338

080130fc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b08a      	sub	sp, #40	; 0x28
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
 8013104:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013106:	2300      	movs	r3, #0
 8013108:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801310a:	2300      	movs	r3, #0
 801310c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801310e:	2300      	movs	r3, #0
 8013110:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013112:	2300      	movs	r3, #0
 8013114:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013116:	2300      	movs	r3, #0
 8013118:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801311a:	4b28      	ldr	r3, [pc, #160]	; (80131bc <ip_reass_remove_oldest_datagram+0xc0>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013120:	e030      	b.n	8013184 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013124:	695a      	ldr	r2, [r3, #20]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	68db      	ldr	r3, [r3, #12]
 801312a:	429a      	cmp	r2, r3
 801312c:	d10c      	bne.n	8013148 <ip_reass_remove_oldest_datagram+0x4c>
 801312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013130:	699a      	ldr	r2, [r3, #24]
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	691b      	ldr	r3, [r3, #16]
 8013136:	429a      	cmp	r2, r3
 8013138:	d106      	bne.n	8013148 <ip_reass_remove_oldest_datagram+0x4c>
 801313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313c:	899a      	ldrh	r2, [r3, #12]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	889b      	ldrh	r3, [r3, #4]
 8013142:	b29b      	uxth	r3, r3
 8013144:	429a      	cmp	r2, r3
 8013146:	d014      	beq.n	8013172 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	3301      	adds	r3, #1
 801314c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801314e:	6a3b      	ldr	r3, [r7, #32]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d104      	bne.n	801315e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013156:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013158:	69fb      	ldr	r3, [r7, #28]
 801315a:	61bb      	str	r3, [r7, #24]
 801315c:	e009      	b.n	8013172 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013160:	7fda      	ldrb	r2, [r3, #31]
 8013162:	6a3b      	ldr	r3, [r7, #32]
 8013164:	7fdb      	ldrb	r3, [r3, #31]
 8013166:	429a      	cmp	r2, r3
 8013168:	d803      	bhi.n	8013172 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801316e:	69fb      	ldr	r3, [r7, #28]
 8013170:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d001      	beq.n	801317e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013186:	2b00      	cmp	r3, #0
 8013188:	d1cb      	bne.n	8013122 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801318a:	6a3b      	ldr	r3, [r7, #32]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d008      	beq.n	80131a2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013190:	69b9      	ldr	r1, [r7, #24]
 8013192:	6a38      	ldr	r0, [r7, #32]
 8013194:	f7ff ff0e 	bl	8012fb4 <ip_reass_free_complete_datagram>
 8013198:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801319a:	697a      	ldr	r2, [r7, #20]
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	4413      	add	r3, r2
 80131a0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80131a2:	697a      	ldr	r2, [r7, #20]
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	429a      	cmp	r2, r3
 80131a8:	da02      	bge.n	80131b0 <ip_reass_remove_oldest_datagram+0xb4>
 80131aa:	693b      	ldr	r3, [r7, #16]
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	dcac      	bgt.n	801310a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80131b0:	697b      	ldr	r3, [r7, #20]
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3728      	adds	r7, #40	; 0x28
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	20000210 	.word	0x20000210

080131c0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b084      	sub	sp, #16
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80131ca:	2004      	movs	r0, #4
 80131cc:	f7f4 fc98 	bl	8007b00 <memp_malloc>
 80131d0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d110      	bne.n	80131fa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80131d8:	6839      	ldr	r1, [r7, #0]
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f7ff ff8e 	bl	80130fc <ip_reass_remove_oldest_datagram>
 80131e0:	4602      	mov	r2, r0
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	4293      	cmp	r3, r2
 80131e6:	dc03      	bgt.n	80131f0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80131e8:	2004      	movs	r0, #4
 80131ea:	f7f4 fc89 	bl	8007b00 <memp_malloc>
 80131ee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d101      	bne.n	80131fa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80131f6:	2300      	movs	r3, #0
 80131f8:	e016      	b.n	8013228 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80131fa:	2220      	movs	r2, #32
 80131fc:	2100      	movs	r1, #0
 80131fe:	68f8      	ldr	r0, [r7, #12]
 8013200:	f000 fdfa 	bl	8013df8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	220f      	movs	r2, #15
 8013208:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801320a:	4b09      	ldr	r3, [pc, #36]	; (8013230 <ip_reass_enqueue_new_datagram+0x70>)
 801320c:	681a      	ldr	r2, [r3, #0]
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013212:	4a07      	ldr	r2, [pc, #28]	; (8013230 <ip_reass_enqueue_new_datagram+0x70>)
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	3308      	adds	r3, #8
 801321c:	2214      	movs	r2, #20
 801321e:	6879      	ldr	r1, [r7, #4]
 8013220:	4618      	mov	r0, r3
 8013222:	f000 fddb 	bl	8013ddc <memcpy>
  return ipr;
 8013226:	68fb      	ldr	r3, [r7, #12]
}
 8013228:	4618      	mov	r0, r3
 801322a:	3710      	adds	r7, #16
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	20000210 	.word	0x20000210

08013234 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801323e:	4b10      	ldr	r3, [pc, #64]	; (8013280 <ip_reass_dequeue_datagram+0x4c>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	687a      	ldr	r2, [r7, #4]
 8013244:	429a      	cmp	r2, r3
 8013246:	d104      	bne.n	8013252 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	4a0c      	ldr	r2, [pc, #48]	; (8013280 <ip_reass_dequeue_datagram+0x4c>)
 801324e:	6013      	str	r3, [r2, #0]
 8013250:	e00d      	b.n	801326e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d106      	bne.n	8013266 <ip_reass_dequeue_datagram+0x32>
 8013258:	4b0a      	ldr	r3, [pc, #40]	; (8013284 <ip_reass_dequeue_datagram+0x50>)
 801325a:	f240 1245 	movw	r2, #325	; 0x145
 801325e:	490a      	ldr	r1, [pc, #40]	; (8013288 <ip_reass_dequeue_datagram+0x54>)
 8013260:	480a      	ldr	r0, [pc, #40]	; (801328c <ip_reass_dequeue_datagram+0x58>)
 8013262:	f000 fdd1 	bl	8013e08 <iprintf>
    prev->next = ipr->next;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681a      	ldr	r2, [r3, #0]
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801326e:	6879      	ldr	r1, [r7, #4]
 8013270:	2004      	movs	r0, #4
 8013272:	f7f4 fc91 	bl	8007b98 <memp_free>
}
 8013276:	bf00      	nop
 8013278:	3708      	adds	r7, #8
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	20000210 	.word	0x20000210
 8013284:	08018294 	.word	0x08018294
 8013288:	0801835c 	.word	0x0801835c
 801328c:	080182dc 	.word	0x080182dc

08013290 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b08c      	sub	sp, #48	; 0x30
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801329c:	2300      	movs	r3, #0
 801329e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80132a0:	2301      	movs	r3, #1
 80132a2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80132aa:	69fb      	ldr	r3, [r7, #28]
 80132ac:	885b      	ldrh	r3, [r3, #2]
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7f3 ffa7 	bl	8007204 <lwip_htons>
 80132b6:	4603      	mov	r3, r0
 80132b8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80132ba:	69fb      	ldr	r3, [r7, #28]
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	f003 030f 	and.w	r3, r3, #15
 80132c2:	b2db      	uxtb	r3, r3
 80132c4:	009b      	lsls	r3, r3, #2
 80132c6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80132c8:	7e7b      	ldrb	r3, [r7, #25]
 80132ca:	b29b      	uxth	r3, r3
 80132cc:	8b7a      	ldrh	r2, [r7, #26]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d202      	bcs.n	80132d8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132d2:	f04f 33ff 	mov.w	r3, #4294967295
 80132d6:	e135      	b.n	8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80132d8:	7e7b      	ldrb	r3, [r7, #25]
 80132da:	b29b      	uxth	r3, r3
 80132dc:	8b7a      	ldrh	r2, [r7, #26]
 80132de:	1ad3      	subs	r3, r2, r3
 80132e0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80132e2:	69fb      	ldr	r3, [r7, #28]
 80132e4:	88db      	ldrh	r3, [r3, #6]
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7f3 ff8b 	bl	8007204 <lwip_htons>
 80132ee:	4603      	mov	r3, r0
 80132f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80132f4:	b29b      	uxth	r3, r3
 80132f6:	00db      	lsls	r3, r3, #3
 80132f8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013302:	2200      	movs	r2, #0
 8013304:	701a      	strb	r2, [r3, #0]
 8013306:	2200      	movs	r2, #0
 8013308:	705a      	strb	r2, [r3, #1]
 801330a:	2200      	movs	r2, #0
 801330c:	709a      	strb	r2, [r3, #2]
 801330e:	2200      	movs	r2, #0
 8013310:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013314:	8afa      	ldrh	r2, [r7, #22]
 8013316:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013318:	8afa      	ldrh	r2, [r7, #22]
 801331a:	8b7b      	ldrh	r3, [r7, #26]
 801331c:	4413      	add	r3, r2
 801331e:	b29a      	uxth	r2, r3
 8013320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013322:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013326:	88db      	ldrh	r3, [r3, #6]
 8013328:	b29b      	uxth	r3, r3
 801332a:	8afa      	ldrh	r2, [r7, #22]
 801332c:	429a      	cmp	r2, r3
 801332e:	d902      	bls.n	8013336 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013330:	f04f 33ff 	mov.w	r3, #4294967295
 8013334:	e106      	b.n	8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	685b      	ldr	r3, [r3, #4]
 801333a:	627b      	str	r3, [r7, #36]	; 0x24
 801333c:	e068      	b.n	8013410 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013340:	685b      	ldr	r3, [r3, #4]
 8013342:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013346:	889b      	ldrh	r3, [r3, #4]
 8013348:	b29a      	uxth	r2, r3
 801334a:	693b      	ldr	r3, [r7, #16]
 801334c:	889b      	ldrh	r3, [r3, #4]
 801334e:	b29b      	uxth	r3, r3
 8013350:	429a      	cmp	r2, r3
 8013352:	d235      	bcs.n	80133c0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013358:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801335c:	2b00      	cmp	r3, #0
 801335e:	d020      	beq.n	80133a2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013362:	889b      	ldrh	r3, [r3, #4]
 8013364:	b29a      	uxth	r2, r3
 8013366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013368:	88db      	ldrh	r3, [r3, #6]
 801336a:	b29b      	uxth	r3, r3
 801336c:	429a      	cmp	r2, r3
 801336e:	d307      	bcc.n	8013380 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013372:	88db      	ldrh	r3, [r3, #6]
 8013374:	b29a      	uxth	r2, r3
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	889b      	ldrh	r3, [r3, #4]
 801337a:	b29b      	uxth	r3, r3
 801337c:	429a      	cmp	r2, r3
 801337e:	d902      	bls.n	8013386 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013380:	f04f 33ff 	mov.w	r3, #4294967295
 8013384:	e0de      	b.n	8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013388:	68ba      	ldr	r2, [r7, #8]
 801338a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801338e:	88db      	ldrh	r3, [r3, #6]
 8013390:	b29a      	uxth	r2, r3
 8013392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013394:	889b      	ldrh	r3, [r3, #4]
 8013396:	b29b      	uxth	r3, r3
 8013398:	429a      	cmp	r2, r3
 801339a:	d03d      	beq.n	8013418 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801339c:	2300      	movs	r3, #0
 801339e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80133a0:	e03a      	b.n	8013418 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80133a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a4:	88db      	ldrh	r3, [r3, #6]
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	889b      	ldrh	r3, [r3, #4]
 80133ac:	b29b      	uxth	r3, r3
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d902      	bls.n	80133b8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133b2:	f04f 33ff 	mov.w	r3, #4294967295
 80133b6:	e0c5      	b.n	8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	68ba      	ldr	r2, [r7, #8]
 80133bc:	605a      	str	r2, [r3, #4]
      break;
 80133be:	e02b      	b.n	8013418 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80133c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133c2:	889b      	ldrh	r3, [r3, #4]
 80133c4:	b29a      	uxth	r2, r3
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	889b      	ldrh	r3, [r3, #4]
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	429a      	cmp	r2, r3
 80133ce:	d102      	bne.n	80133d6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133d0:	f04f 33ff 	mov.w	r3, #4294967295
 80133d4:	e0b6      	b.n	8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80133d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d8:	889b      	ldrh	r3, [r3, #4]
 80133da:	b29a      	uxth	r2, r3
 80133dc:	693b      	ldr	r3, [r7, #16]
 80133de:	88db      	ldrh	r3, [r3, #6]
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	429a      	cmp	r2, r3
 80133e4:	d202      	bcs.n	80133ec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133e6:	f04f 33ff 	mov.w	r3, #4294967295
 80133ea:	e0ab      	b.n	8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80133ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d009      	beq.n	8013406 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80133f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f4:	88db      	ldrh	r3, [r3, #6]
 80133f6:	b29a      	uxth	r2, r3
 80133f8:	693b      	ldr	r3, [r7, #16]
 80133fa:	889b      	ldrh	r3, [r3, #4]
 80133fc:	b29b      	uxth	r3, r3
 80133fe:	429a      	cmp	r2, r3
 8013400:	d001      	beq.n	8013406 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013402:	2300      	movs	r3, #0
 8013404:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013412:	2b00      	cmp	r3, #0
 8013414:	d193      	bne.n	801333e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013416:	e000      	b.n	801341a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013418:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801341c:	2b00      	cmp	r3, #0
 801341e:	d12d      	bne.n	801347c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013422:	2b00      	cmp	r3, #0
 8013424:	d01c      	beq.n	8013460 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013428:	88db      	ldrh	r3, [r3, #6]
 801342a:	b29a      	uxth	r2, r3
 801342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342e:	889b      	ldrh	r3, [r3, #4]
 8013430:	b29b      	uxth	r3, r3
 8013432:	429a      	cmp	r2, r3
 8013434:	d906      	bls.n	8013444 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013436:	4b45      	ldr	r3, [pc, #276]	; (801354c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013438:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801343c:	4944      	ldr	r1, [pc, #272]	; (8013550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801343e:	4845      	ldr	r0, [pc, #276]	; (8013554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013440:	f000 fce2 	bl	8013e08 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013446:	68ba      	ldr	r2, [r7, #8]
 8013448:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344c:	88db      	ldrh	r3, [r3, #6]
 801344e:	b29a      	uxth	r2, r3
 8013450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013452:	889b      	ldrh	r3, [r3, #4]
 8013454:	b29b      	uxth	r3, r3
 8013456:	429a      	cmp	r2, r3
 8013458:	d010      	beq.n	801347c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801345a:	2300      	movs	r3, #0
 801345c:	623b      	str	r3, [r7, #32]
 801345e:	e00d      	b.n	801347c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d006      	beq.n	8013476 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013468:	4b38      	ldr	r3, [pc, #224]	; (801354c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801346a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801346e:	493a      	ldr	r1, [pc, #232]	; (8013558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013470:	4838      	ldr	r0, [pc, #224]	; (8013554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013472:	f000 fcc9 	bl	8013e08 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	68ba      	ldr	r2, [r7, #8]
 801347a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d105      	bne.n	801348e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	7f9b      	ldrb	r3, [r3, #30]
 8013486:	f003 0301 	and.w	r3, r3, #1
 801348a:	2b00      	cmp	r3, #0
 801348c:	d059      	beq.n	8013542 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801348e:	6a3b      	ldr	r3, [r7, #32]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d04f      	beq.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	685b      	ldr	r3, [r3, #4]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d006      	beq.n	80134aa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	685b      	ldr	r3, [r3, #4]
 80134a0:	685b      	ldr	r3, [r3, #4]
 80134a2:	889b      	ldrh	r3, [r3, #4]
 80134a4:	b29b      	uxth	r3, r3
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d002      	beq.n	80134b0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80134aa:	2300      	movs	r3, #0
 80134ac:	623b      	str	r3, [r7, #32]
 80134ae:	e041      	b.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80134b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80134b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80134ba:	e012      	b.n	80134e2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80134bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80134c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134c4:	88db      	ldrh	r3, [r3, #6]
 80134c6:	b29a      	uxth	r2, r3
 80134c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ca:	889b      	ldrh	r3, [r3, #4]
 80134cc:	b29b      	uxth	r3, r3
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d002      	beq.n	80134d8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80134d2:	2300      	movs	r3, #0
 80134d4:	623b      	str	r3, [r7, #32]
            break;
 80134d6:	e007      	b.n	80134e8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80134d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134da:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80134dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80134e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d1e9      	bne.n	80134bc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80134e8:	6a3b      	ldr	r3, [r7, #32]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d022      	beq.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	685b      	ldr	r3, [r3, #4]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d106      	bne.n	8013504 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80134f6:	4b15      	ldr	r3, [pc, #84]	; (801354c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80134f8:	f240 12df 	movw	r2, #479	; 0x1df
 80134fc:	4917      	ldr	r1, [pc, #92]	; (801355c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80134fe:	4815      	ldr	r0, [pc, #84]	; (8013554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013500:	f000 fc82 	bl	8013e08 <iprintf>
          LWIP_ASSERT("sanity check",
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801350c:	429a      	cmp	r2, r3
 801350e:	d106      	bne.n	801351e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013510:	4b0e      	ldr	r3, [pc, #56]	; (801354c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013512:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013516:	4911      	ldr	r1, [pc, #68]	; (801355c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013518:	480e      	ldr	r0, [pc, #56]	; (8013554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801351a:	f000 fc75 	bl	8013e08 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d006      	beq.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013526:	4b09      	ldr	r3, [pc, #36]	; (801354c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013528:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801352c:	490c      	ldr	r1, [pc, #48]	; (8013560 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801352e:	4809      	ldr	r0, [pc, #36]	; (8013554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013530:	f000 fc6a 	bl	8013e08 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013534:	6a3b      	ldr	r3, [r7, #32]
 8013536:	2b00      	cmp	r3, #0
 8013538:	bf14      	ite	ne
 801353a:	2301      	movne	r3, #1
 801353c:	2300      	moveq	r3, #0
 801353e:	b2db      	uxtb	r3, r3
 8013540:	e000      	b.n	8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013542:	2300      	movs	r3, #0
}
 8013544:	4618      	mov	r0, r3
 8013546:	3730      	adds	r7, #48	; 0x30
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}
 801354c:	08018294 	.word	0x08018294
 8013550:	08018378 	.word	0x08018378
 8013554:	080182dc 	.word	0x080182dc
 8013558:	08018398 	.word	0x08018398
 801355c:	080183d0 	.word	0x080183d0
 8013560:	080183e0 	.word	0x080183e0

08013564 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b08e      	sub	sp, #56	; 0x38
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	685b      	ldr	r3, [r3, #4]
 8013570:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	f003 030f 	and.w	r3, r3, #15
 801357a:	b2db      	uxtb	r3, r3
 801357c:	009b      	lsls	r3, r3, #2
 801357e:	b2db      	uxtb	r3, r3
 8013580:	2b14      	cmp	r3, #20
 8013582:	f040 8167 	bne.w	8013854 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013588:	88db      	ldrh	r3, [r3, #6]
 801358a:	b29b      	uxth	r3, r3
 801358c:	4618      	mov	r0, r3
 801358e:	f7f3 fe39 	bl	8007204 <lwip_htons>
 8013592:	4603      	mov	r3, r0
 8013594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013598:	b29b      	uxth	r3, r3
 801359a:	00db      	lsls	r3, r3, #3
 801359c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a0:	885b      	ldrh	r3, [r3, #2]
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7f3 fe2d 	bl	8007204 <lwip_htons>
 80135aa:	4603      	mov	r3, r0
 80135ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80135ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b0:	781b      	ldrb	r3, [r3, #0]
 80135b2:	f003 030f 	and.w	r3, r3, #15
 80135b6:	b2db      	uxtb	r3, r3
 80135b8:	009b      	lsls	r3, r3, #2
 80135ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80135be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135c6:	429a      	cmp	r2, r3
 80135c8:	f0c0 8146 	bcc.w	8013858 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80135cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80135d0:	b29b      	uxth	r3, r3
 80135d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135d4:	1ad3      	subs	r3, r2, r3
 80135d6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f7f5 f97f 	bl	80088dc <pbuf_clen>
 80135de:	4603      	mov	r3, r0
 80135e0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80135e2:	4b9f      	ldr	r3, [pc, #636]	; (8013860 <ip4_reass+0x2fc>)
 80135e4:	881b      	ldrh	r3, [r3, #0]
 80135e6:	461a      	mov	r2, r3
 80135e8:	8c3b      	ldrh	r3, [r7, #32]
 80135ea:	4413      	add	r3, r2
 80135ec:	2b0a      	cmp	r3, #10
 80135ee:	dd10      	ble.n	8013612 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80135f0:	8c3b      	ldrh	r3, [r7, #32]
 80135f2:	4619      	mov	r1, r3
 80135f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135f6:	f7ff fd81 	bl	80130fc <ip_reass_remove_oldest_datagram>
 80135fa:	4603      	mov	r3, r0
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	f000 812d 	beq.w	801385c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013602:	4b97      	ldr	r3, [pc, #604]	; (8013860 <ip4_reass+0x2fc>)
 8013604:	881b      	ldrh	r3, [r3, #0]
 8013606:	461a      	mov	r2, r3
 8013608:	8c3b      	ldrh	r3, [r7, #32]
 801360a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801360c:	2b0a      	cmp	r3, #10
 801360e:	f300 8125 	bgt.w	801385c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013612:	4b94      	ldr	r3, [pc, #592]	; (8013864 <ip4_reass+0x300>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	633b      	str	r3, [r7, #48]	; 0x30
 8013618:	e015      	b.n	8013646 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801361c:	695a      	ldr	r2, [r3, #20]
 801361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013620:	68db      	ldr	r3, [r3, #12]
 8013622:	429a      	cmp	r2, r3
 8013624:	d10c      	bne.n	8013640 <ip4_reass+0xdc>
 8013626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013628:	699a      	ldr	r2, [r3, #24]
 801362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362c:	691b      	ldr	r3, [r3, #16]
 801362e:	429a      	cmp	r2, r3
 8013630:	d106      	bne.n	8013640 <ip4_reass+0xdc>
 8013632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013634:	899a      	ldrh	r2, [r3, #12]
 8013636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013638:	889b      	ldrh	r3, [r3, #4]
 801363a:	b29b      	uxth	r3, r3
 801363c:	429a      	cmp	r2, r3
 801363e:	d006      	beq.n	801364e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	633b      	str	r3, [r7, #48]	; 0x30
 8013646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013648:	2b00      	cmp	r3, #0
 801364a:	d1e6      	bne.n	801361a <ip4_reass+0xb6>
 801364c:	e000      	b.n	8013650 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801364e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013652:	2b00      	cmp	r3, #0
 8013654:	d109      	bne.n	801366a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013656:	8c3b      	ldrh	r3, [r7, #32]
 8013658:	4619      	mov	r1, r3
 801365a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801365c:	f7ff fdb0 	bl	80131c0 <ip_reass_enqueue_new_datagram>
 8013660:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013664:	2b00      	cmp	r3, #0
 8013666:	d11c      	bne.n	80136a2 <ip4_reass+0x13e>
      goto nullreturn;
 8013668:	e109      	b.n	801387e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366c:	88db      	ldrh	r3, [r3, #6]
 801366e:	b29b      	uxth	r3, r3
 8013670:	4618      	mov	r0, r3
 8013672:	f7f3 fdc7 	bl	8007204 <lwip_htons>
 8013676:	4603      	mov	r3, r0
 8013678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801367c:	2b00      	cmp	r3, #0
 801367e:	d110      	bne.n	80136a2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013682:	89db      	ldrh	r3, [r3, #14]
 8013684:	4618      	mov	r0, r3
 8013686:	f7f3 fdbd 	bl	8007204 <lwip_htons>
 801368a:	4603      	mov	r3, r0
 801368c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013690:	2b00      	cmp	r3, #0
 8013692:	d006      	beq.n	80136a2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013696:	3308      	adds	r3, #8
 8013698:	2214      	movs	r2, #20
 801369a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801369c:	4618      	mov	r0, r3
 801369e:	f000 fb9d 	bl	8013ddc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80136a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a4:	88db      	ldrh	r3, [r3, #6]
 80136a6:	b29b      	uxth	r3, r3
 80136a8:	f003 0320 	and.w	r3, r3, #32
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	bf0c      	ite	eq
 80136b0:	2301      	moveq	r3, #1
 80136b2:	2300      	movne	r3, #0
 80136b4:	b2db      	uxtb	r3, r3
 80136b6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80136b8:	69fb      	ldr	r3, [r7, #28]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d00e      	beq.n	80136dc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80136be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80136c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136c2:	4413      	add	r3, r2
 80136c4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80136c6:	8b7a      	ldrh	r2, [r7, #26]
 80136c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80136ca:	429a      	cmp	r2, r3
 80136cc:	f0c0 80a0 	bcc.w	8013810 <ip4_reass+0x2ac>
 80136d0:	8b7b      	ldrh	r3, [r7, #26]
 80136d2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80136d6:	4293      	cmp	r3, r2
 80136d8:	f200 809a 	bhi.w	8013810 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80136dc:	69fa      	ldr	r2, [r7, #28]
 80136de:	6879      	ldr	r1, [r7, #4]
 80136e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136e2:	f7ff fdd5 	bl	8013290 <ip_reass_chain_frag_into_datagram_and_validate>
 80136e6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136ee:	f000 8091 	beq.w	8013814 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80136f2:	4b5b      	ldr	r3, [pc, #364]	; (8013860 <ip4_reass+0x2fc>)
 80136f4:	881a      	ldrh	r2, [r3, #0]
 80136f6:	8c3b      	ldrh	r3, [r7, #32]
 80136f8:	4413      	add	r3, r2
 80136fa:	b29a      	uxth	r2, r3
 80136fc:	4b58      	ldr	r3, [pc, #352]	; (8013860 <ip4_reass+0x2fc>)
 80136fe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013700:	69fb      	ldr	r3, [r7, #28]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d00d      	beq.n	8013722 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013706:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013708:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801370a:	4413      	add	r3, r2
 801370c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013710:	8a7a      	ldrh	r2, [r7, #18]
 8013712:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013716:	7f9b      	ldrb	r3, [r3, #30]
 8013718:	f043 0301 	orr.w	r3, r3, #1
 801371c:	b2da      	uxtb	r2, r3
 801371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013720:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	2b01      	cmp	r3, #1
 8013726:	d171      	bne.n	801380c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372a:	8b9b      	ldrh	r3, [r3, #28]
 801372c:	3314      	adds	r3, #20
 801372e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013732:	685b      	ldr	r3, [r3, #4]
 8013734:	685b      	ldr	r3, [r3, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801373c:	685b      	ldr	r3, [r3, #4]
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013744:	3308      	adds	r3, #8
 8013746:	2214      	movs	r2, #20
 8013748:	4619      	mov	r1, r3
 801374a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801374c:	f000 fb46 	bl	8013ddc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013750:	8a3b      	ldrh	r3, [r7, #16]
 8013752:	4618      	mov	r0, r3
 8013754:	f7f3 fd56 	bl	8007204 <lwip_htons>
 8013758:	4603      	mov	r3, r0
 801375a:	461a      	mov	r2, r3
 801375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013762:	2200      	movs	r2, #0
 8013764:	719a      	strb	r2, [r3, #6]
 8013766:	2200      	movs	r2, #0
 8013768:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801376c:	2200      	movs	r2, #0
 801376e:	729a      	strb	r2, [r3, #10]
 8013770:	2200      	movs	r2, #0
 8013772:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801377a:	e00d      	b.n	8013798 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801377c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013782:	2114      	movs	r1, #20
 8013784:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013786:	f7f4 ff9b 	bl	80086c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801378a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f7f5 f8df 	bl	8008950 <pbuf_cat>
      r = iprh->next_pbuf;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801379a:	2b00      	cmp	r3, #0
 801379c:	d1ee      	bne.n	801377c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801379e:	4b31      	ldr	r3, [pc, #196]	; (8013864 <ip4_reass+0x300>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137a4:	429a      	cmp	r2, r3
 80137a6:	d102      	bne.n	80137ae <ip4_reass+0x24a>
      ipr_prev = NULL;
 80137a8:	2300      	movs	r3, #0
 80137aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137ac:	e010      	b.n	80137d0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80137ae:	4b2d      	ldr	r3, [pc, #180]	; (8013864 <ip4_reass+0x300>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137b4:	e007      	b.n	80137c6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80137b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137bc:	429a      	cmp	r2, r3
 80137be:	d006      	beq.n	80137ce <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80137c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d1f4      	bne.n	80137b6 <ip4_reass+0x252>
 80137cc:	e000      	b.n	80137d0 <ip4_reass+0x26c>
          break;
 80137ce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80137d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137d4:	f7ff fd2e 	bl	8013234 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f7f5 f87f 	bl	80088dc <pbuf_clen>
 80137de:	4603      	mov	r3, r0
 80137e0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80137e2:	4b1f      	ldr	r3, [pc, #124]	; (8013860 <ip4_reass+0x2fc>)
 80137e4:	881b      	ldrh	r3, [r3, #0]
 80137e6:	8c3a      	ldrh	r2, [r7, #32]
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d906      	bls.n	80137fa <ip4_reass+0x296>
 80137ec:	4b1e      	ldr	r3, [pc, #120]	; (8013868 <ip4_reass+0x304>)
 80137ee:	f240 229b 	movw	r2, #667	; 0x29b
 80137f2:	491e      	ldr	r1, [pc, #120]	; (801386c <ip4_reass+0x308>)
 80137f4:	481e      	ldr	r0, [pc, #120]	; (8013870 <ip4_reass+0x30c>)
 80137f6:	f000 fb07 	bl	8013e08 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80137fa:	4b19      	ldr	r3, [pc, #100]	; (8013860 <ip4_reass+0x2fc>)
 80137fc:	881a      	ldrh	r2, [r3, #0]
 80137fe:	8c3b      	ldrh	r3, [r7, #32]
 8013800:	1ad3      	subs	r3, r2, r3
 8013802:	b29a      	uxth	r2, r3
 8013804:	4b16      	ldr	r3, [pc, #88]	; (8013860 <ip4_reass+0x2fc>)
 8013806:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	e03c      	b.n	8013886 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801380c:	2300      	movs	r3, #0
 801380e:	e03a      	b.n	8013886 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8013810:	bf00      	nop
 8013812:	e000      	b.n	8013816 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013814:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013818:	2b00      	cmp	r3, #0
 801381a:	d106      	bne.n	801382a <ip4_reass+0x2c6>
 801381c:	4b12      	ldr	r3, [pc, #72]	; (8013868 <ip4_reass+0x304>)
 801381e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013822:	4914      	ldr	r1, [pc, #80]	; (8013874 <ip4_reass+0x310>)
 8013824:	4812      	ldr	r0, [pc, #72]	; (8013870 <ip4_reass+0x30c>)
 8013826:	f000 faef 	bl	8013e08 <iprintf>
  if (ipr->p == NULL) {
 801382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382c:	685b      	ldr	r3, [r3, #4]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d124      	bne.n	801387c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013832:	4b0c      	ldr	r3, [pc, #48]	; (8013864 <ip4_reass+0x300>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013838:	429a      	cmp	r2, r3
 801383a:	d006      	beq.n	801384a <ip4_reass+0x2e6>
 801383c:	4b0a      	ldr	r3, [pc, #40]	; (8013868 <ip4_reass+0x304>)
 801383e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013842:	490d      	ldr	r1, [pc, #52]	; (8013878 <ip4_reass+0x314>)
 8013844:	480a      	ldr	r0, [pc, #40]	; (8013870 <ip4_reass+0x30c>)
 8013846:	f000 fadf 	bl	8013e08 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801384a:	2100      	movs	r1, #0
 801384c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801384e:	f7ff fcf1 	bl	8013234 <ip_reass_dequeue_datagram>
 8013852:	e014      	b.n	801387e <ip4_reass+0x31a>
    goto nullreturn;
 8013854:	bf00      	nop
 8013856:	e012      	b.n	801387e <ip4_reass+0x31a>
    goto nullreturn;
 8013858:	bf00      	nop
 801385a:	e010      	b.n	801387e <ip4_reass+0x31a>
      goto nullreturn;
 801385c:	bf00      	nop
 801385e:	e00e      	b.n	801387e <ip4_reass+0x31a>
 8013860:	20000214 	.word	0x20000214
 8013864:	20000210 	.word	0x20000210
 8013868:	08018294 	.word	0x08018294
 801386c:	08018404 	.word	0x08018404
 8013870:	080182dc 	.word	0x080182dc
 8013874:	08018420 	.word	0x08018420
 8013878:	0801842c 	.word	0x0801842c
  }

nullreturn:
 801387c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801387e:	6878      	ldr	r0, [r7, #4]
 8013880:	f7f4 ffa4 	bl	80087cc <pbuf_free>
  return NULL;
 8013884:	2300      	movs	r3, #0
}
 8013886:	4618      	mov	r0, r3
 8013888:	3738      	adds	r7, #56	; 0x38
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
 801388e:	bf00      	nop

08013890 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013894:	2005      	movs	r0, #5
 8013896:	f7f4 f933 	bl	8007b00 <memp_malloc>
 801389a:	4603      	mov	r3, r0
}
 801389c:	4618      	mov	r0, r3
 801389e:	bd80      	pop	{r7, pc}

080138a0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b082      	sub	sp, #8
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d106      	bne.n	80138bc <ip_frag_free_pbuf_custom_ref+0x1c>
 80138ae:	4b07      	ldr	r3, [pc, #28]	; (80138cc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80138b0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80138b4:	4906      	ldr	r1, [pc, #24]	; (80138d0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80138b6:	4807      	ldr	r0, [pc, #28]	; (80138d4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80138b8:	f000 faa6 	bl	8013e08 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80138bc:	6879      	ldr	r1, [r7, #4]
 80138be:	2005      	movs	r0, #5
 80138c0:	f7f4 f96a 	bl	8007b98 <memp_free>
}
 80138c4:	bf00      	nop
 80138c6:	3708      	adds	r7, #8
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	08018294 	.word	0x08018294
 80138d0:	0801844c 	.word	0x0801844c
 80138d4:	080182dc 	.word	0x080182dc

080138d8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b084      	sub	sp, #16
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d106      	bne.n	80138f8 <ipfrag_free_pbuf_custom+0x20>
 80138ea:	4b11      	ldr	r3, [pc, #68]	; (8013930 <ipfrag_free_pbuf_custom+0x58>)
 80138ec:	f240 22ce 	movw	r2, #718	; 0x2ce
 80138f0:	4910      	ldr	r1, [pc, #64]	; (8013934 <ipfrag_free_pbuf_custom+0x5c>)
 80138f2:	4811      	ldr	r0, [pc, #68]	; (8013938 <ipfrag_free_pbuf_custom+0x60>)
 80138f4:	f000 fa88 	bl	8013e08 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80138f8:	68fa      	ldr	r2, [r7, #12]
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d006      	beq.n	801390e <ipfrag_free_pbuf_custom+0x36>
 8013900:	4b0b      	ldr	r3, [pc, #44]	; (8013930 <ipfrag_free_pbuf_custom+0x58>)
 8013902:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013906:	490d      	ldr	r1, [pc, #52]	; (801393c <ipfrag_free_pbuf_custom+0x64>)
 8013908:	480b      	ldr	r0, [pc, #44]	; (8013938 <ipfrag_free_pbuf_custom+0x60>)
 801390a:	f000 fa7d 	bl	8013e08 <iprintf>
  if (pcr->original != NULL) {
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	695b      	ldr	r3, [r3, #20]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d004      	beq.n	8013920 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	695b      	ldr	r3, [r3, #20]
 801391a:	4618      	mov	r0, r3
 801391c:	f7f4 ff56 	bl	80087cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013920:	68f8      	ldr	r0, [r7, #12]
 8013922:	f7ff ffbd 	bl	80138a0 <ip_frag_free_pbuf_custom_ref>
}
 8013926:	bf00      	nop
 8013928:	3710      	adds	r7, #16
 801392a:	46bd      	mov	sp, r7
 801392c:	bd80      	pop	{r7, pc}
 801392e:	bf00      	nop
 8013930:	08018294 	.word	0x08018294
 8013934:	08018458 	.word	0x08018458
 8013938:	080182dc 	.word	0x080182dc
 801393c:	08018464 	.word	0x08018464

08013940 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b094      	sub	sp, #80	; 0x50
 8013944:	af02      	add	r7, sp, #8
 8013946:	60f8      	str	r0, [r7, #12]
 8013948:	60b9      	str	r1, [r7, #8]
 801394a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801394c:	2300      	movs	r3, #0
 801394e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013956:	3b14      	subs	r3, #20
 8013958:	2b00      	cmp	r3, #0
 801395a:	da00      	bge.n	801395e <ip4_frag+0x1e>
 801395c:	3307      	adds	r3, #7
 801395e:	10db      	asrs	r3, r3, #3
 8013960:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013962:	2314      	movs	r3, #20
 8013964:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801396e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	f003 030f 	and.w	r3, r3, #15
 8013978:	b2db      	uxtb	r3, r3
 801397a:	009b      	lsls	r3, r3, #2
 801397c:	b2db      	uxtb	r3, r3
 801397e:	2b14      	cmp	r3, #20
 8013980:	d002      	beq.n	8013988 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013982:	f06f 0305 	mvn.w	r3, #5
 8013986:	e110      	b.n	8013baa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	895b      	ldrh	r3, [r3, #10]
 801398c:	2b13      	cmp	r3, #19
 801398e:	d809      	bhi.n	80139a4 <ip4_frag+0x64>
 8013990:	4b88      	ldr	r3, [pc, #544]	; (8013bb4 <ip4_frag+0x274>)
 8013992:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013996:	4988      	ldr	r1, [pc, #544]	; (8013bb8 <ip4_frag+0x278>)
 8013998:	4888      	ldr	r0, [pc, #544]	; (8013bbc <ip4_frag+0x27c>)
 801399a:	f000 fa35 	bl	8013e08 <iprintf>
 801399e:	f06f 0305 	mvn.w	r3, #5
 80139a2:	e102      	b.n	8013baa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80139a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a6:	88db      	ldrh	r3, [r3, #6]
 80139a8:	b29b      	uxth	r3, r3
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7f3 fc2a 	bl	8007204 <lwip_htons>
 80139b0:	4603      	mov	r3, r0
 80139b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80139b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80139ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80139be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80139c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	891b      	ldrh	r3, [r3, #8]
 80139ca:	3b14      	subs	r3, #20
 80139cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80139d0:	e0e1      	b.n	8013b96 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80139d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80139d4:	00db      	lsls	r3, r3, #3
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139dc:	4293      	cmp	r3, r2
 80139de:	bf28      	it	cs
 80139e0:	4613      	movcs	r3, r2
 80139e2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80139e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139e8:	2114      	movs	r1, #20
 80139ea:	200e      	movs	r0, #14
 80139ec:	f7f4 fc0a 	bl	8008204 <pbuf_alloc>
 80139f0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80139f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	f000 80d5 	beq.w	8013ba4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80139fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139fc:	895b      	ldrh	r3, [r3, #10]
 80139fe:	2b13      	cmp	r3, #19
 8013a00:	d806      	bhi.n	8013a10 <ip4_frag+0xd0>
 8013a02:	4b6c      	ldr	r3, [pc, #432]	; (8013bb4 <ip4_frag+0x274>)
 8013a04:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013a08:	496d      	ldr	r1, [pc, #436]	; (8013bc0 <ip4_frag+0x280>)
 8013a0a:	486c      	ldr	r0, [pc, #432]	; (8013bbc <ip4_frag+0x27c>)
 8013a0c:	f000 f9fc 	bl	8013e08 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a12:	685b      	ldr	r3, [r3, #4]
 8013a14:	2214      	movs	r2, #20
 8013a16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f000 f9df 	bl	8013ddc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a20:	685b      	ldr	r3, [r3, #4]
 8013a22:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013a24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013a2a:	e064      	b.n	8013af6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	895a      	ldrh	r2, [r3, #10]
 8013a30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a32:	1ad3      	subs	r3, r2, r3
 8013a34:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	895b      	ldrh	r3, [r3, #10]
 8013a3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	d906      	bls.n	8013a4e <ip4_frag+0x10e>
 8013a40:	4b5c      	ldr	r3, [pc, #368]	; (8013bb4 <ip4_frag+0x274>)
 8013a42:	f240 322d 	movw	r2, #813	; 0x32d
 8013a46:	495f      	ldr	r1, [pc, #380]	; (8013bc4 <ip4_frag+0x284>)
 8013a48:	485c      	ldr	r0, [pc, #368]	; (8013bbc <ip4_frag+0x27c>)
 8013a4a:	f000 f9dd 	bl	8013e08 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013a4e:	8bfa      	ldrh	r2, [r7, #30]
 8013a50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013a54:	4293      	cmp	r3, r2
 8013a56:	bf28      	it	cs
 8013a58:	4613      	movcs	r3, r2
 8013a5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013a5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d105      	bne.n	8013a72 <ip4_frag+0x132>
        poff = 0;
 8013a66:	2300      	movs	r3, #0
 8013a68:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	60fb      	str	r3, [r7, #12]
        continue;
 8013a70:	e041      	b.n	8013af6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013a72:	f7ff ff0d 	bl	8013890 <ip_frag_alloc_pbuf_custom_ref>
 8013a76:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013a78:	69bb      	ldr	r3, [r7, #24]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d103      	bne.n	8013a86 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013a7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a80:	f7f4 fea4 	bl	80087cc <pbuf_free>
        goto memerr;
 8013a84:	e08f      	b.n	8013ba6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013a86:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013a8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a8e:	4413      	add	r3, r2
 8013a90:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013a94:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013a98:	9201      	str	r2, [sp, #4]
 8013a9a:	9300      	str	r3, [sp, #0]
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	2241      	movs	r2, #65	; 0x41
 8013aa0:	2000      	movs	r0, #0
 8013aa2:	f7f4 fcd9 	bl	8008458 <pbuf_alloced_custom>
 8013aa6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013aa8:	697b      	ldr	r3, [r7, #20]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d106      	bne.n	8013abc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013aae:	69b8      	ldr	r0, [r7, #24]
 8013ab0:	f7ff fef6 	bl	80138a0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ab6:	f7f4 fe89 	bl	80087cc <pbuf_free>
        goto memerr;
 8013aba:	e074      	b.n	8013ba6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f7f4 ff25 	bl	800890c <pbuf_ref>
      pcr->original = p;
 8013ac2:	69bb      	ldr	r3, [r7, #24]
 8013ac4:	68fa      	ldr	r2, [r7, #12]
 8013ac6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013ac8:	69bb      	ldr	r3, [r7, #24]
 8013aca:	4a3f      	ldr	r2, [pc, #252]	; (8013bc8 <ip4_frag+0x288>)
 8013acc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013ace:	6979      	ldr	r1, [r7, #20]
 8013ad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ad2:	f7f4 ff3d 	bl	8008950 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013ad6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013ada:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013ade:	1ad3      	subs	r3, r2, r3
 8013ae0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013ae4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d004      	beq.n	8013af6 <ip4_frag+0x1b6>
        poff = 0;
 8013aec:	2300      	movs	r3, #0
 8013aee:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013af6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d196      	bne.n	8013a2c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013afe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013b00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013b04:	4413      	add	r3, r2
 8013b06:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b0c:	f1a3 0213 	sub.w	r2, r3, #19
 8013b10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b14:	429a      	cmp	r2, r3
 8013b16:	bfcc      	ite	gt
 8013b18:	2301      	movgt	r3, #1
 8013b1a:	2300      	movle	r3, #0
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013b20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b28:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013b2a:	6a3b      	ldr	r3, [r7, #32]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d002      	beq.n	8013b36 <ip4_frag+0x1f6>
 8013b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d003      	beq.n	8013b3e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013b36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013b3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013b3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7f3 fb5f 	bl	8007204 <lwip_htons>
 8013b46:	4603      	mov	r3, r0
 8013b48:	461a      	mov	r2, r3
 8013b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b4c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013b4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b50:	3314      	adds	r3, #20
 8013b52:	b29b      	uxth	r3, r3
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7f3 fb55 	bl	8007204 <lwip_htons>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b60:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b64:	2200      	movs	r2, #0
 8013b66:	729a      	strb	r2, [r3, #10]
 8013b68:	2200      	movs	r2, #0
 8013b6a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	695b      	ldr	r3, [r3, #20]
 8013b70:	687a      	ldr	r2, [r7, #4]
 8013b72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b74:	68b8      	ldr	r0, [r7, #8]
 8013b76:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b7a:	f7f4 fe27 	bl	80087cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013b7e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b84:	1ad3      	subs	r3, r2, r3
 8013b86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013b8a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013b8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013b90:	4413      	add	r3, r2
 8013b92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013b96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	f47f af19 	bne.w	80139d2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	e002      	b.n	8013baa <ip4_frag+0x26a>
      goto memerr;
 8013ba4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	3748      	adds	r7, #72	; 0x48
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}
 8013bb2:	bf00      	nop
 8013bb4:	08018294 	.word	0x08018294
 8013bb8:	08018470 	.word	0x08018470
 8013bbc:	080182dc 	.word	0x080182dc
 8013bc0:	0801848c 	.word	0x0801848c
 8013bc4:	080184ac 	.word	0x080184ac
 8013bc8:	080138d9 	.word	0x080138d9

08013bcc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b086      	sub	sp, #24
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013bd6:	230e      	movs	r3, #14
 8013bd8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	895b      	ldrh	r3, [r3, #10]
 8013bde:	2b0e      	cmp	r3, #14
 8013be0:	d96e      	bls.n	8013cc0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	7bdb      	ldrb	r3, [r3, #15]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d106      	bne.n	8013bf8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013bf0:	3301      	adds	r3, #1
 8013bf2:	b2da      	uxtb	r2, r3
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	685b      	ldr	r3, [r3, #4]
 8013bfc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	7b1a      	ldrb	r2, [r3, #12]
 8013c02:	7b5b      	ldrb	r3, [r3, #13]
 8013c04:	021b      	lsls	r3, r3, #8
 8013c06:	4313      	orrs	r3, r2
 8013c08:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	781b      	ldrb	r3, [r3, #0]
 8013c0e:	f003 0301 	and.w	r3, r3, #1
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d023      	beq.n	8013c5e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	781b      	ldrb	r3, [r3, #0]
 8013c1a:	2b01      	cmp	r3, #1
 8013c1c:	d10f      	bne.n	8013c3e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	785b      	ldrb	r3, [r3, #1]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d11b      	bne.n	8013c5e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013c2a:	2b5e      	cmp	r3, #94	; 0x5e
 8013c2c:	d117      	bne.n	8013c5e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	7b5b      	ldrb	r3, [r3, #13]
 8013c32:	f043 0310 	orr.w	r3, r3, #16
 8013c36:	b2da      	uxtb	r2, r3
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	735a      	strb	r2, [r3, #13]
 8013c3c:	e00f      	b.n	8013c5e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	2206      	movs	r2, #6
 8013c42:	4928      	ldr	r1, [pc, #160]	; (8013ce4 <ethernet_input+0x118>)
 8013c44:	4618      	mov	r0, r3
 8013c46:	f000 f8bb 	bl	8013dc0 <memcmp>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d106      	bne.n	8013c5e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	7b5b      	ldrb	r3, [r3, #13]
 8013c54:	f043 0308 	orr.w	r3, r3, #8
 8013c58:	b2da      	uxtb	r2, r3
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013c5e:	89fb      	ldrh	r3, [r7, #14]
 8013c60:	2b08      	cmp	r3, #8
 8013c62:	d003      	beq.n	8013c6c <ethernet_input+0xa0>
 8013c64:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013c68:	d014      	beq.n	8013c94 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013c6a:	e032      	b.n	8013cd2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c72:	f003 0308 	and.w	r3, r3, #8
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d024      	beq.n	8013cc4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013c7a:	8afb      	ldrh	r3, [r7, #22]
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f7f4 fd1e 	bl	80086c0 <pbuf_remove_header>
 8013c84:	4603      	mov	r3, r0
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d11e      	bne.n	8013cc8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013c8a:	6839      	ldr	r1, [r7, #0]
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f7fe ff09 	bl	8012aa4 <ip4_input>
      break;
 8013c92:	e013      	b.n	8013cbc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c9a:	f003 0308 	and.w	r3, r3, #8
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d014      	beq.n	8013ccc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013ca2:	8afb      	ldrh	r3, [r7, #22]
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f7f4 fd0a 	bl	80086c0 <pbuf_remove_header>
 8013cac:	4603      	mov	r3, r0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d10e      	bne.n	8013cd0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013cb2:	6839      	ldr	r1, [r7, #0]
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f7fe f8a5 	bl	8011e04 <etharp_input>
      break;
 8013cba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	e00c      	b.n	8013cda <ethernet_input+0x10e>
    goto free_and_return;
 8013cc0:	bf00      	nop
 8013cc2:	e006      	b.n	8013cd2 <ethernet_input+0x106>
        goto free_and_return;
 8013cc4:	bf00      	nop
 8013cc6:	e004      	b.n	8013cd2 <ethernet_input+0x106>
        goto free_and_return;
 8013cc8:	bf00      	nop
 8013cca:	e002      	b.n	8013cd2 <ethernet_input+0x106>
        goto free_and_return;
 8013ccc:	bf00      	nop
 8013cce:	e000      	b.n	8013cd2 <ethernet_input+0x106>
        goto free_and_return;
 8013cd0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f7f4 fd7a 	bl	80087cc <pbuf_free>
  return ERR_OK;
 8013cd8:	2300      	movs	r3, #0
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3718      	adds	r7, #24
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	08018648 	.word	0x08018648

08013ce8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b086      	sub	sp, #24
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	60f8      	str	r0, [r7, #12]
 8013cf0:	60b9      	str	r1, [r7, #8]
 8013cf2:	607a      	str	r2, [r7, #4]
 8013cf4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013cf6:	8c3b      	ldrh	r3, [r7, #32]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7f3 fa83 	bl	8007204 <lwip_htons>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013d02:	210e      	movs	r1, #14
 8013d04:	68b8      	ldr	r0, [r7, #8]
 8013d06:	f7f4 fccb 	bl	80086a0 <pbuf_add_header>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d125      	bne.n	8013d5c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	685b      	ldr	r3, [r3, #4]
 8013d14:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	8afa      	ldrh	r2, [r7, #22]
 8013d1a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013d1c:	693b      	ldr	r3, [r7, #16]
 8013d1e:	2206      	movs	r2, #6
 8013d20:	6839      	ldr	r1, [r7, #0]
 8013d22:	4618      	mov	r0, r3
 8013d24:	f000 f85a 	bl	8013ddc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	3306      	adds	r3, #6
 8013d2c:	2206      	movs	r2, #6
 8013d2e:	6879      	ldr	r1, [r7, #4]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f000 f853 	bl	8013ddc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d3c:	2b06      	cmp	r3, #6
 8013d3e:	d006      	beq.n	8013d4e <ethernet_output+0x66>
 8013d40:	4b0a      	ldr	r3, [pc, #40]	; (8013d6c <ethernet_output+0x84>)
 8013d42:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013d46:	490a      	ldr	r1, [pc, #40]	; (8013d70 <ethernet_output+0x88>)
 8013d48:	480a      	ldr	r0, [pc, #40]	; (8013d74 <ethernet_output+0x8c>)
 8013d4a:	f000 f85d 	bl	8013e08 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	699b      	ldr	r3, [r3, #24]
 8013d52:	68b9      	ldr	r1, [r7, #8]
 8013d54:	68f8      	ldr	r0, [r7, #12]
 8013d56:	4798      	blx	r3
 8013d58:	4603      	mov	r3, r0
 8013d5a:	e002      	b.n	8013d62 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013d5c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013d5e:	f06f 0301 	mvn.w	r3, #1
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3718      	adds	r7, #24
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}
 8013d6a:	bf00      	nop
 8013d6c:	080184bc 	.word	0x080184bc
 8013d70:	080184f4 	.word	0x080184f4
 8013d74:	08018528 	.word	0x08018528

08013d78 <__libc_init_array>:
 8013d78:	b570      	push	{r4, r5, r6, lr}
 8013d7a:	4d0d      	ldr	r5, [pc, #52]	; (8013db0 <__libc_init_array+0x38>)
 8013d7c:	4c0d      	ldr	r4, [pc, #52]	; (8013db4 <__libc_init_array+0x3c>)
 8013d7e:	1b64      	subs	r4, r4, r5
 8013d80:	10a4      	asrs	r4, r4, #2
 8013d82:	2600      	movs	r6, #0
 8013d84:	42a6      	cmp	r6, r4
 8013d86:	d109      	bne.n	8013d9c <__libc_init_array+0x24>
 8013d88:	4d0b      	ldr	r5, [pc, #44]	; (8013db8 <__libc_init_array+0x40>)
 8013d8a:	4c0c      	ldr	r4, [pc, #48]	; (8013dbc <__libc_init_array+0x44>)
 8013d8c:	f001 f8cc 	bl	8014f28 <_init>
 8013d90:	1b64      	subs	r4, r4, r5
 8013d92:	10a4      	asrs	r4, r4, #2
 8013d94:	2600      	movs	r6, #0
 8013d96:	42a6      	cmp	r6, r4
 8013d98:	d105      	bne.n	8013da6 <__libc_init_array+0x2e>
 8013d9a:	bd70      	pop	{r4, r5, r6, pc}
 8013d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013da0:	4798      	blx	r3
 8013da2:	3601      	adds	r6, #1
 8013da4:	e7ee      	b.n	8013d84 <__libc_init_array+0xc>
 8013da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013daa:	4798      	blx	r3
 8013dac:	3601      	adds	r6, #1
 8013dae:	e7f2      	b.n	8013d96 <__libc_init_array+0x1e>
 8013db0:	080187ac 	.word	0x080187ac
 8013db4:	080187ac 	.word	0x080187ac
 8013db8:	080187ac 	.word	0x080187ac
 8013dbc:	080187b0 	.word	0x080187b0

08013dc0 <memcmp>:
 8013dc0:	b530      	push	{r4, r5, lr}
 8013dc2:	3901      	subs	r1, #1
 8013dc4:	2400      	movs	r4, #0
 8013dc6:	42a2      	cmp	r2, r4
 8013dc8:	d101      	bne.n	8013dce <memcmp+0xe>
 8013dca:	2000      	movs	r0, #0
 8013dcc:	e005      	b.n	8013dda <memcmp+0x1a>
 8013dce:	5d03      	ldrb	r3, [r0, r4]
 8013dd0:	3401      	adds	r4, #1
 8013dd2:	5d0d      	ldrb	r5, [r1, r4]
 8013dd4:	42ab      	cmp	r3, r5
 8013dd6:	d0f6      	beq.n	8013dc6 <memcmp+0x6>
 8013dd8:	1b58      	subs	r0, r3, r5
 8013dda:	bd30      	pop	{r4, r5, pc}

08013ddc <memcpy>:
 8013ddc:	440a      	add	r2, r1
 8013dde:	4291      	cmp	r1, r2
 8013de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8013de4:	d100      	bne.n	8013de8 <memcpy+0xc>
 8013de6:	4770      	bx	lr
 8013de8:	b510      	push	{r4, lr}
 8013dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013df2:	4291      	cmp	r1, r2
 8013df4:	d1f9      	bne.n	8013dea <memcpy+0xe>
 8013df6:	bd10      	pop	{r4, pc}

08013df8 <memset>:
 8013df8:	4402      	add	r2, r0
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	4293      	cmp	r3, r2
 8013dfe:	d100      	bne.n	8013e02 <memset+0xa>
 8013e00:	4770      	bx	lr
 8013e02:	f803 1b01 	strb.w	r1, [r3], #1
 8013e06:	e7f9      	b.n	8013dfc <memset+0x4>

08013e08 <iprintf>:
 8013e08:	b40f      	push	{r0, r1, r2, r3}
 8013e0a:	4b0a      	ldr	r3, [pc, #40]	; (8013e34 <iprintf+0x2c>)
 8013e0c:	b513      	push	{r0, r1, r4, lr}
 8013e0e:	681c      	ldr	r4, [r3, #0]
 8013e10:	b124      	cbz	r4, 8013e1c <iprintf+0x14>
 8013e12:	69a3      	ldr	r3, [r4, #24]
 8013e14:	b913      	cbnz	r3, 8013e1c <iprintf+0x14>
 8013e16:	4620      	mov	r0, r4
 8013e18:	f000 fabc 	bl	8014394 <__sinit>
 8013e1c:	ab05      	add	r3, sp, #20
 8013e1e:	9a04      	ldr	r2, [sp, #16]
 8013e20:	68a1      	ldr	r1, [r4, #8]
 8013e22:	9301      	str	r3, [sp, #4]
 8013e24:	4620      	mov	r0, r4
 8013e26:	f000 fca7 	bl	8014778 <_vfiprintf_r>
 8013e2a:	b002      	add	sp, #8
 8013e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e30:	b004      	add	sp, #16
 8013e32:	4770      	bx	lr
 8013e34:	20000018 	.word	0x20000018

08013e38 <_puts_r>:
 8013e38:	b570      	push	{r4, r5, r6, lr}
 8013e3a:	460e      	mov	r6, r1
 8013e3c:	4605      	mov	r5, r0
 8013e3e:	b118      	cbz	r0, 8013e48 <_puts_r+0x10>
 8013e40:	6983      	ldr	r3, [r0, #24]
 8013e42:	b90b      	cbnz	r3, 8013e48 <_puts_r+0x10>
 8013e44:	f000 faa6 	bl	8014394 <__sinit>
 8013e48:	69ab      	ldr	r3, [r5, #24]
 8013e4a:	68ac      	ldr	r4, [r5, #8]
 8013e4c:	b913      	cbnz	r3, 8013e54 <_puts_r+0x1c>
 8013e4e:	4628      	mov	r0, r5
 8013e50:	f000 faa0 	bl	8014394 <__sinit>
 8013e54:	4b2c      	ldr	r3, [pc, #176]	; (8013f08 <_puts_r+0xd0>)
 8013e56:	429c      	cmp	r4, r3
 8013e58:	d120      	bne.n	8013e9c <_puts_r+0x64>
 8013e5a:	686c      	ldr	r4, [r5, #4]
 8013e5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e5e:	07db      	lsls	r3, r3, #31
 8013e60:	d405      	bmi.n	8013e6e <_puts_r+0x36>
 8013e62:	89a3      	ldrh	r3, [r4, #12]
 8013e64:	0598      	lsls	r0, r3, #22
 8013e66:	d402      	bmi.n	8013e6e <_puts_r+0x36>
 8013e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e6a:	f000 fb43 	bl	80144f4 <__retarget_lock_acquire_recursive>
 8013e6e:	89a3      	ldrh	r3, [r4, #12]
 8013e70:	0719      	lsls	r1, r3, #28
 8013e72:	d51d      	bpl.n	8013eb0 <_puts_r+0x78>
 8013e74:	6923      	ldr	r3, [r4, #16]
 8013e76:	b1db      	cbz	r3, 8013eb0 <_puts_r+0x78>
 8013e78:	3e01      	subs	r6, #1
 8013e7a:	68a3      	ldr	r3, [r4, #8]
 8013e7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013e80:	3b01      	subs	r3, #1
 8013e82:	60a3      	str	r3, [r4, #8]
 8013e84:	bb39      	cbnz	r1, 8013ed6 <_puts_r+0x9e>
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	da38      	bge.n	8013efc <_puts_r+0xc4>
 8013e8a:	4622      	mov	r2, r4
 8013e8c:	210a      	movs	r1, #10
 8013e8e:	4628      	mov	r0, r5
 8013e90:	f000 f888 	bl	8013fa4 <__swbuf_r>
 8013e94:	3001      	adds	r0, #1
 8013e96:	d011      	beq.n	8013ebc <_puts_r+0x84>
 8013e98:	250a      	movs	r5, #10
 8013e9a:	e011      	b.n	8013ec0 <_puts_r+0x88>
 8013e9c:	4b1b      	ldr	r3, [pc, #108]	; (8013f0c <_puts_r+0xd4>)
 8013e9e:	429c      	cmp	r4, r3
 8013ea0:	d101      	bne.n	8013ea6 <_puts_r+0x6e>
 8013ea2:	68ac      	ldr	r4, [r5, #8]
 8013ea4:	e7da      	b.n	8013e5c <_puts_r+0x24>
 8013ea6:	4b1a      	ldr	r3, [pc, #104]	; (8013f10 <_puts_r+0xd8>)
 8013ea8:	429c      	cmp	r4, r3
 8013eaa:	bf08      	it	eq
 8013eac:	68ec      	ldreq	r4, [r5, #12]
 8013eae:	e7d5      	b.n	8013e5c <_puts_r+0x24>
 8013eb0:	4621      	mov	r1, r4
 8013eb2:	4628      	mov	r0, r5
 8013eb4:	f000 f8c8 	bl	8014048 <__swsetup_r>
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	d0dd      	beq.n	8013e78 <_puts_r+0x40>
 8013ebc:	f04f 35ff 	mov.w	r5, #4294967295
 8013ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ec2:	07da      	lsls	r2, r3, #31
 8013ec4:	d405      	bmi.n	8013ed2 <_puts_r+0x9a>
 8013ec6:	89a3      	ldrh	r3, [r4, #12]
 8013ec8:	059b      	lsls	r3, r3, #22
 8013eca:	d402      	bmi.n	8013ed2 <_puts_r+0x9a>
 8013ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ece:	f000 fb12 	bl	80144f6 <__retarget_lock_release_recursive>
 8013ed2:	4628      	mov	r0, r5
 8013ed4:	bd70      	pop	{r4, r5, r6, pc}
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	da04      	bge.n	8013ee4 <_puts_r+0xac>
 8013eda:	69a2      	ldr	r2, [r4, #24]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	dc06      	bgt.n	8013eee <_puts_r+0xb6>
 8013ee0:	290a      	cmp	r1, #10
 8013ee2:	d004      	beq.n	8013eee <_puts_r+0xb6>
 8013ee4:	6823      	ldr	r3, [r4, #0]
 8013ee6:	1c5a      	adds	r2, r3, #1
 8013ee8:	6022      	str	r2, [r4, #0]
 8013eea:	7019      	strb	r1, [r3, #0]
 8013eec:	e7c5      	b.n	8013e7a <_puts_r+0x42>
 8013eee:	4622      	mov	r2, r4
 8013ef0:	4628      	mov	r0, r5
 8013ef2:	f000 f857 	bl	8013fa4 <__swbuf_r>
 8013ef6:	3001      	adds	r0, #1
 8013ef8:	d1bf      	bne.n	8013e7a <_puts_r+0x42>
 8013efa:	e7df      	b.n	8013ebc <_puts_r+0x84>
 8013efc:	6823      	ldr	r3, [r4, #0]
 8013efe:	250a      	movs	r5, #10
 8013f00:	1c5a      	adds	r2, r3, #1
 8013f02:	6022      	str	r2, [r4, #0]
 8013f04:	701d      	strb	r5, [r3, #0]
 8013f06:	e7db      	b.n	8013ec0 <_puts_r+0x88>
 8013f08:	08018730 	.word	0x08018730
 8013f0c:	08018750 	.word	0x08018750
 8013f10:	08018710 	.word	0x08018710

08013f14 <puts>:
 8013f14:	4b02      	ldr	r3, [pc, #8]	; (8013f20 <puts+0xc>)
 8013f16:	4601      	mov	r1, r0
 8013f18:	6818      	ldr	r0, [r3, #0]
 8013f1a:	f7ff bf8d 	b.w	8013e38 <_puts_r>
 8013f1e:	bf00      	nop
 8013f20:	20000018 	.word	0x20000018

08013f24 <rand>:
 8013f24:	4b17      	ldr	r3, [pc, #92]	; (8013f84 <rand+0x60>)
 8013f26:	b510      	push	{r4, lr}
 8013f28:	681c      	ldr	r4, [r3, #0]
 8013f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013f2c:	b9b3      	cbnz	r3, 8013f5c <rand+0x38>
 8013f2e:	2018      	movs	r0, #24
 8013f30:	f000 fb46 	bl	80145c0 <malloc>
 8013f34:	63a0      	str	r0, [r4, #56]	; 0x38
 8013f36:	b928      	cbnz	r0, 8013f44 <rand+0x20>
 8013f38:	4602      	mov	r2, r0
 8013f3a:	4b13      	ldr	r3, [pc, #76]	; (8013f88 <rand+0x64>)
 8013f3c:	4813      	ldr	r0, [pc, #76]	; (8013f8c <rand+0x68>)
 8013f3e:	214e      	movs	r1, #78	; 0x4e
 8013f40:	f000 f8f0 	bl	8014124 <__assert_func>
 8013f44:	4a12      	ldr	r2, [pc, #72]	; (8013f90 <rand+0x6c>)
 8013f46:	4b13      	ldr	r3, [pc, #76]	; (8013f94 <rand+0x70>)
 8013f48:	e9c0 2300 	strd	r2, r3, [r0]
 8013f4c:	4b12      	ldr	r3, [pc, #72]	; (8013f98 <rand+0x74>)
 8013f4e:	6083      	str	r3, [r0, #8]
 8013f50:	230b      	movs	r3, #11
 8013f52:	8183      	strh	r3, [r0, #12]
 8013f54:	2201      	movs	r2, #1
 8013f56:	2300      	movs	r3, #0
 8013f58:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013f5c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013f5e:	480f      	ldr	r0, [pc, #60]	; (8013f9c <rand+0x78>)
 8013f60:	690a      	ldr	r2, [r1, #16]
 8013f62:	694b      	ldr	r3, [r1, #20]
 8013f64:	4c0e      	ldr	r4, [pc, #56]	; (8013fa0 <rand+0x7c>)
 8013f66:	4350      	muls	r0, r2
 8013f68:	fb04 0003 	mla	r0, r4, r3, r0
 8013f6c:	fba2 3404 	umull	r3, r4, r2, r4
 8013f70:	1c5a      	adds	r2, r3, #1
 8013f72:	4404      	add	r4, r0
 8013f74:	f144 0000 	adc.w	r0, r4, #0
 8013f78:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8013f7c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013f80:	bd10      	pop	{r4, pc}
 8013f82:	bf00      	nop
 8013f84:	20000018 	.word	0x20000018
 8013f88:	0801865c 	.word	0x0801865c
 8013f8c:	08018673 	.word	0x08018673
 8013f90:	abcd330e 	.word	0xabcd330e
 8013f94:	e66d1234 	.word	0xe66d1234
 8013f98:	0005deec 	.word	0x0005deec
 8013f9c:	5851f42d 	.word	0x5851f42d
 8013fa0:	4c957f2d 	.word	0x4c957f2d

08013fa4 <__swbuf_r>:
 8013fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fa6:	460e      	mov	r6, r1
 8013fa8:	4614      	mov	r4, r2
 8013faa:	4605      	mov	r5, r0
 8013fac:	b118      	cbz	r0, 8013fb6 <__swbuf_r+0x12>
 8013fae:	6983      	ldr	r3, [r0, #24]
 8013fb0:	b90b      	cbnz	r3, 8013fb6 <__swbuf_r+0x12>
 8013fb2:	f000 f9ef 	bl	8014394 <__sinit>
 8013fb6:	4b21      	ldr	r3, [pc, #132]	; (801403c <__swbuf_r+0x98>)
 8013fb8:	429c      	cmp	r4, r3
 8013fba:	d12b      	bne.n	8014014 <__swbuf_r+0x70>
 8013fbc:	686c      	ldr	r4, [r5, #4]
 8013fbe:	69a3      	ldr	r3, [r4, #24]
 8013fc0:	60a3      	str	r3, [r4, #8]
 8013fc2:	89a3      	ldrh	r3, [r4, #12]
 8013fc4:	071a      	lsls	r2, r3, #28
 8013fc6:	d52f      	bpl.n	8014028 <__swbuf_r+0x84>
 8013fc8:	6923      	ldr	r3, [r4, #16]
 8013fca:	b36b      	cbz	r3, 8014028 <__swbuf_r+0x84>
 8013fcc:	6923      	ldr	r3, [r4, #16]
 8013fce:	6820      	ldr	r0, [r4, #0]
 8013fd0:	1ac0      	subs	r0, r0, r3
 8013fd2:	6963      	ldr	r3, [r4, #20]
 8013fd4:	b2f6      	uxtb	r6, r6
 8013fd6:	4283      	cmp	r3, r0
 8013fd8:	4637      	mov	r7, r6
 8013fda:	dc04      	bgt.n	8013fe6 <__swbuf_r+0x42>
 8013fdc:	4621      	mov	r1, r4
 8013fde:	4628      	mov	r0, r5
 8013fe0:	f000 f944 	bl	801426c <_fflush_r>
 8013fe4:	bb30      	cbnz	r0, 8014034 <__swbuf_r+0x90>
 8013fe6:	68a3      	ldr	r3, [r4, #8]
 8013fe8:	3b01      	subs	r3, #1
 8013fea:	60a3      	str	r3, [r4, #8]
 8013fec:	6823      	ldr	r3, [r4, #0]
 8013fee:	1c5a      	adds	r2, r3, #1
 8013ff0:	6022      	str	r2, [r4, #0]
 8013ff2:	701e      	strb	r6, [r3, #0]
 8013ff4:	6963      	ldr	r3, [r4, #20]
 8013ff6:	3001      	adds	r0, #1
 8013ff8:	4283      	cmp	r3, r0
 8013ffa:	d004      	beq.n	8014006 <__swbuf_r+0x62>
 8013ffc:	89a3      	ldrh	r3, [r4, #12]
 8013ffe:	07db      	lsls	r3, r3, #31
 8014000:	d506      	bpl.n	8014010 <__swbuf_r+0x6c>
 8014002:	2e0a      	cmp	r6, #10
 8014004:	d104      	bne.n	8014010 <__swbuf_r+0x6c>
 8014006:	4621      	mov	r1, r4
 8014008:	4628      	mov	r0, r5
 801400a:	f000 f92f 	bl	801426c <_fflush_r>
 801400e:	b988      	cbnz	r0, 8014034 <__swbuf_r+0x90>
 8014010:	4638      	mov	r0, r7
 8014012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014014:	4b0a      	ldr	r3, [pc, #40]	; (8014040 <__swbuf_r+0x9c>)
 8014016:	429c      	cmp	r4, r3
 8014018:	d101      	bne.n	801401e <__swbuf_r+0x7a>
 801401a:	68ac      	ldr	r4, [r5, #8]
 801401c:	e7cf      	b.n	8013fbe <__swbuf_r+0x1a>
 801401e:	4b09      	ldr	r3, [pc, #36]	; (8014044 <__swbuf_r+0xa0>)
 8014020:	429c      	cmp	r4, r3
 8014022:	bf08      	it	eq
 8014024:	68ec      	ldreq	r4, [r5, #12]
 8014026:	e7ca      	b.n	8013fbe <__swbuf_r+0x1a>
 8014028:	4621      	mov	r1, r4
 801402a:	4628      	mov	r0, r5
 801402c:	f000 f80c 	bl	8014048 <__swsetup_r>
 8014030:	2800      	cmp	r0, #0
 8014032:	d0cb      	beq.n	8013fcc <__swbuf_r+0x28>
 8014034:	f04f 37ff 	mov.w	r7, #4294967295
 8014038:	e7ea      	b.n	8014010 <__swbuf_r+0x6c>
 801403a:	bf00      	nop
 801403c:	08018730 	.word	0x08018730
 8014040:	08018750 	.word	0x08018750
 8014044:	08018710 	.word	0x08018710

08014048 <__swsetup_r>:
 8014048:	4b32      	ldr	r3, [pc, #200]	; (8014114 <__swsetup_r+0xcc>)
 801404a:	b570      	push	{r4, r5, r6, lr}
 801404c:	681d      	ldr	r5, [r3, #0]
 801404e:	4606      	mov	r6, r0
 8014050:	460c      	mov	r4, r1
 8014052:	b125      	cbz	r5, 801405e <__swsetup_r+0x16>
 8014054:	69ab      	ldr	r3, [r5, #24]
 8014056:	b913      	cbnz	r3, 801405e <__swsetup_r+0x16>
 8014058:	4628      	mov	r0, r5
 801405a:	f000 f99b 	bl	8014394 <__sinit>
 801405e:	4b2e      	ldr	r3, [pc, #184]	; (8014118 <__swsetup_r+0xd0>)
 8014060:	429c      	cmp	r4, r3
 8014062:	d10f      	bne.n	8014084 <__swsetup_r+0x3c>
 8014064:	686c      	ldr	r4, [r5, #4]
 8014066:	89a3      	ldrh	r3, [r4, #12]
 8014068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801406c:	0719      	lsls	r1, r3, #28
 801406e:	d42c      	bmi.n	80140ca <__swsetup_r+0x82>
 8014070:	06dd      	lsls	r5, r3, #27
 8014072:	d411      	bmi.n	8014098 <__swsetup_r+0x50>
 8014074:	2309      	movs	r3, #9
 8014076:	6033      	str	r3, [r6, #0]
 8014078:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801407c:	81a3      	strh	r3, [r4, #12]
 801407e:	f04f 30ff 	mov.w	r0, #4294967295
 8014082:	e03e      	b.n	8014102 <__swsetup_r+0xba>
 8014084:	4b25      	ldr	r3, [pc, #148]	; (801411c <__swsetup_r+0xd4>)
 8014086:	429c      	cmp	r4, r3
 8014088:	d101      	bne.n	801408e <__swsetup_r+0x46>
 801408a:	68ac      	ldr	r4, [r5, #8]
 801408c:	e7eb      	b.n	8014066 <__swsetup_r+0x1e>
 801408e:	4b24      	ldr	r3, [pc, #144]	; (8014120 <__swsetup_r+0xd8>)
 8014090:	429c      	cmp	r4, r3
 8014092:	bf08      	it	eq
 8014094:	68ec      	ldreq	r4, [r5, #12]
 8014096:	e7e6      	b.n	8014066 <__swsetup_r+0x1e>
 8014098:	0758      	lsls	r0, r3, #29
 801409a:	d512      	bpl.n	80140c2 <__swsetup_r+0x7a>
 801409c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801409e:	b141      	cbz	r1, 80140b2 <__swsetup_r+0x6a>
 80140a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80140a4:	4299      	cmp	r1, r3
 80140a6:	d002      	beq.n	80140ae <__swsetup_r+0x66>
 80140a8:	4630      	mov	r0, r6
 80140aa:	f000 fa91 	bl	80145d0 <_free_r>
 80140ae:	2300      	movs	r3, #0
 80140b0:	6363      	str	r3, [r4, #52]	; 0x34
 80140b2:	89a3      	ldrh	r3, [r4, #12]
 80140b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80140b8:	81a3      	strh	r3, [r4, #12]
 80140ba:	2300      	movs	r3, #0
 80140bc:	6063      	str	r3, [r4, #4]
 80140be:	6923      	ldr	r3, [r4, #16]
 80140c0:	6023      	str	r3, [r4, #0]
 80140c2:	89a3      	ldrh	r3, [r4, #12]
 80140c4:	f043 0308 	orr.w	r3, r3, #8
 80140c8:	81a3      	strh	r3, [r4, #12]
 80140ca:	6923      	ldr	r3, [r4, #16]
 80140cc:	b94b      	cbnz	r3, 80140e2 <__swsetup_r+0x9a>
 80140ce:	89a3      	ldrh	r3, [r4, #12]
 80140d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80140d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80140d8:	d003      	beq.n	80140e2 <__swsetup_r+0x9a>
 80140da:	4621      	mov	r1, r4
 80140dc:	4630      	mov	r0, r6
 80140de:	f000 fa2f 	bl	8014540 <__smakebuf_r>
 80140e2:	89a0      	ldrh	r0, [r4, #12]
 80140e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80140e8:	f010 0301 	ands.w	r3, r0, #1
 80140ec:	d00a      	beq.n	8014104 <__swsetup_r+0xbc>
 80140ee:	2300      	movs	r3, #0
 80140f0:	60a3      	str	r3, [r4, #8]
 80140f2:	6963      	ldr	r3, [r4, #20]
 80140f4:	425b      	negs	r3, r3
 80140f6:	61a3      	str	r3, [r4, #24]
 80140f8:	6923      	ldr	r3, [r4, #16]
 80140fa:	b943      	cbnz	r3, 801410e <__swsetup_r+0xc6>
 80140fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014100:	d1ba      	bne.n	8014078 <__swsetup_r+0x30>
 8014102:	bd70      	pop	{r4, r5, r6, pc}
 8014104:	0781      	lsls	r1, r0, #30
 8014106:	bf58      	it	pl
 8014108:	6963      	ldrpl	r3, [r4, #20]
 801410a:	60a3      	str	r3, [r4, #8]
 801410c:	e7f4      	b.n	80140f8 <__swsetup_r+0xb0>
 801410e:	2000      	movs	r0, #0
 8014110:	e7f7      	b.n	8014102 <__swsetup_r+0xba>
 8014112:	bf00      	nop
 8014114:	20000018 	.word	0x20000018
 8014118:	08018730 	.word	0x08018730
 801411c:	08018750 	.word	0x08018750
 8014120:	08018710 	.word	0x08018710

08014124 <__assert_func>:
 8014124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014126:	4614      	mov	r4, r2
 8014128:	461a      	mov	r2, r3
 801412a:	4b09      	ldr	r3, [pc, #36]	; (8014150 <__assert_func+0x2c>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	4605      	mov	r5, r0
 8014130:	68d8      	ldr	r0, [r3, #12]
 8014132:	b14c      	cbz	r4, 8014148 <__assert_func+0x24>
 8014134:	4b07      	ldr	r3, [pc, #28]	; (8014154 <__assert_func+0x30>)
 8014136:	9100      	str	r1, [sp, #0]
 8014138:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801413c:	4906      	ldr	r1, [pc, #24]	; (8014158 <__assert_func+0x34>)
 801413e:	462b      	mov	r3, r5
 8014140:	f000 f9a6 	bl	8014490 <fiprintf>
 8014144:	f000 fe42 	bl	8014dcc <abort>
 8014148:	4b04      	ldr	r3, [pc, #16]	; (801415c <__assert_func+0x38>)
 801414a:	461c      	mov	r4, r3
 801414c:	e7f3      	b.n	8014136 <__assert_func+0x12>
 801414e:	bf00      	nop
 8014150:	20000018 	.word	0x20000018
 8014154:	080186d2 	.word	0x080186d2
 8014158:	080186df 	.word	0x080186df
 801415c:	0801870d 	.word	0x0801870d

08014160 <__sflush_r>:
 8014160:	898a      	ldrh	r2, [r1, #12]
 8014162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014166:	4605      	mov	r5, r0
 8014168:	0710      	lsls	r0, r2, #28
 801416a:	460c      	mov	r4, r1
 801416c:	d458      	bmi.n	8014220 <__sflush_r+0xc0>
 801416e:	684b      	ldr	r3, [r1, #4]
 8014170:	2b00      	cmp	r3, #0
 8014172:	dc05      	bgt.n	8014180 <__sflush_r+0x20>
 8014174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014176:	2b00      	cmp	r3, #0
 8014178:	dc02      	bgt.n	8014180 <__sflush_r+0x20>
 801417a:	2000      	movs	r0, #0
 801417c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014182:	2e00      	cmp	r6, #0
 8014184:	d0f9      	beq.n	801417a <__sflush_r+0x1a>
 8014186:	2300      	movs	r3, #0
 8014188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801418c:	682f      	ldr	r7, [r5, #0]
 801418e:	602b      	str	r3, [r5, #0]
 8014190:	d032      	beq.n	80141f8 <__sflush_r+0x98>
 8014192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014194:	89a3      	ldrh	r3, [r4, #12]
 8014196:	075a      	lsls	r2, r3, #29
 8014198:	d505      	bpl.n	80141a6 <__sflush_r+0x46>
 801419a:	6863      	ldr	r3, [r4, #4]
 801419c:	1ac0      	subs	r0, r0, r3
 801419e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80141a0:	b10b      	cbz	r3, 80141a6 <__sflush_r+0x46>
 80141a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80141a4:	1ac0      	subs	r0, r0, r3
 80141a6:	2300      	movs	r3, #0
 80141a8:	4602      	mov	r2, r0
 80141aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80141ac:	6a21      	ldr	r1, [r4, #32]
 80141ae:	4628      	mov	r0, r5
 80141b0:	47b0      	blx	r6
 80141b2:	1c43      	adds	r3, r0, #1
 80141b4:	89a3      	ldrh	r3, [r4, #12]
 80141b6:	d106      	bne.n	80141c6 <__sflush_r+0x66>
 80141b8:	6829      	ldr	r1, [r5, #0]
 80141ba:	291d      	cmp	r1, #29
 80141bc:	d82c      	bhi.n	8014218 <__sflush_r+0xb8>
 80141be:	4a2a      	ldr	r2, [pc, #168]	; (8014268 <__sflush_r+0x108>)
 80141c0:	40ca      	lsrs	r2, r1
 80141c2:	07d6      	lsls	r6, r2, #31
 80141c4:	d528      	bpl.n	8014218 <__sflush_r+0xb8>
 80141c6:	2200      	movs	r2, #0
 80141c8:	6062      	str	r2, [r4, #4]
 80141ca:	04d9      	lsls	r1, r3, #19
 80141cc:	6922      	ldr	r2, [r4, #16]
 80141ce:	6022      	str	r2, [r4, #0]
 80141d0:	d504      	bpl.n	80141dc <__sflush_r+0x7c>
 80141d2:	1c42      	adds	r2, r0, #1
 80141d4:	d101      	bne.n	80141da <__sflush_r+0x7a>
 80141d6:	682b      	ldr	r3, [r5, #0]
 80141d8:	b903      	cbnz	r3, 80141dc <__sflush_r+0x7c>
 80141da:	6560      	str	r0, [r4, #84]	; 0x54
 80141dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141de:	602f      	str	r7, [r5, #0]
 80141e0:	2900      	cmp	r1, #0
 80141e2:	d0ca      	beq.n	801417a <__sflush_r+0x1a>
 80141e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141e8:	4299      	cmp	r1, r3
 80141ea:	d002      	beq.n	80141f2 <__sflush_r+0x92>
 80141ec:	4628      	mov	r0, r5
 80141ee:	f000 f9ef 	bl	80145d0 <_free_r>
 80141f2:	2000      	movs	r0, #0
 80141f4:	6360      	str	r0, [r4, #52]	; 0x34
 80141f6:	e7c1      	b.n	801417c <__sflush_r+0x1c>
 80141f8:	6a21      	ldr	r1, [r4, #32]
 80141fa:	2301      	movs	r3, #1
 80141fc:	4628      	mov	r0, r5
 80141fe:	47b0      	blx	r6
 8014200:	1c41      	adds	r1, r0, #1
 8014202:	d1c7      	bne.n	8014194 <__sflush_r+0x34>
 8014204:	682b      	ldr	r3, [r5, #0]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d0c4      	beq.n	8014194 <__sflush_r+0x34>
 801420a:	2b1d      	cmp	r3, #29
 801420c:	d001      	beq.n	8014212 <__sflush_r+0xb2>
 801420e:	2b16      	cmp	r3, #22
 8014210:	d101      	bne.n	8014216 <__sflush_r+0xb6>
 8014212:	602f      	str	r7, [r5, #0]
 8014214:	e7b1      	b.n	801417a <__sflush_r+0x1a>
 8014216:	89a3      	ldrh	r3, [r4, #12]
 8014218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801421c:	81a3      	strh	r3, [r4, #12]
 801421e:	e7ad      	b.n	801417c <__sflush_r+0x1c>
 8014220:	690f      	ldr	r7, [r1, #16]
 8014222:	2f00      	cmp	r7, #0
 8014224:	d0a9      	beq.n	801417a <__sflush_r+0x1a>
 8014226:	0793      	lsls	r3, r2, #30
 8014228:	680e      	ldr	r6, [r1, #0]
 801422a:	bf08      	it	eq
 801422c:	694b      	ldreq	r3, [r1, #20]
 801422e:	600f      	str	r7, [r1, #0]
 8014230:	bf18      	it	ne
 8014232:	2300      	movne	r3, #0
 8014234:	eba6 0807 	sub.w	r8, r6, r7
 8014238:	608b      	str	r3, [r1, #8]
 801423a:	f1b8 0f00 	cmp.w	r8, #0
 801423e:	dd9c      	ble.n	801417a <__sflush_r+0x1a>
 8014240:	6a21      	ldr	r1, [r4, #32]
 8014242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014244:	4643      	mov	r3, r8
 8014246:	463a      	mov	r2, r7
 8014248:	4628      	mov	r0, r5
 801424a:	47b0      	blx	r6
 801424c:	2800      	cmp	r0, #0
 801424e:	dc06      	bgt.n	801425e <__sflush_r+0xfe>
 8014250:	89a3      	ldrh	r3, [r4, #12]
 8014252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014256:	81a3      	strh	r3, [r4, #12]
 8014258:	f04f 30ff 	mov.w	r0, #4294967295
 801425c:	e78e      	b.n	801417c <__sflush_r+0x1c>
 801425e:	4407      	add	r7, r0
 8014260:	eba8 0800 	sub.w	r8, r8, r0
 8014264:	e7e9      	b.n	801423a <__sflush_r+0xda>
 8014266:	bf00      	nop
 8014268:	20400001 	.word	0x20400001

0801426c <_fflush_r>:
 801426c:	b538      	push	{r3, r4, r5, lr}
 801426e:	690b      	ldr	r3, [r1, #16]
 8014270:	4605      	mov	r5, r0
 8014272:	460c      	mov	r4, r1
 8014274:	b913      	cbnz	r3, 801427c <_fflush_r+0x10>
 8014276:	2500      	movs	r5, #0
 8014278:	4628      	mov	r0, r5
 801427a:	bd38      	pop	{r3, r4, r5, pc}
 801427c:	b118      	cbz	r0, 8014286 <_fflush_r+0x1a>
 801427e:	6983      	ldr	r3, [r0, #24]
 8014280:	b90b      	cbnz	r3, 8014286 <_fflush_r+0x1a>
 8014282:	f000 f887 	bl	8014394 <__sinit>
 8014286:	4b14      	ldr	r3, [pc, #80]	; (80142d8 <_fflush_r+0x6c>)
 8014288:	429c      	cmp	r4, r3
 801428a:	d11b      	bne.n	80142c4 <_fflush_r+0x58>
 801428c:	686c      	ldr	r4, [r5, #4]
 801428e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d0ef      	beq.n	8014276 <_fflush_r+0xa>
 8014296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014298:	07d0      	lsls	r0, r2, #31
 801429a:	d404      	bmi.n	80142a6 <_fflush_r+0x3a>
 801429c:	0599      	lsls	r1, r3, #22
 801429e:	d402      	bmi.n	80142a6 <_fflush_r+0x3a>
 80142a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142a2:	f000 f927 	bl	80144f4 <__retarget_lock_acquire_recursive>
 80142a6:	4628      	mov	r0, r5
 80142a8:	4621      	mov	r1, r4
 80142aa:	f7ff ff59 	bl	8014160 <__sflush_r>
 80142ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142b0:	07da      	lsls	r2, r3, #31
 80142b2:	4605      	mov	r5, r0
 80142b4:	d4e0      	bmi.n	8014278 <_fflush_r+0xc>
 80142b6:	89a3      	ldrh	r3, [r4, #12]
 80142b8:	059b      	lsls	r3, r3, #22
 80142ba:	d4dd      	bmi.n	8014278 <_fflush_r+0xc>
 80142bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142be:	f000 f91a 	bl	80144f6 <__retarget_lock_release_recursive>
 80142c2:	e7d9      	b.n	8014278 <_fflush_r+0xc>
 80142c4:	4b05      	ldr	r3, [pc, #20]	; (80142dc <_fflush_r+0x70>)
 80142c6:	429c      	cmp	r4, r3
 80142c8:	d101      	bne.n	80142ce <_fflush_r+0x62>
 80142ca:	68ac      	ldr	r4, [r5, #8]
 80142cc:	e7df      	b.n	801428e <_fflush_r+0x22>
 80142ce:	4b04      	ldr	r3, [pc, #16]	; (80142e0 <_fflush_r+0x74>)
 80142d0:	429c      	cmp	r4, r3
 80142d2:	bf08      	it	eq
 80142d4:	68ec      	ldreq	r4, [r5, #12]
 80142d6:	e7da      	b.n	801428e <_fflush_r+0x22>
 80142d8:	08018730 	.word	0x08018730
 80142dc:	08018750 	.word	0x08018750
 80142e0:	08018710 	.word	0x08018710

080142e4 <std>:
 80142e4:	2300      	movs	r3, #0
 80142e6:	b510      	push	{r4, lr}
 80142e8:	4604      	mov	r4, r0
 80142ea:	e9c0 3300 	strd	r3, r3, [r0]
 80142ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80142f2:	6083      	str	r3, [r0, #8]
 80142f4:	8181      	strh	r1, [r0, #12]
 80142f6:	6643      	str	r3, [r0, #100]	; 0x64
 80142f8:	81c2      	strh	r2, [r0, #14]
 80142fa:	6183      	str	r3, [r0, #24]
 80142fc:	4619      	mov	r1, r3
 80142fe:	2208      	movs	r2, #8
 8014300:	305c      	adds	r0, #92	; 0x5c
 8014302:	f7ff fd79 	bl	8013df8 <memset>
 8014306:	4b05      	ldr	r3, [pc, #20]	; (801431c <std+0x38>)
 8014308:	6263      	str	r3, [r4, #36]	; 0x24
 801430a:	4b05      	ldr	r3, [pc, #20]	; (8014320 <std+0x3c>)
 801430c:	62a3      	str	r3, [r4, #40]	; 0x28
 801430e:	4b05      	ldr	r3, [pc, #20]	; (8014324 <std+0x40>)
 8014310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014312:	4b05      	ldr	r3, [pc, #20]	; (8014328 <std+0x44>)
 8014314:	6224      	str	r4, [r4, #32]
 8014316:	6323      	str	r3, [r4, #48]	; 0x30
 8014318:	bd10      	pop	{r4, pc}
 801431a:	bf00      	nop
 801431c:	08014d21 	.word	0x08014d21
 8014320:	08014d43 	.word	0x08014d43
 8014324:	08014d7b 	.word	0x08014d7b
 8014328:	08014d9f 	.word	0x08014d9f

0801432c <_cleanup_r>:
 801432c:	4901      	ldr	r1, [pc, #4]	; (8014334 <_cleanup_r+0x8>)
 801432e:	f000 b8c1 	b.w	80144b4 <_fwalk_reent>
 8014332:	bf00      	nop
 8014334:	0801426d 	.word	0x0801426d

08014338 <__sfmoreglue>:
 8014338:	b570      	push	{r4, r5, r6, lr}
 801433a:	1e4a      	subs	r2, r1, #1
 801433c:	2568      	movs	r5, #104	; 0x68
 801433e:	4355      	muls	r5, r2
 8014340:	460e      	mov	r6, r1
 8014342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014346:	f000 f993 	bl	8014670 <_malloc_r>
 801434a:	4604      	mov	r4, r0
 801434c:	b140      	cbz	r0, 8014360 <__sfmoreglue+0x28>
 801434e:	2100      	movs	r1, #0
 8014350:	e9c0 1600 	strd	r1, r6, [r0]
 8014354:	300c      	adds	r0, #12
 8014356:	60a0      	str	r0, [r4, #8]
 8014358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801435c:	f7ff fd4c 	bl	8013df8 <memset>
 8014360:	4620      	mov	r0, r4
 8014362:	bd70      	pop	{r4, r5, r6, pc}

08014364 <__sfp_lock_acquire>:
 8014364:	4801      	ldr	r0, [pc, #4]	; (801436c <__sfp_lock_acquire+0x8>)
 8014366:	f000 b8c5 	b.w	80144f4 <__retarget_lock_acquire_recursive>
 801436a:	bf00      	nop
 801436c:	20006d58 	.word	0x20006d58

08014370 <__sfp_lock_release>:
 8014370:	4801      	ldr	r0, [pc, #4]	; (8014378 <__sfp_lock_release+0x8>)
 8014372:	f000 b8c0 	b.w	80144f6 <__retarget_lock_release_recursive>
 8014376:	bf00      	nop
 8014378:	20006d58 	.word	0x20006d58

0801437c <__sinit_lock_acquire>:
 801437c:	4801      	ldr	r0, [pc, #4]	; (8014384 <__sinit_lock_acquire+0x8>)
 801437e:	f000 b8b9 	b.w	80144f4 <__retarget_lock_acquire_recursive>
 8014382:	bf00      	nop
 8014384:	20006d53 	.word	0x20006d53

08014388 <__sinit_lock_release>:
 8014388:	4801      	ldr	r0, [pc, #4]	; (8014390 <__sinit_lock_release+0x8>)
 801438a:	f000 b8b4 	b.w	80144f6 <__retarget_lock_release_recursive>
 801438e:	bf00      	nop
 8014390:	20006d53 	.word	0x20006d53

08014394 <__sinit>:
 8014394:	b510      	push	{r4, lr}
 8014396:	4604      	mov	r4, r0
 8014398:	f7ff fff0 	bl	801437c <__sinit_lock_acquire>
 801439c:	69a3      	ldr	r3, [r4, #24]
 801439e:	b11b      	cbz	r3, 80143a8 <__sinit+0x14>
 80143a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143a4:	f7ff bff0 	b.w	8014388 <__sinit_lock_release>
 80143a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80143ac:	6523      	str	r3, [r4, #80]	; 0x50
 80143ae:	4b13      	ldr	r3, [pc, #76]	; (80143fc <__sinit+0x68>)
 80143b0:	4a13      	ldr	r2, [pc, #76]	; (8014400 <__sinit+0x6c>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80143b6:	42a3      	cmp	r3, r4
 80143b8:	bf04      	itt	eq
 80143ba:	2301      	moveq	r3, #1
 80143bc:	61a3      	streq	r3, [r4, #24]
 80143be:	4620      	mov	r0, r4
 80143c0:	f000 f820 	bl	8014404 <__sfp>
 80143c4:	6060      	str	r0, [r4, #4]
 80143c6:	4620      	mov	r0, r4
 80143c8:	f000 f81c 	bl	8014404 <__sfp>
 80143cc:	60a0      	str	r0, [r4, #8]
 80143ce:	4620      	mov	r0, r4
 80143d0:	f000 f818 	bl	8014404 <__sfp>
 80143d4:	2200      	movs	r2, #0
 80143d6:	60e0      	str	r0, [r4, #12]
 80143d8:	2104      	movs	r1, #4
 80143da:	6860      	ldr	r0, [r4, #4]
 80143dc:	f7ff ff82 	bl	80142e4 <std>
 80143e0:	68a0      	ldr	r0, [r4, #8]
 80143e2:	2201      	movs	r2, #1
 80143e4:	2109      	movs	r1, #9
 80143e6:	f7ff ff7d 	bl	80142e4 <std>
 80143ea:	68e0      	ldr	r0, [r4, #12]
 80143ec:	2202      	movs	r2, #2
 80143ee:	2112      	movs	r1, #18
 80143f0:	f7ff ff78 	bl	80142e4 <std>
 80143f4:	2301      	movs	r3, #1
 80143f6:	61a3      	str	r3, [r4, #24]
 80143f8:	e7d2      	b.n	80143a0 <__sinit+0xc>
 80143fa:	bf00      	nop
 80143fc:	08018658 	.word	0x08018658
 8014400:	0801432d 	.word	0x0801432d

08014404 <__sfp>:
 8014404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014406:	4607      	mov	r7, r0
 8014408:	f7ff ffac 	bl	8014364 <__sfp_lock_acquire>
 801440c:	4b1e      	ldr	r3, [pc, #120]	; (8014488 <__sfp+0x84>)
 801440e:	681e      	ldr	r6, [r3, #0]
 8014410:	69b3      	ldr	r3, [r6, #24]
 8014412:	b913      	cbnz	r3, 801441a <__sfp+0x16>
 8014414:	4630      	mov	r0, r6
 8014416:	f7ff ffbd 	bl	8014394 <__sinit>
 801441a:	3648      	adds	r6, #72	; 0x48
 801441c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014420:	3b01      	subs	r3, #1
 8014422:	d503      	bpl.n	801442c <__sfp+0x28>
 8014424:	6833      	ldr	r3, [r6, #0]
 8014426:	b30b      	cbz	r3, 801446c <__sfp+0x68>
 8014428:	6836      	ldr	r6, [r6, #0]
 801442a:	e7f7      	b.n	801441c <__sfp+0x18>
 801442c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014430:	b9d5      	cbnz	r5, 8014468 <__sfp+0x64>
 8014432:	4b16      	ldr	r3, [pc, #88]	; (801448c <__sfp+0x88>)
 8014434:	60e3      	str	r3, [r4, #12]
 8014436:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801443a:	6665      	str	r5, [r4, #100]	; 0x64
 801443c:	f000 f859 	bl	80144f2 <__retarget_lock_init_recursive>
 8014440:	f7ff ff96 	bl	8014370 <__sfp_lock_release>
 8014444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801444c:	6025      	str	r5, [r4, #0]
 801444e:	61a5      	str	r5, [r4, #24]
 8014450:	2208      	movs	r2, #8
 8014452:	4629      	mov	r1, r5
 8014454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014458:	f7ff fcce 	bl	8013df8 <memset>
 801445c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014464:	4620      	mov	r0, r4
 8014466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014468:	3468      	adds	r4, #104	; 0x68
 801446a:	e7d9      	b.n	8014420 <__sfp+0x1c>
 801446c:	2104      	movs	r1, #4
 801446e:	4638      	mov	r0, r7
 8014470:	f7ff ff62 	bl	8014338 <__sfmoreglue>
 8014474:	4604      	mov	r4, r0
 8014476:	6030      	str	r0, [r6, #0]
 8014478:	2800      	cmp	r0, #0
 801447a:	d1d5      	bne.n	8014428 <__sfp+0x24>
 801447c:	f7ff ff78 	bl	8014370 <__sfp_lock_release>
 8014480:	230c      	movs	r3, #12
 8014482:	603b      	str	r3, [r7, #0]
 8014484:	e7ee      	b.n	8014464 <__sfp+0x60>
 8014486:	bf00      	nop
 8014488:	08018658 	.word	0x08018658
 801448c:	ffff0001 	.word	0xffff0001

08014490 <fiprintf>:
 8014490:	b40e      	push	{r1, r2, r3}
 8014492:	b503      	push	{r0, r1, lr}
 8014494:	4601      	mov	r1, r0
 8014496:	ab03      	add	r3, sp, #12
 8014498:	4805      	ldr	r0, [pc, #20]	; (80144b0 <fiprintf+0x20>)
 801449a:	f853 2b04 	ldr.w	r2, [r3], #4
 801449e:	6800      	ldr	r0, [r0, #0]
 80144a0:	9301      	str	r3, [sp, #4]
 80144a2:	f000 f969 	bl	8014778 <_vfiprintf_r>
 80144a6:	b002      	add	sp, #8
 80144a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80144ac:	b003      	add	sp, #12
 80144ae:	4770      	bx	lr
 80144b0:	20000018 	.word	0x20000018

080144b4 <_fwalk_reent>:
 80144b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144b8:	4606      	mov	r6, r0
 80144ba:	4688      	mov	r8, r1
 80144bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80144c0:	2700      	movs	r7, #0
 80144c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80144c6:	f1b9 0901 	subs.w	r9, r9, #1
 80144ca:	d505      	bpl.n	80144d8 <_fwalk_reent+0x24>
 80144cc:	6824      	ldr	r4, [r4, #0]
 80144ce:	2c00      	cmp	r4, #0
 80144d0:	d1f7      	bne.n	80144c2 <_fwalk_reent+0xe>
 80144d2:	4638      	mov	r0, r7
 80144d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144d8:	89ab      	ldrh	r3, [r5, #12]
 80144da:	2b01      	cmp	r3, #1
 80144dc:	d907      	bls.n	80144ee <_fwalk_reent+0x3a>
 80144de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80144e2:	3301      	adds	r3, #1
 80144e4:	d003      	beq.n	80144ee <_fwalk_reent+0x3a>
 80144e6:	4629      	mov	r1, r5
 80144e8:	4630      	mov	r0, r6
 80144ea:	47c0      	blx	r8
 80144ec:	4307      	orrs	r7, r0
 80144ee:	3568      	adds	r5, #104	; 0x68
 80144f0:	e7e9      	b.n	80144c6 <_fwalk_reent+0x12>

080144f2 <__retarget_lock_init_recursive>:
 80144f2:	4770      	bx	lr

080144f4 <__retarget_lock_acquire_recursive>:
 80144f4:	4770      	bx	lr

080144f6 <__retarget_lock_release_recursive>:
 80144f6:	4770      	bx	lr

080144f8 <__swhatbuf_r>:
 80144f8:	b570      	push	{r4, r5, r6, lr}
 80144fa:	460e      	mov	r6, r1
 80144fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014500:	2900      	cmp	r1, #0
 8014502:	b096      	sub	sp, #88	; 0x58
 8014504:	4614      	mov	r4, r2
 8014506:	461d      	mov	r5, r3
 8014508:	da07      	bge.n	801451a <__swhatbuf_r+0x22>
 801450a:	2300      	movs	r3, #0
 801450c:	602b      	str	r3, [r5, #0]
 801450e:	89b3      	ldrh	r3, [r6, #12]
 8014510:	061a      	lsls	r2, r3, #24
 8014512:	d410      	bmi.n	8014536 <__swhatbuf_r+0x3e>
 8014514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014518:	e00e      	b.n	8014538 <__swhatbuf_r+0x40>
 801451a:	466a      	mov	r2, sp
 801451c:	f000 fc6e 	bl	8014dfc <_fstat_r>
 8014520:	2800      	cmp	r0, #0
 8014522:	dbf2      	blt.n	801450a <__swhatbuf_r+0x12>
 8014524:	9a01      	ldr	r2, [sp, #4]
 8014526:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801452a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801452e:	425a      	negs	r2, r3
 8014530:	415a      	adcs	r2, r3
 8014532:	602a      	str	r2, [r5, #0]
 8014534:	e7ee      	b.n	8014514 <__swhatbuf_r+0x1c>
 8014536:	2340      	movs	r3, #64	; 0x40
 8014538:	2000      	movs	r0, #0
 801453a:	6023      	str	r3, [r4, #0]
 801453c:	b016      	add	sp, #88	; 0x58
 801453e:	bd70      	pop	{r4, r5, r6, pc}

08014540 <__smakebuf_r>:
 8014540:	898b      	ldrh	r3, [r1, #12]
 8014542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014544:	079d      	lsls	r5, r3, #30
 8014546:	4606      	mov	r6, r0
 8014548:	460c      	mov	r4, r1
 801454a:	d507      	bpl.n	801455c <__smakebuf_r+0x1c>
 801454c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014550:	6023      	str	r3, [r4, #0]
 8014552:	6123      	str	r3, [r4, #16]
 8014554:	2301      	movs	r3, #1
 8014556:	6163      	str	r3, [r4, #20]
 8014558:	b002      	add	sp, #8
 801455a:	bd70      	pop	{r4, r5, r6, pc}
 801455c:	ab01      	add	r3, sp, #4
 801455e:	466a      	mov	r2, sp
 8014560:	f7ff ffca 	bl	80144f8 <__swhatbuf_r>
 8014564:	9900      	ldr	r1, [sp, #0]
 8014566:	4605      	mov	r5, r0
 8014568:	4630      	mov	r0, r6
 801456a:	f000 f881 	bl	8014670 <_malloc_r>
 801456e:	b948      	cbnz	r0, 8014584 <__smakebuf_r+0x44>
 8014570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014574:	059a      	lsls	r2, r3, #22
 8014576:	d4ef      	bmi.n	8014558 <__smakebuf_r+0x18>
 8014578:	f023 0303 	bic.w	r3, r3, #3
 801457c:	f043 0302 	orr.w	r3, r3, #2
 8014580:	81a3      	strh	r3, [r4, #12]
 8014582:	e7e3      	b.n	801454c <__smakebuf_r+0xc>
 8014584:	4b0d      	ldr	r3, [pc, #52]	; (80145bc <__smakebuf_r+0x7c>)
 8014586:	62b3      	str	r3, [r6, #40]	; 0x28
 8014588:	89a3      	ldrh	r3, [r4, #12]
 801458a:	6020      	str	r0, [r4, #0]
 801458c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014590:	81a3      	strh	r3, [r4, #12]
 8014592:	9b00      	ldr	r3, [sp, #0]
 8014594:	6163      	str	r3, [r4, #20]
 8014596:	9b01      	ldr	r3, [sp, #4]
 8014598:	6120      	str	r0, [r4, #16]
 801459a:	b15b      	cbz	r3, 80145b4 <__smakebuf_r+0x74>
 801459c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145a0:	4630      	mov	r0, r6
 80145a2:	f000 fc3d 	bl	8014e20 <_isatty_r>
 80145a6:	b128      	cbz	r0, 80145b4 <__smakebuf_r+0x74>
 80145a8:	89a3      	ldrh	r3, [r4, #12]
 80145aa:	f023 0303 	bic.w	r3, r3, #3
 80145ae:	f043 0301 	orr.w	r3, r3, #1
 80145b2:	81a3      	strh	r3, [r4, #12]
 80145b4:	89a0      	ldrh	r0, [r4, #12]
 80145b6:	4305      	orrs	r5, r0
 80145b8:	81a5      	strh	r5, [r4, #12]
 80145ba:	e7cd      	b.n	8014558 <__smakebuf_r+0x18>
 80145bc:	0801432d 	.word	0x0801432d

080145c0 <malloc>:
 80145c0:	4b02      	ldr	r3, [pc, #8]	; (80145cc <malloc+0xc>)
 80145c2:	4601      	mov	r1, r0
 80145c4:	6818      	ldr	r0, [r3, #0]
 80145c6:	f000 b853 	b.w	8014670 <_malloc_r>
 80145ca:	bf00      	nop
 80145cc:	20000018 	.word	0x20000018

080145d0 <_free_r>:
 80145d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80145d2:	2900      	cmp	r1, #0
 80145d4:	d048      	beq.n	8014668 <_free_r+0x98>
 80145d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145da:	9001      	str	r0, [sp, #4]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	f1a1 0404 	sub.w	r4, r1, #4
 80145e2:	bfb8      	it	lt
 80145e4:	18e4      	addlt	r4, r4, r3
 80145e6:	f000 fc3d 	bl	8014e64 <__malloc_lock>
 80145ea:	4a20      	ldr	r2, [pc, #128]	; (801466c <_free_r+0x9c>)
 80145ec:	9801      	ldr	r0, [sp, #4]
 80145ee:	6813      	ldr	r3, [r2, #0]
 80145f0:	4615      	mov	r5, r2
 80145f2:	b933      	cbnz	r3, 8014602 <_free_r+0x32>
 80145f4:	6063      	str	r3, [r4, #4]
 80145f6:	6014      	str	r4, [r2, #0]
 80145f8:	b003      	add	sp, #12
 80145fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80145fe:	f000 bc37 	b.w	8014e70 <__malloc_unlock>
 8014602:	42a3      	cmp	r3, r4
 8014604:	d90b      	bls.n	801461e <_free_r+0x4e>
 8014606:	6821      	ldr	r1, [r4, #0]
 8014608:	1862      	adds	r2, r4, r1
 801460a:	4293      	cmp	r3, r2
 801460c:	bf04      	itt	eq
 801460e:	681a      	ldreq	r2, [r3, #0]
 8014610:	685b      	ldreq	r3, [r3, #4]
 8014612:	6063      	str	r3, [r4, #4]
 8014614:	bf04      	itt	eq
 8014616:	1852      	addeq	r2, r2, r1
 8014618:	6022      	streq	r2, [r4, #0]
 801461a:	602c      	str	r4, [r5, #0]
 801461c:	e7ec      	b.n	80145f8 <_free_r+0x28>
 801461e:	461a      	mov	r2, r3
 8014620:	685b      	ldr	r3, [r3, #4]
 8014622:	b10b      	cbz	r3, 8014628 <_free_r+0x58>
 8014624:	42a3      	cmp	r3, r4
 8014626:	d9fa      	bls.n	801461e <_free_r+0x4e>
 8014628:	6811      	ldr	r1, [r2, #0]
 801462a:	1855      	adds	r5, r2, r1
 801462c:	42a5      	cmp	r5, r4
 801462e:	d10b      	bne.n	8014648 <_free_r+0x78>
 8014630:	6824      	ldr	r4, [r4, #0]
 8014632:	4421      	add	r1, r4
 8014634:	1854      	adds	r4, r2, r1
 8014636:	42a3      	cmp	r3, r4
 8014638:	6011      	str	r1, [r2, #0]
 801463a:	d1dd      	bne.n	80145f8 <_free_r+0x28>
 801463c:	681c      	ldr	r4, [r3, #0]
 801463e:	685b      	ldr	r3, [r3, #4]
 8014640:	6053      	str	r3, [r2, #4]
 8014642:	4421      	add	r1, r4
 8014644:	6011      	str	r1, [r2, #0]
 8014646:	e7d7      	b.n	80145f8 <_free_r+0x28>
 8014648:	d902      	bls.n	8014650 <_free_r+0x80>
 801464a:	230c      	movs	r3, #12
 801464c:	6003      	str	r3, [r0, #0]
 801464e:	e7d3      	b.n	80145f8 <_free_r+0x28>
 8014650:	6825      	ldr	r5, [r4, #0]
 8014652:	1961      	adds	r1, r4, r5
 8014654:	428b      	cmp	r3, r1
 8014656:	bf04      	itt	eq
 8014658:	6819      	ldreq	r1, [r3, #0]
 801465a:	685b      	ldreq	r3, [r3, #4]
 801465c:	6063      	str	r3, [r4, #4]
 801465e:	bf04      	itt	eq
 8014660:	1949      	addeq	r1, r1, r5
 8014662:	6021      	streq	r1, [r4, #0]
 8014664:	6054      	str	r4, [r2, #4]
 8014666:	e7c7      	b.n	80145f8 <_free_r+0x28>
 8014668:	b003      	add	sp, #12
 801466a:	bd30      	pop	{r4, r5, pc}
 801466c:	20000218 	.word	0x20000218

08014670 <_malloc_r>:
 8014670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014672:	1ccd      	adds	r5, r1, #3
 8014674:	f025 0503 	bic.w	r5, r5, #3
 8014678:	3508      	adds	r5, #8
 801467a:	2d0c      	cmp	r5, #12
 801467c:	bf38      	it	cc
 801467e:	250c      	movcc	r5, #12
 8014680:	2d00      	cmp	r5, #0
 8014682:	4606      	mov	r6, r0
 8014684:	db01      	blt.n	801468a <_malloc_r+0x1a>
 8014686:	42a9      	cmp	r1, r5
 8014688:	d903      	bls.n	8014692 <_malloc_r+0x22>
 801468a:	230c      	movs	r3, #12
 801468c:	6033      	str	r3, [r6, #0]
 801468e:	2000      	movs	r0, #0
 8014690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014692:	f000 fbe7 	bl	8014e64 <__malloc_lock>
 8014696:	4921      	ldr	r1, [pc, #132]	; (801471c <_malloc_r+0xac>)
 8014698:	680a      	ldr	r2, [r1, #0]
 801469a:	4614      	mov	r4, r2
 801469c:	b99c      	cbnz	r4, 80146c6 <_malloc_r+0x56>
 801469e:	4f20      	ldr	r7, [pc, #128]	; (8014720 <_malloc_r+0xb0>)
 80146a0:	683b      	ldr	r3, [r7, #0]
 80146a2:	b923      	cbnz	r3, 80146ae <_malloc_r+0x3e>
 80146a4:	4621      	mov	r1, r4
 80146a6:	4630      	mov	r0, r6
 80146a8:	f000 fb2a 	bl	8014d00 <_sbrk_r>
 80146ac:	6038      	str	r0, [r7, #0]
 80146ae:	4629      	mov	r1, r5
 80146b0:	4630      	mov	r0, r6
 80146b2:	f000 fb25 	bl	8014d00 <_sbrk_r>
 80146b6:	1c43      	adds	r3, r0, #1
 80146b8:	d123      	bne.n	8014702 <_malloc_r+0x92>
 80146ba:	230c      	movs	r3, #12
 80146bc:	6033      	str	r3, [r6, #0]
 80146be:	4630      	mov	r0, r6
 80146c0:	f000 fbd6 	bl	8014e70 <__malloc_unlock>
 80146c4:	e7e3      	b.n	801468e <_malloc_r+0x1e>
 80146c6:	6823      	ldr	r3, [r4, #0]
 80146c8:	1b5b      	subs	r3, r3, r5
 80146ca:	d417      	bmi.n	80146fc <_malloc_r+0x8c>
 80146cc:	2b0b      	cmp	r3, #11
 80146ce:	d903      	bls.n	80146d8 <_malloc_r+0x68>
 80146d0:	6023      	str	r3, [r4, #0]
 80146d2:	441c      	add	r4, r3
 80146d4:	6025      	str	r5, [r4, #0]
 80146d6:	e004      	b.n	80146e2 <_malloc_r+0x72>
 80146d8:	6863      	ldr	r3, [r4, #4]
 80146da:	42a2      	cmp	r2, r4
 80146dc:	bf0c      	ite	eq
 80146de:	600b      	streq	r3, [r1, #0]
 80146e0:	6053      	strne	r3, [r2, #4]
 80146e2:	4630      	mov	r0, r6
 80146e4:	f000 fbc4 	bl	8014e70 <__malloc_unlock>
 80146e8:	f104 000b 	add.w	r0, r4, #11
 80146ec:	1d23      	adds	r3, r4, #4
 80146ee:	f020 0007 	bic.w	r0, r0, #7
 80146f2:	1ac2      	subs	r2, r0, r3
 80146f4:	d0cc      	beq.n	8014690 <_malloc_r+0x20>
 80146f6:	1a1b      	subs	r3, r3, r0
 80146f8:	50a3      	str	r3, [r4, r2]
 80146fa:	e7c9      	b.n	8014690 <_malloc_r+0x20>
 80146fc:	4622      	mov	r2, r4
 80146fe:	6864      	ldr	r4, [r4, #4]
 8014700:	e7cc      	b.n	801469c <_malloc_r+0x2c>
 8014702:	1cc4      	adds	r4, r0, #3
 8014704:	f024 0403 	bic.w	r4, r4, #3
 8014708:	42a0      	cmp	r0, r4
 801470a:	d0e3      	beq.n	80146d4 <_malloc_r+0x64>
 801470c:	1a21      	subs	r1, r4, r0
 801470e:	4630      	mov	r0, r6
 8014710:	f000 faf6 	bl	8014d00 <_sbrk_r>
 8014714:	3001      	adds	r0, #1
 8014716:	d1dd      	bne.n	80146d4 <_malloc_r+0x64>
 8014718:	e7cf      	b.n	80146ba <_malloc_r+0x4a>
 801471a:	bf00      	nop
 801471c:	20000218 	.word	0x20000218
 8014720:	2000021c 	.word	0x2000021c

08014724 <__sfputc_r>:
 8014724:	6893      	ldr	r3, [r2, #8]
 8014726:	3b01      	subs	r3, #1
 8014728:	2b00      	cmp	r3, #0
 801472a:	b410      	push	{r4}
 801472c:	6093      	str	r3, [r2, #8]
 801472e:	da08      	bge.n	8014742 <__sfputc_r+0x1e>
 8014730:	6994      	ldr	r4, [r2, #24]
 8014732:	42a3      	cmp	r3, r4
 8014734:	db01      	blt.n	801473a <__sfputc_r+0x16>
 8014736:	290a      	cmp	r1, #10
 8014738:	d103      	bne.n	8014742 <__sfputc_r+0x1e>
 801473a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801473e:	f7ff bc31 	b.w	8013fa4 <__swbuf_r>
 8014742:	6813      	ldr	r3, [r2, #0]
 8014744:	1c58      	adds	r0, r3, #1
 8014746:	6010      	str	r0, [r2, #0]
 8014748:	7019      	strb	r1, [r3, #0]
 801474a:	4608      	mov	r0, r1
 801474c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014750:	4770      	bx	lr

08014752 <__sfputs_r>:
 8014752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014754:	4606      	mov	r6, r0
 8014756:	460f      	mov	r7, r1
 8014758:	4614      	mov	r4, r2
 801475a:	18d5      	adds	r5, r2, r3
 801475c:	42ac      	cmp	r4, r5
 801475e:	d101      	bne.n	8014764 <__sfputs_r+0x12>
 8014760:	2000      	movs	r0, #0
 8014762:	e007      	b.n	8014774 <__sfputs_r+0x22>
 8014764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014768:	463a      	mov	r2, r7
 801476a:	4630      	mov	r0, r6
 801476c:	f7ff ffda 	bl	8014724 <__sfputc_r>
 8014770:	1c43      	adds	r3, r0, #1
 8014772:	d1f3      	bne.n	801475c <__sfputs_r+0xa>
 8014774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014778 <_vfiprintf_r>:
 8014778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801477c:	460d      	mov	r5, r1
 801477e:	b09d      	sub	sp, #116	; 0x74
 8014780:	4614      	mov	r4, r2
 8014782:	4698      	mov	r8, r3
 8014784:	4606      	mov	r6, r0
 8014786:	b118      	cbz	r0, 8014790 <_vfiprintf_r+0x18>
 8014788:	6983      	ldr	r3, [r0, #24]
 801478a:	b90b      	cbnz	r3, 8014790 <_vfiprintf_r+0x18>
 801478c:	f7ff fe02 	bl	8014394 <__sinit>
 8014790:	4b89      	ldr	r3, [pc, #548]	; (80149b8 <_vfiprintf_r+0x240>)
 8014792:	429d      	cmp	r5, r3
 8014794:	d11b      	bne.n	80147ce <_vfiprintf_r+0x56>
 8014796:	6875      	ldr	r5, [r6, #4]
 8014798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801479a:	07d9      	lsls	r1, r3, #31
 801479c:	d405      	bmi.n	80147aa <_vfiprintf_r+0x32>
 801479e:	89ab      	ldrh	r3, [r5, #12]
 80147a0:	059a      	lsls	r2, r3, #22
 80147a2:	d402      	bmi.n	80147aa <_vfiprintf_r+0x32>
 80147a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147a6:	f7ff fea5 	bl	80144f4 <__retarget_lock_acquire_recursive>
 80147aa:	89ab      	ldrh	r3, [r5, #12]
 80147ac:	071b      	lsls	r3, r3, #28
 80147ae:	d501      	bpl.n	80147b4 <_vfiprintf_r+0x3c>
 80147b0:	692b      	ldr	r3, [r5, #16]
 80147b2:	b9eb      	cbnz	r3, 80147f0 <_vfiprintf_r+0x78>
 80147b4:	4629      	mov	r1, r5
 80147b6:	4630      	mov	r0, r6
 80147b8:	f7ff fc46 	bl	8014048 <__swsetup_r>
 80147bc:	b1c0      	cbz	r0, 80147f0 <_vfiprintf_r+0x78>
 80147be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147c0:	07dc      	lsls	r4, r3, #31
 80147c2:	d50e      	bpl.n	80147e2 <_vfiprintf_r+0x6a>
 80147c4:	f04f 30ff 	mov.w	r0, #4294967295
 80147c8:	b01d      	add	sp, #116	; 0x74
 80147ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ce:	4b7b      	ldr	r3, [pc, #492]	; (80149bc <_vfiprintf_r+0x244>)
 80147d0:	429d      	cmp	r5, r3
 80147d2:	d101      	bne.n	80147d8 <_vfiprintf_r+0x60>
 80147d4:	68b5      	ldr	r5, [r6, #8]
 80147d6:	e7df      	b.n	8014798 <_vfiprintf_r+0x20>
 80147d8:	4b79      	ldr	r3, [pc, #484]	; (80149c0 <_vfiprintf_r+0x248>)
 80147da:	429d      	cmp	r5, r3
 80147dc:	bf08      	it	eq
 80147de:	68f5      	ldreq	r5, [r6, #12]
 80147e0:	e7da      	b.n	8014798 <_vfiprintf_r+0x20>
 80147e2:	89ab      	ldrh	r3, [r5, #12]
 80147e4:	0598      	lsls	r0, r3, #22
 80147e6:	d4ed      	bmi.n	80147c4 <_vfiprintf_r+0x4c>
 80147e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147ea:	f7ff fe84 	bl	80144f6 <__retarget_lock_release_recursive>
 80147ee:	e7e9      	b.n	80147c4 <_vfiprintf_r+0x4c>
 80147f0:	2300      	movs	r3, #0
 80147f2:	9309      	str	r3, [sp, #36]	; 0x24
 80147f4:	2320      	movs	r3, #32
 80147f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80147fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80147fe:	2330      	movs	r3, #48	; 0x30
 8014800:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80149c4 <_vfiprintf_r+0x24c>
 8014804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014808:	f04f 0901 	mov.w	r9, #1
 801480c:	4623      	mov	r3, r4
 801480e:	469a      	mov	sl, r3
 8014810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014814:	b10a      	cbz	r2, 801481a <_vfiprintf_r+0xa2>
 8014816:	2a25      	cmp	r2, #37	; 0x25
 8014818:	d1f9      	bne.n	801480e <_vfiprintf_r+0x96>
 801481a:	ebba 0b04 	subs.w	fp, sl, r4
 801481e:	d00b      	beq.n	8014838 <_vfiprintf_r+0xc0>
 8014820:	465b      	mov	r3, fp
 8014822:	4622      	mov	r2, r4
 8014824:	4629      	mov	r1, r5
 8014826:	4630      	mov	r0, r6
 8014828:	f7ff ff93 	bl	8014752 <__sfputs_r>
 801482c:	3001      	adds	r0, #1
 801482e:	f000 80aa 	beq.w	8014986 <_vfiprintf_r+0x20e>
 8014832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014834:	445a      	add	r2, fp
 8014836:	9209      	str	r2, [sp, #36]	; 0x24
 8014838:	f89a 3000 	ldrb.w	r3, [sl]
 801483c:	2b00      	cmp	r3, #0
 801483e:	f000 80a2 	beq.w	8014986 <_vfiprintf_r+0x20e>
 8014842:	2300      	movs	r3, #0
 8014844:	f04f 32ff 	mov.w	r2, #4294967295
 8014848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801484c:	f10a 0a01 	add.w	sl, sl, #1
 8014850:	9304      	str	r3, [sp, #16]
 8014852:	9307      	str	r3, [sp, #28]
 8014854:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014858:	931a      	str	r3, [sp, #104]	; 0x68
 801485a:	4654      	mov	r4, sl
 801485c:	2205      	movs	r2, #5
 801485e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014862:	4858      	ldr	r0, [pc, #352]	; (80149c4 <_vfiprintf_r+0x24c>)
 8014864:	f7eb fcbc 	bl	80001e0 <memchr>
 8014868:	9a04      	ldr	r2, [sp, #16]
 801486a:	b9d8      	cbnz	r0, 80148a4 <_vfiprintf_r+0x12c>
 801486c:	06d1      	lsls	r1, r2, #27
 801486e:	bf44      	itt	mi
 8014870:	2320      	movmi	r3, #32
 8014872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014876:	0713      	lsls	r3, r2, #28
 8014878:	bf44      	itt	mi
 801487a:	232b      	movmi	r3, #43	; 0x2b
 801487c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014880:	f89a 3000 	ldrb.w	r3, [sl]
 8014884:	2b2a      	cmp	r3, #42	; 0x2a
 8014886:	d015      	beq.n	80148b4 <_vfiprintf_r+0x13c>
 8014888:	9a07      	ldr	r2, [sp, #28]
 801488a:	4654      	mov	r4, sl
 801488c:	2000      	movs	r0, #0
 801488e:	f04f 0c0a 	mov.w	ip, #10
 8014892:	4621      	mov	r1, r4
 8014894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014898:	3b30      	subs	r3, #48	; 0x30
 801489a:	2b09      	cmp	r3, #9
 801489c:	d94e      	bls.n	801493c <_vfiprintf_r+0x1c4>
 801489e:	b1b0      	cbz	r0, 80148ce <_vfiprintf_r+0x156>
 80148a0:	9207      	str	r2, [sp, #28]
 80148a2:	e014      	b.n	80148ce <_vfiprintf_r+0x156>
 80148a4:	eba0 0308 	sub.w	r3, r0, r8
 80148a8:	fa09 f303 	lsl.w	r3, r9, r3
 80148ac:	4313      	orrs	r3, r2
 80148ae:	9304      	str	r3, [sp, #16]
 80148b0:	46a2      	mov	sl, r4
 80148b2:	e7d2      	b.n	801485a <_vfiprintf_r+0xe2>
 80148b4:	9b03      	ldr	r3, [sp, #12]
 80148b6:	1d19      	adds	r1, r3, #4
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	9103      	str	r1, [sp, #12]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	bfbb      	ittet	lt
 80148c0:	425b      	neglt	r3, r3
 80148c2:	f042 0202 	orrlt.w	r2, r2, #2
 80148c6:	9307      	strge	r3, [sp, #28]
 80148c8:	9307      	strlt	r3, [sp, #28]
 80148ca:	bfb8      	it	lt
 80148cc:	9204      	strlt	r2, [sp, #16]
 80148ce:	7823      	ldrb	r3, [r4, #0]
 80148d0:	2b2e      	cmp	r3, #46	; 0x2e
 80148d2:	d10c      	bne.n	80148ee <_vfiprintf_r+0x176>
 80148d4:	7863      	ldrb	r3, [r4, #1]
 80148d6:	2b2a      	cmp	r3, #42	; 0x2a
 80148d8:	d135      	bne.n	8014946 <_vfiprintf_r+0x1ce>
 80148da:	9b03      	ldr	r3, [sp, #12]
 80148dc:	1d1a      	adds	r2, r3, #4
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	9203      	str	r2, [sp, #12]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	bfb8      	it	lt
 80148e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80148ea:	3402      	adds	r4, #2
 80148ec:	9305      	str	r3, [sp, #20]
 80148ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80149d4 <_vfiprintf_r+0x25c>
 80148f2:	7821      	ldrb	r1, [r4, #0]
 80148f4:	2203      	movs	r2, #3
 80148f6:	4650      	mov	r0, sl
 80148f8:	f7eb fc72 	bl	80001e0 <memchr>
 80148fc:	b140      	cbz	r0, 8014910 <_vfiprintf_r+0x198>
 80148fe:	2340      	movs	r3, #64	; 0x40
 8014900:	eba0 000a 	sub.w	r0, r0, sl
 8014904:	fa03 f000 	lsl.w	r0, r3, r0
 8014908:	9b04      	ldr	r3, [sp, #16]
 801490a:	4303      	orrs	r3, r0
 801490c:	3401      	adds	r4, #1
 801490e:	9304      	str	r3, [sp, #16]
 8014910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014914:	482c      	ldr	r0, [pc, #176]	; (80149c8 <_vfiprintf_r+0x250>)
 8014916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801491a:	2206      	movs	r2, #6
 801491c:	f7eb fc60 	bl	80001e0 <memchr>
 8014920:	2800      	cmp	r0, #0
 8014922:	d03f      	beq.n	80149a4 <_vfiprintf_r+0x22c>
 8014924:	4b29      	ldr	r3, [pc, #164]	; (80149cc <_vfiprintf_r+0x254>)
 8014926:	bb1b      	cbnz	r3, 8014970 <_vfiprintf_r+0x1f8>
 8014928:	9b03      	ldr	r3, [sp, #12]
 801492a:	3307      	adds	r3, #7
 801492c:	f023 0307 	bic.w	r3, r3, #7
 8014930:	3308      	adds	r3, #8
 8014932:	9303      	str	r3, [sp, #12]
 8014934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014936:	443b      	add	r3, r7
 8014938:	9309      	str	r3, [sp, #36]	; 0x24
 801493a:	e767      	b.n	801480c <_vfiprintf_r+0x94>
 801493c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014940:	460c      	mov	r4, r1
 8014942:	2001      	movs	r0, #1
 8014944:	e7a5      	b.n	8014892 <_vfiprintf_r+0x11a>
 8014946:	2300      	movs	r3, #0
 8014948:	3401      	adds	r4, #1
 801494a:	9305      	str	r3, [sp, #20]
 801494c:	4619      	mov	r1, r3
 801494e:	f04f 0c0a 	mov.w	ip, #10
 8014952:	4620      	mov	r0, r4
 8014954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014958:	3a30      	subs	r2, #48	; 0x30
 801495a:	2a09      	cmp	r2, #9
 801495c:	d903      	bls.n	8014966 <_vfiprintf_r+0x1ee>
 801495e:	2b00      	cmp	r3, #0
 8014960:	d0c5      	beq.n	80148ee <_vfiprintf_r+0x176>
 8014962:	9105      	str	r1, [sp, #20]
 8014964:	e7c3      	b.n	80148ee <_vfiprintf_r+0x176>
 8014966:	fb0c 2101 	mla	r1, ip, r1, r2
 801496a:	4604      	mov	r4, r0
 801496c:	2301      	movs	r3, #1
 801496e:	e7f0      	b.n	8014952 <_vfiprintf_r+0x1da>
 8014970:	ab03      	add	r3, sp, #12
 8014972:	9300      	str	r3, [sp, #0]
 8014974:	462a      	mov	r2, r5
 8014976:	4b16      	ldr	r3, [pc, #88]	; (80149d0 <_vfiprintf_r+0x258>)
 8014978:	a904      	add	r1, sp, #16
 801497a:	4630      	mov	r0, r6
 801497c:	f3af 8000 	nop.w
 8014980:	4607      	mov	r7, r0
 8014982:	1c78      	adds	r0, r7, #1
 8014984:	d1d6      	bne.n	8014934 <_vfiprintf_r+0x1bc>
 8014986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014988:	07d9      	lsls	r1, r3, #31
 801498a:	d405      	bmi.n	8014998 <_vfiprintf_r+0x220>
 801498c:	89ab      	ldrh	r3, [r5, #12]
 801498e:	059a      	lsls	r2, r3, #22
 8014990:	d402      	bmi.n	8014998 <_vfiprintf_r+0x220>
 8014992:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014994:	f7ff fdaf 	bl	80144f6 <__retarget_lock_release_recursive>
 8014998:	89ab      	ldrh	r3, [r5, #12]
 801499a:	065b      	lsls	r3, r3, #25
 801499c:	f53f af12 	bmi.w	80147c4 <_vfiprintf_r+0x4c>
 80149a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149a2:	e711      	b.n	80147c8 <_vfiprintf_r+0x50>
 80149a4:	ab03      	add	r3, sp, #12
 80149a6:	9300      	str	r3, [sp, #0]
 80149a8:	462a      	mov	r2, r5
 80149aa:	4b09      	ldr	r3, [pc, #36]	; (80149d0 <_vfiprintf_r+0x258>)
 80149ac:	a904      	add	r1, sp, #16
 80149ae:	4630      	mov	r0, r6
 80149b0:	f000 f880 	bl	8014ab4 <_printf_i>
 80149b4:	e7e4      	b.n	8014980 <_vfiprintf_r+0x208>
 80149b6:	bf00      	nop
 80149b8:	08018730 	.word	0x08018730
 80149bc:	08018750 	.word	0x08018750
 80149c0:	08018710 	.word	0x08018710
 80149c4:	08018770 	.word	0x08018770
 80149c8:	0801877a 	.word	0x0801877a
 80149cc:	00000000 	.word	0x00000000
 80149d0:	08014753 	.word	0x08014753
 80149d4:	08018776 	.word	0x08018776

080149d8 <_printf_common>:
 80149d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149dc:	4616      	mov	r6, r2
 80149de:	4699      	mov	r9, r3
 80149e0:	688a      	ldr	r2, [r1, #8]
 80149e2:	690b      	ldr	r3, [r1, #16]
 80149e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80149e8:	4293      	cmp	r3, r2
 80149ea:	bfb8      	it	lt
 80149ec:	4613      	movlt	r3, r2
 80149ee:	6033      	str	r3, [r6, #0]
 80149f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80149f4:	4607      	mov	r7, r0
 80149f6:	460c      	mov	r4, r1
 80149f8:	b10a      	cbz	r2, 80149fe <_printf_common+0x26>
 80149fa:	3301      	adds	r3, #1
 80149fc:	6033      	str	r3, [r6, #0]
 80149fe:	6823      	ldr	r3, [r4, #0]
 8014a00:	0699      	lsls	r1, r3, #26
 8014a02:	bf42      	ittt	mi
 8014a04:	6833      	ldrmi	r3, [r6, #0]
 8014a06:	3302      	addmi	r3, #2
 8014a08:	6033      	strmi	r3, [r6, #0]
 8014a0a:	6825      	ldr	r5, [r4, #0]
 8014a0c:	f015 0506 	ands.w	r5, r5, #6
 8014a10:	d106      	bne.n	8014a20 <_printf_common+0x48>
 8014a12:	f104 0a19 	add.w	sl, r4, #25
 8014a16:	68e3      	ldr	r3, [r4, #12]
 8014a18:	6832      	ldr	r2, [r6, #0]
 8014a1a:	1a9b      	subs	r3, r3, r2
 8014a1c:	42ab      	cmp	r3, r5
 8014a1e:	dc26      	bgt.n	8014a6e <_printf_common+0x96>
 8014a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014a24:	1e13      	subs	r3, r2, #0
 8014a26:	6822      	ldr	r2, [r4, #0]
 8014a28:	bf18      	it	ne
 8014a2a:	2301      	movne	r3, #1
 8014a2c:	0692      	lsls	r2, r2, #26
 8014a2e:	d42b      	bmi.n	8014a88 <_printf_common+0xb0>
 8014a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014a34:	4649      	mov	r1, r9
 8014a36:	4638      	mov	r0, r7
 8014a38:	47c0      	blx	r8
 8014a3a:	3001      	adds	r0, #1
 8014a3c:	d01e      	beq.n	8014a7c <_printf_common+0xa4>
 8014a3e:	6823      	ldr	r3, [r4, #0]
 8014a40:	68e5      	ldr	r5, [r4, #12]
 8014a42:	6832      	ldr	r2, [r6, #0]
 8014a44:	f003 0306 	and.w	r3, r3, #6
 8014a48:	2b04      	cmp	r3, #4
 8014a4a:	bf08      	it	eq
 8014a4c:	1aad      	subeq	r5, r5, r2
 8014a4e:	68a3      	ldr	r3, [r4, #8]
 8014a50:	6922      	ldr	r2, [r4, #16]
 8014a52:	bf0c      	ite	eq
 8014a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014a58:	2500      	movne	r5, #0
 8014a5a:	4293      	cmp	r3, r2
 8014a5c:	bfc4      	itt	gt
 8014a5e:	1a9b      	subgt	r3, r3, r2
 8014a60:	18ed      	addgt	r5, r5, r3
 8014a62:	2600      	movs	r6, #0
 8014a64:	341a      	adds	r4, #26
 8014a66:	42b5      	cmp	r5, r6
 8014a68:	d11a      	bne.n	8014aa0 <_printf_common+0xc8>
 8014a6a:	2000      	movs	r0, #0
 8014a6c:	e008      	b.n	8014a80 <_printf_common+0xa8>
 8014a6e:	2301      	movs	r3, #1
 8014a70:	4652      	mov	r2, sl
 8014a72:	4649      	mov	r1, r9
 8014a74:	4638      	mov	r0, r7
 8014a76:	47c0      	blx	r8
 8014a78:	3001      	adds	r0, #1
 8014a7a:	d103      	bne.n	8014a84 <_printf_common+0xac>
 8014a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a84:	3501      	adds	r5, #1
 8014a86:	e7c6      	b.n	8014a16 <_printf_common+0x3e>
 8014a88:	18e1      	adds	r1, r4, r3
 8014a8a:	1c5a      	adds	r2, r3, #1
 8014a8c:	2030      	movs	r0, #48	; 0x30
 8014a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014a92:	4422      	add	r2, r4
 8014a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014a9c:	3302      	adds	r3, #2
 8014a9e:	e7c7      	b.n	8014a30 <_printf_common+0x58>
 8014aa0:	2301      	movs	r3, #1
 8014aa2:	4622      	mov	r2, r4
 8014aa4:	4649      	mov	r1, r9
 8014aa6:	4638      	mov	r0, r7
 8014aa8:	47c0      	blx	r8
 8014aaa:	3001      	adds	r0, #1
 8014aac:	d0e6      	beq.n	8014a7c <_printf_common+0xa4>
 8014aae:	3601      	adds	r6, #1
 8014ab0:	e7d9      	b.n	8014a66 <_printf_common+0x8e>
	...

08014ab4 <_printf_i>:
 8014ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014ab8:	460c      	mov	r4, r1
 8014aba:	4691      	mov	r9, r2
 8014abc:	7e27      	ldrb	r7, [r4, #24]
 8014abe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014ac0:	2f78      	cmp	r7, #120	; 0x78
 8014ac2:	4680      	mov	r8, r0
 8014ac4:	469a      	mov	sl, r3
 8014ac6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014aca:	d807      	bhi.n	8014adc <_printf_i+0x28>
 8014acc:	2f62      	cmp	r7, #98	; 0x62
 8014ace:	d80a      	bhi.n	8014ae6 <_printf_i+0x32>
 8014ad0:	2f00      	cmp	r7, #0
 8014ad2:	f000 80d8 	beq.w	8014c86 <_printf_i+0x1d2>
 8014ad6:	2f58      	cmp	r7, #88	; 0x58
 8014ad8:	f000 80a3 	beq.w	8014c22 <_printf_i+0x16e>
 8014adc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014ae4:	e03a      	b.n	8014b5c <_printf_i+0xa8>
 8014ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014aea:	2b15      	cmp	r3, #21
 8014aec:	d8f6      	bhi.n	8014adc <_printf_i+0x28>
 8014aee:	a001      	add	r0, pc, #4	; (adr r0, 8014af4 <_printf_i+0x40>)
 8014af0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014af4:	08014b4d 	.word	0x08014b4d
 8014af8:	08014b61 	.word	0x08014b61
 8014afc:	08014add 	.word	0x08014add
 8014b00:	08014add 	.word	0x08014add
 8014b04:	08014add 	.word	0x08014add
 8014b08:	08014add 	.word	0x08014add
 8014b0c:	08014b61 	.word	0x08014b61
 8014b10:	08014add 	.word	0x08014add
 8014b14:	08014add 	.word	0x08014add
 8014b18:	08014add 	.word	0x08014add
 8014b1c:	08014add 	.word	0x08014add
 8014b20:	08014c6d 	.word	0x08014c6d
 8014b24:	08014b91 	.word	0x08014b91
 8014b28:	08014c4f 	.word	0x08014c4f
 8014b2c:	08014add 	.word	0x08014add
 8014b30:	08014add 	.word	0x08014add
 8014b34:	08014c8f 	.word	0x08014c8f
 8014b38:	08014add 	.word	0x08014add
 8014b3c:	08014b91 	.word	0x08014b91
 8014b40:	08014add 	.word	0x08014add
 8014b44:	08014add 	.word	0x08014add
 8014b48:	08014c57 	.word	0x08014c57
 8014b4c:	680b      	ldr	r3, [r1, #0]
 8014b4e:	1d1a      	adds	r2, r3, #4
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	600a      	str	r2, [r1, #0]
 8014b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	e0a3      	b.n	8014ca8 <_printf_i+0x1f4>
 8014b60:	6825      	ldr	r5, [r4, #0]
 8014b62:	6808      	ldr	r0, [r1, #0]
 8014b64:	062e      	lsls	r6, r5, #24
 8014b66:	f100 0304 	add.w	r3, r0, #4
 8014b6a:	d50a      	bpl.n	8014b82 <_printf_i+0xce>
 8014b6c:	6805      	ldr	r5, [r0, #0]
 8014b6e:	600b      	str	r3, [r1, #0]
 8014b70:	2d00      	cmp	r5, #0
 8014b72:	da03      	bge.n	8014b7c <_printf_i+0xc8>
 8014b74:	232d      	movs	r3, #45	; 0x2d
 8014b76:	426d      	negs	r5, r5
 8014b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b7c:	485e      	ldr	r0, [pc, #376]	; (8014cf8 <_printf_i+0x244>)
 8014b7e:	230a      	movs	r3, #10
 8014b80:	e019      	b.n	8014bb6 <_printf_i+0x102>
 8014b82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014b86:	6805      	ldr	r5, [r0, #0]
 8014b88:	600b      	str	r3, [r1, #0]
 8014b8a:	bf18      	it	ne
 8014b8c:	b22d      	sxthne	r5, r5
 8014b8e:	e7ef      	b.n	8014b70 <_printf_i+0xbc>
 8014b90:	680b      	ldr	r3, [r1, #0]
 8014b92:	6825      	ldr	r5, [r4, #0]
 8014b94:	1d18      	adds	r0, r3, #4
 8014b96:	6008      	str	r0, [r1, #0]
 8014b98:	0628      	lsls	r0, r5, #24
 8014b9a:	d501      	bpl.n	8014ba0 <_printf_i+0xec>
 8014b9c:	681d      	ldr	r5, [r3, #0]
 8014b9e:	e002      	b.n	8014ba6 <_printf_i+0xf2>
 8014ba0:	0669      	lsls	r1, r5, #25
 8014ba2:	d5fb      	bpl.n	8014b9c <_printf_i+0xe8>
 8014ba4:	881d      	ldrh	r5, [r3, #0]
 8014ba6:	4854      	ldr	r0, [pc, #336]	; (8014cf8 <_printf_i+0x244>)
 8014ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8014baa:	bf0c      	ite	eq
 8014bac:	2308      	moveq	r3, #8
 8014bae:	230a      	movne	r3, #10
 8014bb0:	2100      	movs	r1, #0
 8014bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014bb6:	6866      	ldr	r6, [r4, #4]
 8014bb8:	60a6      	str	r6, [r4, #8]
 8014bba:	2e00      	cmp	r6, #0
 8014bbc:	bfa2      	ittt	ge
 8014bbe:	6821      	ldrge	r1, [r4, #0]
 8014bc0:	f021 0104 	bicge.w	r1, r1, #4
 8014bc4:	6021      	strge	r1, [r4, #0]
 8014bc6:	b90d      	cbnz	r5, 8014bcc <_printf_i+0x118>
 8014bc8:	2e00      	cmp	r6, #0
 8014bca:	d04d      	beq.n	8014c68 <_printf_i+0x1b4>
 8014bcc:	4616      	mov	r6, r2
 8014bce:	fbb5 f1f3 	udiv	r1, r5, r3
 8014bd2:	fb03 5711 	mls	r7, r3, r1, r5
 8014bd6:	5dc7      	ldrb	r7, [r0, r7]
 8014bd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014bdc:	462f      	mov	r7, r5
 8014bde:	42bb      	cmp	r3, r7
 8014be0:	460d      	mov	r5, r1
 8014be2:	d9f4      	bls.n	8014bce <_printf_i+0x11a>
 8014be4:	2b08      	cmp	r3, #8
 8014be6:	d10b      	bne.n	8014c00 <_printf_i+0x14c>
 8014be8:	6823      	ldr	r3, [r4, #0]
 8014bea:	07df      	lsls	r7, r3, #31
 8014bec:	d508      	bpl.n	8014c00 <_printf_i+0x14c>
 8014bee:	6923      	ldr	r3, [r4, #16]
 8014bf0:	6861      	ldr	r1, [r4, #4]
 8014bf2:	4299      	cmp	r1, r3
 8014bf4:	bfde      	ittt	le
 8014bf6:	2330      	movle	r3, #48	; 0x30
 8014bf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014bfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014c00:	1b92      	subs	r2, r2, r6
 8014c02:	6122      	str	r2, [r4, #16]
 8014c04:	f8cd a000 	str.w	sl, [sp]
 8014c08:	464b      	mov	r3, r9
 8014c0a:	aa03      	add	r2, sp, #12
 8014c0c:	4621      	mov	r1, r4
 8014c0e:	4640      	mov	r0, r8
 8014c10:	f7ff fee2 	bl	80149d8 <_printf_common>
 8014c14:	3001      	adds	r0, #1
 8014c16:	d14c      	bne.n	8014cb2 <_printf_i+0x1fe>
 8014c18:	f04f 30ff 	mov.w	r0, #4294967295
 8014c1c:	b004      	add	sp, #16
 8014c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c22:	4835      	ldr	r0, [pc, #212]	; (8014cf8 <_printf_i+0x244>)
 8014c24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014c28:	6823      	ldr	r3, [r4, #0]
 8014c2a:	680e      	ldr	r6, [r1, #0]
 8014c2c:	061f      	lsls	r7, r3, #24
 8014c2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8014c32:	600e      	str	r6, [r1, #0]
 8014c34:	d514      	bpl.n	8014c60 <_printf_i+0x1ac>
 8014c36:	07d9      	lsls	r1, r3, #31
 8014c38:	bf44      	itt	mi
 8014c3a:	f043 0320 	orrmi.w	r3, r3, #32
 8014c3e:	6023      	strmi	r3, [r4, #0]
 8014c40:	b91d      	cbnz	r5, 8014c4a <_printf_i+0x196>
 8014c42:	6823      	ldr	r3, [r4, #0]
 8014c44:	f023 0320 	bic.w	r3, r3, #32
 8014c48:	6023      	str	r3, [r4, #0]
 8014c4a:	2310      	movs	r3, #16
 8014c4c:	e7b0      	b.n	8014bb0 <_printf_i+0xfc>
 8014c4e:	6823      	ldr	r3, [r4, #0]
 8014c50:	f043 0320 	orr.w	r3, r3, #32
 8014c54:	6023      	str	r3, [r4, #0]
 8014c56:	2378      	movs	r3, #120	; 0x78
 8014c58:	4828      	ldr	r0, [pc, #160]	; (8014cfc <_printf_i+0x248>)
 8014c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014c5e:	e7e3      	b.n	8014c28 <_printf_i+0x174>
 8014c60:	065e      	lsls	r6, r3, #25
 8014c62:	bf48      	it	mi
 8014c64:	b2ad      	uxthmi	r5, r5
 8014c66:	e7e6      	b.n	8014c36 <_printf_i+0x182>
 8014c68:	4616      	mov	r6, r2
 8014c6a:	e7bb      	b.n	8014be4 <_printf_i+0x130>
 8014c6c:	680b      	ldr	r3, [r1, #0]
 8014c6e:	6826      	ldr	r6, [r4, #0]
 8014c70:	6960      	ldr	r0, [r4, #20]
 8014c72:	1d1d      	adds	r5, r3, #4
 8014c74:	600d      	str	r5, [r1, #0]
 8014c76:	0635      	lsls	r5, r6, #24
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	d501      	bpl.n	8014c80 <_printf_i+0x1cc>
 8014c7c:	6018      	str	r0, [r3, #0]
 8014c7e:	e002      	b.n	8014c86 <_printf_i+0x1d2>
 8014c80:	0671      	lsls	r1, r6, #25
 8014c82:	d5fb      	bpl.n	8014c7c <_printf_i+0x1c8>
 8014c84:	8018      	strh	r0, [r3, #0]
 8014c86:	2300      	movs	r3, #0
 8014c88:	6123      	str	r3, [r4, #16]
 8014c8a:	4616      	mov	r6, r2
 8014c8c:	e7ba      	b.n	8014c04 <_printf_i+0x150>
 8014c8e:	680b      	ldr	r3, [r1, #0]
 8014c90:	1d1a      	adds	r2, r3, #4
 8014c92:	600a      	str	r2, [r1, #0]
 8014c94:	681e      	ldr	r6, [r3, #0]
 8014c96:	6862      	ldr	r2, [r4, #4]
 8014c98:	2100      	movs	r1, #0
 8014c9a:	4630      	mov	r0, r6
 8014c9c:	f7eb faa0 	bl	80001e0 <memchr>
 8014ca0:	b108      	cbz	r0, 8014ca6 <_printf_i+0x1f2>
 8014ca2:	1b80      	subs	r0, r0, r6
 8014ca4:	6060      	str	r0, [r4, #4]
 8014ca6:	6863      	ldr	r3, [r4, #4]
 8014ca8:	6123      	str	r3, [r4, #16]
 8014caa:	2300      	movs	r3, #0
 8014cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014cb0:	e7a8      	b.n	8014c04 <_printf_i+0x150>
 8014cb2:	6923      	ldr	r3, [r4, #16]
 8014cb4:	4632      	mov	r2, r6
 8014cb6:	4649      	mov	r1, r9
 8014cb8:	4640      	mov	r0, r8
 8014cba:	47d0      	blx	sl
 8014cbc:	3001      	adds	r0, #1
 8014cbe:	d0ab      	beq.n	8014c18 <_printf_i+0x164>
 8014cc0:	6823      	ldr	r3, [r4, #0]
 8014cc2:	079b      	lsls	r3, r3, #30
 8014cc4:	d413      	bmi.n	8014cee <_printf_i+0x23a>
 8014cc6:	68e0      	ldr	r0, [r4, #12]
 8014cc8:	9b03      	ldr	r3, [sp, #12]
 8014cca:	4298      	cmp	r0, r3
 8014ccc:	bfb8      	it	lt
 8014cce:	4618      	movlt	r0, r3
 8014cd0:	e7a4      	b.n	8014c1c <_printf_i+0x168>
 8014cd2:	2301      	movs	r3, #1
 8014cd4:	4632      	mov	r2, r6
 8014cd6:	4649      	mov	r1, r9
 8014cd8:	4640      	mov	r0, r8
 8014cda:	47d0      	blx	sl
 8014cdc:	3001      	adds	r0, #1
 8014cde:	d09b      	beq.n	8014c18 <_printf_i+0x164>
 8014ce0:	3501      	adds	r5, #1
 8014ce2:	68e3      	ldr	r3, [r4, #12]
 8014ce4:	9903      	ldr	r1, [sp, #12]
 8014ce6:	1a5b      	subs	r3, r3, r1
 8014ce8:	42ab      	cmp	r3, r5
 8014cea:	dcf2      	bgt.n	8014cd2 <_printf_i+0x21e>
 8014cec:	e7eb      	b.n	8014cc6 <_printf_i+0x212>
 8014cee:	2500      	movs	r5, #0
 8014cf0:	f104 0619 	add.w	r6, r4, #25
 8014cf4:	e7f5      	b.n	8014ce2 <_printf_i+0x22e>
 8014cf6:	bf00      	nop
 8014cf8:	08018781 	.word	0x08018781
 8014cfc:	08018792 	.word	0x08018792

08014d00 <_sbrk_r>:
 8014d00:	b538      	push	{r3, r4, r5, lr}
 8014d02:	4d06      	ldr	r5, [pc, #24]	; (8014d1c <_sbrk_r+0x1c>)
 8014d04:	2300      	movs	r3, #0
 8014d06:	4604      	mov	r4, r0
 8014d08:	4608      	mov	r0, r1
 8014d0a:	602b      	str	r3, [r5, #0]
 8014d0c:	f7ec f804 	bl	8000d18 <_sbrk>
 8014d10:	1c43      	adds	r3, r0, #1
 8014d12:	d102      	bne.n	8014d1a <_sbrk_r+0x1a>
 8014d14:	682b      	ldr	r3, [r5, #0]
 8014d16:	b103      	cbz	r3, 8014d1a <_sbrk_r+0x1a>
 8014d18:	6023      	str	r3, [r4, #0]
 8014d1a:	bd38      	pop	{r3, r4, r5, pc}
 8014d1c:	20006d4c 	.word	0x20006d4c

08014d20 <__sread>:
 8014d20:	b510      	push	{r4, lr}
 8014d22:	460c      	mov	r4, r1
 8014d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d28:	f000 f8a8 	bl	8014e7c <_read_r>
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	bfab      	itete	ge
 8014d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014d32:	89a3      	ldrhlt	r3, [r4, #12]
 8014d34:	181b      	addge	r3, r3, r0
 8014d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014d3a:	bfac      	ite	ge
 8014d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014d3e:	81a3      	strhlt	r3, [r4, #12]
 8014d40:	bd10      	pop	{r4, pc}

08014d42 <__swrite>:
 8014d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d46:	461f      	mov	r7, r3
 8014d48:	898b      	ldrh	r3, [r1, #12]
 8014d4a:	05db      	lsls	r3, r3, #23
 8014d4c:	4605      	mov	r5, r0
 8014d4e:	460c      	mov	r4, r1
 8014d50:	4616      	mov	r6, r2
 8014d52:	d505      	bpl.n	8014d60 <__swrite+0x1e>
 8014d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d58:	2302      	movs	r3, #2
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	f000 f870 	bl	8014e40 <_lseek_r>
 8014d60:	89a3      	ldrh	r3, [r4, #12]
 8014d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014d6a:	81a3      	strh	r3, [r4, #12]
 8014d6c:	4632      	mov	r2, r6
 8014d6e:	463b      	mov	r3, r7
 8014d70:	4628      	mov	r0, r5
 8014d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d76:	f000 b817 	b.w	8014da8 <_write_r>

08014d7a <__sseek>:
 8014d7a:	b510      	push	{r4, lr}
 8014d7c:	460c      	mov	r4, r1
 8014d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d82:	f000 f85d 	bl	8014e40 <_lseek_r>
 8014d86:	1c43      	adds	r3, r0, #1
 8014d88:	89a3      	ldrh	r3, [r4, #12]
 8014d8a:	bf15      	itete	ne
 8014d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014d96:	81a3      	strheq	r3, [r4, #12]
 8014d98:	bf18      	it	ne
 8014d9a:	81a3      	strhne	r3, [r4, #12]
 8014d9c:	bd10      	pop	{r4, pc}

08014d9e <__sclose>:
 8014d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014da2:	f000 b81b 	b.w	8014ddc <_close_r>
	...

08014da8 <_write_r>:
 8014da8:	b538      	push	{r3, r4, r5, lr}
 8014daa:	4d07      	ldr	r5, [pc, #28]	; (8014dc8 <_write_r+0x20>)
 8014dac:	4604      	mov	r4, r0
 8014dae:	4608      	mov	r0, r1
 8014db0:	4611      	mov	r1, r2
 8014db2:	2200      	movs	r2, #0
 8014db4:	602a      	str	r2, [r5, #0]
 8014db6:	461a      	mov	r2, r3
 8014db8:	f7eb ff5d 	bl	8000c76 <_write>
 8014dbc:	1c43      	adds	r3, r0, #1
 8014dbe:	d102      	bne.n	8014dc6 <_write_r+0x1e>
 8014dc0:	682b      	ldr	r3, [r5, #0]
 8014dc2:	b103      	cbz	r3, 8014dc6 <_write_r+0x1e>
 8014dc4:	6023      	str	r3, [r4, #0]
 8014dc6:	bd38      	pop	{r3, r4, r5, pc}
 8014dc8:	20006d4c 	.word	0x20006d4c

08014dcc <abort>:
 8014dcc:	b508      	push	{r3, lr}
 8014dce:	2006      	movs	r0, #6
 8014dd0:	f000 f88e 	bl	8014ef0 <raise>
 8014dd4:	2001      	movs	r0, #1
 8014dd6:	f7eb ff27 	bl	8000c28 <_exit>
	...

08014ddc <_close_r>:
 8014ddc:	b538      	push	{r3, r4, r5, lr}
 8014dde:	4d06      	ldr	r5, [pc, #24]	; (8014df8 <_close_r+0x1c>)
 8014de0:	2300      	movs	r3, #0
 8014de2:	4604      	mov	r4, r0
 8014de4:	4608      	mov	r0, r1
 8014de6:	602b      	str	r3, [r5, #0]
 8014de8:	f7eb ff61 	bl	8000cae <_close>
 8014dec:	1c43      	adds	r3, r0, #1
 8014dee:	d102      	bne.n	8014df6 <_close_r+0x1a>
 8014df0:	682b      	ldr	r3, [r5, #0]
 8014df2:	b103      	cbz	r3, 8014df6 <_close_r+0x1a>
 8014df4:	6023      	str	r3, [r4, #0]
 8014df6:	bd38      	pop	{r3, r4, r5, pc}
 8014df8:	20006d4c 	.word	0x20006d4c

08014dfc <_fstat_r>:
 8014dfc:	b538      	push	{r3, r4, r5, lr}
 8014dfe:	4d07      	ldr	r5, [pc, #28]	; (8014e1c <_fstat_r+0x20>)
 8014e00:	2300      	movs	r3, #0
 8014e02:	4604      	mov	r4, r0
 8014e04:	4608      	mov	r0, r1
 8014e06:	4611      	mov	r1, r2
 8014e08:	602b      	str	r3, [r5, #0]
 8014e0a:	f7eb ff5c 	bl	8000cc6 <_fstat>
 8014e0e:	1c43      	adds	r3, r0, #1
 8014e10:	d102      	bne.n	8014e18 <_fstat_r+0x1c>
 8014e12:	682b      	ldr	r3, [r5, #0]
 8014e14:	b103      	cbz	r3, 8014e18 <_fstat_r+0x1c>
 8014e16:	6023      	str	r3, [r4, #0]
 8014e18:	bd38      	pop	{r3, r4, r5, pc}
 8014e1a:	bf00      	nop
 8014e1c:	20006d4c 	.word	0x20006d4c

08014e20 <_isatty_r>:
 8014e20:	b538      	push	{r3, r4, r5, lr}
 8014e22:	4d06      	ldr	r5, [pc, #24]	; (8014e3c <_isatty_r+0x1c>)
 8014e24:	2300      	movs	r3, #0
 8014e26:	4604      	mov	r4, r0
 8014e28:	4608      	mov	r0, r1
 8014e2a:	602b      	str	r3, [r5, #0]
 8014e2c:	f7eb ff5b 	bl	8000ce6 <_isatty>
 8014e30:	1c43      	adds	r3, r0, #1
 8014e32:	d102      	bne.n	8014e3a <_isatty_r+0x1a>
 8014e34:	682b      	ldr	r3, [r5, #0]
 8014e36:	b103      	cbz	r3, 8014e3a <_isatty_r+0x1a>
 8014e38:	6023      	str	r3, [r4, #0]
 8014e3a:	bd38      	pop	{r3, r4, r5, pc}
 8014e3c:	20006d4c 	.word	0x20006d4c

08014e40 <_lseek_r>:
 8014e40:	b538      	push	{r3, r4, r5, lr}
 8014e42:	4d07      	ldr	r5, [pc, #28]	; (8014e60 <_lseek_r+0x20>)
 8014e44:	4604      	mov	r4, r0
 8014e46:	4608      	mov	r0, r1
 8014e48:	4611      	mov	r1, r2
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	602a      	str	r2, [r5, #0]
 8014e4e:	461a      	mov	r2, r3
 8014e50:	f7eb ff54 	bl	8000cfc <_lseek>
 8014e54:	1c43      	adds	r3, r0, #1
 8014e56:	d102      	bne.n	8014e5e <_lseek_r+0x1e>
 8014e58:	682b      	ldr	r3, [r5, #0]
 8014e5a:	b103      	cbz	r3, 8014e5e <_lseek_r+0x1e>
 8014e5c:	6023      	str	r3, [r4, #0]
 8014e5e:	bd38      	pop	{r3, r4, r5, pc}
 8014e60:	20006d4c 	.word	0x20006d4c

08014e64 <__malloc_lock>:
 8014e64:	4801      	ldr	r0, [pc, #4]	; (8014e6c <__malloc_lock+0x8>)
 8014e66:	f7ff bb45 	b.w	80144f4 <__retarget_lock_acquire_recursive>
 8014e6a:	bf00      	nop
 8014e6c:	20006d54 	.word	0x20006d54

08014e70 <__malloc_unlock>:
 8014e70:	4801      	ldr	r0, [pc, #4]	; (8014e78 <__malloc_unlock+0x8>)
 8014e72:	f7ff bb40 	b.w	80144f6 <__retarget_lock_release_recursive>
 8014e76:	bf00      	nop
 8014e78:	20006d54 	.word	0x20006d54

08014e7c <_read_r>:
 8014e7c:	b538      	push	{r3, r4, r5, lr}
 8014e7e:	4d07      	ldr	r5, [pc, #28]	; (8014e9c <_read_r+0x20>)
 8014e80:	4604      	mov	r4, r0
 8014e82:	4608      	mov	r0, r1
 8014e84:	4611      	mov	r1, r2
 8014e86:	2200      	movs	r2, #0
 8014e88:	602a      	str	r2, [r5, #0]
 8014e8a:	461a      	mov	r2, r3
 8014e8c:	f7eb fed6 	bl	8000c3c <_read>
 8014e90:	1c43      	adds	r3, r0, #1
 8014e92:	d102      	bne.n	8014e9a <_read_r+0x1e>
 8014e94:	682b      	ldr	r3, [r5, #0]
 8014e96:	b103      	cbz	r3, 8014e9a <_read_r+0x1e>
 8014e98:	6023      	str	r3, [r4, #0]
 8014e9a:	bd38      	pop	{r3, r4, r5, pc}
 8014e9c:	20006d4c 	.word	0x20006d4c

08014ea0 <_raise_r>:
 8014ea0:	291f      	cmp	r1, #31
 8014ea2:	b538      	push	{r3, r4, r5, lr}
 8014ea4:	4604      	mov	r4, r0
 8014ea6:	460d      	mov	r5, r1
 8014ea8:	d904      	bls.n	8014eb4 <_raise_r+0x14>
 8014eaa:	2316      	movs	r3, #22
 8014eac:	6003      	str	r3, [r0, #0]
 8014eae:	f04f 30ff 	mov.w	r0, #4294967295
 8014eb2:	bd38      	pop	{r3, r4, r5, pc}
 8014eb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014eb6:	b112      	cbz	r2, 8014ebe <_raise_r+0x1e>
 8014eb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014ebc:	b94b      	cbnz	r3, 8014ed2 <_raise_r+0x32>
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	f000 f830 	bl	8014f24 <_getpid_r>
 8014ec4:	462a      	mov	r2, r5
 8014ec6:	4601      	mov	r1, r0
 8014ec8:	4620      	mov	r0, r4
 8014eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ece:	f000 b817 	b.w	8014f00 <_kill_r>
 8014ed2:	2b01      	cmp	r3, #1
 8014ed4:	d00a      	beq.n	8014eec <_raise_r+0x4c>
 8014ed6:	1c59      	adds	r1, r3, #1
 8014ed8:	d103      	bne.n	8014ee2 <_raise_r+0x42>
 8014eda:	2316      	movs	r3, #22
 8014edc:	6003      	str	r3, [r0, #0]
 8014ede:	2001      	movs	r0, #1
 8014ee0:	e7e7      	b.n	8014eb2 <_raise_r+0x12>
 8014ee2:	2400      	movs	r4, #0
 8014ee4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014ee8:	4628      	mov	r0, r5
 8014eea:	4798      	blx	r3
 8014eec:	2000      	movs	r0, #0
 8014eee:	e7e0      	b.n	8014eb2 <_raise_r+0x12>

08014ef0 <raise>:
 8014ef0:	4b02      	ldr	r3, [pc, #8]	; (8014efc <raise+0xc>)
 8014ef2:	4601      	mov	r1, r0
 8014ef4:	6818      	ldr	r0, [r3, #0]
 8014ef6:	f7ff bfd3 	b.w	8014ea0 <_raise_r>
 8014efa:	bf00      	nop
 8014efc:	20000018 	.word	0x20000018

08014f00 <_kill_r>:
 8014f00:	b538      	push	{r3, r4, r5, lr}
 8014f02:	4d07      	ldr	r5, [pc, #28]	; (8014f20 <_kill_r+0x20>)
 8014f04:	2300      	movs	r3, #0
 8014f06:	4604      	mov	r4, r0
 8014f08:	4608      	mov	r0, r1
 8014f0a:	4611      	mov	r1, r2
 8014f0c:	602b      	str	r3, [r5, #0]
 8014f0e:	f7eb fe79 	bl	8000c04 <_kill>
 8014f12:	1c43      	adds	r3, r0, #1
 8014f14:	d102      	bne.n	8014f1c <_kill_r+0x1c>
 8014f16:	682b      	ldr	r3, [r5, #0]
 8014f18:	b103      	cbz	r3, 8014f1c <_kill_r+0x1c>
 8014f1a:	6023      	str	r3, [r4, #0]
 8014f1c:	bd38      	pop	{r3, r4, r5, pc}
 8014f1e:	bf00      	nop
 8014f20:	20006d4c 	.word	0x20006d4c

08014f24 <_getpid_r>:
 8014f24:	f7eb be66 	b.w	8000bf4 <_getpid>

08014f28 <_init>:
 8014f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f2a:	bf00      	nop
 8014f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f2e:	bc08      	pop	{r3}
 8014f30:	469e      	mov	lr, r3
 8014f32:	4770      	bx	lr

08014f34 <_fini>:
 8014f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f36:	bf00      	nop
 8014f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f3a:	bc08      	pop	{r3}
 8014f3c:	469e      	mov	lr, r3
 8014f3e:	4770      	bx	lr
