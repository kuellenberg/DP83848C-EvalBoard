
Firmware-DP83848C-Evalboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000187c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003978  08018958  08018958  00028958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c2d0  0801c2d0  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801c2d0  0801c2d0  0002c2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c2d8  0801c2d8  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c2d8  0801c2d8  0002c2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c2dc  0801c2dc  0002c2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801c2e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000843c  200001fc  0801c4dc  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008638  0801c4dc  00038638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041c96  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ba7  00000000  00000000  00071ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef0  00000000  00000000  00079a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001dc8  00000000  00000000  0007b960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003124e  00000000  00000000  0007d728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031c01  00000000  00000000  000ae976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e713d  00000000  00000000  000e0577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c76b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a08  00000000  00000000  001c7708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018940 	.word	0x08018940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08018940 	.word	0x08018940

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <mqtt_incoming_data_cb>:
/* USER CODE BEGIN 0 */

static int inpub_id;

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	4611      	mov	r1, r2
 80005a4:	461a      	mov	r2, r3
 80005a6:	460b      	mov	r3, r1
 80005a8:	80fb      	strh	r3, [r7, #6]
 80005aa:	4613      	mov	r3, r2
 80005ac:	717b      	strb	r3, [r7, #5]
  sprintf(txBuf, "Incoming publish payload with length %d, flags %u\n", len, (unsigned int)flags);
 80005ae:	88fa      	ldrh	r2, [r7, #6]
 80005b0:	797b      	ldrb	r3, [r7, #5]
 80005b2:	4920      	ldr	r1, [pc, #128]	; (8000634 <mqtt_incoming_data_cb+0x9c>)
 80005b4:	4820      	ldr	r0, [pc, #128]	; (8000638 <mqtt_incoming_data_cb+0xa0>)
 80005b6:	f017 f857 	bl	8017668 <siprintf>
  CDC_Transmit_FS(txBuf, strlen(txBuf));
 80005ba:	481f      	ldr	r0, [pc, #124]	; (8000638 <mqtt_incoming_data_cb+0xa0>)
 80005bc:	f7ff fe12 	bl	80001e4 <strlen>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	4619      	mov	r1, r3
 80005c6:	481c      	ldr	r0, [pc, #112]	; (8000638 <mqtt_incoming_data_cb+0xa0>)
 80005c8:	f016 fb38 	bl	8016c3c <CDC_Transmit_FS>

  if(flags & MQTT_DATA_FLAG_LAST) {
 80005cc:	797b      	ldrb	r3, [r7, #5]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d02a      	beq.n	800062c <mqtt_incoming_data_cb+0x94>
    /* Last fragment of payload received (or whole part if payload fits receive buffer
       See MQTT_VAR_HEADER_BUFFER_LEN)  */

    /* Call function or do action depending on reference, in this case inpub_id */
    if(inpub_id == 0) {
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <mqtt_incoming_data_cb+0xa4>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d115      	bne.n	800060a <mqtt_incoming_data_cb+0x72>
      /* Don't trust the publisher, check zero termination */
      if(data[len-1] == 0) {
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d11f      	bne.n	800062c <mqtt_incoming_data_cb+0x94>
        sprintf(txBuf, "mqtt_incoming_data_cb: %s\n", (const char *)data);
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	4914      	ldr	r1, [pc, #80]	; (8000640 <mqtt_incoming_data_cb+0xa8>)
 80005f0:	4811      	ldr	r0, [pc, #68]	; (8000638 <mqtt_incoming_data_cb+0xa0>)
 80005f2:	f017 f839 	bl	8017668 <siprintf>
        CDC_Transmit_FS(txBuf, strlen(txBuf));
 80005f6:	4810      	ldr	r0, [pc, #64]	; (8000638 <mqtt_incoming_data_cb+0xa0>)
 80005f8:	f7ff fdf4 	bl	80001e4 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29b      	uxth	r3, r3
 8000600:	4619      	mov	r1, r3
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <mqtt_incoming_data_cb+0xa0>)
 8000604:	f016 fb1a 	bl	8016c3c <CDC_Transmit_FS>
      CDC_Transmit_FS(txBuf, strlen(txBuf));
    }
  } else {
    /* Handle fragmented payload, store in buffer, write to file or whatever */
  }
}
 8000608:	e010      	b.n	800062c <mqtt_incoming_data_cb+0x94>
    } else if(inpub_id == 1) {
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <mqtt_incoming_data_cb+0xa4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d00c      	beq.n	800062c <mqtt_incoming_data_cb+0x94>
      sprintf(txBuf, "mqtt_incoming_data_cb: Ignoring payload...\n");
 8000612:	490c      	ldr	r1, [pc, #48]	; (8000644 <mqtt_incoming_data_cb+0xac>)
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <mqtt_incoming_data_cb+0xa0>)
 8000616:	f017 f827 	bl	8017668 <siprintf>
      CDC_Transmit_FS(txBuf, strlen(txBuf));
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <mqtt_incoming_data_cb+0xa0>)
 800061c:	f7ff fde2 	bl	80001e4 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	b29b      	uxth	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <mqtt_incoming_data_cb+0xa0>)
 8000628:	f016 fb08 	bl	8016c3c <CDC_Transmit_FS>
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	08018958 	.word	0x08018958
 8000638:	200005c8 	.word	0x200005c8
 800063c:	20000218 	.word	0x20000218
 8000640:	0801898c 	.word	0x0801898c
 8000644:	080189a8 	.word	0x080189a8

08000648 <mqtt_incoming_publish_cb>:

static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  sprintf(txBuf, "Incoming publish at topic %s with total length %u\n", topic, (unsigned int)tot_len);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	4913      	ldr	r1, [pc, #76]	; (80006a8 <mqtt_incoming_publish_cb+0x60>)
 800065a:	4814      	ldr	r0, [pc, #80]	; (80006ac <mqtt_incoming_publish_cb+0x64>)
 800065c:	f017 f804 	bl	8017668 <siprintf>
  CDC_Transmit_FS(txBuf, strlen(txBuf));
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <mqtt_incoming_publish_cb+0x64>)
 8000662:	f7ff fdbf 	bl	80001e4 <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b29b      	uxth	r3, r3
 800066a:	4619      	mov	r1, r3
 800066c:	480f      	ldr	r0, [pc, #60]	; (80006ac <mqtt_incoming_publish_cb+0x64>)
 800066e:	f016 fae5 	bl	8016c3c <CDC_Transmit_FS>

  /* Decode topic string into a user defined reference */
  if(strcmp(topic, "test") == 0) {
 8000672:	490f      	ldr	r1, [pc, #60]	; (80006b0 <mqtt_incoming_publish_cb+0x68>)
 8000674:	68b8      	ldr	r0, [r7, #8]
 8000676:	f7ff fdab 	bl	80001d0 <strcmp>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d103      	bne.n	8000688 <mqtt_incoming_publish_cb+0x40>
    inpub_id = 0;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <mqtt_incoming_publish_cb+0x6c>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
    inpub_id = 1;
  } else {
    /* For all other topics */
    inpub_id = 2;
  }
}
 8000686:	e00a      	b.n	800069e <mqtt_incoming_publish_cb+0x56>
  } else if(topic[0] == 'A') {
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b41      	cmp	r3, #65	; 0x41
 800068e:	d103      	bne.n	8000698 <mqtt_incoming_publish_cb+0x50>
    inpub_id = 1;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <mqtt_incoming_publish_cb+0x6c>)
 8000692:	2201      	movs	r2, #1
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	e002      	b.n	800069e <mqtt_incoming_publish_cb+0x56>
    inpub_id = 2;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <mqtt_incoming_publish_cb+0x6c>)
 800069a:	2202      	movs	r2, #2
 800069c:	601a      	str	r2, [r3, #0]
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	080189d4 	.word	0x080189d4
 80006ac:	200005c8 	.word	0x200005c8
 80006b0:	08018a08 	.word	0x08018a08
 80006b4:	20000218 	.word	0x20000218

080006b8 <mqtt_sub_request_cb>:

static void mqtt_sub_request_cb(void *arg, err_t result)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
  sprintf(txBuf, "Subscribe result: %d\n", result);
 80006c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <mqtt_sub_request_cb+0x34>)
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <mqtt_sub_request_cb+0x38>)
 80006ce:	f016 ffcb 	bl	8017668 <siprintf>
  CDC_Transmit_FS(txBuf, strlen(txBuf));
 80006d2:	4807      	ldr	r0, [pc, #28]	; (80006f0 <mqtt_sub_request_cb+0x38>)
 80006d4:	f7ff fd86 	bl	80001e4 <strlen>
 80006d8:	4603      	mov	r3, r0
 80006da:	b29b      	uxth	r3, r3
 80006dc:	4619      	mov	r1, r3
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <mqtt_sub_request_cb+0x38>)
 80006e0:	f016 faac 	bl	8016c3c <CDC_Transmit_FS>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	08018a10 	.word	0x08018a10
 80006f0:	200005c8 	.word	0x200005c8

080006f4 <mqtt_connection_cb>:

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	4613      	mov	r3, r2
 8000700:	80fb      	strh	r3, [r7, #6]
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d133      	bne.n	8000770 <mqtt_connection_cb+0x7c>
    sprintf(txBuf, "mqtt_connection_cb: Successfully connected\n");
 8000708:	4924      	ldr	r1, [pc, #144]	; (800079c <mqtt_connection_cb+0xa8>)
 800070a:	4825      	ldr	r0, [pc, #148]	; (80007a0 <mqtt_connection_cb+0xac>)
 800070c:	f016 ffac 	bl	8017668 <siprintf>
	CDC_Transmit_FS(txBuf, strlen(txBuf));
 8000710:	4823      	ldr	r0, [pc, #140]	; (80007a0 <mqtt_connection_cb+0xac>)
 8000712:	f7ff fd67 	bl	80001e4 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29b      	uxth	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	4820      	ldr	r0, [pc, #128]	; (80007a0 <mqtt_connection_cb+0xac>)
 800071e:	f016 fa8d 	bl	8016c3c <CDC_Transmit_FS>

    /* Setup callback for incoming publish requests */
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <mqtt_connection_cb+0xb0>)
 8000726:	4920      	ldr	r1, [pc, #128]	; (80007a8 <mqtt_connection_cb+0xb4>)
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	f009 f951 	bl	80099d0 <mqtt_set_inpub_callback>

    /* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, "moo", 1, mqtt_sub_request_cb, arg);
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <mqtt_connection_cb+0xb8>)
 8000738:	2201      	movs	r2, #1
 800073a:	491d      	ldr	r1, [pc, #116]	; (80007b0 <mqtt_connection_cb+0xbc>)
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f009 f871 	bl	8009824 <mqtt_sub_unsub>
 8000742:	4603      	mov	r3, r0
 8000744:	75fb      	strb	r3, [r7, #23]

    if(err != ERR_OK) {
 8000746:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d022      	beq.n	8000794 <mqtt_connection_cb+0xa0>
      sprintf(txBuf, "mqtt_subscribe return: %d\n", err);
 800074e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000752:	461a      	mov	r2, r3
 8000754:	4917      	ldr	r1, [pc, #92]	; (80007b4 <mqtt_connection_cb+0xc0>)
 8000756:	4812      	ldr	r0, [pc, #72]	; (80007a0 <mqtt_connection_cb+0xac>)
 8000758:	f016 ff86 	bl	8017668 <siprintf>
      CDC_Transmit_FS(txBuf, strlen(txBuf));
 800075c:	4810      	ldr	r0, [pc, #64]	; (80007a0 <mqtt_connection_cb+0xac>)
 800075e:	f7ff fd41 	bl	80001e4 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	b29b      	uxth	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <mqtt_connection_cb+0xac>)
 800076a:	f016 fa67 	bl	8016c3c <CDC_Transmit_FS>
	CDC_Transmit_FS(txBuf, strlen(txBuf));

    /* Its more nice to be connected, so try to reconnect */
    example_do_connect(client);
  }
}
 800076e:	e011      	b.n	8000794 <mqtt_connection_cb+0xa0>
    sprintf(txBuf, "mqtt_connection_cb: Disconnected, reason: %d\n", status);
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	461a      	mov	r2, r3
 8000774:	4910      	ldr	r1, [pc, #64]	; (80007b8 <mqtt_connection_cb+0xc4>)
 8000776:	480a      	ldr	r0, [pc, #40]	; (80007a0 <mqtt_connection_cb+0xac>)
 8000778:	f016 ff76 	bl	8017668 <siprintf>
	CDC_Transmit_FS(txBuf, strlen(txBuf));
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <mqtt_connection_cb+0xac>)
 800077e:	f7ff fd31 	bl	80001e4 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29b      	uxth	r3, r3
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <mqtt_connection_cb+0xac>)
 800078a:	f016 fa57 	bl	8016c3c <CDC_Transmit_FS>
    example_do_connect(client);
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f000 f814 	bl	80007bc <example_do_connect>
}
 8000794:	bf00      	nop
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	08018a28 	.word	0x08018a28
 80007a0:	200005c8 	.word	0x200005c8
 80007a4:	08000599 	.word	0x08000599
 80007a8:	08000649 	.word	0x08000649
 80007ac:	080006b9 	.word	0x080006b9
 80007b0:	08018a54 	.word	0x08018a54
 80007b4:	08018a58 	.word	0x08018a58
 80007b8:	08018a74 	.word	0x08018a74

080007bc <example_do_connect>:


void example_do_connect(mqtt_client_t *client)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	6078      	str	r0, [r7, #4]
  struct mqtt_connect_client_info_t ci;
  err_t err;
  ip_addr_t broker;
  IP4_ADDR(&broker ,192,168,0,21);
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <example_do_connect+0x70>)
 80007c6:	60fb      	str	r3, [r7, #12]

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	221c      	movs	r2, #28
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f016 fee9 	bl	80175a8 <memset>

  /* Minimal amount of information required is client identifier, so set it here */
  ci.client_id = "lwip_test";
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <example_do_connect+0x74>)
 80007d8:	613b      	str	r3, [r7, #16]
  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting
     to establish a connection with the server.
     For now MQTT version 3.1.1 is always used */

  err = mqtt_client_connect(client, &broker, 1883, mqtt_connection_cb, 0, &ci);
 80007da:	f107 010c 	add.w	r1, r7, #12
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	2300      	movs	r3, #0
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <example_do_connect+0x78>)
 80007ea:	f240 725b 	movw	r2, #1883	; 0x75b
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f009 f91c 	bl	8009a2c <mqtt_client_connect>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* For now just print the result code if something goes wrong */
  if(err != ERR_OK) {
 80007fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00f      	beq.n	8000822 <example_do_connect+0x66>
    sprintf(txBuf, "mqtt_connect return %d\n", err);
 8000802:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000806:	461a      	mov	r2, r3
 8000808:	490b      	ldr	r1, [pc, #44]	; (8000838 <example_do_connect+0x7c>)
 800080a:	480c      	ldr	r0, [pc, #48]	; (800083c <example_do_connect+0x80>)
 800080c:	f016 ff2c 	bl	8017668 <siprintf>
	CDC_Transmit_FS(txBuf, strlen(txBuf));
 8000810:	480a      	ldr	r0, [pc, #40]	; (800083c <example_do_connect+0x80>)
 8000812:	f7ff fce7 	bl	80001e4 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	b29b      	uxth	r3, r3
 800081a:	4619      	mov	r1, r3
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <example_do_connect+0x80>)
 800081e:	f016 fa0d 	bl	8016c3c <CDC_Transmit_FS>
  }
}
 8000822:	bf00      	nop
 8000824:	3730      	adds	r7, #48	; 0x30
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	1500a8c0 	.word	0x1500a8c0
 8000830:	08018aa4 	.word	0x08018aa4
 8000834:	080006f5 	.word	0x080006f5
 8000838:	08018ab0 	.word	0x08018ab0
 800083c:	200005c8 	.word	0x200005c8

08000840 <mqtt_pub_request_cb>:


/* Called when publish is complete either with sucess or failure */
static void mqtt_pub_request_cb(void *arg, err_t result)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	70fb      	strb	r3, [r7, #3]
  if(result != ERR_OK) {
 800084c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00f      	beq.n	8000874 <mqtt_pub_request_cb+0x34>
    sprintf(txBuf, "Publish result: %d\n", result);
 8000854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000858:	461a      	mov	r2, r3
 800085a:	4908      	ldr	r1, [pc, #32]	; (800087c <mqtt_pub_request_cb+0x3c>)
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <mqtt_pub_request_cb+0x40>)
 800085e:	f016 ff03 	bl	8017668 <siprintf>
    CDC_Transmit_FS(txBuf, strlen(txBuf));
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <mqtt_pub_request_cb+0x40>)
 8000864:	f7ff fcbe 	bl	80001e4 <strlen>
 8000868:	4603      	mov	r3, r0
 800086a:	b29b      	uxth	r3, r3
 800086c:	4619      	mov	r1, r3
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <mqtt_pub_request_cb+0x40>)
 8000870:	f016 f9e4 	bl	8016c3c <CDC_Transmit_FS>
  }
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	08018ac8 	.word	0x08018ac8
 8000880:	200005c8 	.word	0x200005c8

08000884 <example_publish>:




void example_publish(mqtt_client_t *client, void *arg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af04      	add	r7, sp, #16
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  const char *pub_payload= "Moobert sagt moo!";
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <example_publish+0x5c>)
 8000890:	60fb      	str	r3, [r7, #12]
  err_t err;
  u8_t qos = 2; /* 0 1 or 2, see MQTT specification */
 8000892:	2302      	movs	r3, #2
 8000894:	72fb      	strb	r3, [r7, #11]
  u8_t retain = 0; /* No don't retain such crappy payload... */
 8000896:	2300      	movs	r3, #0
 8000898:	72bb      	strb	r3, [r7, #10]
  err = mqtt_publish(client, "test", pub_payload, strlen(pub_payload), qos, retain, mqtt_pub_request_cb, arg);
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff fca2 	bl	80001e4 <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	9303      	str	r3, [sp, #12]
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <example_publish+0x60>)
 80008aa:	9302      	str	r3, [sp, #8]
 80008ac:	7abb      	ldrb	r3, [r7, #10]
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	7afb      	ldrb	r3, [r7, #11]
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	4613      	mov	r3, r2
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	490b      	ldr	r1, [pc, #44]	; (80008e8 <example_publish+0x64>)
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f008 fede 	bl	800967c <mqtt_publish>
 80008c0:	4603      	mov	r3, r0
 80008c2:	727b      	strb	r3, [r7, #9]
  if(err != ERR_OK) {
 80008c4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d005      	beq.n	80008d8 <example_publish+0x54>
    printf("Publish err: %d\n", err);
 80008cc:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <example_publish+0x68>)
 80008d4:	f016 fe70 	bl	80175b8 <iprintf>
  }
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	08018adc 	.word	0x08018adc
 80008e4:	08000841 	.word	0x08000841
 80008e8:	08018a08 	.word	0x08018a08
 80008ec:	08018af0 	.word	0x08018af0

080008f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM3) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d10e      	bne.n	8000920 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000902:	2101      	movs	r1, #1
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000906:	f002 f816 	bl	8002936 <HAL_GPIO_TogglePin>
		example_do_connect(client);
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff54 	bl	80007bc <example_do_connect>
		example_publish(client, NULL);
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ffb2 	bl	8000884 <example_publish>
	}
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40000400 	.word	0x40000400
 800092c:	40020c00 	.word	0x40020c00
 8000930:	20000674 	.word	0x20000674

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000938:	f000 faf4 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093c:	f000 f81c 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000940:	f000 f8d2 	bl	8000ae8 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000944:	f005 fd58 	bl	80063f8 <MX_LWIP_Init>
  MX_TIM3_Init();
 8000948:	f000 f880 	bl	8000a4c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800094c:	f016 f8a4 	bl	8016a98 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <main+0x3c>)
 8000952:	f003 fdfd 	bl	8004550 <HAL_TIM_Base_Start_IT>

  client = mqtt_client_new();
 8000956:	f009 f85f 	bl	8009a18 <mqtt_client_new>
 800095a:	4603      	mov	r3, r0
 800095c:	4a05      	ldr	r2, [pc, #20]	; (8000974 <main+0x40>)
 800095e:	6013      	str	r3, [r2, #0]
  example_do_connect(client);
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <main+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff29 	bl	80007bc <example_do_connect>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  MX_LWIP_Process();
 800096a:	f005 fd8b 	bl	8006484 <MX_LWIP_Process>
 800096e:	e7fc      	b.n	800096a <main+0x36>
 8000970:	2000062c 	.word	0x2000062c
 8000974:	20000674 	.word	0x20000674

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	; 0x50
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	2230      	movs	r2, #48	; 0x30
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f016 fe0e 	bl	80175a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <SystemClock_Config+0xcc>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	4a27      	ldr	r2, [pc, #156]	; (8000a44 <SystemClock_Config+0xcc>)
 80009a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009aa:	6413      	str	r3, [r2, #64]	; 0x40
 80009ac:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <SystemClock_Config+0xcc>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <SystemClock_Config+0xd0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <SystemClock_Config+0xd0>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <SystemClock_Config+0xd0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009de:	2302      	movs	r3, #2
 80009e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80009e8:	230f      	movs	r3, #15
 80009ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80009ec:	2390      	movs	r3, #144	; 0x90
 80009ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009f4:	2305      	movs	r3, #5
 80009f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 f937 	bl	8003c70 <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a08:	f000 f8da 	bl	8000bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a10:	2302      	movs	r3, #2
 8000a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2103      	movs	r1, #3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 fb98 	bl	8004160 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a36:	f000 f8c3 	bl	8000bc0 <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3750      	adds	r7, #80	; 0x50
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <MX_TIM3_Init+0x98>)
 8000a6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6000;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a70:	f241 7270 	movw	r2, #6000	; 0x1770
 8000a74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a90:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a92:	f003 fd0d 	bl	80044b0 <HAL_TIM_Base_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a9c:	f000 f890 	bl	8000bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000aae:	f003 fec7 	bl	8004840 <HAL_TIM_ConfigClockSource>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ab8:	f000 f882 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000aca:	f004 f8df 	bl	8004c8c <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ad4:	f000 f874 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000062c 	.word	0x2000062c
 8000ae4:	40000400 	.word	0x40000400

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a2c      	ldr	r2, [pc, #176]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a25      	ldr	r2, [pc, #148]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a1e      	ldr	r2, [pc, #120]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_GPIO_Init+0xd0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	480b      	ldr	r0, [pc, #44]	; (8000bbc <MX_GPIO_Init+0xd4>)
 8000b90:	f001 feb8 	bl	8002904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b94:	2301      	movs	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_GPIO_Init+0xd4>)
 8000bac:	f001 fd0e 	bl	80025cc <HAL_GPIO_Init>

}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	; 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020c00 	.word	0x40020c00

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>
	...

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_TIM_Base_MspInit+0x48>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d115      	bne.n	8000c5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_TIM_Base_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a0c      	ldr	r2, [pc, #48]	; (8000c68 <HAL_TIM_Base_MspInit+0x4c>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_TIM_Base_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	201d      	movs	r0, #29
 8000c50:	f000 fad9 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c54:	201d      	movs	r0, #29
 8000c56:	f000 faf2 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40000400 	.word	0x40000400
 8000c68:	40023800 	.word	0x40023800

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f986 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <TIM3_IRQHandler+0x10>)
 8000cc6:	f003 fcb3 	bl	8004630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000062c 	.word	0x2000062c

08000cd4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <ETH_IRQHandler+0x10>)
 8000cda:	f000 feab 	bl	8001a34 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20001f90 	.word	0x20001f90

08000ce8 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <ETH_WKUP_IRQHandler+0x10>)
 8000cee:	f000 fea1 	bl	8001a34 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20001f90 	.word	0x20001f90

08000cfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <OTG_FS_IRQHandler+0x10>)
 8000d02:	f001 ff82 	bl	8002c0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20008220 	.word	0x20008220

08000d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
	return 1;
 8000d14:	2301      	movs	r3, #1
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <_kill>:

int _kill(int pid, int sig)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <_kill+0x20>)
 8000d2c:	2216      	movs	r2, #22
 8000d2e:	601a      	str	r2, [r3, #0]
	return -1;
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	20008628 	.word	0x20008628

08000d44 <_exit>:

void _exit (int status)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ffe5 	bl	8000d20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d56:	e7fe      	b.n	8000d56 <_exit+0x12>

08000d58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e00a      	b.n	8000d80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d6a:	f3af 8000 	nop.w
 8000d6e:	4601      	mov	r1, r0
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	b2ca      	uxtb	r2, r1
 8000d78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	dbf0      	blt.n	8000d6a <_read+0x12>
	}

return len;
 8000d88:	687b      	ldr	r3, [r7, #4]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e009      	b.n	8000db8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	60ba      	str	r2, [r7, #8]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3301      	adds	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dbf1      	blt.n	8000da4 <_write+0x12>
	}
	return len;
 8000dc0:	687b      	ldr	r3, [r7, #4]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_close>:

int _close(int file)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
	return -1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df2:	605a      	str	r2, [r3, #4]
	return 0;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_isatty>:

int _isatty(int file)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
	return 1;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
	return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d205      	bcs.n	8000e70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <_sbrk+0x6c>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	e009      	b.n	8000e84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <_sbrk+0x64>)
 8000e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	371c      	adds	r7, #28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	20020000 	.word	0x20020000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	2000021c 	.word	0x2000021c
 8000e9c:	20008638 	.word	0x20008638
 8000ea0:	20008628 	.word	0x20008628

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <SystemInit+0x28>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <SystemInit+0x28>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SystemInit+0x28>)
 8000eba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ebe:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ed4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ed6:	e003      	b.n	8000ee0 <LoopCopyDataInit>

08000ed8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000edc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ede:	3104      	adds	r1, #4

08000ee0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ee4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ee6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee8:	d3f6      	bcc.n	8000ed8 <CopyDataInit>
  ldr  r2, =_sbss
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000eec:	e002      	b.n	8000ef4 <LoopFillZerobss>

08000eee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ef0:	f842 3b04 	str.w	r3, [r2], #4

08000ef4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ef6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef8:	d3f9      	bcc.n	8000eee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000efa:	f7ff ffd3 	bl	8000ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efe:	f016 faf9 	bl	80174f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f02:	f7ff fd17 	bl	8000934 <main>
  bx  lr    
 8000f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f0c:	0801c2e0 	.word	0x0801c2e0
  ldr  r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f14:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8000f18:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8000f1c:	20008638 	.word	0x20008638

08000f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HAL_Init+0x40>)
 8000f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_Init+0x40>)
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_Init+0x40>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 f94f 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f808 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f58:	f7ff fe38 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023c00 	.word	0x40023c00

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x54>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x58>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f967 	bl	800125a <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d80a      	bhi.n	8000fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 f92f 	bl	8001206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <HAL_InitTick+0x5c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000678 	.word	0x20000678

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000678 	.word	0x20000678

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff29 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff3e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff31 	bl	80010b4 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa2 	bl	80011ac <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001284:	4baa      	ldr	r3, [pc, #680]	; (8001530 <HAL_ETH_Init+0x2bc>)
 8001286:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e183      	b.n	80015a2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d106      	bne.n	80012b4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f005 f8f4 	bl	800649c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	4b9e      	ldr	r3, [pc, #632]	; (8001534 <HAL_ETH_Init+0x2c0>)
 80012ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012bc:	4a9d      	ldr	r2, [pc, #628]	; (8001534 <HAL_ETH_Init+0x2c0>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c2:	6453      	str	r3, [r2, #68]	; 0x44
 80012c4:	4b9b      	ldr	r3, [pc, #620]	; (8001534 <HAL_ETH_Init+0x2c0>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012d0:	4b99      	ldr	r3, [pc, #612]	; (8001538 <HAL_ETH_Init+0x2c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4a98      	ldr	r2, [pc, #608]	; (8001538 <HAL_ETH_Init+0x2c4>)
 80012d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012da:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012dc:	4b96      	ldr	r3, [pc, #600]	; (8001538 <HAL_ETH_Init+0x2c4>)
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4994      	ldr	r1, [pc, #592]	; (8001538 <HAL_ETH_Init+0x2c4>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0201 	orr.w	r2, r2, #1
 80012fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001300:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001302:	f7ff fe75 	bl	8000ff0 <HAL_GetTick>
 8001306:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001308:	e011      	b.n	800132e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800130a:	f7ff fe71 	bl	8000ff0 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001318:	d909      	bls.n	800132e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2203      	movs	r2, #3
 800131e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e139      	b.n	80015a2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1e4      	bne.n	800130a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f023 031c 	bic.w	r3, r3, #28
 800134e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001350:	f003 f8a2 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 8001354:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	4a78      	ldr	r2, [pc, #480]	; (800153c <HAL_ETH_Init+0x2c8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d908      	bls.n	8001370 <HAL_ETH_Init+0xfc>
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	4a77      	ldr	r2, [pc, #476]	; (8001540 <HAL_ETH_Init+0x2cc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d804      	bhi.n	8001370 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	e027      	b.n	80013c0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	4a73      	ldr	r2, [pc, #460]	; (8001540 <HAL_ETH_Init+0x2cc>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d908      	bls.n	800138a <HAL_ETH_Init+0x116>
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	4a6d      	ldr	r2, [pc, #436]	; (8001530 <HAL_ETH_Init+0x2bc>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d204      	bcs.n	800138a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f043 030c 	orr.w	r3, r3, #12
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	e01a      	b.n	80013c0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4a68      	ldr	r2, [pc, #416]	; (8001530 <HAL_ETH_Init+0x2bc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d303      	bcc.n	800139a <HAL_ETH_Init+0x126>
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4a6b      	ldr	r2, [pc, #428]	; (8001544 <HAL_ETH_Init+0x2d0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d911      	bls.n	80013be <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4a69      	ldr	r2, [pc, #420]	; (8001544 <HAL_ETH_Init+0x2d0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d908      	bls.n	80013b4 <HAL_ETH_Init+0x140>
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4a68      	ldr	r2, [pc, #416]	; (8001548 <HAL_ETH_Init+0x2d4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d804      	bhi.n	80013b4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e005      	b.n	80013c0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	e000      	b.n	80013c0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80013be:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80013c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013cc:	2100      	movs	r1, #0
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 fc1d 	bl	8001c0e <HAL_ETH_WritePHYRegister>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fdd3 	bl	8001f8c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0d7      	b.n	80015a2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80013f2:	20ff      	movs	r0, #255	; 0xff
 80013f4:	f7ff fe08 	bl	8001008 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a5 	beq.w	800154c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001402:	f7ff fdf5 	bl	8000ff0 <HAL_GetTick>
 8001406:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	461a      	mov	r2, r3
 800140e:	2101      	movs	r1, #1
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 fb94 	bl	8001b3e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001416:	f7ff fdeb 	bl	8000ff0 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f241 3288 	movw	r2, #5000	; 0x1388
 8001424:	4293      	cmp	r3, r2
 8001426:	d90f      	bls.n	8001448 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800142c:	6939      	ldr	r1, [r7, #16]
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fdac 	bl	8001f8c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e0ac      	b.n	80015a2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0da      	beq.n	8001408 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001452:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001456:	2100      	movs	r1, #0
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 fbd8 	bl	8001c0e <HAL_ETH_WritePHYRegister>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00b      	beq.n	800147c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001468:	6939      	ldr	r1, [r7, #16]
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fd8e 	bl	8001f8c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001478:	2301      	movs	r3, #1
 800147a:	e092      	b.n	80015a2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800147c:	f7ff fdb8 	bl	8000ff0 <HAL_GetTick>
 8001480:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	461a      	mov	r2, r3
 8001488:	2101      	movs	r1, #1
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fb57 	bl	8001b3e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001490:	f7ff fdae 	bl	8000ff0 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f241 3288 	movw	r2, #5000	; 0x1388
 800149e:	4293      	cmp	r3, r2
 80014a0:	d90f      	bls.n	80014c2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014a6:	6939      	ldr	r1, [r7, #16]
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 fd6f 	bl	8001f8c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e06f      	b.n	80015a2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f003 0320 	and.w	r3, r3, #32
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0da      	beq.n	8001482 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	461a      	mov	r2, r3
 80014d2:	2110      	movs	r1, #16
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 fb32 	bl	8001b3e <HAL_ETH_ReadPHYRegister>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00b      	beq.n	80014f8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014e4:	6939      	ldr	r1, [r7, #16]
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 fd50 	bl	8001f8c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014f4:	2301      	movs	r3, #1
 80014f6:	e054      	b.n	80015a2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	e002      	b.n	8001512 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	e035      	b.n	8001590 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	e030      	b.n	8001590 <HAL_ETH_Init+0x31c>
 800152e:	bf00      	nop
 8001530:	03938700 	.word	0x03938700
 8001534:	40023800 	.word	0x40023800
 8001538:	40013800 	.word	0x40013800
 800153c:	01312cff 	.word	0x01312cff
 8001540:	02160ebf 	.word	0x02160ebf
 8001544:	05f5e0ff 	.word	0x05f5e0ff
 8001548:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	085b      	lsrs	r3, r3, #1
 800155a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800155c:	4313      	orrs	r3, r2
 800155e:	b29b      	uxth	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	2100      	movs	r1, #0
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fb52 	bl	8001c0e <HAL_ETH_WritePHYRegister>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00b      	beq.n	8001588 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001574:	6939      	ldr	r1, [r7, #16]
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fd08 	bl	8001f8c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e00c      	b.n	80015a2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001588:	f640 70ff 	movw	r0, #4095	; 0xfff
 800158c:	f7ff fd3c 	bl	8001008 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 fcfa 	bl	8001f8c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop

080015ac <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_ETH_DMATxDescListInit+0x20>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e052      	b.n	8001672 <HAL_ETH_DMATxDescListInit+0xc6>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2202      	movs	r2, #2
 80015d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e030      	b.n	800164a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	015b      	lsls	r3, r3, #5
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	4413      	add	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015f8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001600:	fb02 f303 	mul.w	r3, r2, r3
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	4413      	add	r3, r2
 8001608:	461a      	mov	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d105      	bne.n	8001622 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	d208      	bcs.n	800163e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	015b      	lsls	r3, r3, #5
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	4413      	add	r3, r2
 8001636:	461a      	mov	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	e002      	b.n	8001644 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d3ca      	bcc.n	80015e8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165c:	3310      	adds	r3, #16
 800165e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	371c      	adds	r7, #28
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800167e:	b480      	push	{r7}
 8001680:	b087      	sub	sp, #28
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_ETH_DMARxDescListInit+0x20>
 800169a:	2302      	movs	r3, #2
 800169c:	e056      	b.n	800174c <HAL_ETH_DMARxDescListInit+0xce>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2202      	movs	r2, #2
 80016aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	e034      	b.n	8001724 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	015b      	lsls	r3, r3, #5
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	4413      	add	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016ca:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80016d2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	461a      	mov	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d105      	bne.n	80016fc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	429a      	cmp	r2, r3
 8001704:	d208      	bcs.n	8001718 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	015b      	lsls	r3, r3, #5
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	4413      	add	r3, r2
 8001710:	461a      	mov	r2, r3
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	e002      	b.n	800171e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d3c6      	bcc.n	80016ba <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001736:	330c      	adds	r3, #12
 8001738:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_ETH_TransmitFrame+0x24>
 8001778:	2302      	movs	r3, #2
 800177a:	e0cd      	b.n	8001918 <HAL_ETH_TransmitFrame+0x1c0>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0b8      	b.n	8001918 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da09      	bge.n	80017c4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2212      	movs	r2, #18
 80017b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0a9      	b.n	8001918 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d915      	bls.n	80017fa <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_ETH_TransmitFrame+0x1cc>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0a9b      	lsrs	r3, r3, #10
 80017d8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	4b51      	ldr	r3, [pc, #324]	; (8001924 <HAL_ETH_TransmitFrame+0x1cc>)
 80017de:	fba3 1302 	umull	r1, r3, r3, r2
 80017e2:	0a9b      	lsrs	r3, r3, #10
 80017e4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e001      	b.n	80017fe <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80017fa:	2301      	movs	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d11c      	bne.n	800183e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001812:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800181e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800182e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
 800183c:	e04b      	b.n	80018d6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	e044      	b.n	80018ce <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001852:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d107      	bne.n	800186a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001868:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001872:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3b01      	subs	r3, #1
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	429a      	cmp	r2, r3
 800187c:	d116      	bne.n	80018ac <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800188c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	4a25      	ldr	r2, [pc, #148]	; (8001928 <HAL_ETH_TransmitFrame+0x1d0>)
 8001892:	fb02 f203 	mul.w	r2, r2, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	4413      	add	r3, r2
 800189a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800189e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018aa:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018ba:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	3301      	adds	r3, #1
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3b6      	bcc.n	8001844 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018de:	3314      	adds	r3, #20
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00d      	beq.n	8001906 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f2:	3314      	adds	r3, #20
 80018f4:	2204      	movs	r2, #4
 80018f6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001900:	3304      	adds	r3, #4
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	ac02b00b 	.word	0xac02b00b
 8001928:	fffffa0c 	.word	0xfffffa0c

0800192c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_ETH_GetReceivedFrame+0x1a>
 8001942:	2302      	movs	r3, #2
 8001944:	e070      	b.n	8001a28 <HAL_ETH_GetReceivedFrame+0xfc>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2202      	movs	r2, #2
 8001952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db5a      	blt.n	8001a16 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196a:	2b00      	cmp	r3, #0
 800196c:	d030      	beq.n	80019d0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197c:	2b01      	cmp	r3, #1
 800197e:	d103      	bne.n	8001988 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	0c1b      	lsrs	r3, r3, #16
 8001998:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800199c:	3b04      	subs	r3, #4
 800199e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	461a      	mov	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e02b      	b.n	8001a28 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d010      	beq.n	8001a00 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	461a      	mov	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
 80019fe:	e00a      	b.n	8001a16 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	461a      	mov	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a44:	3314      	adds	r3, #20
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4c:	2b40      	cmp	r3, #64	; 0x40
 8001a4e:	d112      	bne.n	8001a76 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f860 	bl	8001b16 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5e:	3314      	adds	r3, #20
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a74:	e01b      	b.n	8001aae <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7e:	3314      	adds	r3, #20
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d111      	bne.n	8001aae <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f839 	bl	8001b02 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a98:	3314      	adds	r3, #20
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab6:	3314      	adds	r3, #20
 8001ab8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001abc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac6:	3314      	adds	r3, #20
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ad2:	d112      	bne.n	8001afa <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f828 	bl	8001b2a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae2:	3314      	adds	r3, #20
 8001ae4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ae8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	460b      	mov	r3, r1
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b82      	cmp	r3, #130	; 0x82
 8001b5e:	d101      	bne.n	8001b64 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b60:	2302      	movs	r3, #2
 8001b62:	e050      	b.n	8001c06 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2282      	movs	r2, #130	; 0x82
 8001b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 031c 	and.w	r3, r3, #28
 8001b7a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8a1b      	ldrh	r3, [r3, #16]
 8001b80:	02db      	lsls	r3, r3, #11
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001b8a:	897b      	ldrh	r3, [r7, #10]
 8001b8c:	019b      	lsls	r3, r3, #6
 8001b8e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f023 0302 	bic.w	r3, r3, #2
 8001b9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb0:	f7ff fa1e 	bl	8000ff0 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bb6:	e015      	b.n	8001be4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001bb8:	f7ff fa1a 	bl	8000ff0 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc6:	d309      	bcc.n	8001bdc <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e014      	b.n	8001c06 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1e4      	bne.n	8001bb8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	460b      	mov	r3, r1
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b42      	cmp	r3, #66	; 0x42
 8001c2e:	d101      	bne.n	8001c34 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c30:	2302      	movs	r3, #2
 8001c32:	e04e      	b.n	8001cd2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2242      	movs	r2, #66	; 0x42
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 031c 	and.w	r3, r3, #28
 8001c4a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8a1b      	ldrh	r3, [r3, #16]
 8001c50:	02db      	lsls	r3, r3, #11
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001c5a:	897b      	ldrh	r3, [r7, #10]
 8001c5c:	019b      	lsls	r3, r3, #6
 8001c5e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c8a:	f7ff f9b1 	bl	8000ff0 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c90:	e015      	b.n	8001cbe <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001c92:	f7ff f9ad 	bl	8000ff0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d309      	bcc.n	8001cb6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e00d      	b.n	8001cd2 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e4      	bne.n	8001c92 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_ETH_Start+0x16>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e01f      	b.n	8001d30 <HAL_ETH_Start+0x56>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fb45 	bl	8002390 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fb7c 	bl	8002404 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fc13 	bl	8002538 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fbb0 	bl	8002478 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fbdd 	bl	80024d8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_ETH_Stop+0x16>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e01f      	b.n	8001d8e <HAL_ETH_Stop+0x56>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fba2 	bl	80024a8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fbcf 	bl	8002508 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fb67 	bl	800243e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 fbe1 	bl	8002538 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fb27 	bl	80023ca <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_ETH_ConfigMAC+0x1c>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e0e4      	b.n	8001f7e <HAL_ETH_ConfigMAC+0x1e6>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80b1 	beq.w	8001f2e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4b6c      	ldr	r3, [pc, #432]	; (8001f88 <HAL_ETH_ConfigMAC+0x1f0>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001de4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001dea:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001df0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001df6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001dfc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001e02:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001e08:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001e0e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001e14:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001e1a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001e20:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001e26:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f7ff f8e2 	bl	8001008 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e54:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001e5a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001e60:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001e66:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001e6c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001e72:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001e7e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e80:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f7ff f8bc 	bl	8001008 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ea0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001eaa:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ec8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001ece:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001ed4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001eda:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001ee0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7ff f885 	bl	8001008 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7ff f872 	bl	8001008 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	61da      	str	r2, [r3, #28]
 8001f2c:	e01e      	b.n	8001f6c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f3c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f7ff f852 	bl	8001008 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	ff20810f 	.word	0xff20810f

08001f8c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b0b0      	sub	sp, #192	; 0xc0
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fa8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8001fd8:	e001      	b.n	8001fde <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002060:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002064:	4bac      	ldr	r3, [pc, #688]	; (8002318 <ETH_MACDMAConfig+0x38c>)
 8002066:	4013      	ands	r3, r2
 8002068:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800206c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800206e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002070:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002074:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002078:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800207e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002082:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002086:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800208c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800208e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002090:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002094:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002098:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800209a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800209c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800209e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80020a0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80020a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c0:	2001      	movs	r0, #1
 80020c2:	f7fe ffa1 	bl	8001008 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ce:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80020d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020d4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80020d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80020d8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80020da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80020de:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80020e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80020e4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80020e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80020ea:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80020ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80020f0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80020f4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80020fc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020fe:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800210a:	2001      	movs	r0, #1
 800210c:	f7fe ff7c 	bl	8001008 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002118:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002122:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800212c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002138:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800213c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002140:	4013      	ands	r3, r2
 8002142:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002146:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800214a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800214c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002150:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002156:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002158:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800215c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800215e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002162:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002164:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002168:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800216a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800217c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002188:	2001      	movs	r0, #1
 800218a:	f7fe ff3d 	bl	8001008 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002196:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002198:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800219c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f7fe ff28 	bl	8001008 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80021c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ca:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80021d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021d4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80021e6:	2304      	movs	r3, #4
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80021ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80021f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002200:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002206:	2300      	movs	r3, #0
 8002208:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800220a:	2300      	movs	r3, #0
 800220c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002216:	3318      	adds	r3, #24
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800221e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002222:	4b3e      	ldr	r3, [pc, #248]	; (800231c <ETH_MACDMAConfig+0x390>)
 8002224:	4013      	ands	r3, r2
 8002226:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800222a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800222c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800222e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002230:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002232:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002234:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002236:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002238:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800223a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800223c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800223e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002240:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002242:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002246:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800224a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800224c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225e:	3318      	adds	r3, #24
 8002260:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002264:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226e:	3318      	adds	r3, #24
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002276:	2001      	movs	r0, #1
 8002278:	f7fe fec6 	bl	8001008 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002284:	3318      	adds	r3, #24
 8002286:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800228a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800228c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002290:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002294:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002298:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800229a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800229c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800229e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80022a2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80022a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80022a6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c4:	2001      	movs	r0, #1
 80022c6:	f7fe fe9f 	bl	8001008 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10f      	bne.n	8002300 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e8:	331c      	adds	r3, #28
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fc:	331c      	adds	r3, #28
 80022fe:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	461a      	mov	r2, r3
 8002306:	2100      	movs	r1, #0
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f809 	bl	8002320 <ETH_MACAddressConfig>
}
 800230e:	bf00      	nop
 8002310:	37c0      	adds	r7, #192	; 0xc0
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	ff20810f 	.word	0xff20810f
 800231c:	f8de3f23 	.word	0xf8de3f23

08002320 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3305      	adds	r3, #5
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	3204      	adds	r2, #4
 8002338:	7812      	ldrb	r2, [r2, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <ETH_MACAddressConfig+0x68>)
 8002342:	4413      	add	r3, r2
 8002344:	461a      	mov	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3303      	adds	r3, #3
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	061a      	lsls	r2, r3, #24
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3302      	adds	r3, #2
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3301      	adds	r3, #1
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	4313      	orrs	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <ETH_MACAddressConfig+0x6c>)
 8002372:	4413      	add	r3, r2
 8002374:	461a      	mov	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	6013      	str	r3, [r2, #0]
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40028040 	.word	0x40028040
 800238c:	40028044 	.word	0x40028044

08002390 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0208 	orr.w	r2, r2, #8
 80023aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023b4:	2001      	movs	r0, #1
 80023b6:	f000 f8e9 	bl	800258c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	601a      	str	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0208 	bic.w	r2, r2, #8
 80023e4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f000 f8cc 	bl	800258c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	601a      	str	r2, [r3, #0]
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0204 	orr.w	r2, r2, #4
 800241e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002428:	2001      	movs	r0, #1
 800242a:	f000 f8af 	bl	800258c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	601a      	str	r2, [r3, #0]
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0204 	bic.w	r2, r2, #4
 8002458:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002462:	2001      	movs	r0, #1
 8002464:	f000 f892 	bl	800258c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	601a      	str	r2, [r3, #0]
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002488:	3318      	adds	r3, #24
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002498:	3318      	adds	r3, #24
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b8:	3318      	adds	r3, #24
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c8:	3318      	adds	r3, #24
 80024ca:	601a      	str	r2, [r3, #0]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e8:	3318      	adds	r3, #24
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0202 	orr.w	r2, r2, #2
 80024f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f8:	3318      	adds	r3, #24
 80024fa:	601a      	str	r2, [r3, #0]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002518:	3318      	adds	r3, #24
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0202 	bic.w	r2, r2, #2
 8002524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002528:	3318      	adds	r3, #24
 800252a:	601a      	str	r2, [r3, #0]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800254c:	3318      	adds	r3, #24
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800255c:	3318      	adds	r3, #24
 800255e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002568:	3318      	adds	r3, #24
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800256e:	2001      	movs	r0, #1
 8002570:	f000 f80c 	bl	800258c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800257e:	3318      	adds	r3, #24
 8002580:	601a      	str	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <ETH_Delay+0x38>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <ETH_Delay+0x3c>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0a5b      	lsrs	r3, r3, #9
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80025a8:	bf00      	nop
  } 
  while (Delay --);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	60fa      	str	r2, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f9      	bne.n	80025a8 <ETH_Delay+0x1c>
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000000 	.word	0x20000000
 80025c8:	10624dd3 	.word	0x10624dd3

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e16b      	b.n	80028c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e8:	2201      	movs	r2, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	f040 815a 	bne.w	80028ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d005      	beq.n	800261e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261a:	2b02      	cmp	r3, #2
 800261c:	d130      	bne.n	8002680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002654:	2201      	movs	r2, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 0201 	and.w	r2, r3, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b03      	cmp	r3, #3
 800268a:	d017      	beq.n	80026bc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d123      	bne.n	8002710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	08da      	lsrs	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3208      	adds	r2, #8
 80026d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	220f      	movs	r2, #15
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	08da      	lsrs	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3208      	adds	r2, #8
 800270a:	69b9      	ldr	r1, [r7, #24]
 800270c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0203 	and.w	r2, r3, #3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80b4 	beq.w	80028ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	4b60      	ldr	r3, [pc, #384]	; (80028d8 <HAL_GPIO_Init+0x30c>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	4a5f      	ldr	r2, [pc, #380]	; (80028d8 <HAL_GPIO_Init+0x30c>)
 800275c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002760:	6453      	str	r3, [r2, #68]	; 0x44
 8002762:	4b5d      	ldr	r3, [pc, #372]	; (80028d8 <HAL_GPIO_Init+0x30c>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800276e:	4a5b      	ldr	r2, [pc, #364]	; (80028dc <HAL_GPIO_Init+0x310>)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	220f      	movs	r2, #15
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a52      	ldr	r2, [pc, #328]	; (80028e0 <HAL_GPIO_Init+0x314>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d02b      	beq.n	80027f2 <HAL_GPIO_Init+0x226>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a51      	ldr	r2, [pc, #324]	; (80028e4 <HAL_GPIO_Init+0x318>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d025      	beq.n	80027ee <HAL_GPIO_Init+0x222>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a50      	ldr	r2, [pc, #320]	; (80028e8 <HAL_GPIO_Init+0x31c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01f      	beq.n	80027ea <HAL_GPIO_Init+0x21e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4f      	ldr	r2, [pc, #316]	; (80028ec <HAL_GPIO_Init+0x320>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0x21a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4e      	ldr	r2, [pc, #312]	; (80028f0 <HAL_GPIO_Init+0x324>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0x216>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4d      	ldr	r2, [pc, #308]	; (80028f4 <HAL_GPIO_Init+0x328>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_GPIO_Init+0x212>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4c      	ldr	r2, [pc, #304]	; (80028f8 <HAL_GPIO_Init+0x32c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x20e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4b      	ldr	r2, [pc, #300]	; (80028fc <HAL_GPIO_Init+0x330>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_GPIO_Init+0x20a>
 80027d2:	2307      	movs	r3, #7
 80027d4:	e00e      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027d6:	2308      	movs	r3, #8
 80027d8:	e00c      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027da:	2306      	movs	r3, #6
 80027dc:	e00a      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027de:	2305      	movs	r3, #5
 80027e0:	e008      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027e2:	2304      	movs	r3, #4
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027e6:	2303      	movs	r3, #3
 80027e8:	e004      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e002      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027f2:	2300      	movs	r3, #0
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	f002 0203 	and.w	r2, r2, #3
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	4093      	lsls	r3, r2
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002804:	4935      	ldr	r1, [pc, #212]	; (80028dc <HAL_GPIO_Init+0x310>)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	089b      	lsrs	r3, r3, #2
 800280a:	3302      	adds	r3, #2
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_GPIO_Init+0x334>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002836:	4a32      	ldr	r2, [pc, #200]	; (8002900 <HAL_GPIO_Init+0x334>)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800283c:	4b30      	ldr	r3, [pc, #192]	; (8002900 <HAL_GPIO_Init+0x334>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002860:	4a27      	ldr	r2, [pc, #156]	; (8002900 <HAL_GPIO_Init+0x334>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <HAL_GPIO_Init+0x334>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288a:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <HAL_GPIO_Init+0x334>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_GPIO_Init+0x334>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b4:	4a12      	ldr	r2, [pc, #72]	; (8002900 <HAL_GPIO_Init+0x334>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3301      	adds	r3, #1
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b0f      	cmp	r3, #15
 80028c4:	f67f ae90 	bls.w	80025e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40013800 	.word	0x40013800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40020400 	.word	0x40020400
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020c00 	.word	0x40020c00
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40021400 	.word	0x40021400
 80028f8:	40021800 	.word	0x40021800
 80028fc:	40021c00 	.word	0x40021c00
 8002900:	40013c00 	.word	0x40013c00

08002904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]
 8002910:	4613      	mov	r3, r2
 8002912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002914:	787b      	ldrb	r3, [r7, #1]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002920:	e003      	b.n	800292a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	041a      	lsls	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	619a      	str	r2, [r3, #24]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002948:	887a      	ldrh	r2, [r7, #2]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	041a      	lsls	r2, r3, #16
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43d9      	mvns	r1, r3
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	400b      	ands	r3, r1
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	619a      	str	r2, [r3, #24]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800296a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296c:	b08f      	sub	sp, #60	; 0x3c
 800296e:	af0a      	add	r7, sp, #40	; 0x28
 8002970:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e10f      	b.n	8002b9c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f014 fa98 	bl	8016ecc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2203      	movs	r2, #3
 80029a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f002 fb0b 	bl	8004fd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	687e      	ldr	r6, [r7, #4]
 80029c8:	466d      	mov	r5, sp
 80029ca:	f106 0410 	add.w	r4, r6, #16
 80029ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029da:	e885 0003 	stmia.w	r5, {r0, r1}
 80029de:	1d33      	adds	r3, r6, #4
 80029e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e2:	6838      	ldr	r0, [r7, #0]
 80029e4:	f002 f9e2 	bl	8004dac <USB_CoreInit>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0d0      	b.n	8002b9c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 faf9 	bl	8004ff8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	e04a      	b.n	8002aa2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	333d      	adds	r3, #61	; 0x3d
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	333c      	adds	r3, #60	; 0x3c
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	b298      	uxth	r0, r3
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	3342      	adds	r3, #66	; 0x42
 8002a48:	4602      	mov	r2, r0
 8002a4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	333f      	adds	r3, #63	; 0x3f
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3344      	adds	r3, #68	; 0x44
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	3348      	adds	r3, #72	; 0x48
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	3350      	adds	r3, #80	; 0x50
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d3af      	bcc.n	8002a0c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e044      	b.n	8002b3c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d3b5      	bcc.n	8002ab2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	687e      	ldr	r6, [r7, #4]
 8002b4e:	466d      	mov	r5, sp
 8002b50:	f106 0410 	add.w	r4, r6, #16
 8002b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b60:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b64:	1d33      	adds	r3, r6, #4
 8002b66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b68:	6838      	ldr	r0, [r7, #0]
 8002b6a:	f002 fa6f 	bl	800504c <USB_DevInit>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e00d      	b.n	8002b9c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f003 fab7 	bl	8006108 <USB_DevDisconnect>

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ba4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_PCD_Start+0x1c>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e020      	b.n	8002c02 <HAL_PCD_Start+0x5e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d109      	bne.n	8002be4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d005      	beq.n	8002be4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f002 f9e3 	bl	8004fb4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f003 fa67 	bl	80060c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c0a:	b590      	push	{r4, r7, lr}
 8002c0c:	b08d      	sub	sp, #52	; 0x34
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 fb25 	bl	8006270 <USB_GetMode>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f040 839d 	bne.w	8003368 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 fa89 	bl	800614a <USB_ReadInterrupts>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8393 	beq.w	8003366 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 fa80 	bl	800614a <USB_ReadInterrupts>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d107      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f002 0202 	and.w	r2, r2, #2
 8002c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 fa6e 	bl	800614a <USB_ReadInterrupts>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d161      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f003 020f 	and.w	r2, r3, #15
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	0c5b      	lsrs	r3, r3, #17
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d124      	bne.n	8002cfe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d035      	beq.n	8002d2c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	6a38      	ldr	r0, [r7, #32]
 8002cd4:	f003 f8d4 	bl	8005e80 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ce4:	441a      	add	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cf6:	441a      	add	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	619a      	str	r2, [r3, #24]
 8002cfc:	e016      	b.n	8002d2c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	0c5b      	lsrs	r3, r3, #17
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	2b06      	cmp	r3, #6
 8002d08:	d110      	bne.n	8002d2c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d10:	2208      	movs	r2, #8
 8002d12:	4619      	mov	r1, r3
 8002d14:	6a38      	ldr	r0, [r7, #32]
 8002d16:	f003 f8b3 	bl	8005e80 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d26:	441a      	add	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0210 	orr.w	r2, r2, #16
 8002d3a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 fa02 	bl	800614a <USB_ReadInterrupts>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d50:	d16e      	bne.n	8002e30 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 fa08 	bl	8006170 <USB_ReadDevAllOutEpInterrupt>
 8002d60:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d62:	e062      	b.n	8002e2a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d057      	beq.n	8002e1e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 fa2d 	bl	80061d8 <USB_ReadDevOutEPInterrupt>
 8002d7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00c      	beq.n	8002da4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d96:	461a      	mov	r2, r3
 8002d98:	2301      	movs	r3, #1
 8002d9a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fdb0 	bl	8003904 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00c      	beq.n	8002dc8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 feaa 	bl	8003b1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dde:	461a      	mov	r2, r3
 8002de0:	2310      	movs	r3, #16
 8002de2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e16:	461a      	mov	r2, r3
 8002e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e1c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	3301      	adds	r3, #1
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d199      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f003 f988 	bl	800614a <USB_ReadInterrupts>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e44:	f040 80c0 	bne.w	8002fc8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 f9a9 	bl	80061a4 <USB_ReadDevAllInEpInterrupt>
 8002e52:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e58:	e0b2      	b.n	8002fc0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80a7 	beq.w	8002fb4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 f9cf 	bl	8006214 <USB_ReadDevInEPInterrupt>
 8002e76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d057      	beq.n	8002f32 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	2201      	movs	r2, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69f9      	ldr	r1, [r7, #28]
 8002e9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d132      	bne.n	8002f26 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	3348      	adds	r3, #72	; 0x48
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4403      	add	r3, r0
 8002ee0:	3344      	adds	r3, #68	; 0x44
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4419      	add	r1, r3
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4403      	add	r3, r0
 8002ef4:	3348      	adds	r3, #72	; 0x48
 8002ef6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d113      	bne.n	8002f26 <HAL_PCD_IRQHandler+0x31c>
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3350      	adds	r3, #80	; 0x50
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d108      	bne.n	8002f26 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2101      	movs	r1, #1
 8002f22:	f003 f9d7 	bl	80062d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f014 f84e 	bl	8016fce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f64:	461a      	mov	r2, r3
 8002f66:	2310      	movs	r3, #16
 8002f68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f80:	461a      	mov	r2, r3
 8002f82:	2340      	movs	r3, #64	; 0x40
 8002f84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fc1b 	bl	80037ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	085b      	lsrs	r3, r3, #1
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f47f af49 	bne.w	8002e5a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 f8bc 	bl	800614a <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fdc:	d122      	bne.n	8003024 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d108      	bne.n	800300e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003004:	2100      	movs	r1, #0
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fe26 	bl	8003c58 <HAL_PCDEx_LPM_Callback>
 800300c:	e002      	b.n	8003014 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f014 f854 	bl	80170bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003022:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f003 f88e 	bl	800614a <USB_ReadInterrupts>
 800302e:	4603      	mov	r3, r0
 8003030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003038:	d112      	bne.n	8003060 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b01      	cmp	r3, #1
 8003048:	d102      	bne.n	8003050 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f014 f810 	bl	8017070 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800305e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f003 f870 	bl	800614a <USB_ReadInterrupts>
 800306a:	4603      	mov	r3, r0
 800306c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003074:	f040 80c7 	bne.w	8003206 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	69fa      	ldr	r2, [r7, #28]
 8003082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2110      	movs	r1, #16
 8003092:	4618      	mov	r0, r3
 8003094:	f002 f93e 	bl	8005314 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309c:	e056      	b.n	800314c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800309e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030aa:	461a      	mov	r2, r3
 80030ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c2:	0151      	lsls	r1, r2, #5
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	440a      	add	r2, r1
 80030c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030d0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e2:	0151      	lsls	r1, r2, #5
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	440a      	add	r2, r1
 80030e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fe:	461a      	mov	r2, r3
 8003100:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003104:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003116:	0151      	lsls	r1, r2, #5
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	440a      	add	r2, r1
 800311c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003120:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003124:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003136:	0151      	lsls	r1, r2, #5
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	440a      	add	r2, r1
 800313c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003140:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003144:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	3301      	adds	r3, #1
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003152:	429a      	cmp	r2, r3
 8003154:	d3a3      	bcc.n	800309e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003164:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003168:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	2b00      	cmp	r3, #0
 8003170:	d016      	beq.n	80031a0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003182:	f043 030b 	orr.w	r3, r3, #11
 8003186:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003198:	f043 030b 	orr.w	r3, r3, #11
 800319c:	6453      	str	r3, [r2, #68]	; 0x44
 800319e:	e015      	b.n	80031cc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031b2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c6:	f043 030b 	orr.w	r3, r3, #11
 80031ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031f0:	461a      	mov	r2, r3
 80031f2:	f003 f86f 	bl	80062d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003204:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f002 ff9d 	bl	800614a <USB_ReadInterrupts>
 8003210:	4603      	mov	r3, r0
 8003212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321a:	d124      	bne.n	8003266 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f003 f833 	bl	800628c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f002 f8d3 	bl	80053d6 <USB_GetDevSpeed>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681c      	ldr	r4, [r3, #0]
 800323c:	f001 f92c 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 8003240:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	4620      	mov	r0, r4
 800324c:	f001 fe10 	bl	8004e70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f013 fee4 	bl	801701e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003264:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f002 ff6d 	bl	800614a <USB_ReadInterrupts>
 8003270:	4603      	mov	r3, r0
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b08      	cmp	r3, #8
 8003278:	d10a      	bne.n	8003290 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f013 fec1 	bl	8017002 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f002 0208 	and.w	r2, r2, #8
 800328e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f002 ff58 	bl	800614a <USB_ReadInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a4:	d10f      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	4619      	mov	r1, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f013 ff23 	bl	80170fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f002 ff3d 	bl	800614a <USB_ReadInterrupts>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032da:	d10f      	bne.n	80032fc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	4619      	mov	r1, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f013 fef6 	bl	80170d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80032fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f002 ff22 	bl	800614a <USB_ReadInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800330c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003310:	d10a      	bne.n	8003328 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f013 ff04 	bl	8017120 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003326:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f002 ff0c 	bl	800614a <USB_ReadInterrupts>
 8003332:	4603      	mov	r3, r0
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b04      	cmp	r3, #4
 800333a:	d115      	bne.n	8003368 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f013 fef4 	bl	801713c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	430a      	orrs	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	e000      	b.n	8003368 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003366:	bf00      	nop
    }
  }
}
 8003368:	3734      	adds	r7, #52	; 0x34
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}

0800336e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_PCD_SetAddress+0x1a>
 8003384:	2302      	movs	r3, #2
 8003386:	e013      	b.n	80033b0 <HAL_PCD_SetAddress+0x42>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f002 fe6a 	bl	800607a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	70fb      	strb	r3, [r7, #3]
 80033ca:	460b      	mov	r3, r1
 80033cc:	803b      	strh	r3, [r7, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da0f      	bge.n	80033fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	f003 020f 	and.w	r2, r3, #15
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	3338      	adds	r3, #56	; 0x38
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	3304      	adds	r3, #4
 80033f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	705a      	strb	r2, [r3, #1]
 80033fc:	e00f      	b.n	800341e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	f003 020f 	and.w	r2, r3, #15
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	3304      	adds	r3, #4
 8003416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800342a:	883a      	ldrh	r2, [r7, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	78ba      	ldrb	r2, [r7, #2]
 8003434:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	785b      	ldrb	r3, [r3, #1]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d004      	beq.n	8003448 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003448:	78bb      	ldrb	r3, [r7, #2]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d102      	bne.n	8003454 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_PCD_EP_Open+0xaa>
 800345e:	2302      	movs	r3, #2
 8003460:	e00e      	b.n	8003480 <HAL_PCD_EP_Open+0xc8>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	4618      	mov	r0, r3
 8003472:	f001 ffd5 	bl	8005420 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800347e:	7afb      	ldrb	r3, [r7, #11]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003498:	2b00      	cmp	r3, #0
 800349a:	da0f      	bge.n	80034bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	f003 020f 	and.w	r2, r3, #15
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	3338      	adds	r3, #56	; 0x38
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	3304      	adds	r3, #4
 80034b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	705a      	strb	r2, [r3, #1]
 80034ba:	e00f      	b.n	80034dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	f003 020f 	and.w	r2, r3, #15
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	3304      	adds	r3, #4
 80034d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_PCD_EP_Close+0x6e>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e00e      	b.n	8003514 <HAL_PCD_EP_Close+0x8c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68f9      	ldr	r1, [r7, #12]
 8003504:	4618      	mov	r0, r3
 8003506:	f002 f813 	bl	8005530 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	460b      	mov	r3, r1
 800352a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800352c:	7afb      	ldrb	r3, [r7, #11]
 800352e:	f003 020f 	and.w	r2, r3, #15
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4413      	add	r3, r2
 8003542:	3304      	adds	r3, #4
 8003544:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2200      	movs	r2, #0
 800355c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800355e:	7afb      	ldrb	r3, [r7, #11]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	b2da      	uxtb	r2, r3
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d102      	bne.n	8003578 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003578:	7afb      	ldrb	r3, [r7, #11]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	6979      	ldr	r1, [r7, #20]
 8003590:	f002 faee 	bl	8005b70 <USB_EP0StartXfer>
 8003594:	e008      	b.n	80035a8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	6979      	ldr	r1, [r7, #20]
 80035a4:	f002 f8a0 	bl	80056e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	f003 020f 	and.w	r2, r3, #15
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80035d4:	681b      	ldr	r3, [r3, #0]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	460b      	mov	r3, r1
 80035f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f2:	7afb      	ldrb	r3, [r7, #11]
 80035f4:	f003 020f 	and.w	r2, r3, #15
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	3338      	adds	r3, #56	; 0x38
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4413      	add	r3, r2
 8003606:	3304      	adds	r3, #4
 8003608:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2201      	movs	r2, #1
 8003620:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003622:	7afb      	ldrb	r3, [r7, #11]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	b2da      	uxtb	r2, r3
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d102      	bne.n	800363c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800363c:	7afb      	ldrb	r3, [r7, #11]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	f002 fa8c 	bl	8005b70 <USB_EP0StartXfer>
 8003658:	e008      	b.n	800366c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	6979      	ldr	r1, [r7, #20]
 8003668:	f002 f83e 	bl	80056e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	f003 020f 	and.w	r2, r3, #15
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	d901      	bls.n	8003694 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e050      	b.n	8003736 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003698:	2b00      	cmp	r3, #0
 800369a:	da0f      	bge.n	80036bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	f003 020f 	and.w	r2, r3, #15
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	3338      	adds	r3, #56	; 0x38
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	3304      	adds	r3, #4
 80036b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	705a      	strb	r2, [r3, #1]
 80036ba:	e00d      	b.n	80036d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	3304      	adds	r3, #4
 80036d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2201      	movs	r2, #1
 80036dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_PCD_EP_SetStall+0x82>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e01e      	b.n	8003736 <HAL_PCD_EP_SetStall+0xc0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68f9      	ldr	r1, [r7, #12]
 8003706:	4618      	mov	r0, r3
 8003708:	f002 fbe3 	bl	8005ed2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	b2d9      	uxtb	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003726:	461a      	mov	r2, r3
 8003728:	f002 fdd4 	bl	80062d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	f003 020f 	and.w	r2, r3, #15
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	d901      	bls.n	800375c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e042      	b.n	80037e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800375c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003760:	2b00      	cmp	r3, #0
 8003762:	da0f      	bge.n	8003784 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	f003 020f 	and.w	r2, r3, #15
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	3338      	adds	r3, #56	; 0x38
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	3304      	adds	r3, #4
 800377a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	705a      	strb	r2, [r3, #1]
 8003782:	e00f      	b.n	80037a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	f003 020f 	and.w	r2, r3, #15
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	3304      	adds	r3, #4
 800379c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_PCD_EP_ClrStall+0x86>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e00e      	b.n	80037e2 <HAL_PCD_EP_ClrStall+0xa4>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68f9      	ldr	r1, [r7, #12]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f002 fbeb 	bl	8005fae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b08a      	sub	sp, #40	; 0x28
 80037ee:	af02      	add	r7, sp, #8
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	3338      	adds	r3, #56	; 0x38
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	3304      	adds	r3, #4
 8003810:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	429a      	cmp	r2, r3
 800381c:	d901      	bls.n	8003822 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e06c      	b.n	80038fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	429a      	cmp	r2, r3
 8003836:	d902      	bls.n	800383e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3303      	adds	r3, #3
 8003842:	089b      	lsrs	r3, r3, #2
 8003844:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003846:	e02b      	b.n	80038a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	429a      	cmp	r2, r3
 800385c:	d902      	bls.n	8003864 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	3303      	adds	r3, #3
 8003868:	089b      	lsrs	r3, r3, #2
 800386a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	68d9      	ldr	r1, [r3, #12]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800387c:	b2db      	uxtb	r3, r3
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	4603      	mov	r3, r0
 8003882:	6978      	ldr	r0, [r7, #20]
 8003884:	f002 fac7 	bl	8005e16 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	441a      	add	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	441a      	add	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d809      	bhi.n	80038ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038be:	429a      	cmp	r2, r3
 80038c0:	d203      	bcs.n	80038ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1be      	bne.n	8003848 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d811      	bhi.n	80038fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	2201      	movs	r2, #1
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	6939      	ldr	r1, [r7, #16]
 80038f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038f6:	4013      	ands	r3, r2
 80038f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	333c      	adds	r3, #60	; 0x3c
 800391c:	3304      	adds	r3, #4
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b01      	cmp	r3, #1
 8003938:	f040 80a0 	bne.w	8003a7c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d015      	beq.n	8003972 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a72      	ldr	r2, [pc, #456]	; (8003b14 <PCD_EP_OutXfrComplete_int+0x210>)
 800394a:	4293      	cmp	r3, r2
 800394c:	f240 80dd 	bls.w	8003b0a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80d7 	beq.w	8003b0a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003968:	461a      	mov	r2, r3
 800396a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800396e:	6093      	str	r3, [r2, #8]
 8003970:	e0cb      	b.n	8003b0a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d009      	beq.n	8003990 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003988:	461a      	mov	r2, r3
 800398a:	2320      	movs	r3, #32
 800398c:	6093      	str	r3, [r2, #8]
 800398e:	e0bc      	b.n	8003b0a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 80b7 	bne.w	8003b0a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a5d      	ldr	r2, [pc, #372]	; (8003b14 <PCD_EP_OutXfrComplete_int+0x210>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d90f      	bls.n	80039c4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ba:	461a      	mov	r2, r3
 80039bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c0:	6093      	str	r3, [r2, #8]
 80039c2:	e0a2      	b.n	8003b0a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039d6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	0159      	lsls	r1, r3, #5
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	440b      	add	r3, r1
 80039e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80039ea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4403      	add	r3, r0
 80039fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80039fe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4403      	add	r3, r0
 8003a22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4419      	add	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4403      	add	r3, r0
 8003a38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a3c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d114      	bne.n	8003a6e <PCD_EP_OutXfrComplete_int+0x16a>
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d108      	bne.n	8003a6e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a66:	461a      	mov	r2, r3
 8003a68:	2101      	movs	r1, #1
 8003a6a:	f002 fc33 	bl	80062d4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	4619      	mov	r1, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f013 fa8f 	bl	8016f98 <HAL_PCD_DataOutStageCallback>
 8003a7a:	e046      	b.n	8003b0a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <PCD_EP_OutXfrComplete_int+0x214>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d124      	bne.n	8003ace <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aa0:	6093      	str	r3, [r2, #8]
 8003aa2:	e032      	b.n	8003b0a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aba:	461a      	mov	r2, r3
 8003abc:	2320      	movs	r3, #32
 8003abe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f013 fa66 	bl	8016f98 <HAL_PCD_DataOutStageCallback>
 8003acc:	e01d      	b.n	8003b0a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d114      	bne.n	8003afe <PCD_EP_OutXfrComplete_int+0x1fa>
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d108      	bne.n	8003afe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003af6:	461a      	mov	r2, r3
 8003af8:	2100      	movs	r1, #0
 8003afa:	f002 fbeb 	bl	80062d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	4619      	mov	r1, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f013 fa47 	bl	8016f98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	4f54300a 	.word	0x4f54300a
 8003b18:	4f54310a 	.word	0x4f54310a

08003b1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	333c      	adds	r3, #60	; 0x3c
 8003b34:	3304      	adds	r3, #4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d90e      	bls.n	8003b70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d009      	beq.n	8003b70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f013 f9ff 	bl	8016f74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d90c      	bls.n	8003b98 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d108      	bne.n	8003b98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b90:	461a      	mov	r2, r3
 8003b92:	2101      	movs	r1, #1
 8003b94:	f002 fb9e 	bl	80062d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	4f54300a 	.word	0x4f54300a

08003ba8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	70fb      	strb	r3, [r7, #3]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d107      	bne.n	8003bd6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bc6:	883b      	ldrh	r3, [r7, #0]
 8003bc8:	0419      	lsls	r1, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bd4:	e028      	b.n	8003c28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	4413      	add	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	e00d      	b.n	8003c06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	3340      	adds	r3, #64	; 0x40
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	3301      	adds	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
 8003c06:	7bfa      	ldrb	r2, [r7, #15]
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d3ec      	bcc.n	8003bea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c10:	883b      	ldrh	r3, [r7, #0]
 8003c12:	0418      	lsls	r0, r3, #16
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6819      	ldr	r1, [r3, #0]
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	4302      	orrs	r2, r0
 8003c20:	3340      	adds	r3, #64	; 0x40
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	887a      	ldrh	r2, [r7, #2]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e264      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d075      	beq.n	8003d7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c8e:	4ba3      	ldr	r3, [pc, #652]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d00c      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9a:	4ba0      	ldr	r3, [pc, #640]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d112      	bne.n	8003ccc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ca6:	4b9d      	ldr	r3, [pc, #628]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb4:	4b99      	ldr	r3, [pc, #612]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d05b      	beq.n	8003d78 <HAL_RCC_OscConfig+0x108>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d157      	bne.n	8003d78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e23f      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd4:	d106      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x74>
 8003cd6:	4b91      	ldr	r3, [pc, #580]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a90      	ldr	r2, [pc, #576]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e01d      	b.n	8003d20 <HAL_RCC_OscConfig+0xb0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x98>
 8003cee:	4b8b      	ldr	r3, [pc, #556]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a8a      	ldr	r2, [pc, #552]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	4b88      	ldr	r3, [pc, #544]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a87      	ldr	r2, [pc, #540]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e00b      	b.n	8003d20 <HAL_RCC_OscConfig+0xb0>
 8003d08:	4b84      	ldr	r3, [pc, #528]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a83      	ldr	r2, [pc, #524]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	4b81      	ldr	r3, [pc, #516]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a80      	ldr	r2, [pc, #512]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d013      	beq.n	8003d50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fd f962 	bl	8000ff0 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fd f95e 	bl	8000ff0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e204      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	4b76      	ldr	r3, [pc, #472]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0xc0>
 8003d4e:	e014      	b.n	8003d7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fd f94e 	bl	8000ff0 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fd f94a 	bl	8000ff0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e1f0      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	4b6c      	ldr	r3, [pc, #432]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0xe8>
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d063      	beq.n	8003e4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d86:	4b65      	ldr	r3, [pc, #404]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d92:	4b62      	ldr	r3, [pc, #392]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d11c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9e:	4b5f      	ldr	r3, [pc, #380]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d116      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003daa:	4b5c      	ldr	r3, [pc, #368]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x152>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e1c4      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc2:	4b56      	ldr	r3, [pc, #344]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4952      	ldr	r1, [pc, #328]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd6:	e03a      	b.n	8003e4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d020      	beq.n	8003e22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de0:	4b4f      	ldr	r3, [pc, #316]	; (8003f20 <HAL_RCC_OscConfig+0x2b0>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7fd f903 	bl	8000ff0 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dee:	f7fd f8ff 	bl	8000ff0 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e1a5      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	4b46      	ldr	r3, [pc, #280]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0c:	4b43      	ldr	r3, [pc, #268]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4940      	ldr	r1, [pc, #256]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	600b      	str	r3, [r1, #0]
 8003e20:	e015      	b.n	8003e4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e22:	4b3f      	ldr	r3, [pc, #252]	; (8003f20 <HAL_RCC_OscConfig+0x2b0>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fd f8e2 	bl	8000ff0 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e30:	f7fd f8de 	bl	8000ff0 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e184      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d030      	beq.n	8003ebc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d016      	beq.n	8003e90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e62:	4b30      	ldr	r3, [pc, #192]	; (8003f24 <HAL_RCC_OscConfig+0x2b4>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7fd f8c2 	bl	8000ff0 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e70:	f7fd f8be 	bl	8000ff0 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e164      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x200>
 8003e8e:	e015      	b.n	8003ebc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e90:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <HAL_RCC_OscConfig+0x2b4>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e96:	f7fd f8ab 	bl	8000ff0 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e9e:	f7fd f8a7 	bl	8000ff0 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e14d      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb0:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a0 	beq.w	800400a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ece:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10f      	bne.n	8003efa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_RCC_OscConfig+0x2b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d121      	bne.n	8003f4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f06:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_RCC_OscConfig+0x2b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <HAL_RCC_OscConfig+0x2b8>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f12:	f7fd f86d 	bl	8000ff0 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	e011      	b.n	8003f3e <HAL_RCC_OscConfig+0x2ce>
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	42470000 	.word	0x42470000
 8003f24:	42470e80 	.word	0x42470e80
 8003f28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2c:	f7fd f860 	bl	8000ff0 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e106      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3e:	4b85      	ldr	r3, [pc, #532]	; (8004154 <HAL_RCC_OscConfig+0x4e4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d106      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2f0>
 8003f52:	4b81      	ldr	r3, [pc, #516]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	4a80      	ldr	r2, [pc, #512]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5e:	e01c      	b.n	8003f9a <HAL_RCC_OscConfig+0x32a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d10c      	bne.n	8003f82 <HAL_RCC_OscConfig+0x312>
 8003f68:	4b7b      	ldr	r3, [pc, #492]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a7a      	ldr	r2, [pc, #488]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f6e:	f043 0304 	orr.w	r3, r3, #4
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	4b78      	ldr	r3, [pc, #480]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	4a77      	ldr	r2, [pc, #476]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f80:	e00b      	b.n	8003f9a <HAL_RCC_OscConfig+0x32a>
 8003f82:	4b75      	ldr	r3, [pc, #468]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a74      	ldr	r2, [pc, #464]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	4b72      	ldr	r3, [pc, #456]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a71      	ldr	r2, [pc, #452]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f94:	f023 0304 	bic.w	r3, r3, #4
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d015      	beq.n	8003fce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa2:	f7fd f825 	bl	8000ff0 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003faa:	f7fd f821 	bl	8000ff0 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e0c5      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc0:	4b65      	ldr	r3, [pc, #404]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ee      	beq.n	8003faa <HAL_RCC_OscConfig+0x33a>
 8003fcc:	e014      	b.n	8003ff8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fce:	f7fd f80f 	bl	8000ff0 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fd f80b 	bl	8000ff0 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e0af      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fec:	4b5a      	ldr	r3, [pc, #360]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ee      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d105      	bne.n	800400a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffe:	4b56      	ldr	r3, [pc, #344]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	4a55      	ldr	r2, [pc, #340]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8004004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 809b 	beq.w	800414a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004014:	4b50      	ldr	r3, [pc, #320]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b08      	cmp	r3, #8
 800401e:	d05c      	beq.n	80040da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d141      	bne.n	80040ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004028:	4b4c      	ldr	r3, [pc, #304]	; (800415c <HAL_RCC_OscConfig+0x4ec>)
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402e:	f7fc ffdf 	bl	8000ff0 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004036:	f7fc ffdb 	bl	8000ff0 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e081      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004048:	4b43      	ldr	r3, [pc, #268]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	019b      	lsls	r3, r3, #6
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	3b01      	subs	r3, #1
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	4937      	ldr	r1, [pc, #220]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407e:	4b37      	ldr	r3, [pc, #220]	; (800415c <HAL_RCC_OscConfig+0x4ec>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fc ffb4 	bl	8000ff0 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408c:	f7fc ffb0 	bl	8000ff0 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e056      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409e:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x41c>
 80040aa:	e04e      	b.n	800414a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ac:	4b2b      	ldr	r3, [pc, #172]	; (800415c <HAL_RCC_OscConfig+0x4ec>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b2:	f7fc ff9d 	bl	8000ff0 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fc ff99 	bl	8000ff0 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e03f      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040cc:	4b22      	ldr	r3, [pc, #136]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f0      	bne.n	80040ba <HAL_RCC_OscConfig+0x44a>
 80040d8:	e037      	b.n	800414a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e032      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040e6:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d028      	beq.n	8004146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d121      	bne.n	8004146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d11a      	bne.n	8004146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004116:	4013      	ands	r3, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800411c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800411e:	4293      	cmp	r3, r2
 8004120:	d111      	bne.n	8004146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	3b01      	subs	r3, #1
 8004130:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d107      	bne.n	8004146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40007000 	.word	0x40007000
 8004158:	40023800 	.word	0x40023800
 800415c:	42470060 	.word	0x42470060

08004160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0cc      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004174:	4b68      	ldr	r3, [pc, #416]	; (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d90c      	bls.n	800419c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b65      	ldr	r3, [pc, #404]	; (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b63      	ldr	r3, [pc, #396]	; (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0b8      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b4:	4b59      	ldr	r3, [pc, #356]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4a58      	ldr	r2, [pc, #352]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041cc:	4b53      	ldr	r3, [pc, #332]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4a52      	ldr	r2, [pc, #328]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d8:	4b50      	ldr	r3, [pc, #320]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	494d      	ldr	r1, [pc, #308]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d044      	beq.n	8004280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	4b47      	ldr	r3, [pc, #284]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d119      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e07f      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d003      	beq.n	800421e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421a:	2b03      	cmp	r3, #3
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421e:	4b3f      	ldr	r3, [pc, #252]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e06f      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422e:	4b3b      	ldr	r3, [pc, #236]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e067      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800423e:	4b37      	ldr	r3, [pc, #220]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4934      	ldr	r1, [pc, #208]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	4313      	orrs	r3, r2
 800424e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004250:	f7fc fece 	bl	8000ff0 <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	e00a      	b.n	800426e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004258:	f7fc feca 	bl	8000ff0 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	; 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e04f      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	4b2b      	ldr	r3, [pc, #172]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 020c 	and.w	r2, r3, #12
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	429a      	cmp	r2, r3
 800427e:	d1eb      	bne.n	8004258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004280:	4b25      	ldr	r3, [pc, #148]	; (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d20c      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b22      	ldr	r3, [pc, #136]	; (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b20      	ldr	r3, [pc, #128]	; (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e032      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b4:	4b19      	ldr	r3, [pc, #100]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4916      	ldr	r1, [pc, #88]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	490e      	ldr	r1, [pc, #56]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042e6:	f000 f821 	bl	800432c <HAL_RCC_GetSysClockFreq>
 80042ea:	4602      	mov	r2, r0
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	490a      	ldr	r1, [pc, #40]	; (8004320 <HAL_RCC_ClockConfig+0x1c0>)
 80042f8:	5ccb      	ldrb	r3, [r1, r3]
 80042fa:	fa22 f303 	lsr.w	r3, r2, r3
 80042fe:	4a09      	ldr	r2, [pc, #36]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc fe2e 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40023c00 	.word	0x40023c00
 800431c:	40023800 	.word	0x40023800
 8004320:	0801c07c 	.word	0x0801c07c
 8004324:	20000000 	.word	0x20000000
 8004328:	20000004 	.word	0x20000004

0800432c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800432c:	b5b0      	push	{r4, r5, r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004332:	2100      	movs	r1, #0
 8004334:	6079      	str	r1, [r7, #4]
 8004336:	2100      	movs	r1, #0
 8004338:	60f9      	str	r1, [r7, #12]
 800433a:	2100      	movs	r1, #0
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800433e:	2100      	movs	r1, #0
 8004340:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004342:	4952      	ldr	r1, [pc, #328]	; (800448c <HAL_RCC_GetSysClockFreq+0x160>)
 8004344:	6889      	ldr	r1, [r1, #8]
 8004346:	f001 010c 	and.w	r1, r1, #12
 800434a:	2908      	cmp	r1, #8
 800434c:	d00d      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x3e>
 800434e:	2908      	cmp	r1, #8
 8004350:	f200 8094 	bhi.w	800447c <HAL_RCC_GetSysClockFreq+0x150>
 8004354:	2900      	cmp	r1, #0
 8004356:	d002      	beq.n	800435e <HAL_RCC_GetSysClockFreq+0x32>
 8004358:	2904      	cmp	r1, #4
 800435a:	d003      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0x38>
 800435c:	e08e      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800435e:	4b4c      	ldr	r3, [pc, #304]	; (8004490 <HAL_RCC_GetSysClockFreq+0x164>)
 8004360:	60bb      	str	r3, [r7, #8]
       break;
 8004362:	e08e      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004364:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <HAL_RCC_GetSysClockFreq+0x168>)
 8004366:	60bb      	str	r3, [r7, #8]
      break;
 8004368:	e08b      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800436a:	4948      	ldr	r1, [pc, #288]	; (800448c <HAL_RCC_GetSysClockFreq+0x160>)
 800436c:	6849      	ldr	r1, [r1, #4]
 800436e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004372:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004374:	4945      	ldr	r1, [pc, #276]	; (800448c <HAL_RCC_GetSysClockFreq+0x160>)
 8004376:	6849      	ldr	r1, [r1, #4]
 8004378:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800437c:	2900      	cmp	r1, #0
 800437e:	d024      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004380:	4942      	ldr	r1, [pc, #264]	; (800448c <HAL_RCC_GetSysClockFreq+0x160>)
 8004382:	6849      	ldr	r1, [r1, #4]
 8004384:	0989      	lsrs	r1, r1, #6
 8004386:	4608      	mov	r0, r1
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004390:	f04f 0500 	mov.w	r5, #0
 8004394:	ea00 0204 	and.w	r2, r0, r4
 8004398:	ea01 0305 	and.w	r3, r1, r5
 800439c:	493d      	ldr	r1, [pc, #244]	; (8004494 <HAL_RCC_GetSysClockFreq+0x168>)
 800439e:	fb01 f003 	mul.w	r0, r1, r3
 80043a2:	2100      	movs	r1, #0
 80043a4:	fb01 f102 	mul.w	r1, r1, r2
 80043a8:	1844      	adds	r4, r0, r1
 80043aa:	493a      	ldr	r1, [pc, #232]	; (8004494 <HAL_RCC_GetSysClockFreq+0x168>)
 80043ac:	fba2 0101 	umull	r0, r1, r2, r1
 80043b0:	1863      	adds	r3, r4, r1
 80043b2:	4619      	mov	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	f7fb ff70 	bl	80002a0 <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4613      	mov	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e04a      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ca:	4b30      	ldr	r3, [pc, #192]	; (800448c <HAL_RCC_GetSysClockFreq+0x160>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	099b      	lsrs	r3, r3, #6
 80043d0:	461a      	mov	r2, r3
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043da:	f04f 0100 	mov.w	r1, #0
 80043de:	ea02 0400 	and.w	r4, r2, r0
 80043e2:	ea03 0501 	and.w	r5, r3, r1
 80043e6:	4620      	mov	r0, r4
 80043e8:	4629      	mov	r1, r5
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	014b      	lsls	r3, r1, #5
 80043f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043f8:	0142      	lsls	r2, r0, #5
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	1b00      	subs	r0, r0, r4
 8004400:	eb61 0105 	sbc.w	r1, r1, r5
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	018b      	lsls	r3, r1, #6
 800440e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004412:	0182      	lsls	r2, r0, #6
 8004414:	1a12      	subs	r2, r2, r0
 8004416:	eb63 0301 	sbc.w	r3, r3, r1
 800441a:	f04f 0000 	mov.w	r0, #0
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	00d9      	lsls	r1, r3, #3
 8004424:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004428:	00d0      	lsls	r0, r2, #3
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	1912      	adds	r2, r2, r4
 8004430:	eb45 0303 	adc.w	r3, r5, r3
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f04f 0100 	mov.w	r1, #0
 800443c:	0299      	lsls	r1, r3, #10
 800443e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004442:	0290      	lsls	r0, r2, #10
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	461a      	mov	r2, r3
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	f7fb ff24 	bl	80002a0 <__aeabi_uldivmod>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4613      	mov	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <HAL_RCC_GetSysClockFreq+0x160>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	3301      	adds	r3, #1
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	60bb      	str	r3, [r7, #8]
      break;
 800447a:	e002      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800447c:	4b04      	ldr	r3, [pc, #16]	; (8004490 <HAL_RCC_GetSysClockFreq+0x164>)
 800447e:	60bb      	str	r3, [r7, #8]
      break;
 8004480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004482:	68bb      	ldr	r3, [r7, #8]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bdb0      	pop	{r4, r5, r7, pc}
 800448c:	40023800 	.word	0x40023800
 8004490:	00f42400 	.word	0x00f42400
 8004494:	017d7840 	.word	0x017d7840

08004498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_GetHCLKFreq+0x14>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000000 	.word	0x20000000

080044b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e041      	b.n	8004546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fba0 	bl	8000c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f000 fa92 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d001      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e04e      	b.n	8004606 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a23      	ldr	r2, [pc, #140]	; (8004614 <HAL_TIM_Base_Start_IT+0xc4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d022      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004592:	d01d      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <HAL_TIM_Base_Start_IT+0xc8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d018      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1e      	ldr	r2, [pc, #120]	; (800461c <HAL_TIM_Base_Start_IT+0xcc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d013      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <HAL_TIM_Base_Start_IT+0xd0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00e      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <HAL_TIM_Base_Start_IT+0xd4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d009      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <HAL_TIM_Base_Start_IT+0xd8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x80>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a18      	ldr	r2, [pc, #96]	; (800462c <HAL_TIM_Base_Start_IT+0xdc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d111      	bne.n	80045f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d010      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0201 	orr.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f2:	e007      	b.n	8004604 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40010400 	.word	0x40010400
 8004628:	40014000 	.word	0x40014000
 800462c:	40001800 	.word	0x40001800

08004630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b02      	cmp	r3, #2
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0202 	mvn.w	r2, #2
 800465c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f9b2 	bl	80049dc <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f9a4 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f9b5 	bl	80049f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d122      	bne.n	80046e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d11b      	bne.n	80046e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0204 	mvn.w	r2, #4
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f988 	bl	80049dc <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f97a 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f98b 	bl	80049f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d122      	bne.n	8004734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d11b      	bne.n	8004734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0208 	mvn.w	r2, #8
 8004704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2204      	movs	r2, #4
 800470a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f95e 	bl	80049dc <HAL_TIM_IC_CaptureCallback>
 8004720:	e005      	b.n	800472e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f950 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f961 	bl	80049f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b10      	cmp	r3, #16
 8004740:	d122      	bne.n	8004788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b10      	cmp	r3, #16
 800474e:	d11b      	bne.n	8004788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0210 	mvn.w	r2, #16
 8004758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2208      	movs	r2, #8
 800475e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f934 	bl	80049dc <HAL_TIM_IC_CaptureCallback>
 8004774:	e005      	b.n	8004782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f926 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f937 	bl	80049f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b01      	cmp	r3, #1
 8004794:	d10e      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d107      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0201 	mvn.w	r2, #1
 80047ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fc f89e 	bl	80008f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b80      	cmp	r3, #128	; 0x80
 80047c0:	d10e      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047cc:	2b80      	cmp	r3, #128	; 0x80
 80047ce:	d107      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fadc 	bl	8004d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	d10e      	bne.n	800480c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d107      	bne.n	800480c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f8fc 	bl	8004a04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b20      	cmp	r3, #32
 8004818:	d10e      	bne.n	8004838 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b20      	cmp	r3, #32
 8004826:	d107      	bne.n	8004838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0220 	mvn.w	r2, #32
 8004830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 faa6 	bl	8004d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIM_ConfigClockSource+0x18>
 8004854:	2302      	movs	r3, #2
 8004856:	e0b3      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x180>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004876:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800487e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004890:	d03e      	beq.n	8004910 <HAL_TIM_ConfigClockSource+0xd0>
 8004892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004896:	f200 8087 	bhi.w	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 800489a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489e:	f000 8085 	beq.w	80049ac <HAL_TIM_ConfigClockSource+0x16c>
 80048a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a6:	d87f      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048a8:	2b70      	cmp	r3, #112	; 0x70
 80048aa:	d01a      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0xa2>
 80048ac:	2b70      	cmp	r3, #112	; 0x70
 80048ae:	d87b      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048b0:	2b60      	cmp	r3, #96	; 0x60
 80048b2:	d050      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x116>
 80048b4:	2b60      	cmp	r3, #96	; 0x60
 80048b6:	d877      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048b8:	2b50      	cmp	r3, #80	; 0x50
 80048ba:	d03c      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0xf6>
 80048bc:	2b50      	cmp	r3, #80	; 0x50
 80048be:	d873      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d058      	beq.n	8004976 <HAL_TIM_ConfigClockSource+0x136>
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d86f      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048c8:	2b30      	cmp	r3, #48	; 0x30
 80048ca:	d064      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x156>
 80048cc:	2b30      	cmp	r3, #48	; 0x30
 80048ce:	d86b      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d060      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x156>
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d867      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d05c      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x156>
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d05a      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80048e0:	e062      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6899      	ldr	r1, [r3, #8]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f000 f9ab 	bl	8004c4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004904:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	609a      	str	r2, [r3, #8]
      break;
 800490e:	e04e      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6899      	ldr	r1, [r3, #8]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f000 f994 	bl	8004c4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004932:	609a      	str	r2, [r3, #8]
      break;
 8004934:	e03b      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	461a      	mov	r2, r3
 8004944:	f000 f908 	bl	8004b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2150      	movs	r1, #80	; 0x50
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f961 	bl	8004c16 <TIM_ITRx_SetConfig>
      break;
 8004954:	e02b      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6859      	ldr	r1, [r3, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	461a      	mov	r2, r3
 8004964:	f000 f927 	bl	8004bb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2160      	movs	r1, #96	; 0x60
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f951 	bl	8004c16 <TIM_ITRx_SetConfig>
      break;
 8004974:	e01b      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	461a      	mov	r2, r3
 8004984:	f000 f8e8 	bl	8004b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2140      	movs	r1, #64	; 0x40
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f941 	bl	8004c16 <TIM_ITRx_SetConfig>
      break;
 8004994:	e00b      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f000 f938 	bl	8004c16 <TIM_ITRx_SetConfig>
        break;
 80049a6:	e002      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049a8:	bf00      	nop
 80049aa:	e000      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a40      	ldr	r2, [pc, #256]	; (8004b2c <TIM_Base_SetConfig+0x114>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d013      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a36:	d00f      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a3d      	ldr	r2, [pc, #244]	; (8004b30 <TIM_Base_SetConfig+0x118>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00b      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a3c      	ldr	r2, [pc, #240]	; (8004b34 <TIM_Base_SetConfig+0x11c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a3b      	ldr	r2, [pc, #236]	; (8004b38 <TIM_Base_SetConfig+0x120>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a3a      	ldr	r2, [pc, #232]	; (8004b3c <TIM_Base_SetConfig+0x124>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d108      	bne.n	8004a6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2f      	ldr	r2, [pc, #188]	; (8004b2c <TIM_Base_SetConfig+0x114>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d02b      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a78:	d027      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2c      	ldr	r2, [pc, #176]	; (8004b30 <TIM_Base_SetConfig+0x118>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d023      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2b      	ldr	r2, [pc, #172]	; (8004b34 <TIM_Base_SetConfig+0x11c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01f      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2a      	ldr	r2, [pc, #168]	; (8004b38 <TIM_Base_SetConfig+0x120>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01b      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a29      	ldr	r2, [pc, #164]	; (8004b3c <TIM_Base_SetConfig+0x124>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d017      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a28      	ldr	r2, [pc, #160]	; (8004b40 <TIM_Base_SetConfig+0x128>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a27      	ldr	r2, [pc, #156]	; (8004b44 <TIM_Base_SetConfig+0x12c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00f      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a26      	ldr	r2, [pc, #152]	; (8004b48 <TIM_Base_SetConfig+0x130>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00b      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <TIM_Base_SetConfig+0x134>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <TIM_Base_SetConfig+0x138>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d003      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <TIM_Base_SetConfig+0x13c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d108      	bne.n	8004adc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <TIM_Base_SetConfig+0x114>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <TIM_Base_SetConfig+0xf8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <TIM_Base_SetConfig+0x124>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d103      	bne.n	8004b18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	615a      	str	r2, [r3, #20]
}
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40000800 	.word	0x40000800
 8004b38:	40000c00 	.word	0x40000c00
 8004b3c:	40010400 	.word	0x40010400
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800
 8004b4c:	40001800 	.word	0x40001800
 8004b50:	40001c00 	.word	0x40001c00
 8004b54:	40002000 	.word	0x40002000

08004b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f023 0201 	bic.w	r2, r3, #1
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f023 030a 	bic.w	r3, r3, #10
 8004b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b087      	sub	sp, #28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0210 	bic.w	r2, r3, #16
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	031b      	lsls	r3, r3, #12
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b085      	sub	sp, #20
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f043 0307 	orr.w	r3, r3, #7
 8004c38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	609a      	str	r2, [r3, #8]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	021a      	lsls	r2, r3, #8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	609a      	str	r2, [r3, #8]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e05a      	b.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a21      	ldr	r2, [pc, #132]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d022      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf0:	d01d      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d018      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1a      	ldr	r2, [pc, #104]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00e      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a18      	ldr	r2, [pc, #96]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a17      	ldr	r2, [pc, #92]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d10c      	bne.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40010400 	.word	0x40010400
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40001800 	.word	0x40001800

08004d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dac:	b084      	sub	sp, #16
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	f107 001c 	add.w	r0, r7, #28
 8004dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d122      	bne.n	8004e0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d105      	bne.n	8004dfe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f001 fac6 	bl	8006390 <USB_CoreReset>
 8004e04:	4603      	mov	r3, r0
 8004e06:	73fb      	strb	r3, [r7, #15]
 8004e08:	e01a      	b.n	8004e40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f001 faba 	bl	8006390 <USB_CoreReset>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38
 8004e32:	e005      	b.n	8004e40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d10b      	bne.n	8004e5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f043 0206 	orr.w	r2, r3, #6
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e6a:	b004      	add	sp, #16
 8004e6c:	4770      	bx	lr
	...

08004e70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d165      	bne.n	8004f50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4a41      	ldr	r2, [pc, #260]	; (8004f8c <USB_SetTurnaroundTime+0x11c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d906      	bls.n	8004e9a <USB_SetTurnaroundTime+0x2a>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a40      	ldr	r2, [pc, #256]	; (8004f90 <USB_SetTurnaroundTime+0x120>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d202      	bcs.n	8004e9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e94:	230f      	movs	r3, #15
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e062      	b.n	8004f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4a3c      	ldr	r2, [pc, #240]	; (8004f90 <USB_SetTurnaroundTime+0x120>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d306      	bcc.n	8004eb0 <USB_SetTurnaroundTime+0x40>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a3b      	ldr	r2, [pc, #236]	; (8004f94 <USB_SetTurnaroundTime+0x124>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d202      	bcs.n	8004eb0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004eaa:	230e      	movs	r3, #14
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e057      	b.n	8004f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4a38      	ldr	r2, [pc, #224]	; (8004f94 <USB_SetTurnaroundTime+0x124>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d306      	bcc.n	8004ec6 <USB_SetTurnaroundTime+0x56>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a37      	ldr	r2, [pc, #220]	; (8004f98 <USB_SetTurnaroundTime+0x128>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d202      	bcs.n	8004ec6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ec0:	230d      	movs	r3, #13
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	e04c      	b.n	8004f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4a33      	ldr	r2, [pc, #204]	; (8004f98 <USB_SetTurnaroundTime+0x128>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d306      	bcc.n	8004edc <USB_SetTurnaroundTime+0x6c>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4a32      	ldr	r2, [pc, #200]	; (8004f9c <USB_SetTurnaroundTime+0x12c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d802      	bhi.n	8004edc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ed6:	230c      	movs	r3, #12
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e041      	b.n	8004f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4a2f      	ldr	r2, [pc, #188]	; (8004f9c <USB_SetTurnaroundTime+0x12c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d906      	bls.n	8004ef2 <USB_SetTurnaroundTime+0x82>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a2e      	ldr	r2, [pc, #184]	; (8004fa0 <USB_SetTurnaroundTime+0x130>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d802      	bhi.n	8004ef2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004eec:	230b      	movs	r3, #11
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e036      	b.n	8004f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4a2a      	ldr	r2, [pc, #168]	; (8004fa0 <USB_SetTurnaroundTime+0x130>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d906      	bls.n	8004f08 <USB_SetTurnaroundTime+0x98>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4a29      	ldr	r2, [pc, #164]	; (8004fa4 <USB_SetTurnaroundTime+0x134>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d802      	bhi.n	8004f08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f02:	230a      	movs	r3, #10
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e02b      	b.n	8004f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4a26      	ldr	r2, [pc, #152]	; (8004fa4 <USB_SetTurnaroundTime+0x134>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d906      	bls.n	8004f1e <USB_SetTurnaroundTime+0xae>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4a25      	ldr	r2, [pc, #148]	; (8004fa8 <USB_SetTurnaroundTime+0x138>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d202      	bcs.n	8004f1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f18:	2309      	movs	r3, #9
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e020      	b.n	8004f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4a21      	ldr	r2, [pc, #132]	; (8004fa8 <USB_SetTurnaroundTime+0x138>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d306      	bcc.n	8004f34 <USB_SetTurnaroundTime+0xc4>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4a20      	ldr	r2, [pc, #128]	; (8004fac <USB_SetTurnaroundTime+0x13c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d802      	bhi.n	8004f34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f2e:	2308      	movs	r3, #8
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	e015      	b.n	8004f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4a1d      	ldr	r2, [pc, #116]	; (8004fac <USB_SetTurnaroundTime+0x13c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d906      	bls.n	8004f4a <USB_SetTurnaroundTime+0xda>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4a1c      	ldr	r2, [pc, #112]	; (8004fb0 <USB_SetTurnaroundTime+0x140>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d202      	bcs.n	8004f4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f44:	2307      	movs	r3, #7
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e00a      	b.n	8004f60 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f4a:	2306      	movs	r3, #6
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e007      	b.n	8004f60 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f56:	2309      	movs	r3, #9
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e001      	b.n	8004f60 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f5c:	2309      	movs	r3, #9
 8004f5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	029b      	lsls	r3, r3, #10
 8004f74:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	00d8acbf 	.word	0x00d8acbf
 8004f90:	00e4e1c0 	.word	0x00e4e1c0
 8004f94:	00f42400 	.word	0x00f42400
 8004f98:	01067380 	.word	0x01067380
 8004f9c:	011a499f 	.word	0x011a499f
 8004fa0:	01312cff 	.word	0x01312cff
 8004fa4:	014ca43f 	.word	0x014ca43f
 8004fa8:	016e3600 	.word	0x016e3600
 8004fac:	01a6ab1f 	.word	0x01a6ab1f
 8004fb0:	01e84800 	.word	0x01e84800

08004fb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f043 0201 	orr.w	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 0201 	bic.w	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d106      	bne.n	8005024 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60da      	str	r2, [r3, #12]
 8005022:	e00b      	b.n	800503c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	e001      	b.n	800503c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e003      	b.n	8005044 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800503c:	2032      	movs	r0, #50	; 0x32
 800503e:	f7fb ffe3 	bl	8001008 <HAL_Delay>

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800504c:	b084      	sub	sp, #16
 800504e:	b580      	push	{r7, lr}
 8005050:	b086      	sub	sp, #24
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800505a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005066:	2300      	movs	r3, #0
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	e009      	b.n	8005080 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	3340      	adds	r3, #64	; 0x40
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	2200      	movs	r2, #0
 8005078:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	3301      	adds	r3, #1
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b0e      	cmp	r3, #14
 8005084:	d9f2      	bls.n	800506c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d11c      	bne.n	80050c6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800509a:	f043 0302 	orr.w	r3, r3, #2
 800509e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	639a      	str	r2, [r3, #56]	; 0x38
 80050c4:	e00b      	b.n	80050de <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050e4:	461a      	mov	r2, r3
 80050e6:	2300      	movs	r3, #0
 80050e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f0:	4619      	mov	r1, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	461a      	mov	r2, r3
 80050fa:	680b      	ldr	r3, [r1, #0]
 80050fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	2b01      	cmp	r3, #1
 8005102:	d10c      	bne.n	800511e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800510a:	2100      	movs	r1, #0
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f949 	bl	80053a4 <USB_SetDevSpeed>
 8005112:	e008      	b.n	8005126 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005114:	2101      	movs	r1, #1
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f944 	bl	80053a4 <USB_SetDevSpeed>
 800511c:	e003      	b.n	8005126 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800511e:	2103      	movs	r1, #3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f93f 	bl	80053a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005126:	2110      	movs	r1, #16
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f8f3 	bl	8005314 <USB_FlushTxFifo>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f911 	bl	8005360 <USB_FlushRxFifo>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	461a      	mov	r2, r3
 8005150:	2300      	movs	r3, #0
 8005152:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	461a      	mov	r2, r3
 800515c:	2300      	movs	r3, #0
 800515e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005166:	461a      	mov	r2, r3
 8005168:	2300      	movs	r3, #0
 800516a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800516c:	2300      	movs	r3, #0
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	e043      	b.n	80051fa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005188:	d118      	bne.n	80051bc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	461a      	mov	r2, r3
 800519e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	e013      	b.n	80051ce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	461a      	mov	r2, r3
 80051b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e008      	b.n	80051ce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	461a      	mov	r2, r3
 80051ca:	2300      	movs	r3, #0
 80051cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051da:	461a      	mov	r2, r3
 80051dc:	2300      	movs	r3, #0
 80051de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	461a      	mov	r2, r3
 80051ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	3301      	adds	r3, #1
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d3b7      	bcc.n	8005172 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005202:	2300      	movs	r3, #0
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	e043      	b.n	8005290 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800521a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800521e:	d118      	bne.n	8005252 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	461a      	mov	r2, r3
 8005234:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	e013      	b.n	8005264 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005248:	461a      	mov	r2, r3
 800524a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	e008      	b.n	8005264 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525e:	461a      	mov	r2, r3
 8005260:	2300      	movs	r3, #0
 8005262:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	461a      	mov	r2, r3
 8005272:	2300      	movs	r3, #0
 8005274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005282:	461a      	mov	r2, r3
 8005284:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005288:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3301      	adds	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	429a      	cmp	r2, r3
 8005296:	d3b7      	bcc.n	8005208 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d105      	bne.n	80052cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	f043 0210 	orr.w	r2, r3, #16
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699a      	ldr	r2, [r3, #24]
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <USB_DevInit+0x2c4>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f043 0208 	orr.w	r2, r3, #8
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d107      	bne.n	8005300 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052f8:	f043 0304 	orr.w	r3, r3, #4
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005300:	7dfb      	ldrb	r3, [r7, #23]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800530c:	b004      	add	sp, #16
 800530e:	4770      	bx	lr
 8005310:	803c3800 	.word	0x803c3800

08005314 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	019b      	lsls	r3, r3, #6
 8005326:	f043 0220 	orr.w	r2, r3, #32
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3301      	adds	r3, #1
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <USB_FlushTxFifo+0x48>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d901      	bls.n	8005340 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e006      	b.n	800534e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b20      	cmp	r3, #32
 800534a:	d0f0      	beq.n	800532e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	00030d40 	.word	0x00030d40

08005360 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2210      	movs	r2, #16
 8005370:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3301      	adds	r3, #1
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <USB_FlushRxFifo+0x40>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d901      	bls.n	8005384 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e006      	b.n	8005392 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b10      	cmp	r3, #16
 800538e:	d0f0      	beq.n	8005372 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	00030d40 	.word	0x00030d40

080053a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	68f9      	ldr	r1, [r7, #12]
 80053c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b087      	sub	sp, #28
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 0306 	and.w	r3, r3, #6
 80053ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d102      	bne.n	80053fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053f6:	2300      	movs	r3, #0
 80053f8:	75fb      	strb	r3, [r7, #23]
 80053fa:	e00a      	b.n	8005412 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d002      	beq.n	8005408 <USB_GetDevSpeed+0x32>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b06      	cmp	r3, #6
 8005406:	d102      	bne.n	800540e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005408:	2302      	movs	r3, #2
 800540a:	75fb      	strb	r3, [r7, #23]
 800540c:	e001      	b.n	8005412 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800540e:	230f      	movs	r3, #15
 8005410:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005412:	7dfb      	ldrb	r3, [r7, #23]
}
 8005414:	4618      	mov	r0, r3
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d13a      	bne.n	80054b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	2101      	movs	r1, #1
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	b29b      	uxth	r3, r3
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800545a:	4313      	orrs	r3, r2
 800545c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d155      	bne.n	8005520 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	78db      	ldrb	r3, [r3, #3]
 800548e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005490:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	059b      	lsls	r3, r3, #22
 8005496:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005498:	4313      	orrs	r3, r2
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e036      	b.n	8005520 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b8:	69da      	ldr	r2, [r3, #28]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	2101      	movs	r1, #1
 80054c4:	fa01 f303 	lsl.w	r3, r1, r3
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d11a      	bne.n	8005520 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	78db      	ldrb	r3, [r3, #3]
 8005504:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005506:	430b      	orrs	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d161      	bne.n	8005610 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800555e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005562:	d11f      	bne.n	80055a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	0151      	lsls	r1, r2, #5
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	440a      	add	r2, r1
 800557a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005582:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	2101      	movs	r1, #1
 80055b6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	43db      	mvns	r3, r3
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c4:	4013      	ands	r3, r2
 80055c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	2101      	movs	r1, #1
 80055da:	fa01 f303 	lsl.w	r3, r1, r3
 80055de:	b29b      	uxth	r3, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	68f9      	ldr	r1, [r7, #12]
 80055e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055e8:	4013      	ands	r3, r2
 80055ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	0159      	lsls	r1, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	440b      	add	r3, r1
 8005602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005606:	4619      	mov	r1, r3
 8005608:	4b35      	ldr	r3, [pc, #212]	; (80056e0 <USB_DeactivateEndpoint+0x1b0>)
 800560a:	4013      	ands	r3, r2
 800560c:	600b      	str	r3, [r1, #0]
 800560e:	e060      	b.n	80056d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005626:	d11f      	bne.n	8005668 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	440a      	add	r2, r1
 800563e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005642:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005646:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005662:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005666:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	2101      	movs	r1, #1
 800567a:	fa01 f303 	lsl.w	r3, r1, r3
 800567e:	041b      	lsls	r3, r3, #16
 8005680:	43db      	mvns	r3, r3
 8005682:	68f9      	ldr	r1, [r7, #12]
 8005684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005688:	4013      	ands	r3, r2
 800568a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	f003 030f 	and.w	r3, r3, #15
 800569c:	2101      	movs	r1, #1
 800569e:	fa01 f303 	lsl.w	r3, r1, r3
 80056a2:	041b      	lsls	r3, r3, #16
 80056a4:	43db      	mvns	r3, r3
 80056a6:	68f9      	ldr	r1, [r7, #12]
 80056a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ac:	4013      	ands	r3, r2
 80056ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	0159      	lsls	r1, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	440b      	add	r3, r1
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	4619      	mov	r1, r3
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <USB_DeactivateEndpoint+0x1b4>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	ec337800 	.word	0xec337800
 80056e4:	eff37800 	.word	0xeff37800

080056e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	4613      	mov	r3, r2
 80056f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	785b      	ldrb	r3, [r3, #1]
 8005704:	2b01      	cmp	r3, #1
 8005706:	f040 815c 	bne.w	80059c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d132      	bne.n	8005778 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	440a      	add	r2, r1
 8005728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800572c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005730:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005734:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005754:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	440a      	add	r2, r1
 800576c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005770:	0cdb      	lsrs	r3, r3, #19
 8005772:	04db      	lsls	r3, r3, #19
 8005774:	6113      	str	r3, [r2, #16]
 8005776:	e074      	b.n	8005862 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005792:	0cdb      	lsrs	r3, r3, #19
 8005794:	04db      	lsls	r3, r3, #19
 8005796:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c8:	691a      	ldr	r2, [r3, #16]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	6959      	ldr	r1, [r3, #20]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	440b      	add	r3, r1
 80057d4:	1e59      	subs	r1, r3, #1
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	fbb1 f3f3 	udiv	r3, r1, r3
 80057de:	04d9      	lsls	r1, r3, #19
 80057e0:	4b9d      	ldr	r3, [pc, #628]	; (8005a58 <USB_EPStartXfer+0x370>)
 80057e2:	400b      	ands	r3, r1
 80057e4:	69b9      	ldr	r1, [r7, #24]
 80057e6:	0148      	lsls	r0, r1, #5
 80057e8:	69f9      	ldr	r1, [r7, #28]
 80057ea:	4401      	add	r1, r0
 80057ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057f0:	4313      	orrs	r3, r2
 80057f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800580a:	69b9      	ldr	r1, [r7, #24]
 800580c:	0148      	lsls	r0, r1, #5
 800580e:	69f9      	ldr	r1, [r7, #28]
 8005810:	4401      	add	r1, r0
 8005812:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005816:	4313      	orrs	r3, r2
 8005818:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	78db      	ldrb	r3, [r3, #3]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d11f      	bne.n	8005862 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	440a      	add	r2, r1
 8005838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005840:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	440a      	add	r2, r1
 8005858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005860:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d14b      	bne.n	8005900 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	461a      	mov	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	78db      	ldrb	r3, [r3, #3]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d128      	bne.n	80058de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d110      	bne.n	80058be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	e00f      	b.n	80058de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	e12f      	b.n	8005b60 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800591e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	78db      	ldrb	r3, [r3, #3]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d015      	beq.n	8005954 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8117 	beq.w	8005b60 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	2101      	movs	r1, #1
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	69f9      	ldr	r1, [r7, #28]
 800594a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800594e:	4313      	orrs	r3, r2
 8005950:	634b      	str	r3, [r1, #52]	; 0x34
 8005952:	e105      	b.n	8005b60 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005960:	2b00      	cmp	r3, #0
 8005962:	d110      	bne.n	8005986 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	0151      	lsls	r1, r2, #5
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	440a      	add	r2, r1
 800597a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800597e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	e00f      	b.n	80059a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	440a      	add	r2, r1
 800599c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	68d9      	ldr	r1, [r3, #12]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	781a      	ldrb	r2, [r3, #0]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	b298      	uxth	r0, r3
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	4603      	mov	r3, r0
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 fa2b 	bl	8005e16 <USB_WritePacket>
 80059c0:	e0ce      	b.n	8005b60 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059dc:	0cdb      	lsrs	r3, r3, #19
 80059de:	04db      	lsls	r3, r3, #19
 80059e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d126      	bne.n	8005a5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a24:	69b9      	ldr	r1, [r7, #24]
 8005a26:	0148      	lsls	r0, r1, #5
 8005a28:	69f9      	ldr	r1, [r7, #28]
 8005a2a:	4401      	add	r1, r0
 8005a2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a30:	4313      	orrs	r3, r2
 8005a32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a52:	6113      	str	r3, [r2, #16]
 8005a54:	e036      	b.n	8005ac4 <USB_EPStartXfer+0x3dc>
 8005a56:	bf00      	nop
 8005a58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	695a      	ldr	r2, [r3, #20]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	4413      	add	r3, r2
 8005a66:	1e5a      	subs	r2, r3, #1
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	8afb      	ldrh	r3, [r7, #22]
 8005a82:	04d9      	lsls	r1, r3, #19
 8005a84:	4b39      	ldr	r3, [pc, #228]	; (8005b6c <USB_EPStartXfer+0x484>)
 8005a86:	400b      	ands	r3, r1
 8005a88:	69b9      	ldr	r1, [r7, #24]
 8005a8a:	0148      	lsls	r0, r1, #5
 8005a8c:	69f9      	ldr	r1, [r7, #28]
 8005a8e:	4401      	add	r1, r0
 8005a90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a94:	4313      	orrs	r3, r2
 8005a96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	8af9      	ldrh	r1, [r7, #22]
 8005aac:	fb01 f303 	mul.w	r3, r1, r3
 8005ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab4:	69b9      	ldr	r1, [r7, #24]
 8005ab6:	0148      	lsls	r0, r1, #5
 8005ab8:	69f9      	ldr	r1, [r7, #28]
 8005aba:	4401      	add	r1, r0
 8005abc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d10d      	bne.n	8005ae6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	68d9      	ldr	r1, [r3, #12]
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae2:	460a      	mov	r2, r1
 8005ae4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	78db      	ldrb	r3, [r3, #3]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d128      	bne.n	8005b40 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d110      	bne.n	8005b20 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	e00f      	b.n	8005b40 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	0151      	lsls	r1, r2, #5
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	440a      	add	r2, r1
 8005b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3720      	adds	r7, #32
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	1ff80000 	.word	0x1ff80000

08005b70 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	f040 80cd 	bne.w	8005d2c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d132      	bne.n	8005c00 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	0151      	lsls	r1, r2, #5
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	440a      	add	r2, r1
 8005bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf8:	0cdb      	lsrs	r3, r3, #19
 8005bfa:	04db      	lsls	r3, r3, #19
 8005bfc:	6113      	str	r3, [r2, #16]
 8005bfe:	e04e      	b.n	8005c9e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c1a:	0cdb      	lsrs	r3, r3, #19
 8005c1c:	04db      	lsls	r3, r3, #19
 8005c1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c42:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	695a      	ldr	r2, [r3, #20]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d903      	bls.n	8005c58 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c8e:	6939      	ldr	r1, [r7, #16]
 8005c90:	0148      	lsls	r0, r1, #5
 8005c92:	6979      	ldr	r1, [r7, #20]
 8005c94:	4401      	add	r1, r0
 8005c96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d11e      	bne.n	8005ce2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d009      	beq.n	8005cc0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb8:	461a      	mov	r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	e092      	b.n	8005e08 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d00:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d07e      	beq.n	8005e08 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d20:	6979      	ldr	r1, [r7, #20]
 8005d22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d26:	4313      	orrs	r3, r2
 8005d28:	634b      	str	r3, [r1, #52]	; 0x34
 8005d2a:	e06d      	b.n	8005e08 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d46:	0cdb      	lsrs	r3, r3, #19
 8005d48:	04db      	lsls	r3, r3, #19
 8005d4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d6e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005db6:	6939      	ldr	r1, [r7, #16]
 8005db8:	0148      	lsls	r0, r1, #5
 8005dba:	6979      	ldr	r1, [r7, #20]
 8005dbc:	4401      	add	r1, r0
 8005dbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d10d      	bne.n	8005de8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	68d9      	ldr	r1, [r3, #12]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	460a      	mov	r2, r1
 8005de6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b089      	sub	sp, #36	; 0x24
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	4611      	mov	r1, r2
 8005e22:	461a      	mov	r2, r3
 8005e24:	460b      	mov	r3, r1
 8005e26:	71fb      	strb	r3, [r7, #7]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005e34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d11a      	bne.n	8005e72 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e3c:	88bb      	ldrh	r3, [r7, #4]
 8005e3e:	3303      	adds	r3, #3
 8005e40:	089b      	lsrs	r3, r3, #2
 8005e42:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e44:	2300      	movs	r3, #0
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	e00f      	b.n	8005e6a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	031a      	lsls	r2, r3, #12
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e56:	461a      	mov	r2, r3
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3304      	adds	r3, #4
 8005e62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	3301      	adds	r3, #1
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d3eb      	bcc.n	8005e4a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3724      	adds	r7, #36	; 0x24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	; 0x24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e96:	88fb      	ldrh	r3, [r7, #6]
 8005e98:	3303      	adds	r3, #3
 8005e9a:	089b      	lsrs	r3, r3, #2
 8005e9c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	e00b      	b.n	8005ebc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	601a      	str	r2, [r3, #0]
    pDest++;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d3ef      	bcc.n	8005ea4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005ec4:	69fb      	ldr	r3, [r7, #28]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3724      	adds	r7, #36	; 0x24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b085      	sub	sp, #20
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	785b      	ldrb	r3, [r3, #1]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d12c      	bne.n	8005f48 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	db12      	blt.n	8005f26 <USB_EPSetStall+0x54>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00f      	beq.n	8005f26 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f24:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	e02b      	b.n	8005fa0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	db12      	blt.n	8005f80 <USB_EPSetStall+0xae>
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00f      	beq.n	8005f80 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f7e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d128      	bne.n	800601c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	0151      	lsls	r1, r2, #5
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	440a      	add	r2, r1
 8005fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fe8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	78db      	ldrb	r3, [r3, #3]
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d003      	beq.n	8005ffa <USB_EPClearStall+0x4c>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	78db      	ldrb	r3, [r3, #3]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d138      	bne.n	800606c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	0151      	lsls	r1, r2, #5
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	440a      	add	r2, r1
 8006010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	e027      	b.n	800606c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	440a      	add	r2, r1
 8006032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006036:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800603a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	78db      	ldrb	r3, [r3, #3]
 8006040:	2b03      	cmp	r3, #3
 8006042:	d003      	beq.n	800604c <USB_EPClearStall+0x9e>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	78db      	ldrb	r3, [r3, #3]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d10f      	bne.n	800606c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	440a      	add	r2, r1
 8006062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	460b      	mov	r3, r1
 8006084:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006098:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800609c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80060ae:	68f9      	ldr	r1, [r7, #12]
 80060b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060b4:	4313      	orrs	r3, r2
 80060b6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060e0:	f023 0303 	bic.w	r3, r3, #3
 80060e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060f4:	f023 0302 	bic.w	r3, r3, #2
 80060f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006122:	f023 0303 	bic.w	r3, r3, #3
 8006126:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006136:	f043 0302 	orr.w	r3, r3, #2
 800613a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800614a:	b480      	push	{r7}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4013      	ands	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006162:	68fb      	ldr	r3, [r7, #12]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4013      	ands	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	0c1b      	lsrs	r3, r3, #16
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	4013      	ands	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	b29b      	uxth	r3, r3
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	4013      	ands	r3, r2
 8006204:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006206:	68bb      	ldr	r3, [r7, #8]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006236:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	fa22 f303 	lsr.w	r3, r2, r3
 8006244:	01db      	lsls	r3, r3, #7
 8006246:	b2db      	uxtb	r3, r3
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4013      	ands	r3, r2
 8006260:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006262:	68bb      	ldr	r3, [r7, #8]
}
 8006264:	4618      	mov	r0, r3
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	f003 0301 	and.w	r3, r3, #1
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062aa:	f023 0307 	bic.w	r3, r3, #7
 80062ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
	...

080062d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	460b      	mov	r3, r1
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	333c      	adds	r3, #60	; 0x3c
 80062ea:	3304      	adds	r3, #4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4a26      	ldr	r2, [pc, #152]	; (800638c <USB_EP0_OutStart+0xb8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d90a      	bls.n	800630e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006308:	d101      	bne.n	800630e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	e037      	b.n	800637e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	461a      	mov	r2, r3
 8006316:	2300      	movs	r3, #0
 8006318:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006328:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800632c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800633c:	f043 0318 	orr.w	r3, r3, #24
 8006340:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006350:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006354:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006356:	7afb      	ldrb	r3, [r7, #11]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d10f      	bne.n	800637c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006362:	461a      	mov	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006376:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800637a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	4f54300a 	.word	0x4f54300a

08006390 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a13      	ldr	r2, [pc, #76]	; (80063f4 <USB_CoreReset+0x64>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e01b      	b.n	80063e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	daf2      	bge.n	800639c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f043 0201 	orr.w	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3301      	adds	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4a09      	ldr	r2, [pc, #36]	; (80063f4 <USB_CoreReset+0x64>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d901      	bls.n	80063d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e006      	b.n	80063e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d0f0      	beq.n	80063c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	00030d40 	.word	0x00030d40

080063f8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80063fe:	f003 fdbf 	bl	8009f80 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8006402:	4b19      	ldr	r3, [pc, #100]	; (8006468 <MX_LWIP_Init+0x70>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006408:	4b18      	ldr	r3, [pc, #96]	; (800646c <MX_LWIP_Init+0x74>)
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800640e:	4b18      	ldr	r3, [pc, #96]	; (8006470 <MX_LWIP_Init+0x78>)
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006414:	4b17      	ldr	r3, [pc, #92]	; (8006474 <MX_LWIP_Init+0x7c>)
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	4b17      	ldr	r3, [pc, #92]	; (8006478 <MX_LWIP_Init+0x80>)
 800641a:	9301      	str	r3, [sp, #4]
 800641c:	2300      	movs	r3, #0
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	4b13      	ldr	r3, [pc, #76]	; (8006470 <MX_LWIP_Init+0x78>)
 8006422:	4a12      	ldr	r2, [pc, #72]	; (800646c <MX_LWIP_Init+0x74>)
 8006424:	4910      	ldr	r1, [pc, #64]	; (8006468 <MX_LWIP_Init+0x70>)
 8006426:	4815      	ldr	r0, [pc, #84]	; (800647c <MX_LWIP_Init+0x84>)
 8006428:	f004 fa78 	bl	800a91c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800642c:	4813      	ldr	r0, [pc, #76]	; (800647c <MX_LWIP_Init+0x84>)
 800642e:	f004 fc2f 	bl	800ac90 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <MX_LWIP_Init+0x84>)
 8006434:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006438:	089b      	lsrs	r3, r3, #2
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006444:	480d      	ldr	r0, [pc, #52]	; (800647c <MX_LWIP_Init+0x84>)
 8006446:	f004 fc33 	bl	800acb0 <netif_set_up>
 800644a:	e002      	b.n	8006452 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800644c:	480b      	ldr	r0, [pc, #44]	; (800647c <MX_LWIP_Init+0x84>)
 800644e:	f004 fc9b 	bl	800ad88 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006452:	490b      	ldr	r1, [pc, #44]	; (8006480 <MX_LWIP_Init+0x88>)
 8006454:	4809      	ldr	r0, [pc, #36]	; (800647c <MX_LWIP_Init+0x84>)
 8006456:	f004 fcc9 	bl	800adec <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800645a:	4808      	ldr	r0, [pc, #32]	; (800647c <MX_LWIP_Init+0x84>)
 800645c:	f00c fd60 	bl	8012f20 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006460:	bf00      	nop
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	200006b4 	.word	0x200006b4
 800646c:	200006b8 	.word	0x200006b8
 8006470:	200006bc 	.word	0x200006bc
 8006474:	080168ed 	.word	0x080168ed
 8006478:	08006a5d 	.word	0x08006a5d
 800647c:	2000067c 	.word	0x2000067c
 8006480:	08006ac9 	.word	0x08006ac9

08006484 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8006488:	4803      	ldr	r0, [pc, #12]	; (8006498 <MX_LWIP_Process+0x14>)
 800648a:	f000 fac7 	bl	8006a1c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800648e:	f00b fccd 	bl	8011e2c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8006492:	bf00      	nop
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	2000067c 	.word	0x2000067c

0800649c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08e      	sub	sp, #56	; 0x38
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	609a      	str	r2, [r3, #8]
 80064b0:	60da      	str	r2, [r3, #12]
 80064b2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a4e      	ldr	r2, [pc, #312]	; (80065f4 <HAL_ETH_MspInit+0x158>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	f040 8095 	bne.w	80065ea <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80064c0:	2300      	movs	r3, #0
 80064c2:	623b      	str	r3, [r7, #32]
 80064c4:	4b4c      	ldr	r3, [pc, #304]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 80064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c8:	4a4b      	ldr	r2, [pc, #300]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 80064ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064ce:	6313      	str	r3, [r2, #48]	; 0x30
 80064d0:	4b49      	ldr	r3, [pc, #292]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d8:	623b      	str	r3, [r7, #32]
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	2300      	movs	r3, #0
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	4b45      	ldr	r3, [pc, #276]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	4a44      	ldr	r2, [pc, #272]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 80064e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064ea:	6313      	str	r3, [r2, #48]	; 0x30
 80064ec:	4b42      	ldr	r3, [pc, #264]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	2300      	movs	r3, #0
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	4b3e      	ldr	r3, [pc, #248]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 80064fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006500:	4a3d      	ldr	r2, [pc, #244]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 8006502:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006506:	6313      	str	r3, [r2, #48]	; 0x30
 8006508:	4b3b      	ldr	r3, [pc, #236]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 800650a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	4b37      	ldr	r3, [pc, #220]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651c:	4a36      	ldr	r2, [pc, #216]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 800651e:	f043 0304 	orr.w	r3, r3, #4
 8006522:	6313      	str	r3, [r2, #48]	; 0x30
 8006524:	4b34      	ldr	r3, [pc, #208]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006530:	2300      	movs	r3, #0
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	4b30      	ldr	r3, [pc, #192]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	4a2f      	ldr	r2, [pc, #188]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 800653a:	f043 0301 	orr.w	r3, r3, #1
 800653e:	6313      	str	r3, [r2, #48]	; 0x30
 8006540:	4b2d      	ldr	r3, [pc, #180]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 8006542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	613b      	str	r3, [r7, #16]
 800654a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	4b29      	ldr	r3, [pc, #164]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	4a28      	ldr	r2, [pc, #160]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 8006556:	f043 0302 	orr.w	r3, r3, #2
 800655a:	6313      	str	r3, [r2, #48]	; 0x30
 800655c:	4b26      	ldr	r3, [pc, #152]	; (80065f8 <HAL_ETH_MspInit+0x15c>)
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006568:	2332      	movs	r3, #50	; 0x32
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800656c:	2302      	movs	r3, #2
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006570:	2300      	movs	r3, #0
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006574:	2303      	movs	r3, #3
 8006576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006578:	230b      	movs	r3, #11
 800657a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800657c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006580:	4619      	mov	r1, r3
 8006582:	481e      	ldr	r0, [pc, #120]	; (80065fc <HAL_ETH_MspInit+0x160>)
 8006584:	f7fc f822 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006588:	2386      	movs	r3, #134	; 0x86
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800658c:	2302      	movs	r3, #2
 800658e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006590:	2300      	movs	r3, #0
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006594:	2303      	movs	r3, #3
 8006596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006598:	230b      	movs	r3, #11
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800659c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065a0:	4619      	mov	r1, r3
 80065a2:	4817      	ldr	r0, [pc, #92]	; (8006600 <HAL_ETH_MspInit+0x164>)
 80065a4:	f7fc f812 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80065a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ae:	2302      	movs	r3, #2
 80065b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065b6:	2303      	movs	r3, #3
 80065b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80065ba:	230b      	movs	r3, #11
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c2:	4619      	mov	r1, r3
 80065c4:	480f      	ldr	r0, [pc, #60]	; (8006604 <HAL_ETH_MspInit+0x168>)
 80065c6:	f7fc f801 	bl	80025cc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80065ca:	2200      	movs	r2, #0
 80065cc:	2100      	movs	r1, #0
 80065ce:	203d      	movs	r0, #61	; 0x3d
 80065d0:	f7fa fe19 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80065d4:	203d      	movs	r0, #61	; 0x3d
 80065d6:	f7fa fe32 	bl	800123e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 80065da:	2200      	movs	r2, #0
 80065dc:	2100      	movs	r1, #0
 80065de:	203e      	movs	r0, #62	; 0x3e
 80065e0:	f7fa fe11 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80065e4:	203e      	movs	r0, #62	; 0x3e
 80065e6:	f7fa fe2a 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80065ea:	bf00      	nop
 80065ec:	3738      	adds	r7, #56	; 0x38
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	40028000 	.word	0x40028000
 80065f8:	40023800 	.word	0x40023800
 80065fc:	40020800 	.word	0x40020800
 8006600:	40020000 	.word	0x40020000
 8006604:	40020400 	.word	0x40020400

08006608 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006614:	4b52      	ldr	r3, [pc, #328]	; (8006760 <low_level_init+0x158>)
 8006616:	4a53      	ldr	r2, [pc, #332]	; (8006764 <low_level_init+0x15c>)
 8006618:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 800661a:	4b51      	ldr	r3, [pc, #324]	; (8006760 <low_level_init+0x158>)
 800661c:	2200      	movs	r2, #0
 800661e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_10M;
 8006620:	4b4f      	ldr	r3, [pc, #316]	; (8006760 <low_level_init+0x158>)
 8006622:	2200      	movs	r2, #0
 8006624:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006626:	4b4e      	ldr	r3, [pc, #312]	; (8006760 <low_level_init+0x158>)
 8006628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800662c:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800662e:	4b4c      	ldr	r3, [pc, #304]	; (8006760 <low_level_init+0x158>)
 8006630:	2201      	movs	r2, #1
 8006632:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006634:	2300      	movs	r3, #0
 8006636:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006638:	2380      	movs	r3, #128	; 0x80
 800663a:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800663c:	23e1      	movs	r3, #225	; 0xe1
 800663e:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006640:	2300      	movs	r3, #0
 8006642:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006644:	2300      	movs	r3, #0
 8006646:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006648:	2300      	movs	r3, #0
 800664a:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800664c:	4a44      	ldr	r2, [pc, #272]	; (8006760 <low_level_init+0x158>)
 800664e:	f107 0308 	add.w	r3, r7, #8
 8006652:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8006654:	4b42      	ldr	r3, [pc, #264]	; (8006760 <low_level_init+0x158>)
 8006656:	2200      	movs	r2, #0
 8006658:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800665a:	4b41      	ldr	r3, [pc, #260]	; (8006760 <low_level_init+0x158>)
 800665c:	2200      	movs	r2, #0
 800665e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006660:	4b3f      	ldr	r3, [pc, #252]	; (8006760 <low_level_init+0x158>)
 8006662:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006666:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006668:	483d      	ldr	r0, [pc, #244]	; (8006760 <low_level_init+0x158>)
 800666a:	f7fa fe03 	bl	8001274 <HAL_ETH_Init>
 800666e:	4603      	mov	r3, r0
 8006670:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8006672:	7dfb      	ldrb	r3, [r7, #23]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d108      	bne.n	800668a <low_level_init+0x82>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800667e:	f043 0304 	orr.w	r3, r3, #4
 8006682:	b2da      	uxtb	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800668a:	2304      	movs	r3, #4
 800668c:	4a36      	ldr	r2, [pc, #216]	; (8006768 <low_level_init+0x160>)
 800668e:	4937      	ldr	r1, [pc, #220]	; (800676c <low_level_init+0x164>)
 8006690:	4833      	ldr	r0, [pc, #204]	; (8006760 <low_level_init+0x158>)
 8006692:	f7fa ff8b 	bl	80015ac <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006696:	2304      	movs	r3, #4
 8006698:	4a35      	ldr	r2, [pc, #212]	; (8006770 <low_level_init+0x168>)
 800669a:	4936      	ldr	r1, [pc, #216]	; (8006774 <low_level_init+0x16c>)
 800669c:	4830      	ldr	r0, [pc, #192]	; (8006760 <low_level_init+0x158>)
 800669e:	f7fa ffee 	bl	800167e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2206      	movs	r2, #6
 80066a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80066aa:	4b2d      	ldr	r3, [pc, #180]	; (8006760 <low_level_init+0x158>)
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	781a      	ldrb	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80066b6:	4b2a      	ldr	r3, [pc, #168]	; (8006760 <low_level_init+0x158>)
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	785a      	ldrb	r2, [r3, #1]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80066c2:	4b27      	ldr	r3, [pc, #156]	; (8006760 <low_level_init+0x158>)
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	789a      	ldrb	r2, [r3, #2]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80066ce:	4b24      	ldr	r3, [pc, #144]	; (8006760 <low_level_init+0x158>)
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	78da      	ldrb	r2, [r3, #3]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80066da:	4b21      	ldr	r3, [pc, #132]	; (8006760 <low_level_init+0x158>)
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	791a      	ldrb	r2, [r3, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80066e6:	4b1e      	ldr	r3, [pc, #120]	; (8006760 <low_level_init+0x158>)
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	795a      	ldrb	r2, [r3, #5]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80066f8:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006700:	f043 030a 	orr.w	r3, r3, #10
 8006704:	b2da      	uxtb	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800670c:	4814      	ldr	r0, [pc, #80]	; (8006760 <low_level_init+0x158>)
 800670e:	f7fb fae4 	bl	8001cda <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8006712:	f107 0310 	add.w	r3, r7, #16
 8006716:	461a      	mov	r2, r3
 8006718:	2111      	movs	r1, #17
 800671a:	4811      	ldr	r0, [pc, #68]	; (8006760 <low_level_init+0x158>)
 800671c:	f7fb fa0f 	bl	8001b3e <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f043 0303 	orr.w	r3, r3, #3
 8006726:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	461a      	mov	r2, r3
 800672c:	2111      	movs	r1, #17
 800672e:	480c      	ldr	r0, [pc, #48]	; (8006760 <low_level_init+0x158>)
 8006730:	f7fb fa6d 	bl	8001c0e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8006734:	f107 0310 	add.w	r3, r7, #16
 8006738:	461a      	mov	r2, r3
 800673a:	2112      	movs	r1, #18
 800673c:	4808      	ldr	r0, [pc, #32]	; (8006760 <low_level_init+0x158>)
 800673e:	f7fb f9fe 	bl	8001b3e <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f043 0320 	orr.w	r3, r3, #32
 8006748:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	461a      	mov	r2, r3
 800674e:	2112      	movs	r1, #18
 8006750:	4803      	ldr	r0, [pc, #12]	; (8006760 <low_level_init+0x158>)
 8006752:	f7fb fa5c 	bl	8001c0e <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006756:	bf00      	nop
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20001f90 	.word	0x20001f90
 8006764:	40028000 	.word	0x40028000
 8006768:	20001fd8 	.word	0x20001fd8
 800676c:	200006c0 	.word	0x200006c0
 8006770:	20000740 	.word	0x20000740
 8006774:	20001f10 	.word	0x20001f10

08006778 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b08a      	sub	sp, #40	; 0x28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006782:	4b4b      	ldr	r3, [pc, #300]	; (80068b0 <low_level_output+0x138>)
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800679a:	4b45      	ldr	r3, [pc, #276]	; (80068b0 <low_level_output+0x138>)
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	623b      	str	r3, [r7, #32]
 80067a8:	e05a      	b.n	8006860 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da03      	bge.n	80067ba <low_level_output+0x42>
      {
        errval = ERR_USE;
 80067b2:	23f8      	movs	r3, #248	; 0xf8
 80067b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80067b8:	e05c      	b.n	8006874 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	895b      	ldrh	r3, [r3, #10]
 80067be:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80067c4:	e02f      	b.n	8006826 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	18d0      	adds	r0, r2, r3
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	18d1      	adds	r1, r2, r3
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80067da:	3304      	adds	r3, #4
 80067dc:	461a      	mov	r2, r3
 80067de:	f010 febb 	bl	8017558 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	da03      	bge.n	80067f8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80067f0:	23f8      	movs	r3, #248	; 0xf8
 80067f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80067f6:	e03d      	b.n	8006874 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006808:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006814:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006820:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006830:	4293      	cmp	r3, r2
 8006832:	d8c8      	bhi.n	80067c6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	18d0      	adds	r0, r2, r3
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4413      	add	r3, r2
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4619      	mov	r1, r3
 8006846:	f010 fe87 	bl	8017558 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	623b      	str	r3, [r7, #32]
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1a1      	bne.n	80067aa <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006866:	6979      	ldr	r1, [r7, #20]
 8006868:	4811      	ldr	r0, [pc, #68]	; (80068b0 <low_level_output+0x138>)
 800686a:	f7fa ff75 	bl	8001758 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006874:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <low_level_output+0x138>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800687c:	3314      	adds	r3, #20
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00d      	beq.n	80068a4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006888:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <low_level_output+0x138>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006890:	3314      	adds	r3, #20
 8006892:	2220      	movs	r2, #32
 8006894:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006896:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <low_level_output+0x138>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800689e:	3304      	adds	r3, #4
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80068a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3728      	adds	r7, #40	; 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20001f90 	.word	0x20001f90

080068b4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08c      	sub	sp, #48	; 0x30
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80068d8:	484f      	ldr	r0, [pc, #316]	; (8006a18 <low_level_input+0x164>)
 80068da:	f7fb f827 	bl	800192c <HAL_ETH_GetReceivedFrame>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <low_level_input+0x34>

    return NULL;
 80068e4:	2300      	movs	r3, #0
 80068e6:	e092      	b.n	8006a0e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80068e8:	4b4b      	ldr	r3, [pc, #300]	; (8006a18 <low_level_input+0x164>)
 80068ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ec:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80068ee:	4b4a      	ldr	r3, [pc, #296]	; (8006a18 <low_level_input+0x164>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80068f4:	89fb      	ldrh	r3, [r7, #14]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80068fa:	89fb      	ldrh	r3, [r7, #14]
 80068fc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006900:	4619      	mov	r1, r3
 8006902:	2000      	movs	r0, #0
 8006904:	f004 fb0e 	bl	800af24 <pbuf_alloc>
 8006908:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d04b      	beq.n	80069a8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006910:	4b41      	ldr	r3, [pc, #260]	; (8006a18 <low_level_input+0x164>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	62bb      	str	r3, [r7, #40]	; 0x28
 800691e:	e040      	b.n	80069a2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	895b      	ldrh	r3, [r3, #10]
 8006924:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800692a:	e021      	b.n	8006970 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	18d0      	adds	r0, r2, r3
 8006934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	18d1      	adds	r1, r2, r3
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006940:	3304      	adds	r3, #4
 8006942:	461a      	mov	r2, r3
 8006944:	f010 fe08 	bl	8017558 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	4413      	add	r3, r2
 800695a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800695e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800696a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	4413      	add	r3, r2
 8006976:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800697a:	4293      	cmp	r3, r2
 800697c:	d8d6      	bhi.n	800692c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	18d0      	adds	r0, r2, r3
 8006986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	4619      	mov	r1, r3
 8006990:	f010 fde2 	bl	8017558 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	4413      	add	r3, r2
 800699a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1bb      	bne.n	8006920 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80069a8:	4b1b      	ldr	r3, [pc, #108]	; (8006a18 <low_level_input+0x164>)
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80069ae:	2300      	movs	r3, #0
 80069b0:	613b      	str	r3, [r7, #16]
 80069b2:	e00b      	b.n	80069cc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	3301      	adds	r3, #1
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <low_level_input+0x164>)
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d3ee      	bcc.n	80069b4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80069d6:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <low_level_input+0x164>)
 80069d8:	2200      	movs	r2, #0
 80069da:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80069dc:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <low_level_input+0x164>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e4:	3314      	adds	r3, #20
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80069f0:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <low_level_input+0x164>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f8:	3314      	adds	r3, #20
 80069fa:	2280      	movs	r2, #128	; 0x80
 80069fc:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <low_level_input+0x164>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a06:	3308      	adds	r3, #8
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3730      	adds	r7, #48	; 0x30
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20001f90 	.word	0x20001f90

08006a1c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff ff45 	bl	80068b4 <low_level_input>
 8006a2a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d010      	beq.n	8006a54 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	4798      	blx	r3
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8006a40:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d006      	beq.n	8006a56 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f004 fd4f 	bl	800b4ec <pbuf_free>
    p = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	e000      	b.n	8006a56 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8006a54:	bf00      	nop
  }
}
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <ethernetif_init+0x1c>
 8006a6a:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <ethernetif_init+0x48>)
 8006a6c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006a70:	490d      	ldr	r1, [pc, #52]	; (8006aa8 <ethernetif_init+0x4c>)
 8006a72:	480e      	ldr	r0, [pc, #56]	; (8006aac <ethernetif_init+0x50>)
 8006a74:	f010 fda0 	bl	80175b8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2273      	movs	r2, #115	; 0x73
 8006a7c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2274      	movs	r2, #116	; 0x74
 8006a84:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <ethernetif_init+0x54>)
 8006a8c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a08      	ldr	r2, [pc, #32]	; (8006ab4 <ethernetif_init+0x58>)
 8006a92:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff fdb7 	bl	8006608 <low_level_init>

  return ERR_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	08018b04 	.word	0x08018b04
 8006aa8:	08018b20 	.word	0x08018b20
 8006aac:	08018b30 	.word	0x08018b30
 8006ab0:	08014d75 	.word	0x08014d75
 8006ab4:	08006779 	.word	0x08006779

08006ab8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006abc:	f7fa fa98 	bl	8000ff0 <HAL_GetTick>
 8006ac0:	4603      	mov	r3, r0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ade:	089b      	lsrs	r3, r3, #2
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d05d      	beq.n	8006ba6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006aea:	4b34      	ldr	r3, [pc, #208]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d03f      	beq.n	8006b72 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006af2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006af6:	2100      	movs	r1, #0
 8006af8:	4830      	ldr	r0, [pc, #192]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006afa:	f7fb f888 	bl	8001c0e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006afe:	f7fa fa77 	bl	8000ff0 <HAL_GetTick>
 8006b02:	4603      	mov	r3, r0
 8006b04:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006b06:	f107 0308 	add.w	r3, r7, #8
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	482b      	ldr	r0, [pc, #172]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006b10:	f7fb f815 	bl	8001b3e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006b14:	f7fa fa6c 	bl	8000ff0 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b22:	d828      	bhi.n	8006b76 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0eb      	beq.n	8006b06 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006b2e:	f107 0308 	add.w	r3, r7, #8
 8006b32:	461a      	mov	r2, r3
 8006b34:	2110      	movs	r1, #16
 8006b36:	4821      	ldr	r0, [pc, #132]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006b38:	f7fb f801 	bl	8001b3e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006b46:	4b1d      	ldr	r3, [pc, #116]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b4c:	60da      	str	r2, [r3, #12]
 8006b4e:	e002      	b.n	8006b56 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006b50:	4b1a      	ldr	r3, [pc, #104]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006b60:	4b16      	ldr	r3, [pc, #88]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	609a      	str	r2, [r3, #8]
 8006b66:	e016      	b.n	8006b96 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006b68:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b6e:	609a      	str	r2, [r3, #8]
 8006b70:	e011      	b.n	8006b96 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006b72:	bf00      	nop
 8006b74:	e000      	b.n	8006b78 <ethernetif_update_config+0xb0>
          goto error;
 8006b76:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006b78:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	08db      	lsrs	r3, r3, #3
 8006b7e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006b80:	4b0e      	ldr	r3, [pc, #56]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	085b      	lsrs	r3, r3, #1
 8006b86:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	2100      	movs	r1, #0
 8006b90:	480a      	ldr	r0, [pc, #40]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006b92:	f7fb f83c 	bl	8001c0e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006b96:	2100      	movs	r1, #0
 8006b98:	4808      	ldr	r0, [pc, #32]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006b9a:	f7fb f8fd 	bl	8001d98 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006b9e:	4807      	ldr	r0, [pc, #28]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006ba0:	f7fb f89b 	bl	8001cda <HAL_ETH_Start>
 8006ba4:	e002      	b.n	8006bac <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006ba6:	4805      	ldr	r0, [pc, #20]	; (8006bbc <ethernetif_update_config+0xf4>)
 8006ba8:	f7fb f8c6 	bl	8001d38 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f807 	bl	8006bc0 <ethernetif_notify_conn_changed>
}
 8006bb2:	bf00      	nop
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20001f90 	.word	0x20001f90

08006bc0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006be0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006be4:	f010 fc42 	bl	801746c <USBD_static_malloc>
 8006be8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d105      	bne.n	8006bfc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e066      	b.n	8006cca <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	7c1b      	ldrb	r3, [r3, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d119      	bne.n	8006c40 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c10:	2202      	movs	r2, #2
 8006c12:	2181      	movs	r1, #129	; 0x81
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f010 fb06 	bl	8017226 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c24:	2202      	movs	r2, #2
 8006c26:	2101      	movs	r1, #1
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f010 fafc 	bl	8017226 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2210      	movs	r2, #16
 8006c3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c3e:	e016      	b.n	8006c6e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c40:	2340      	movs	r3, #64	; 0x40
 8006c42:	2202      	movs	r2, #2
 8006c44:	2181      	movs	r1, #129	; 0x81
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f010 faed 	bl	8017226 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c52:	2340      	movs	r3, #64	; 0x40
 8006c54:	2202      	movs	r2, #2
 8006c56:	2101      	movs	r1, #1
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f010 fae4 	bl	8017226 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2210      	movs	r2, #16
 8006c6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c6e:	2308      	movs	r3, #8
 8006c70:	2203      	movs	r2, #3
 8006c72:	2182      	movs	r1, #130	; 0x82
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f010 fad6 	bl	8017226 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	7c1b      	ldrb	r3, [r3, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d109      	bne.n	8006cb8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cae:	2101      	movs	r1, #1
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f010 fba7 	bl	8017404 <USBD_LL_PrepareReceive>
 8006cb6:	e007      	b.n	8006cc8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cbe:	2340      	movs	r3, #64	; 0x40
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f010 fb9e 	bl	8017404 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cde:	2181      	movs	r1, #129	; 0x81
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f010 fac6 	bl	8017272 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006cec:	2101      	movs	r1, #1
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f010 fabf 	bl	8017272 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cfc:	2182      	movs	r1, #130	; 0x82
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f010 fab7 	bl	8017272 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00e      	beq.n	8006d3c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f010 fbaa 	bl	8017488 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e0af      	b.n	8006ed0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d03f      	beq.n	8006dfc <USBD_CDC_Setup+0xb4>
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	f040 809f 	bne.w	8006ec0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	88db      	ldrh	r3, [r3, #6]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d02e      	beq.n	8006de8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	b25b      	sxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	da16      	bge.n	8006dc2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006da0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	88d2      	ldrh	r2, [r2, #6]
 8006da6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	88db      	ldrh	r3, [r3, #6]
 8006dac:	2b07      	cmp	r3, #7
 8006dae:	bf28      	it	cs
 8006db0:	2307      	movcs	r3, #7
 8006db2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	89fa      	ldrh	r2, [r7, #14]
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 fb19 	bl	80083f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006dc0:	e085      	b.n	8006ece <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	785a      	ldrb	r2, [r3, #1]
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	88db      	ldrh	r3, [r3, #6]
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006dd8:	6939      	ldr	r1, [r7, #16]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	88db      	ldrh	r3, [r3, #6]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 fb32 	bl	800844a <USBD_CtlPrepareRx>
      break;
 8006de6:	e072      	b.n	8006ece <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	7850      	ldrb	r0, [r2, #1]
 8006df4:	2200      	movs	r2, #0
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	4798      	blx	r3
      break;
 8006dfa:	e068      	b.n	8006ece <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	2b0b      	cmp	r3, #11
 8006e02:	d852      	bhi.n	8006eaa <USBD_CDC_Setup+0x162>
 8006e04:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <USBD_CDC_Setup+0xc4>)
 8006e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0a:	bf00      	nop
 8006e0c:	08006e3d 	.word	0x08006e3d
 8006e10:	08006eb9 	.word	0x08006eb9
 8006e14:	08006eab 	.word	0x08006eab
 8006e18:	08006eab 	.word	0x08006eab
 8006e1c:	08006eab 	.word	0x08006eab
 8006e20:	08006eab 	.word	0x08006eab
 8006e24:	08006eab 	.word	0x08006eab
 8006e28:	08006eab 	.word	0x08006eab
 8006e2c:	08006eab 	.word	0x08006eab
 8006e30:	08006eab 	.word	0x08006eab
 8006e34:	08006e67 	.word	0x08006e67
 8006e38:	08006e91 	.word	0x08006e91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d107      	bne.n	8006e58 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e48:	f107 030a 	add.w	r3, r7, #10
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 face 	bl	80083f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e56:	e032      	b.n	8006ebe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fa58 	bl	8008310 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e60:	2303      	movs	r3, #3
 8006e62:	75fb      	strb	r3, [r7, #23]
          break;
 8006e64:	e02b      	b.n	8006ebe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d107      	bne.n	8006e82 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e72:	f107 030d 	add.w	r3, r7, #13
 8006e76:	2201      	movs	r2, #1
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 fab9 	bl	80083f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e80:	e01d      	b.n	8006ebe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 fa43 	bl	8008310 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e8e:	e016      	b.n	8006ebe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d00f      	beq.n	8006ebc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 fa36 	bl	8008310 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ea8:	e008      	b.n	8006ebc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 fa2f 	bl	8008310 <USBD_CtlError>
          ret = USBD_FAIL;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb6:	e002      	b.n	8006ebe <USBD_CDC_Setup+0x176>
          break;
 8006eb8:	bf00      	nop
 8006eba:	e008      	b.n	8006ece <USBD_CDC_Setup+0x186>
          break;
 8006ebc:	bf00      	nop
      }
      break;
 8006ebe:	e006      	b.n	8006ece <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 fa24 	bl	8008310 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	75fb      	strb	r3, [r7, #23]
      break;
 8006ecc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006eea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e04f      	b.n	8006f9a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	3318      	adds	r3, #24
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d029      	beq.n	8006f6c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f18:	78fa      	ldrb	r2, [r7, #3]
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	3318      	adds	r3, #24
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	78f9      	ldrb	r1, [r7, #3]
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	1a5b      	subs	r3, r3, r1
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4403      	add	r3, r0
 8006f38:	3344      	adds	r3, #68	; 0x44
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f40:	fb03 f301 	mul.w	r3, r3, r1
 8006f44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d110      	bne.n	8006f6c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	3318      	adds	r3, #24
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f5e:	78f9      	ldrb	r1, [r7, #3]
 8006f60:	2300      	movs	r3, #0
 8006f62:	2200      	movs	r2, #0
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f010 fa2c 	bl	80173c2 <USBD_LL_Transmit>
 8006f6a:	e015      	b.n	8006f98 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f94:	78fa      	ldrb	r2, [r7, #3]
 8006f96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e015      	b.n	8006ff0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fc4:	78fb      	ldrb	r3, [r7, #3]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f010 fa3c 	bl	8017446 <USBD_LL_GetRxDataSize>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fea:	4611      	mov	r1, r2
 8006fec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007006:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800700e:	2303      	movs	r3, #3
 8007010:	e01b      	b.n	800704a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d015      	beq.n	8007048 <USBD_CDC_EP0_RxReady+0x50>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007022:	2bff      	cmp	r3, #255	; 0xff
 8007024:	d010      	beq.n	8007048 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007034:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800703c:	b292      	uxth	r2, r2
 800703e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	22ff      	movs	r2, #255	; 0xff
 8007044:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2243      	movs	r2, #67	; 0x43
 8007060:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007062:	4b03      	ldr	r3, [pc, #12]	; (8007070 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007064:	4618      	mov	r0, r3
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	20000094 	.word	0x20000094

08007074 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2243      	movs	r2, #67	; 0x43
 8007080:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007082:	4b03      	ldr	r3, [pc, #12]	; (8007090 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	20000050 	.word	0x20000050

08007094 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2243      	movs	r2, #67	; 0x43
 80070a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80070a2:	4b03      	ldr	r3, [pc, #12]	; (80070b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	200000d8 	.word	0x200000d8

080070b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	220a      	movs	r2, #10
 80070c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80070c2:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	2000000c 	.word	0x2000000c

080070d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e004      	b.n	80070f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070fe:	b480      	push	{r7}
 8007100:	b087      	sub	sp, #28
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007110:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007118:	2303      	movs	r3, #3
 800711a:	e008      	b.n	800712e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800713a:	b480      	push	{r7}
 800713c:	b085      	sub	sp, #20
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800714a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007152:	2303      	movs	r3, #3
 8007154:	e004      	b.n	8007160 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800717a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800717c:	2301      	movs	r3, #1
 800717e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800718a:	2303      	movs	r3, #3
 800718c:	e01a      	b.n	80071c4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007194:	2b00      	cmp	r3, #0
 8007196:	d114      	bne.n	80071c2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2201      	movs	r2, #1
 800719c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071b6:	2181      	movs	r1, #129	; 0x81
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f010 f902 	bl	80173c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e016      	b.n	8007218 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	7c1b      	ldrb	r3, [r3, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071fc:	2101      	movs	r1, #1
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f010 f900 	bl	8017404 <USBD_LL_PrepareReceive>
 8007204:	e007      	b.n	8007216 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800720c:	2340      	movs	r3, #64	; 0x40
 800720e:	2101      	movs	r1, #1
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f010 f8f7 	bl	8017404 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007234:	2303      	movs	r3, #3
 8007236:	e01f      	b.n	8007278 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	79fa      	ldrb	r2, [r7, #7]
 800726a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f00f ff73 	bl	8017158 <USBD_LL_Init>
 8007272:	4603      	mov	r3, r0
 8007274:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007276:	7dfb      	ldrb	r3, [r7, #23]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007294:	2303      	movs	r3, #3
 8007296:	e016      	b.n	80072c6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00b      	beq.n	80072c4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	f107 020e 	add.w	r2, r7, #14
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	4602      	mov	r2, r0
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f00f ff8a 	bl	80171f0 <USBD_LL_Start>
 80072dc:	4603      	mov	r3, r0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007308:	2303      	movs	r3, #3
 800730a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	78fa      	ldrb	r2, [r7, #3]
 8007320:	4611      	mov	r1, r2
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
 8007326:	4603      	mov	r3, r0
 8007328:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007346:	2b00      	cmp	r3, #0
 8007348:	d007      	beq.n	800735a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	78fa      	ldrb	r2, [r7, #3]
 8007354:	4611      	mov	r1, r2
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	4798      	blx	r3
  }

  return USBD_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	4618      	mov	r0, r3
 8007378:	f000 ff90 	bl	800829c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007398:	f003 031f 	and.w	r3, r3, #31
 800739c:	2b02      	cmp	r3, #2
 800739e:	d01a      	beq.n	80073d6 <USBD_LL_SetupStage+0x72>
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d822      	bhi.n	80073ea <USBD_LL_SetupStage+0x86>
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <USBD_LL_SetupStage+0x4a>
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d00a      	beq.n	80073c2 <USBD_LL_SetupStage+0x5e>
 80073ac:	e01d      	b.n	80073ea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa62 	bl	8007880 <USBD_StdDevReq>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]
      break;
 80073c0:	e020      	b.n	8007404 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fac6 	bl	800795c <USBD_StdItfReq>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]
      break;
 80073d4:	e016      	b.n	8007404 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fb05 	bl	80079ee <USBD_StdEPReq>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]
      break;
 80073e8:	e00c      	b.n	8007404 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f00f ff59 	bl	80172b0 <USBD_LL_StallEP>
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]
      break;
 8007402:	bf00      	nop
  }

  return ret;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b086      	sub	sp, #24
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	460b      	mov	r3, r1
 8007418:	607a      	str	r2, [r7, #4]
 800741a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800741c:	7afb      	ldrb	r3, [r7, #11]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d138      	bne.n	8007494 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007428:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007430:	2b03      	cmp	r3, #3
 8007432:	d14a      	bne.n	80074ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	429a      	cmp	r2, r3
 800743e:	d913      	bls.n	8007468 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	1ad2      	subs	r2, r2, r3
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	4293      	cmp	r3, r2
 8007458:	bf28      	it	cs
 800745a:	4613      	movcs	r3, r2
 800745c:	461a      	mov	r2, r3
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f001 f80f 	bl	8008484 <USBD_CtlContinueRx>
 8007466:	e030      	b.n	80074ca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b03      	cmp	r3, #3
 8007472:	d10b      	bne.n	800748c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f001 f80a 	bl	80084a6 <USBD_CtlSendStatus>
 8007492:	e01a      	b.n	80074ca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b03      	cmp	r3, #3
 800749e:	d114      	bne.n	80074ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00e      	beq.n	80074ca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	7afa      	ldrb	r2, [r7, #11]
 80074b6:	4611      	mov	r1, r2
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	4798      	blx	r3
 80074bc:	4603      	mov	r3, r0
 80074be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	e000      	b.n	80074cc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	460b      	mov	r3, r1
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80074e2:	7afb      	ldrb	r3, [r7, #11]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d16b      	bne.n	80075c0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3314      	adds	r3, #20
 80074ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d156      	bne.n	80075a6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	429a      	cmp	r2, r3
 8007502:	d914      	bls.n	800752e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	1ad2      	subs	r2, r2, r3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	461a      	mov	r2, r3
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 ff84 	bl	8008428 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007520:	2300      	movs	r3, #0
 8007522:	2200      	movs	r2, #0
 8007524:	2100      	movs	r1, #0
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f00f ff6c 	bl	8017404 <USBD_LL_PrepareReceive>
 800752c:	e03b      	b.n	80075a6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	429a      	cmp	r2, r3
 8007538:	d11c      	bne.n	8007574 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007542:	429a      	cmp	r2, r3
 8007544:	d316      	bcc.n	8007574 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007550:	429a      	cmp	r2, r3
 8007552:	d20f      	bcs.n	8007574 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007554:	2200      	movs	r2, #0
 8007556:	2100      	movs	r1, #0
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 ff65 	bl	8008428 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007566:	2300      	movs	r3, #0
 8007568:	2200      	movs	r2, #0
 800756a:	2100      	movs	r1, #0
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f00f ff49 	bl	8017404 <USBD_LL_PrepareReceive>
 8007572:	e018      	b.n	80075a6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b03      	cmp	r3, #3
 800757e:	d10b      	bne.n	8007598 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d005      	beq.n	8007598 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007598:	2180      	movs	r1, #128	; 0x80
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f00f fe88 	bl	80172b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 ff93 	bl	80084cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d122      	bne.n	80075f6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f7ff fe98 	bl	80072e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075be:	e01a      	b.n	80075f6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d114      	bne.n	80075f6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00e      	beq.n	80075f6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	7afa      	ldrb	r2, [r7, #11]
 80075e2:	4611      	mov	r1, r2
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	4798      	blx	r3
 80075e8:	4603      	mov	r3, r0
 80075ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	e000      	b.n	80075f8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007630:	2303      	movs	r3, #3
 8007632:	e02f      	b.n	8007694 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00f      	beq.n	800765e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6852      	ldr	r2, [r2, #4]
 8007656:	b2d2      	uxtb	r2, r2
 8007658:	4611      	mov	r1, r2
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800765e:	2340      	movs	r3, #64	; 0x40
 8007660:	2200      	movs	r2, #0
 8007662:	2100      	movs	r1, #0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f00f fdde 	bl	8017226 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2240      	movs	r2, #64	; 0x40
 8007676:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800767a:	2340      	movs	r3, #64	; 0x40
 800767c:	2200      	movs	r2, #0
 800767e:	2180      	movs	r1, #128	; 0x80
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f00f fdd0 	bl	8017226 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2240      	movs	r2, #64	; 0x40
 8007690:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	78fa      	ldrb	r2, [r7, #3]
 80076ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2204      	movs	r2, #4
 80076d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d106      	bne.n	800770a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007702:	b2da      	uxtb	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800772a:	2303      	movs	r3, #3
 800772c:	e012      	b.n	8007754 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b03      	cmp	r3, #3
 8007738:	d10b      	bne.n	8007752 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007772:	2303      	movs	r3, #3
 8007774:	e014      	b.n	80077a0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b03      	cmp	r3, #3
 8007780:	d10d      	bne.n	800779e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	78fa      	ldrb	r2, [r7, #3]
 8007798:	4611      	mov	r1, r2
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80077be:	2303      	movs	r3, #3
 80077c0:	e014      	b.n	80077ec <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d10d      	bne.n	80077ea <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d007      	beq.n	80077ea <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	4611      	mov	r1, r2
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b082      	sub	sp, #8
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007820:	2b00      	cmp	r3, #0
 8007822:	d009      	beq.n	8007838 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6852      	ldr	r2, [r2, #4]
 8007830:	b2d2      	uxtb	r2, r2
 8007832:	4611      	mov	r1, r2
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	4798      	blx	r3
  }

  return USBD_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007842:	b480      	push	{r7}
 8007844:	b087      	sub	sp, #28
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	3301      	adds	r3, #1
 8007858:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007860:	8a3b      	ldrh	r3, [r7, #16]
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	b21a      	sxth	r2, r3
 8007866:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800786a:	4313      	orrs	r3, r2
 800786c:	b21b      	sxth	r3, r3
 800786e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007870:	89fb      	ldrh	r3, [r7, #14]
}
 8007872:	4618      	mov	r0, r3
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
	...

08007880 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d005      	beq.n	80078a6 <USBD_StdDevReq+0x26>
 800789a:	2b40      	cmp	r3, #64	; 0x40
 800789c:	d853      	bhi.n	8007946 <USBD_StdDevReq+0xc6>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00b      	beq.n	80078ba <USBD_StdDevReq+0x3a>
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	d14f      	bne.n	8007946 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	4798      	blx	r3
 80078b4:	4603      	mov	r3, r0
 80078b6:	73fb      	strb	r3, [r7, #15]
      break;
 80078b8:	e04a      	b.n	8007950 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	785b      	ldrb	r3, [r3, #1]
 80078be:	2b09      	cmp	r3, #9
 80078c0:	d83b      	bhi.n	800793a <USBD_StdDevReq+0xba>
 80078c2:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <USBD_StdDevReq+0x48>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	0800791d 	.word	0x0800791d
 80078cc:	08007931 	.word	0x08007931
 80078d0:	0800793b 	.word	0x0800793b
 80078d4:	08007927 	.word	0x08007927
 80078d8:	0800793b 	.word	0x0800793b
 80078dc:	080078fb 	.word	0x080078fb
 80078e0:	080078f1 	.word	0x080078f1
 80078e4:	0800793b 	.word	0x0800793b
 80078e8:	08007913 	.word	0x08007913
 80078ec:	08007905 	.word	0x08007905
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f9de 	bl	8007cb4 <USBD_GetDescriptor>
          break;
 80078f8:	e024      	b.n	8007944 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fb43 	bl	8007f88 <USBD_SetAddress>
          break;
 8007902:	e01f      	b.n	8007944 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fb82 	bl	8008010 <USBD_SetConfig>
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]
          break;
 8007910:	e018      	b.n	8007944 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fc21 	bl	800815c <USBD_GetConfig>
          break;
 800791a:	e013      	b.n	8007944 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fc52 	bl	80081c8 <USBD_GetStatus>
          break;
 8007924:	e00e      	b.n	8007944 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fc81 	bl	8008230 <USBD_SetFeature>
          break;
 800792e:	e009      	b.n	8007944 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fc90 	bl	8008258 <USBD_ClrFeature>
          break;
 8007938:	e004      	b.n	8007944 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fce7 	bl	8008310 <USBD_CtlError>
          break;
 8007942:	bf00      	nop
      }
      break;
 8007944:	e004      	b.n	8007950 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fce1 	bl	8008310 <USBD_CtlError>
      break;
 800794e:	bf00      	nop
  }

  return ret;
 8007950:	7bfb      	ldrb	r3, [r7, #15]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop

0800795c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007972:	2b40      	cmp	r3, #64	; 0x40
 8007974:	d005      	beq.n	8007982 <USBD_StdItfReq+0x26>
 8007976:	2b40      	cmp	r3, #64	; 0x40
 8007978:	d82f      	bhi.n	80079da <USBD_StdItfReq+0x7e>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <USBD_StdItfReq+0x26>
 800797e:	2b20      	cmp	r3, #32
 8007980:	d12b      	bne.n	80079da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007988:	b2db      	uxtb	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	2b02      	cmp	r3, #2
 800798e:	d81d      	bhi.n	80079cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	889b      	ldrh	r3, [r3, #4]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b01      	cmp	r3, #1
 8007998:	d813      	bhi.n	80079c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4798      	blx	r3
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	88db      	ldrh	r3, [r3, #6]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d110      	bne.n	80079d6 <USBD_StdItfReq+0x7a>
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10d      	bne.n	80079d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fd73 	bl	80084a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079c0:	e009      	b.n	80079d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fca3 	bl	8008310 <USBD_CtlError>
          break;
 80079ca:	e004      	b.n	80079d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fc9e 	bl	8008310 <USBD_CtlError>
          break;
 80079d4:	e000      	b.n	80079d8 <USBD_StdItfReq+0x7c>
          break;
 80079d6:	bf00      	nop
      }
      break;
 80079d8:	e004      	b.n	80079e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fc97 	bl	8008310 <USBD_CtlError>
      break;
 80079e2:	bf00      	nop
  }

  return ret;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	889b      	ldrh	r3, [r3, #4]
 8007a00:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a0a:	2b40      	cmp	r3, #64	; 0x40
 8007a0c:	d007      	beq.n	8007a1e <USBD_StdEPReq+0x30>
 8007a0e:	2b40      	cmp	r3, #64	; 0x40
 8007a10:	f200 8145 	bhi.w	8007c9e <USBD_StdEPReq+0x2b0>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00c      	beq.n	8007a32 <USBD_StdEPReq+0x44>
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	f040 8140 	bne.w	8007c9e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	4798      	blx	r3
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a30:	e13a      	b.n	8007ca8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d007      	beq.n	8007a4a <USBD_StdEPReq+0x5c>
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	f300 8129 	bgt.w	8007c92 <USBD_StdEPReq+0x2a4>
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d07f      	beq.n	8007b44 <USBD_StdEPReq+0x156>
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d03c      	beq.n	8007ac2 <USBD_StdEPReq+0xd4>
 8007a48:	e123      	b.n	8007c92 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d002      	beq.n	8007a5c <USBD_StdEPReq+0x6e>
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d016      	beq.n	8007a88 <USBD_StdEPReq+0x9a>
 8007a5a:	e02c      	b.n	8007ab6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00d      	beq.n	8007a7e <USBD_StdEPReq+0x90>
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	2b80      	cmp	r3, #128	; 0x80
 8007a66:	d00a      	beq.n	8007a7e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f00f fc1f 	bl	80172b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a72:	2180      	movs	r1, #128	; 0x80
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f00f fc1b 	bl	80172b0 <USBD_LL_StallEP>
 8007a7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a7c:	e020      	b.n	8007ac0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fc45 	bl	8008310 <USBD_CtlError>
              break;
 8007a86:	e01b      	b.n	8007ac0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	885b      	ldrh	r3, [r3, #2]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10e      	bne.n	8007aae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <USBD_StdEPReq+0xc0>
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b80      	cmp	r3, #128	; 0x80
 8007a9a:	d008      	beq.n	8007aae <USBD_StdEPReq+0xc0>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	88db      	ldrh	r3, [r3, #6]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f00f fc01 	bl	80172b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fcf9 	bl	80084a6 <USBD_CtlSendStatus>

              break;
 8007ab4:	e004      	b.n	8007ac0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fc29 	bl	8008310 <USBD_CtlError>
              break;
 8007abe:	bf00      	nop
          }
          break;
 8007ac0:	e0ec      	b.n	8007c9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d002      	beq.n	8007ad4 <USBD_StdEPReq+0xe6>
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d016      	beq.n	8007b00 <USBD_StdEPReq+0x112>
 8007ad2:	e030      	b.n	8007b36 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00d      	beq.n	8007af6 <USBD_StdEPReq+0x108>
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b80      	cmp	r3, #128	; 0x80
 8007ade:	d00a      	beq.n	8007af6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f00f fbe3 	bl	80172b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aea:	2180      	movs	r1, #128	; 0x80
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f00f fbdf 	bl	80172b0 <USBD_LL_StallEP>
 8007af2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007af4:	e025      	b.n	8007b42 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fc09 	bl	8008310 <USBD_CtlError>
              break;
 8007afe:	e020      	b.n	8007b42 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	885b      	ldrh	r3, [r3, #2]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d11b      	bne.n	8007b40 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d004      	beq.n	8007b1c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f00f fbe9 	bl	80172ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fcc2 	bl	80084a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
 8007b30:	4603      	mov	r3, r0
 8007b32:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007b34:	e004      	b.n	8007b40 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fbe9 	bl	8008310 <USBD_CtlError>
              break;
 8007b3e:	e000      	b.n	8007b42 <USBD_StdEPReq+0x154>
              break;
 8007b40:	bf00      	nop
          }
          break;
 8007b42:	e0ab      	b.n	8007c9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d002      	beq.n	8007b56 <USBD_StdEPReq+0x168>
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d032      	beq.n	8007bba <USBD_StdEPReq+0x1cc>
 8007b54:	e097      	b.n	8007c86 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d007      	beq.n	8007b6c <USBD_StdEPReq+0x17e>
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	2b80      	cmp	r3, #128	; 0x80
 8007b60:	d004      	beq.n	8007b6c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fbd3 	bl	8008310 <USBD_CtlError>
                break;
 8007b6a:	e091      	b.n	8007c90 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	da0b      	bge.n	8007b8c <USBD_StdEPReq+0x19e>
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	3310      	adds	r3, #16
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	4413      	add	r3, r2
 8007b88:	3304      	adds	r3, #4
 8007b8a:	e00b      	b.n	8007ba4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
 8007b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b92:	4613      	mov	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fc1d 	bl	80083f2 <USBD_CtlSendData>
              break;
 8007bb8:	e06a      	b.n	8007c90 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	da11      	bge.n	8007be6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	f003 020f 	and.w	r2, r3, #15
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	3324      	adds	r3, #36	; 0x24
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d117      	bne.n	8007c0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fb96 	bl	8008310 <USBD_CtlError>
                  break;
 8007be4:	e054      	b.n	8007c90 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
 8007be8:	f003 020f 	and.w	r2, r3, #15
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d104      	bne.n	8007c0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fb83 	bl	8008310 <USBD_CtlError>
                  break;
 8007c0a:	e041      	b.n	8007c90 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	da0b      	bge.n	8007c2c <USBD_StdEPReq+0x23e>
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	3310      	adds	r3, #16
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	4413      	add	r3, r2
 8007c28:	3304      	adds	r3, #4
 8007c2a:	e00b      	b.n	8007c44 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	4413      	add	r3, r2
 8007c42:	3304      	adds	r3, #4
 8007c44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <USBD_StdEPReq+0x264>
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
 8007c4e:	2b80      	cmp	r3, #128	; 0x80
 8007c50:	d103      	bne.n	8007c5a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	e00e      	b.n	8007c78 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f00f fb64 	bl	801732c <USBD_LL_IsStallEP>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	e002      	b.n	8007c78 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fbb7 	bl	80083f2 <USBD_CtlSendData>
              break;
 8007c84:	e004      	b.n	8007c90 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fb41 	bl	8008310 <USBD_CtlError>
              break;
 8007c8e:	bf00      	nop
          }
          break;
 8007c90:	e004      	b.n	8007c9c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fb3b 	bl	8008310 <USBD_CtlError>
          break;
 8007c9a:	bf00      	nop
      }
      break;
 8007c9c:	e004      	b.n	8007ca8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fb35 	bl	8008310 <USBD_CtlError>
      break;
 8007ca6:	bf00      	nop
  }

  return ret;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	885b      	ldrh	r3, [r3, #2]
 8007cce:	0a1b      	lsrs	r3, r3, #8
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	2b06      	cmp	r3, #6
 8007cd6:	f200 8128 	bhi.w	8007f2a <USBD_GetDescriptor+0x276>
 8007cda:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <USBD_GetDescriptor+0x2c>)
 8007cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce0:	08007cfd 	.word	0x08007cfd
 8007ce4:	08007d15 	.word	0x08007d15
 8007ce8:	08007d55 	.word	0x08007d55
 8007cec:	08007f2b 	.word	0x08007f2b
 8007cf0:	08007f2b 	.word	0x08007f2b
 8007cf4:	08007ecb 	.word	0x08007ecb
 8007cf8:	08007ef7 	.word	0x08007ef7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	7c12      	ldrb	r2, [r2, #16]
 8007d08:	f107 0108 	add.w	r1, r7, #8
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	60f8      	str	r0, [r7, #12]
      break;
 8007d12:	e112      	b.n	8007f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	7c1b      	ldrb	r3, [r3, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10d      	bne.n	8007d38 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d24:	f107 0208 	add.w	r2, r7, #8
 8007d28:	4610      	mov	r0, r2
 8007d2a:	4798      	blx	r3
 8007d2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3301      	adds	r3, #1
 8007d32:	2202      	movs	r2, #2
 8007d34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d36:	e100      	b.n	8007f3a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	f107 0208 	add.w	r2, r7, #8
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	2202      	movs	r2, #2
 8007d50:	701a      	strb	r2, [r3, #0]
      break;
 8007d52:	e0f2      	b.n	8007f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	885b      	ldrh	r3, [r3, #2]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	f200 80ac 	bhi.w	8007eb8 <USBD_GetDescriptor+0x204>
 8007d60:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <USBD_GetDescriptor+0xb4>)
 8007d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d66:	bf00      	nop
 8007d68:	08007d81 	.word	0x08007d81
 8007d6c:	08007db5 	.word	0x08007db5
 8007d70:	08007de9 	.word	0x08007de9
 8007d74:	08007e1d 	.word	0x08007e1d
 8007d78:	08007e51 	.word	0x08007e51
 8007d7c:	08007e85 	.word	0x08007e85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00b      	beq.n	8007da4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	7c12      	ldrb	r2, [r2, #16]
 8007d98:	f107 0108 	add.w	r1, r7, #8
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
 8007da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007da2:	e091      	b.n	8007ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fab2 	bl	8008310 <USBD_CtlError>
            err++;
 8007dac:	7afb      	ldrb	r3, [r7, #11]
 8007dae:	3301      	adds	r3, #1
 8007db0:	72fb      	strb	r3, [r7, #11]
          break;
 8007db2:	e089      	b.n	8007ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	7c12      	ldrb	r2, [r2, #16]
 8007dcc:	f107 0108 	add.w	r1, r7, #8
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	4798      	blx	r3
 8007dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dd6:	e077      	b.n	8007ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fa98 	bl	8008310 <USBD_CtlError>
            err++;
 8007de0:	7afb      	ldrb	r3, [r7, #11]
 8007de2:	3301      	adds	r3, #1
 8007de4:	72fb      	strb	r3, [r7, #11]
          break;
 8007de6:	e06f      	b.n	8007ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	7c12      	ldrb	r2, [r2, #16]
 8007e00:	f107 0108 	add.w	r1, r7, #8
 8007e04:	4610      	mov	r0, r2
 8007e06:	4798      	blx	r3
 8007e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e0a:	e05d      	b.n	8007ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fa7e 	bl	8008310 <USBD_CtlError>
            err++;
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	3301      	adds	r3, #1
 8007e18:	72fb      	strb	r3, [r7, #11]
          break;
 8007e1a:	e055      	b.n	8007ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00b      	beq.n	8007e40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	7c12      	ldrb	r2, [r2, #16]
 8007e34:	f107 0108 	add.w	r1, r7, #8
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4798      	blx	r3
 8007e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e3e:	e043      	b.n	8007ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fa64 	bl	8008310 <USBD_CtlError>
            err++;
 8007e48:	7afb      	ldrb	r3, [r7, #11]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e4e:	e03b      	b.n	8007ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00b      	beq.n	8007e74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	7c12      	ldrb	r2, [r2, #16]
 8007e68:	f107 0108 	add.w	r1, r7, #8
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
 8007e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e72:	e029      	b.n	8007ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fa4a 	bl	8008310 <USBD_CtlError>
            err++;
 8007e7c:	7afb      	ldrb	r3, [r7, #11]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	72fb      	strb	r3, [r7, #11]
          break;
 8007e82:	e021      	b.n	8007ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	7c12      	ldrb	r2, [r2, #16]
 8007e9c:	f107 0108 	add.w	r1, r7, #8
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4798      	blx	r3
 8007ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ea6:	e00f      	b.n	8007ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa30 	bl	8008310 <USBD_CtlError>
            err++;
 8007eb0:	7afb      	ldrb	r3, [r7, #11]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007eb6:	e007      	b.n	8007ec8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa28 	bl	8008310 <USBD_CtlError>
          err++;
 8007ec0:	7afb      	ldrb	r3, [r7, #11]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007ec6:	bf00      	nop
      }
      break;
 8007ec8:	e037      	b.n	8007f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	7c1b      	ldrb	r3, [r3, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d109      	bne.n	8007ee6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eda:	f107 0208 	add.w	r2, r7, #8
 8007ede:	4610      	mov	r0, r2
 8007ee0:	4798      	blx	r3
 8007ee2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ee4:	e029      	b.n	8007f3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fa11 	bl	8008310 <USBD_CtlError>
        err++;
 8007eee:	7afb      	ldrb	r3, [r7, #11]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ef4:	e021      	b.n	8007f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	7c1b      	ldrb	r3, [r3, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10d      	bne.n	8007f1a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	f107 0208 	add.w	r2, r7, #8
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	4798      	blx	r3
 8007f0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3301      	adds	r3, #1
 8007f14:	2207      	movs	r2, #7
 8007f16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f18:	e00f      	b.n	8007f3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f9f7 	bl	8008310 <USBD_CtlError>
        err++;
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	3301      	adds	r3, #1
 8007f26:	72fb      	strb	r3, [r7, #11]
      break;
 8007f28:	e007      	b.n	8007f3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f9ef 	bl	8008310 <USBD_CtlError>
      err++;
 8007f32:	7afb      	ldrb	r3, [r7, #11]
 8007f34:	3301      	adds	r3, #1
 8007f36:	72fb      	strb	r3, [r7, #11]
      break;
 8007f38:	bf00      	nop
  }

  if (err != 0U)
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d11e      	bne.n	8007f7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	88db      	ldrh	r3, [r3, #6]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d016      	beq.n	8007f76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f48:	893b      	ldrh	r3, [r7, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00e      	beq.n	8007f6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	88da      	ldrh	r2, [r3, #6]
 8007f52:	893b      	ldrh	r3, [r7, #8]
 8007f54:	4293      	cmp	r3, r2
 8007f56:	bf28      	it	cs
 8007f58:	4613      	movcs	r3, r2
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f5e:	893b      	ldrh	r3, [r7, #8]
 8007f60:	461a      	mov	r2, r3
 8007f62:	68f9      	ldr	r1, [r7, #12]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fa44 	bl	80083f2 <USBD_CtlSendData>
 8007f6a:	e009      	b.n	8007f80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f9ce 	bl	8008310 <USBD_CtlError>
 8007f74:	e004      	b.n	8007f80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa95 	bl	80084a6 <USBD_CtlSendStatus>
 8007f7c:	e000      	b.n	8007f80 <USBD_GetDescriptor+0x2cc>
    return;
 8007f7e:	bf00      	nop
  }
}
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop

08007f88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	889b      	ldrh	r3, [r3, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d131      	bne.n	8007ffe <USBD_SetAddress+0x76>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	88db      	ldrh	r3, [r3, #6]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d12d      	bne.n	8007ffe <USBD_SetAddress+0x76>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	885b      	ldrh	r3, [r3, #2]
 8007fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8007fa8:	d829      	bhi.n	8007ffe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	885b      	ldrh	r3, [r3, #2]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d104      	bne.n	8007fcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f9a3 	bl	8008310 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fca:	e01d      	b.n	8008008 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	7bfa      	ldrb	r2, [r7, #15]
 8007fd0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f00f f9d3 	bl	8017384 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa61 	bl	80084a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d004      	beq.n	8007ff4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2202      	movs	r2, #2
 8007fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff2:	e009      	b.n	8008008 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffc:	e004      	b.n	8008008 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f985 	bl	8008310 <USBD_CtlError>
  }
}
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	885b      	ldrh	r3, [r3, #2]
 8008022:	b2da      	uxtb	r2, r3
 8008024:	4b4c      	ldr	r3, [pc, #304]	; (8008158 <USBD_SetConfig+0x148>)
 8008026:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008028:	4b4b      	ldr	r3, [pc, #300]	; (8008158 <USBD_SetConfig+0x148>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d905      	bls.n	800803c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f96c 	bl	8008310 <USBD_CtlError>
    return USBD_FAIL;
 8008038:	2303      	movs	r3, #3
 800803a:	e088      	b.n	800814e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d002      	beq.n	800804e <USBD_SetConfig+0x3e>
 8008048:	2b03      	cmp	r3, #3
 800804a:	d025      	beq.n	8008098 <USBD_SetConfig+0x88>
 800804c:	e071      	b.n	8008132 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800804e:	4b42      	ldr	r3, [pc, #264]	; (8008158 <USBD_SetConfig+0x148>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d01c      	beq.n	8008090 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008056:	4b40      	ldr	r3, [pc, #256]	; (8008158 <USBD_SetConfig+0x148>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008060:	4b3d      	ldr	r3, [pc, #244]	; (8008158 <USBD_SetConfig+0x148>)
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7ff f948 	bl	80072fc <USBD_SetClassConfig>
 800806c:	4603      	mov	r3, r0
 800806e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d004      	beq.n	8008080 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f949 	bl	8008310 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800807e:	e065      	b.n	800814c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fa10 	bl	80084a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2203      	movs	r2, #3
 800808a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800808e:	e05d      	b.n	800814c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fa08 	bl	80084a6 <USBD_CtlSendStatus>
      break;
 8008096:	e059      	b.n	800814c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008098:	4b2f      	ldr	r3, [pc, #188]	; (8008158 <USBD_SetConfig+0x148>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d112      	bne.n	80080c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080a8:	4b2b      	ldr	r3, [pc, #172]	; (8008158 <USBD_SetConfig+0x148>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	461a      	mov	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080b2:	4b29      	ldr	r3, [pc, #164]	; (8008158 <USBD_SetConfig+0x148>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff f93b 	bl	8007334 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f9f1 	bl	80084a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080c4:	e042      	b.n	800814c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80080c6:	4b24      	ldr	r3, [pc, #144]	; (8008158 <USBD_SetConfig+0x148>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d02a      	beq.n	800812a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff f929 	bl	8007334 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080e2:	4b1d      	ldr	r3, [pc, #116]	; (8008158 <USBD_SetConfig+0x148>)
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080ec:	4b1a      	ldr	r3, [pc, #104]	; (8008158 <USBD_SetConfig+0x148>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7ff f902 	bl	80072fc <USBD_SetClassConfig>
 80080f8:	4603      	mov	r3, r0
 80080fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00f      	beq.n	8008122 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f903 	bl	8008310 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	b2db      	uxtb	r3, r3
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff f90e 	bl	8007334 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008120:	e014      	b.n	800814c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f9bf 	bl	80084a6 <USBD_CtlSendStatus>
      break;
 8008128:	e010      	b.n	800814c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f9bb 	bl	80084a6 <USBD_CtlSendStatus>
      break;
 8008130:	e00c      	b.n	800814c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f8eb 	bl	8008310 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800813a:	4b07      	ldr	r3, [pc, #28]	; (8008158 <USBD_SetConfig+0x148>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff f8f7 	bl	8007334 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008146:	2303      	movs	r3, #3
 8008148:	73fb      	strb	r3, [r7, #15]
      break;
 800814a:	bf00      	nop
  }

  return ret;
 800814c:	7bfb      	ldrb	r3, [r7, #15]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	20000220 	.word	0x20000220

0800815c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	88db      	ldrh	r3, [r3, #6]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d004      	beq.n	8008178 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f8cd 	bl	8008310 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008176:	e023      	b.n	80081c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b02      	cmp	r3, #2
 8008182:	dc02      	bgt.n	800818a <USBD_GetConfig+0x2e>
 8008184:	2b00      	cmp	r3, #0
 8008186:	dc03      	bgt.n	8008190 <USBD_GetConfig+0x34>
 8008188:	e015      	b.n	80081b6 <USBD_GetConfig+0x5a>
 800818a:	2b03      	cmp	r3, #3
 800818c:	d00b      	beq.n	80081a6 <USBD_GetConfig+0x4a>
 800818e:	e012      	b.n	80081b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3308      	adds	r3, #8
 800819a:	2201      	movs	r2, #1
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f927 	bl	80083f2 <USBD_CtlSendData>
        break;
 80081a4:	e00c      	b.n	80081c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3304      	adds	r3, #4
 80081aa:	2201      	movs	r2, #1
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f91f 	bl	80083f2 <USBD_CtlSendData>
        break;
 80081b4:	e004      	b.n	80081c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f8a9 	bl	8008310 <USBD_CtlError>
        break;
 80081be:	bf00      	nop
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	3b01      	subs	r3, #1
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d81e      	bhi.n	800821e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	88db      	ldrh	r3, [r3, #6]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d004      	beq.n	80081f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f890 	bl	8008310 <USBD_CtlError>
        break;
 80081f0:	e01a      	b.n	8008228 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d005      	beq.n	800820e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f043 0202 	orr.w	r2, r3, #2
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	330c      	adds	r3, #12
 8008212:	2202      	movs	r2, #2
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f8eb 	bl	80083f2 <USBD_CtlSendData>
      break;
 800821c:	e004      	b.n	8008228 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f875 	bl	8008310 <USBD_CtlError>
      break;
 8008226:	bf00      	nop
  }
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d106      	bne.n	8008250 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f92b 	bl	80084a6 <USBD_CtlSendStatus>
  }
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008268:	b2db      	uxtb	r3, r3
 800826a:	3b01      	subs	r3, #1
 800826c:	2b02      	cmp	r3, #2
 800826e:	d80b      	bhi.n	8008288 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	885b      	ldrh	r3, [r3, #2]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d10c      	bne.n	8008292 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f910 	bl	80084a6 <USBD_CtlSendStatus>
      }
      break;
 8008286:	e004      	b.n	8008292 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f840 	bl	8008310 <USBD_CtlError>
      break;
 8008290:	e000      	b.n	8008294 <USBD_ClrFeature+0x3c>
      break;
 8008292:	bf00      	nop
  }
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	781a      	ldrb	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3301      	adds	r3, #1
 80082b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	781a      	ldrb	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3301      	adds	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f7ff fabb 	bl	8007842 <SWAPBYTE>
 80082cc:	4603      	mov	r3, r0
 80082ce:	461a      	mov	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f7ff faae 	bl	8007842 <SWAPBYTE>
 80082e6:	4603      	mov	r3, r0
 80082e8:	461a      	mov	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3301      	adds	r3, #1
 80082f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3301      	adds	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff faa1 	bl	8007842 <SWAPBYTE>
 8008300:	4603      	mov	r3, r0
 8008302:	461a      	mov	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	80da      	strh	r2, [r3, #6]
}
 8008308:	bf00      	nop
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800831a:	2180      	movs	r1, #128	; 0x80
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f00e ffc7 	bl	80172b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008322:	2100      	movs	r1, #0
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f00e ffc3 	bl	80172b0 <USBD_LL_StallEP>
}
 800832a:	bf00      	nop
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b086      	sub	sp, #24
 8008336:	af00      	add	r7, sp, #0
 8008338:	60f8      	str	r0, [r7, #12]
 800833a:	60b9      	str	r1, [r7, #8]
 800833c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d036      	beq.n	80083b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800834c:	6938      	ldr	r0, [r7, #16]
 800834e:	f000 f836 	bl	80083be <USBD_GetLen>
 8008352:	4603      	mov	r3, r0
 8008354:	3301      	adds	r3, #1
 8008356:	b29b      	uxth	r3, r3
 8008358:	005b      	lsls	r3, r3, #1
 800835a:	b29a      	uxth	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	4413      	add	r3, r2
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	7812      	ldrb	r2, [r2, #0]
 800836a:	701a      	strb	r2, [r3, #0]
  idx++;
 800836c:	7dfb      	ldrb	r3, [r7, #23]
 800836e:	3301      	adds	r3, #1
 8008370:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	4413      	add	r3, r2
 8008378:	2203      	movs	r2, #3
 800837a:	701a      	strb	r2, [r3, #0]
  idx++;
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	3301      	adds	r3, #1
 8008380:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008382:	e013      	b.n	80083ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008384:	7dfb      	ldrb	r3, [r7, #23]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	4413      	add	r3, r2
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	7812      	ldrb	r2, [r2, #0]
 800838e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	3301      	adds	r3, #1
 8008394:	613b      	str	r3, [r7, #16]
    idx++;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	3301      	adds	r3, #1
 800839a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	4413      	add	r3, r2
 80083a2:	2200      	movs	r2, #0
 80083a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
 80083a8:	3301      	adds	r3, #1
 80083aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e7      	bne.n	8008384 <USBD_GetString+0x52>
 80083b4:	e000      	b.n	80083b8 <USBD_GetString+0x86>
    return;
 80083b6:	bf00      	nop
  }
}
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083be:	b480      	push	{r7}
 80083c0:	b085      	sub	sp, #20
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083ce:	e005      	b.n	80083dc <USBD_GetLen+0x1e>
  {
    len++;
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	3301      	adds	r3, #1
 80083d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	3301      	adds	r3, #1
 80083da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1f5      	bne.n	80083d0 <USBD_GetLen+0x12>
  }

  return len;
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2202      	movs	r2, #2
 8008402:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	2100      	movs	r1, #0
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f00e ffd2 	bl	80173c2 <USBD_LL_Transmit>

  return USBD_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	2100      	movs	r1, #0
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f00e ffc1 	bl	80173c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2203      	movs	r2, #3
 800845a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	2100      	movs	r1, #0
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f00e ffc5 	bl	8017404 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	2100      	movs	r1, #0
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f00e ffb4 	bl	8017404 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2204      	movs	r2, #4
 80084b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084b6:	2300      	movs	r3, #0
 80084b8:	2200      	movs	r2, #0
 80084ba:	2100      	movs	r1, #0
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f00e ff80 	bl	80173c2 <USBD_LL_Transmit>

  return USBD_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2205      	movs	r2, #5
 80084d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084dc:	2300      	movs	r3, #0
 80084de:	2200      	movs	r2, #0
 80084e0:	2100      	movs	r1, #0
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f00e ff8e 	bl	8017404 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	88db      	ldrh	r3, [r3, #6]
 80084fe:	3301      	adds	r3, #1
 8008500:	b29a      	uxth	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	88db      	ldrh	r3, [r3, #6]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d105      	bne.n	800851a <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	88db      	ldrh	r3, [r3, #6]
 8008512:	3301      	adds	r3, #1
 8008514:	b29a      	uxth	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	88db      	ldrh	r3, [r3, #6]
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	460b      	mov	r3, r1
 8008534:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	881b      	ldrh	r3, [r3, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4413      	add	r3, r2
 8008540:	78fa      	ldrb	r2, [r7, #3]
 8008542:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	3301      	adds	r3, #1
 800854a:	b29a      	uxth	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	2bff      	cmp	r3, #255	; 0xff
 8008556:	d902      	bls.n	800855e <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	801a      	strh	r2, [r3, #0]
  }
}
 800855e:	bf00      	nop
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	885b      	ldrh	r3, [r3, #2]
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4413      	add	r3, r2
 800857c:	3304      	adds	r3, #4
}
 800857e:	4618      	mov	r0, r3
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
	...

0800858c <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8008598:	887b      	ldrh	r3, [r7, #2]
 800859a:	2bff      	cmp	r3, #255	; 0xff
 800859c:	d905      	bls.n	80085aa <mqtt_ringbuf_advance_get_idx+0x1e>
 800859e:	4b0e      	ldr	r3, [pc, #56]	; (80085d8 <mqtt_ringbuf_advance_get_idx+0x4c>)
 80085a0:	22cb      	movs	r2, #203	; 0xcb
 80085a2:	490e      	ldr	r1, [pc, #56]	; (80085dc <mqtt_ringbuf_advance_get_idx+0x50>)
 80085a4:	480e      	ldr	r0, [pc, #56]	; (80085e0 <mqtt_ringbuf_advance_get_idx+0x54>)
 80085a6:	f00f f807 	bl	80175b8 <iprintf>

  rb->get += len;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	885a      	ldrh	r2, [r3, #2]
 80085ae:	887b      	ldrh	r3, [r7, #2]
 80085b0:	4413      	add	r3, r2
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	885b      	ldrh	r3, [r3, #2]
 80085bc:	2bff      	cmp	r3, #255	; 0xff
 80085be:	d906      	bls.n	80085ce <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	885b      	ldrh	r3, [r3, #2]
 80085c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	805a      	strh	r2, [r3, #2]
  }
}
 80085ce:	bf00      	nop
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	08018b58 	.word	0x08018b58
 80085dc:	08018b90 	.word	0x08018b90
 80085e0:	08018bd0 	.word	0x08018bd0

080085e4 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	885b      	ldrh	r3, [r3, #2]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008600:	d303      	bcc.n	800860a <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008608:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	b29b      	uxth	r3, r3
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
	...

0800861c <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 800861c:	b590      	push	{r4, r7, lr}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7ff ffda 	bl	80085e4 <mqtt_ringbuf_len>
 8008630:	4603      	mov	r3, r0
 8008632:	461a      	mov	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	885b      	ldrh	r3, [r3, #2]
 8008638:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800863c:	429a      	cmp	r2, r3
 800863e:	da04      	bge.n	800864a <mqtt_output_send+0x2e>
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff ffcf 	bl	80085e4 <mqtt_ringbuf_len>
 8008646:	4603      	mov	r3, r0
 8008648:	e004      	b.n	8008654 <mqtt_output_send+0x38>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	885b      	ldrh	r3, [r3, #2]
 800864e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008652:	b29b      	uxth	r3, r3
 8008654:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800865c:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d105      	bne.n	8008670 <mqtt_output_send+0x54>
 8008664:	4b44      	ldr	r3, [pc, #272]	; (8008778 <mqtt_output_send+0x15c>)
 8008666:	22f0      	movs	r2, #240	; 0xf0
 8008668:	4944      	ldr	r1, [pc, #272]	; (800877c <mqtt_output_send+0x160>)
 800866a:	4845      	ldr	r0, [pc, #276]	; (8008780 <mqtt_output_send+0x164>)
 800866c:	f00e ffa4 	bl	80175b8 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8008670:	89bb      	ldrh	r3, [r7, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d07c      	beq.n	8008770 <mqtt_output_send+0x154>
 8008676:	897b      	ldrh	r3, [r7, #10]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d079      	beq.n	8008770 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 800867c:	89ba      	ldrh	r2, [r7, #12]
 800867e:	897b      	ldrh	r3, [r7, #10]
 8008680:	429a      	cmp	r2, r3
 8008682:	d90d      	bls.n	80086a0 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8008684:	897b      	ldrh	r3, [r7, #10]
 8008686:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff ffab 	bl	80085e4 <mqtt_ringbuf_len>
 800868e:	4603      	mov	r3, r0
 8008690:	461a      	mov	r2, r3
 8008692:	897b      	ldrh	r3, [r7, #10]
 8008694:	4293      	cmp	r3, r2
 8008696:	bf34      	ite	cc
 8008698:	2301      	movcc	r3, #1
 800869a:	2300      	movcs	r3, #0
 800869c:	b2db      	uxtb	r3, r3
 800869e:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff ff62 	bl	800856a <mqtt_ringbuf_get_ptr>
 80086a6:	4601      	mov	r1, r0
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <mqtt_output_send+0x96>
 80086ae:	2303      	movs	r3, #3
 80086b0:	e000      	b.n	80086b4 <mqtt_output_send+0x98>
 80086b2:	2301      	movs	r3, #1
 80086b4:	89ba      	ldrh	r2, [r7, #12]
 80086b6:	6838      	ldr	r0, [r7, #0]
 80086b8:	f007 fd16 	bl	80100e8 <tcp_write>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 80086c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d146      	bne.n	8008756 <mqtt_output_send+0x13a>
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d043      	beq.n	8008756 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80086ce:	89bb      	ldrh	r3, [r7, #12]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff ff5a 	bl	800858c <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80086de:	461c      	mov	r4, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff ff7f 	bl	80085e4 <mqtt_ringbuf_len>
 80086e6:	4603      	mov	r3, r0
 80086e8:	461a      	mov	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	885b      	ldrh	r3, [r3, #2]
 80086ee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80086f2:	429a      	cmp	r2, r3
 80086f4:	da04      	bge.n	8008700 <mqtt_output_send+0xe4>
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff ff74 	bl	80085e4 <mqtt_ringbuf_len>
 80086fc:	4603      	mov	r3, r0
 80086fe:	e003      	b.n	8008708 <mqtt_output_send+0xec>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	885b      	ldrh	r3, [r3, #2]
 8008704:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008708:	42a3      	cmp	r3, r4
 800870a:	dd03      	ble.n	8008714 <mqtt_output_send+0xf8>
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008712:	e014      	b.n	800873e <mqtt_output_send+0x122>
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff ff65 	bl	80085e4 <mqtt_ringbuf_len>
 800871a:	4603      	mov	r3, r0
 800871c:	461a      	mov	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	885b      	ldrh	r3, [r3, #2]
 8008722:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008726:	429a      	cmp	r2, r3
 8008728:	da04      	bge.n	8008734 <mqtt_output_send+0x118>
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7ff ff5a 	bl	80085e4 <mqtt_ringbuf_len>
 8008730:	4603      	mov	r3, r0
 8008732:	e004      	b.n	800873e <mqtt_output_send+0x122>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	885b      	ldrh	r3, [r3, #2]
 8008738:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800873c:	b29b      	uxth	r3, r3
 800873e:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff ff12 	bl	800856a <mqtt_ringbuf_get_ptr>
 8008746:	4601      	mov	r1, r0
 8008748:	89ba      	ldrh	r2, [r7, #12]
 800874a:	2301      	movs	r3, #1
 800874c:	6838      	ldr	r0, [r7, #0]
 800874e:	f007 fccb 	bl	80100e8 <tcp_write>
 8008752:	4603      	mov	r3, r0
 8008754:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8008756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d109      	bne.n	8008772 <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800875e:	89bb      	ldrh	r3, [r7, #12]
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff ff12 	bl	800858c <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8008768:	6838      	ldr	r0, [r7, #0]
 800876a:	f008 faa7 	bl	8010cbc <tcp_output>
 800876e:	e000      	b.n	8008772 <mqtt_output_send+0x156>
    return;
 8008770:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	bd90      	pop	{r4, r7, pc}
 8008778:	08018b58 	.word	0x08018b58
 800877c:	08018bf8 	.word	0x08018bf8
 8008780:	08018bd0 	.word	0x08018bd0

08008784 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	4613      	mov	r3, r2
 8008792:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8008794:	2300      	movs	r3, #0
 8008796:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d106      	bne.n	80087ac <mqtt_create_request+0x28>
 800879e:	4b19      	ldr	r3, [pc, #100]	; (8008804 <mqtt_create_request+0x80>)
 80087a0:	f240 1223 	movw	r2, #291	; 0x123
 80087a4:	4918      	ldr	r1, [pc, #96]	; (8008808 <mqtt_create_request+0x84>)
 80087a6:	4819      	ldr	r0, [pc, #100]	; (800880c <mqtt_create_request+0x88>)
 80087a8:	f00e ff06 	bl	80175b8 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 80087ac:	2300      	movs	r3, #0
 80087ae:	74fb      	strb	r3, [r7, #19]
 80087b0:	e01f      	b.n	80087f2 <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 80087b2:	7cfb      	ldrb	r3, [r7, #19]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	4413      	add	r3, r2
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	7cfb      	ldrb	r3, [r7, #19]
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	68f9      	ldr	r1, [r7, #12]
 80087c2:	440b      	add	r3, r1
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d111      	bne.n	80087ec <mqtt_create_request+0x68>
      r = &r_objs[n];
 80087c8:	7cfb      	ldrb	r3, [r7, #19]
 80087ca:	011b      	lsls	r3, r3, #4
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	4413      	add	r3, r2
 80087d0:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	6a3a      	ldr	r2, [r7, #32]
 80087e2:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	88fa      	ldrh	r2, [r7, #6]
 80087e8:	819a      	strh	r2, [r3, #12]
      break;
 80087ea:	e006      	b.n	80087fa <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 80087ec:	7cfb      	ldrb	r3, [r7, #19]
 80087ee:	3301      	adds	r3, #1
 80087f0:	74fb      	strb	r3, [r7, #19]
 80087f2:	7cfb      	ldrb	r3, [r7, #19]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d8db      	bhi.n	80087b2 <mqtt_create_request+0x2e>
    }
  }
  return r;
 80087fa:	697b      	ldr	r3, [r7, #20]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	08018b58 	.word	0x08018b58
 8008808:	08018c18 	.word	0x08018c18
 800880c:	08018bd0 	.word	0x08018bd0

08008810 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 800881a:	2300      	movs	r3, #0
 800881c:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d106      	bne.n	8008836 <mqtt_append_request+0x26>
 8008828:	4b1b      	ldr	r3, [pc, #108]	; (8008898 <mqtt_append_request+0x88>)
 800882a:	f240 123f 	movw	r2, #319	; 0x13f
 800882e:	491b      	ldr	r1, [pc, #108]	; (800889c <mqtt_append_request+0x8c>)
 8008830:	481b      	ldr	r0, [pc, #108]	; (80088a0 <mqtt_append_request+0x90>)
 8008832:	f00e fec1 	bl	80175b8 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	e00a      	b.n	8008854 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	89da      	ldrh	r2, [r3, #14]
 8008842:	8a7b      	ldrh	r3, [r7, #18]
 8008844:	4413      	add	r3, r2
 8008846:	b29b      	uxth	r3, r3
 8008848:	827b      	strh	r3, [r7, #18]
    head = iter;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1f1      	bne.n	800883e <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 800885a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800885e:	2b1e      	cmp	r3, #30
 8008860:	dd06      	ble.n	8008870 <mqtt_append_request+0x60>
 8008862:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <mqtt_append_request+0x88>)
 8008864:	f240 1247 	movw	r2, #327	; 0x147
 8008868:	490e      	ldr	r1, [pc, #56]	; (80088a4 <mqtt_append_request+0x94>)
 800886a:	480d      	ldr	r0, [pc, #52]	; (80088a0 <mqtt_append_request+0x90>)
 800886c:	f00e fea4 	bl	80175b8 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8008870:	8a7b      	ldrh	r3, [r7, #18]
 8008872:	f1c3 031e 	rsb	r3, r3, #30
 8008876:	b29a      	uxth	r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <mqtt_append_request+0x7a>
    *tail = r;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8008888:	e002      	b.n	8008890 <mqtt_append_request+0x80>
    head->next = r;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	601a      	str	r2, [r3, #0]
}
 8008890:	bf00      	nop
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	08018b58 	.word	0x08018b58
 800889c:	08018c3c 	.word	0x08018c3c
 80088a0:	08018bd0 	.word	0x08018bd0
 80088a4:	08018c60 	.word	0x08018c60

080088a8 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <mqtt_delete_request+0x14>
    r->next = r;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	601a      	str	r2, [r3, #0]
  }
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 80088d4:	2300      	movs	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	2300      	movs	r3, #0
 80088da:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d106      	bne.n	80088f0 <mqtt_take_request+0x28>
 80088e2:	4b1f      	ldr	r3, [pc, #124]	; (8008960 <mqtt_take_request+0x98>)
 80088e4:	f240 1267 	movw	r2, #359	; 0x167
 80088e8:	491e      	ldr	r1, [pc, #120]	; (8008964 <mqtt_take_request+0x9c>)
 80088ea:	481f      	ldr	r0, [pc, #124]	; (8008968 <mqtt_take_request+0xa0>)
 80088ec:	f00e fe64 	bl	80175b8 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	e009      	b.n	800890c <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	899b      	ldrh	r3, [r3, #12]
 80088fc:	887a      	ldrh	r2, [r7, #2]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d008      	beq.n	8008914 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1f2      	bne.n	80088f8 <mqtt_take_request+0x30>
 8008912:	e000      	b.n	8008916 <mqtt_take_request+0x4e>
      break;
 8008914:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d01c      	beq.n	8008956 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d104      	bne.n	800892c <mqtt_take_request+0x64>
      *tail = iter->next;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	e003      	b.n	8008934 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d009      	beq.n	8008950 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	89d9      	ldrh	r1, [r3, #14]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	89da      	ldrh	r2, [r3, #14]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	440a      	add	r2, r1
 800894c:	b292      	uxth	r2, r2
 800894e:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8008956:	68fb      	ldr	r3, [r7, #12]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	08018b58 	.word	0x08018b58
 8008964:	08018c98 	.word	0x08018c98
 8008968:	08018bd0 	.word	0x08018bd0

0800896c <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d106      	bne.n	800898c <mqtt_request_time_elapsed+0x20>
 800897e:	4b21      	ldr	r3, [pc, #132]	; (8008a04 <mqtt_request_time_elapsed+0x98>)
 8008980:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8008984:	4920      	ldr	r1, [pc, #128]	; (8008a08 <mqtt_request_time_elapsed+0x9c>)
 8008986:	4821      	ldr	r0, [pc, #132]	; (8008a0c <mqtt_request_time_elapsed+0xa0>)
 8008988:	f00e fe16 	bl	80175b8 <iprintf>
  r = *tail;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8008992:	e02c      	b.n	80089ee <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	b29a      	uxth	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	89db      	ldrh	r3, [r3, #14]
 800899c:	429a      	cmp	r2, r3
 800899e:	d31c      	bcc.n	80089da <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	89db      	ldrh	r3, [r3, #14]
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	78fa      	ldrb	r2, [r7, #3]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d007      	beq.n	80089cc <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	6892      	ldr	r2, [r2, #8]
 80089c4:	f06f 0102 	mvn.w	r1, #2
 80089c8:	4610      	mov	r0, r2
 80089ca:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f7ff ff6b 	bl	80088a8 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	e009      	b.n	80089ee <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	89da      	ldrh	r2, [r3, #14]
 80089de:	78fb      	ldrb	r3, [r7, #3]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	81da      	strh	r2, [r3, #14]
      t = 0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <mqtt_request_time_elapsed+0x8e>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1cc      	bne.n	8008994 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 80089fa:	bf00      	nop
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	08018b58 	.word	0x08018b58
 8008a08:	08018cb8 	.word	0x08018cb8
 8008a0c:	08018bd0 	.word	0x08018bd0

08008a10 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d106      	bne.n	8008a2c <mqtt_clear_requests+0x1c>
 8008a1e:	4b0e      	ldr	r3, [pc, #56]	; (8008a58 <mqtt_clear_requests+0x48>)
 8008a20:	f240 12a7 	movw	r2, #423	; 0x1a7
 8008a24:	490d      	ldr	r1, [pc, #52]	; (8008a5c <mqtt_clear_requests+0x4c>)
 8008a26:	480e      	ldr	r0, [pc, #56]	; (8008a60 <mqtt_clear_requests+0x50>)
 8008a28:	f00e fdc6 	bl	80175b8 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	e007      	b.n	8008a44 <mqtt_clear_requests+0x34>
    next = iter->next;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7ff ff34 	bl	80088a8 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1f4      	bne.n	8008a34 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]
}
 8008a50:	bf00      	nop
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	08018b58 	.word	0x08018b58
 8008a5c:	08018ce0 	.word	0x08018ce0
 8008a60:	08018bd0 	.word	0x08018bd0

08008a64 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d106      	bne.n	8008a82 <mqtt_init_requests+0x1e>
 8008a74:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <mqtt_init_requests+0x50>)
 8008a76:	f240 12b7 	movw	r2, #439	; 0x1b7
 8008a7a:	490f      	ldr	r1, [pc, #60]	; (8008ab8 <mqtt_init_requests+0x54>)
 8008a7c:	480f      	ldr	r0, [pc, #60]	; (8008abc <mqtt_init_requests+0x58>)
 8008a7e:	f00e fd9b 	bl	80175b8 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8008a82:	2300      	movs	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]
 8008a86:	e00b      	b.n	8008aa0 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	011a      	lsls	r2, r3, #4
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	011b      	lsls	r3, r3, #4
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	440b      	add	r3, r1
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	440a      	add	r2, r1
 8008a98:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	73fb      	strb	r3, [r7, #15]
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d8ef      	bhi.n	8008a88 <mqtt_init_requests+0x24>
  }
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	08018b58 	.word	0x08018b58
 8008ab8:	08018d04 	.word	0x08018d04
 8008abc:	08018bd0 	.word	0x08018bd0

08008ac0 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8008acc:	78fb      	ldrb	r3, [r7, #3]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff fd2a 	bl	800852a <mqtt_ringbuf_put>
}
 8008ad6:	bf00      	nop
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8008aea:	887b      	ldrh	r3, [r7, #2]
 8008aec:	0a1b      	lsrs	r3, r3, #8
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7ff fd18 	bl	800852a <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8008afa:	887b      	ldrh	r3, [r7, #2]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff fd12 	bl	800852a <mqtt_ringbuf_put>
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b086      	sub	sp, #24
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	82fb      	strh	r3, [r7, #22]
 8008b20:	e00a      	b.n	8008b38 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8008b22:	8afb      	ldrh	r3, [r7, #22]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	4413      	add	r3, r2
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f7ff fcfc 	bl	800852a <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8008b32:	8afb      	ldrh	r3, [r7, #22]
 8008b34:	3301      	adds	r3, #1
 8008b36:	82fb      	strh	r3, [r7, #22]
 8008b38:	8afa      	ldrh	r2, [r7, #22]
 8008b3a:	88fb      	ldrh	r3, [r7, #6]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d3f0      	bcc.n	8008b22 <mqtt_output_append_buf+0x14>
  }
}
 8008b40:	bf00      	nop
 8008b42:	bf00      	nop
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b086      	sub	sp, #24
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	4613      	mov	r3, r2
 8008b56:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8008b58:	88fb      	ldrh	r3, [r7, #6]
 8008b5a:	0a1b      	lsrs	r3, r3, #8
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	4619      	mov	r1, r3
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f7ff fce1 	bl	800852a <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8008b68:	88fb      	ldrh	r3, [r7, #6]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7ff fcdb 	bl	800852a <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8008b74:	2300      	movs	r3, #0
 8008b76:	82fb      	strh	r3, [r7, #22]
 8008b78:	e00a      	b.n	8008b90 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8008b7a:	8afb      	ldrh	r3, [r7, #22]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	4413      	add	r3, r2
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	4619      	mov	r1, r3
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f7ff fcd0 	bl	800852a <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8008b8a:	8afb      	ldrh	r3, [r7, #22]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	82fb      	strh	r3, [r7, #22]
 8008b90:	8afa      	ldrh	r2, [r7, #22]
 8008b92:	88fb      	ldrh	r3, [r7, #6]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d3f0      	bcc.n	8008b7a <mqtt_output_append_string+0x30>
  }
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	461a      	mov	r2, r3
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	70fb      	strb	r3, [r7, #3]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70bb      	strb	r3, [r7, #2]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	b25a      	sxtb	r2, r3
 8008bc2:	78bb      	ldrb	r3, [r7, #2]
 8008bc4:	00db      	lsls	r3, r3, #3
 8008bc6:	b25b      	sxtb	r3, r3
 8008bc8:	f003 0308 	and.w	r3, r3, #8
 8008bcc:	b25b      	sxtb	r3, r3
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	b25a      	sxtb	r2, r3
 8008bd2:	787b      	ldrb	r3, [r7, #1]
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	b25b      	sxtb	r3, r3
 8008bd8:	f003 0306 	and.w	r3, r3, #6
 8008bdc:	b25b      	sxtb	r3, r3
 8008bde:	4313      	orrs	r3, r2
 8008be0:	b25a      	sxtb	r2, r3
 8008be2:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	b25b      	sxtb	r3, r3
 8008bec:	4313      	orrs	r3, r2
 8008bee:	b25b      	sxtb	r3, r3
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff ff63 	bl	8008ac0 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8008bfa:	8abb      	ldrh	r3, [r7, #20]
 8008bfc:	b25b      	sxtb	r3, r3
 8008bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c02:	b25b      	sxtb	r3, r3
 8008c04:	8aba      	ldrh	r2, [r7, #20]
 8008c06:	2a7f      	cmp	r2, #127	; 0x7f
 8008c08:	d902      	bls.n	8008c10 <mqtt_output_append_fixed_header+0x6e>
 8008c0a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8008c0e:	e000      	b.n	8008c12 <mqtt_output_append_fixed_header+0x70>
 8008c10:	2200      	movs	r2, #0
 8008c12:	4313      	orrs	r3, r2
 8008c14:	b25b      	sxtb	r3, r3
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff ff50 	bl	8008ac0 <mqtt_output_append_u8>
    r_length >>= 7;
 8008c20:	8abb      	ldrh	r3, [r7, #20]
 8008c22:	09db      	lsrs	r3, r3, #7
 8008c24:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8008c26:	8abb      	ldrh	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e6      	bne.n	8008bfa <mqtt_output_append_fixed_header+0x58>
}
 8008c2c:	bf00      	nop
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
	...

08008c38 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8008c38:	b590      	push	{r4, r7, lr}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8008c44:	887b      	ldrh	r3, [r7, #2]
 8008c46:	3301      	adds	r3, #1
 8008c48:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d106      	bne.n	8008c5e <mqtt_output_check_space+0x26>
 8008c50:	4b0f      	ldr	r3, [pc, #60]	; (8008c90 <mqtt_output_check_space+0x58>)
 8008c52:	f240 2207 	movw	r2, #519	; 0x207
 8008c56:	490f      	ldr	r1, [pc, #60]	; (8008c94 <mqtt_output_check_space+0x5c>)
 8008c58:	480f      	ldr	r0, [pc, #60]	; (8008c98 <mqtt_output_check_space+0x60>)
 8008c5a:	f00e fcad 	bl	80175b8 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8008c5e:	89fb      	ldrh	r3, [r7, #14]
 8008c60:	3301      	adds	r3, #1
 8008c62:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8008c64:	887b      	ldrh	r3, [r7, #2]
 8008c66:	09db      	lsrs	r3, r3, #7
 8008c68:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8008c6a:	887b      	ldrh	r3, [r7, #2]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1f6      	bne.n	8008c5e <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 8008c70:	89fc      	ldrh	r4, [r7, #14]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff fcb6 	bl	80085e4 <mqtt_ringbuf_len>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008c7e:	429c      	cmp	r4, r3
 8008c80:	bfd4      	ite	le
 8008c82:	2301      	movle	r3, #1
 8008c84:	2300      	movgt	r3, #0
 8008c86:	b2db      	uxtb	r3, r3
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd90      	pop	{r4, r7, pc}
 8008c90:	08018b58 	.word	0x08018b58
 8008c94:	08018d28 	.word	0x08018d28
 8008c98:	08018bd0 	.word	0x08018bd0

08008c9c <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d106      	bne.n	8008cbc <mqtt_close+0x20>
 8008cae:	4b27      	ldr	r3, [pc, #156]	; (8008d4c <mqtt_close+0xb0>)
 8008cb0:	f240 221b 	movw	r2, #539	; 0x21b
 8008cb4:	4926      	ldr	r1, [pc, #152]	; (8008d50 <mqtt_close+0xb4>)
 8008cb6:	4827      	ldr	r0, [pc, #156]	; (8008d54 <mqtt_close+0xb8>)
 8008cb8:	f00e fc7e 	bl	80175b8 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d024      	beq.n	8008d0e <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f004 faf8 	bl	800d2c0 <tcp_recv>
    altcp_err(client->conn,  NULL);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f004 fb36 	bl	800d348 <tcp_err>
    altcp_sent(client->conn, NULL);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f004 fb0e 	bl	800d304 <tcp_sent>
    res = altcp_close(client->conn);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f003 f90f 	bl	800bf10 <tcp_close>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8008cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d004      	beq.n	8008d08 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f003 f9ee 	bl	800c0e4 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	3318      	adds	r3, #24
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff fe7c 	bl	8008a10 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	480f      	ldr	r0, [pc, #60]	; (8008d58 <mqtt_close+0xbc>)
 8008d1c:	f009 f84c 	bl	8011db8 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	7a9b      	ldrb	r3, [r3, #10]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00d      	beq.n	8008d44 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d006      	beq.n	8008d44 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6911      	ldr	r1, [r2, #16]
 8008d3e:	887a      	ldrh	r2, [r7, #2]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	4798      	blx	r3
    }
  }
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	08018b58 	.word	0x08018b58
 8008d50:	08018d4c 	.word	0x08018d4c
 8008d54:	08018bd0 	.word	0x08018bd0
 8008d58:	08008d5d 	.word	0x08008d5d

08008d5c <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af02      	add	r7, sp, #8
 8008d62:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8008d64:	2301      	movs	r3, #1
 8008d66:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <mqtt_cyclic_timer+0x24>
 8008d72:	4b42      	ldr	r3, [pc, #264]	; (8008e7c <mqtt_cyclic_timer+0x120>)
 8008d74:	f44f 7211 	mov.w	r2, #580	; 0x244
 8008d78:	4941      	ldr	r1, [pc, #260]	; (8008e80 <mqtt_cyclic_timer+0x124>)
 8008d7a:	4842      	ldr	r0, [pc, #264]	; (8008e84 <mqtt_cyclic_timer+0x128>)
 8008d7c:	f00e fc1c 	bl	80175b8 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	7a9b      	ldrb	r3, [r3, #10]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d115      	bne.n	8008db4 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	2b63      	cmp	r3, #99	; 0x63
 8008da2:	dd5e      	ble.n	8008e62 <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8008da4:	f240 1101 	movw	r1, #257	; 0x101
 8008da8:	68b8      	ldr	r0, [r7, #8]
 8008daa:	f7ff ff77 	bl	8008c9c <mqtt_close>
      restart_timer = 0;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]
 8008db2:	e056      	b.n	8008e62 <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	7a9b      	ldrb	r3, [r3, #10]
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d150      	bne.n	8008e5e <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	3318      	adds	r3, #24
 8008dc0:	2105      	movs	r1, #5
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff fdd2 	bl	800896c <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	885b      	ldrh	r3, [r3, #2]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d048      	beq.n	8008e62 <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	889b      	ldrh	r3, [r3, #4]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	889b      	ldrh	r3, [r3, #4]
 8008de0:	461a      	mov	r2, r3
 8008de2:	4613      	mov	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	441a      	add	r2, r3
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	885b      	ldrh	r3, [r3, #2]
 8008dec:	4619      	mov	r1, r3
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	885b      	ldrh	r3, [r3, #2]
 8008df2:	085b      	lsrs	r3, r3, #1
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	440b      	add	r3, r1
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	dd06      	ble.n	8008e0a <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8008dfc:	f240 1101 	movw	r1, #257	; 0x101
 8008e00:	68b8      	ldr	r0, [r7, #8]
 8008e02:	f7ff ff4b 	bl	8008c9c <mqtt_close>
        restart_timer = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	8852      	ldrh	r2, [r2, #2]
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	db18      	blt.n	8008e50 <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	33ec      	adds	r3, #236	; 0xec
 8008e22:	2100      	movs	r1, #0
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7ff ff07 	bl	8008c38 <mqtt_output_check_space>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d018      	beq.n	8008e62 <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008e36:	2300      	movs	r3, #0
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	2200      	movs	r2, #0
 8008e42:	210c      	movs	r1, #12
 8008e44:	f7ff fead 	bl	8008ba2 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	801a      	strh	r2, [r3, #0]
 8008e4e:	e008      	b.n	8008e62 <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	3301      	adds	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	801a      	strh	r2, [r3, #0]
 8008e5c:	e001      	b.n	8008e62 <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d005      	beq.n	8008e74 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	4907      	ldr	r1, [pc, #28]	; (8008e88 <mqtt_cyclic_timer+0x12c>)
 8008e6c:	f241 3088 	movw	r0, #5000	; 0x1388
 8008e70:	f008 ff7c 	bl	8011d6c <sys_timeout>
  }
}
 8008e74:	bf00      	nop
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	08018b58 	.word	0x08018b58
 8008e80:	08018d68 	.word	0x08018d68
 8008e84:	08018bd0 	.word	0x08018bd0
 8008e88:	08008d5d 	.word	0x08008d5d

08008e8c <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af02      	add	r7, sp, #8
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	4608      	mov	r0, r1
 8008e96:	4611      	mov	r1, r2
 8008e98:	461a      	mov	r2, r3
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	70fb      	strb	r3, [r7, #3]
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	803b      	strh	r3, [r7, #0]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	33ec      	adds	r3, #236	; 0xec
 8008eae:	2102      	movs	r1, #2
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7ff fec1 	bl	8008c38 <mqtt_output_check_space>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01c      	beq.n	8008ef6 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008ec2:	78bb      	ldrb	r3, [r7, #2]
 8008ec4:	78f9      	ldrb	r1, [r7, #3]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	9201      	str	r2, [sp, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	9200      	str	r2, [sp, #0]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f7ff fe67 	bl	8008ba2 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	33ec      	adds	r3, #236	; 0xec
 8008ed8:	883a      	ldrh	r2, [r7, #0]
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff fdfe 	bl	8008ade <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	4619      	mov	r1, r3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	f7ff fb94 	bl	800861c <mqtt_output_send>
 8008ef4:	e001      	b.n	8008efa <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8008ef6:	23ff      	movs	r3, #255	; 0xff
 8008ef8:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 8008efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00c      	beq.n	8008f34 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	6890      	ldr	r0, [r2, #8]
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	2a02      	cmp	r2, #2
 8008f26:	d801      	bhi.n	8008f2c <mqtt_incomming_suback+0x26>
 8008f28:	2200      	movs	r2, #0
 8008f2a:	e001      	b.n	8008f30 <mqtt_incomming_suback+0x2a>
 8008f2c:	f06f 020c 	mvn.w	r2, #12
 8008f30:	4611      	mov	r1, r2
 8008f32:	4798      	blx	r3
  }
}
 8008f34:	bf00      	nop
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 8008f3c:	b590      	push	{r4, r7, lr}
 8008f3e:	b08f      	sub	sp, #60	; 0x3c
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	607b      	str	r3, [r7, #4]
 8008f46:	460b      	mov	r3, r1
 8008f48:	72fb      	strb	r3, [r7, #11]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8008f58:	7afb      	ldrb	r3, [r7, #11]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 8008f5e:	7afb      	ldrb	r3, [r7, #11]
 8008f60:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8008f64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8008f6c:	091b      	lsrs	r3, r3, #4
 8008f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8008f7c:	d906      	bls.n	8008f8c <mqtt_message_received+0x50>
 8008f7e:	4b9c      	ldr	r3, [pc, #624]	; (80091f0 <mqtt_message_received+0x2b4>)
 8008f80:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008f84:	499b      	ldr	r1, [pc, #620]	; (80091f4 <mqtt_message_received+0x2b8>)
 8008f86:	489c      	ldr	r0, [pc, #624]	; (80091f8 <mqtt_message_received+0x2bc>)
 8008f88:	f00e fb16 	bl	80175b8 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 8008f8c:	7afa      	ldrb	r2, [r7, #11]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d906      	bls.n	8008fa4 <mqtt_message_received+0x68>
 8008f96:	4b96      	ldr	r3, [pc, #600]	; (80091f0 <mqtt_message_received+0x2b4>)
 8008f98:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8008f9c:	4997      	ldr	r1, [pc, #604]	; (80091fc <mqtt_message_received+0x2c0>)
 8008f9e:	4896      	ldr	r0, [pc, #600]	; (80091f8 <mqtt_message_received+0x2bc>)
 8008fa0:	f00e fb0a 	bl	80175b8 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8008fa4:	7afa      	ldrb	r2, [r7, #11]
 8008fa6:	893b      	ldrh	r3, [r7, #8]
 8008fa8:	4413      	add	r3, r2
 8008faa:	2b80      	cmp	r3, #128	; 0x80
 8008fac:	dd09      	ble.n	8008fc2 <mqtt_message_received+0x86>
 8008fae:	4b90      	ldr	r3, [pc, #576]	; (80091f0 <mqtt_message_received+0x2b4>)
 8008fb0:	f240 22ad 	movw	r2, #685	; 0x2ad
 8008fb4:	4992      	ldr	r1, [pc, #584]	; (8009200 <mqtt_message_received+0x2c4>)
 8008fb6:	4890      	ldr	r0, [pc, #576]	; (80091f8 <mqtt_message_received+0x2bc>)
 8008fb8:	f00e fafe 	bl	80175b8 <iprintf>
 8008fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fc0:	e16e      	b.n	80092a0 <mqtt_message_received+0x364>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8008fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d123      	bne.n	8009012 <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	7a9b      	ldrb	r3, [r3, #10]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	f040 8151 	bne.w	8009276 <mqtt_message_received+0x33a>
      if (length < 2) {
 8008fd4:	893b      	ldrh	r3, [r7, #8]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	f240 814f 	bls.w	800927a <mqtt_message_received+0x33e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	3301      	adds	r3, #1
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8008fe4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f040 8145 	bne.w	8009276 <mqtt_message_received+0x33a>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2203      	movs	r2, #3
 8008ff6:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 813a 	beq.w	8009276 <mqtt_message_received+0x33a>
          client->connect_cb(client, client->connect_arg, res);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	6911      	ldr	r1, [r2, #16]
 800900a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	4798      	blx	r3
 8009010:	e131      	b.n	8009276 <mqtt_message_received+0x33a>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8009012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009016:	2b0d      	cmp	r3, #13
 8009018:	f000 812d 	beq.w	8009276 <mqtt_message_received+0x33a>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800901c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009020:	2b03      	cmp	r3, #3
 8009022:	f040 80c0 	bne.w	80091a6 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800902a:	893b      	ldrh	r3, [r7, #8]
 800902c:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009034:	105b      	asrs	r3, r3, #1
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 0303 	and.w	r3, r3, #3
 800903c:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009042:	2b80      	cmp	r3, #128	; 0x80
 8009044:	d87d      	bhi.n	8009142 <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8009046:	7ffb      	ldrb	r3, [r7, #31]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <mqtt_message_received+0x114>
 800904c:	2302      	movs	r3, #2
 800904e:	e000      	b.n	8009052 <mqtt_message_received+0x116>
 8009050:	2300      	movs	r3, #0
 8009052:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8009054:	8bbb      	ldrh	r3, [r7, #28]
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	893b      	ldrh	r3, [r7, #8]
 800905a:	429a      	cmp	r2, r3
 800905c:	f280 810f 	bge.w	800927e <mqtt_message_received+0x342>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8009066:	8b7b      	ldrh	r3, [r7, #26]
 8009068:	021b      	lsls	r3, r3, #8
 800906a:	b29a      	uxth	r2, r3
 800906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906e:	3301      	adds	r3, #1
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	b29b      	uxth	r3, r3
 8009074:	4413      	add	r3, r2
 8009076:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8009078:	8b7a      	ldrh	r2, [r7, #26]
 800907a:	8939      	ldrh	r1, [r7, #8]
 800907c:	8bbb      	ldrh	r3, [r7, #28]
 800907e:	3302      	adds	r3, #2
 8009080:	1acb      	subs	r3, r1, r3
 8009082:	429a      	cmp	r2, r3
 8009084:	f300 80fd 	bgt.w	8009282 <mqtt_message_received+0x346>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8009088:	8b7a      	ldrh	r2, [r7, #26]
 800908a:	8bbb      	ldrh	r3, [r7, #28]
 800908c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800908e:	1acb      	subs	r3, r1, r3
 8009090:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 8009092:	429a      	cmp	r2, r3
 8009094:	f200 80f5 	bhi.w	8009282 <mqtt_message_received+0x346>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	3302      	adds	r3, #2
 800909c:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800909e:	8b7b      	ldrh	r3, [r7, #26]
 80090a0:	3302      	adds	r3, #2
 80090a2:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 80090a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80090a6:	7ffa      	ldrb	r2, [r7, #31]
 80090a8:	2a00      	cmp	r2, #0
 80090aa:	d001      	beq.n	80090b0 <mqtt_message_received+0x174>
 80090ac:	2202      	movs	r2, #2
 80090ae:	e000      	b.n	80090b2 <mqtt_message_received+0x176>
 80090b0:	2201      	movs	r2, #1
 80090b2:	4413      	add	r3, r2
 80090b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090b6:	429a      	cmp	r2, r3
 80090b8:	f0c0 80e5 	bcc.w	8009286 <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 80090bc:	7ffb      	ldrb	r3, [r7, #31]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d01a      	beq.n	80090f8 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 80090c2:	893a      	ldrh	r2, [r7, #8]
 80090c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80090c6:	3302      	adds	r3, #2
 80090c8:	429a      	cmp	r2, r3
 80090ca:	f0c0 80de 	bcc.w	800928a <mqtt_message_received+0x34e>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 80090ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80090d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090d2:	4413      	add	r3, r2
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	021b      	lsls	r3, r3, #8
 80090da:	b29a      	uxth	r2, r3
 80090dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80090de:	3301      	adds	r3, #1
 80090e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090e2:	440b      	add	r3, r1
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	4413      	add	r3, r2
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 80090f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80090f2:	3302      	adds	r3, #2
 80090f4:	863b      	strh	r3, [r7, #48]	; 0x30
 80090f6:	e002      	b.n	80090fe <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 80090fe:	8b7b      	ldrh	r3, [r7, #26]
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	4413      	add	r3, r2
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8009108:	8b7b      	ldrh	r3, [r7, #26]
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	4413      	add	r3, r2
 800910e:	2200      	movs	r2, #0
 8009110:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8009112:	893a      	ldrh	r2, [r7, #8]
 8009114:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800911a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800911c:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009122:	2b00      	cmp	r3, #0
 8009124:	d008      	beq.n	8009138 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800912e:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	440a      	add	r2, r1
 8009134:	6979      	ldr	r1, [r7, #20]
 8009136:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8009138:	8b7b      	ldrh	r3, [r7, #26]
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	4413      	add	r3, r2
 800913e:	7cfa      	ldrb	r2, [r7, #19]
 8009140:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8009142:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009144:	2b00      	cmp	r3, #0
 8009146:	d103      	bne.n	8009150 <mqtt_message_received+0x214>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	f040 8093 	bne.w	8009276 <mqtt_message_received+0x33a>
      if (length < (size_t)(payload_offset + payload_length)) {
 8009150:	893b      	ldrh	r3, [r7, #8]
 8009152:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8009154:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009156:	440a      	add	r2, r1
 8009158:	4293      	cmp	r3, r2
 800915a:	f0c0 8098 	bcc.w	800928e <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8009166:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800916a:	18d1      	adds	r1, r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	bf0c      	ite	eq
 8009172:	2301      	moveq	r3, #1
 8009174:	2300      	movne	r3, #0
 8009176:	b2db      	uxtb	r3, r3
 8009178:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800917a:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d179      	bne.n	8009276 <mqtt_message_received+0x33a>
 8009182:	7ffb      	ldrb	r3, [r7, #31]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d076      	beq.n	8009276 <mqtt_message_received+0x33a>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8009188:	7ffb      	ldrb	r3, [r7, #31]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d101      	bne.n	8009192 <mqtt_message_received+0x256>
 800918e:	2304      	movs	r3, #4
 8009190:	e000      	b.n	8009194 <mqtt_message_received+0x258>
 8009192:	2305      	movs	r3, #5
 8009194:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	891a      	ldrh	r2, [r3, #8]
 800919a:	7cb9      	ldrb	r1, [r7, #18]
 800919c:	2300      	movs	r3, #0
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f7ff fe74 	bl	8008e8c <pub_ack_rec_rel_response>
 80091a4:	e067      	b.n	8009276 <mqtt_message_received+0x33a>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	021b      	lsls	r3, r3, #8
 80091ae:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	3301      	adds	r3, #1
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091ba:	4313      	orrs	r3, r2
 80091bc:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 80091be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d066      	beq.n	8009292 <mqtt_message_received+0x356>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 80091c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091c8:	2b05      	cmp	r3, #5
 80091ca:	d106      	bne.n	80091da <mqtt_message_received+0x29e>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 80091cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091ce:	2301      	movs	r3, #1
 80091d0:	2106      	movs	r1, #6
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7ff fe5a 	bl	8008e8c <pub_ack_rec_rel_response>
 80091d8:	e04d      	b.n	8009276 <mqtt_message_received+0x33a>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 80091da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091de:	2b06      	cmp	r3, #6
 80091e0:	d110      	bne.n	8009204 <mqtt_message_received+0x2c8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 80091e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091e4:	2300      	movs	r3, #0
 80091e6:	2107      	movs	r1, #7
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f7ff fe4f 	bl	8008e8c <pub_ack_rec_rel_response>
 80091ee:	e042      	b.n	8009276 <mqtt_message_received+0x33a>
 80091f0:	08018b58 	.word	0x08018b58
 80091f4:	08018d8c 	.word	0x08018d8c
 80091f8:	08018bd0 	.word	0x08018bd0
 80091fc:	08018dbc 	.word	0x08018dbc
 8009200:	08018de0 	.word	0x08018de0

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8009204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009208:	2b09      	cmp	r3, #9
 800920a:	d00b      	beq.n	8009224 <mqtt_message_received+0x2e8>
 800920c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009210:	2b0b      	cmp	r3, #11
 8009212:	d007      	beq.n	8009224 <mqtt_message_received+0x2e8>
 8009214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009218:	2b07      	cmp	r3, #7
 800921a:	d003      	beq.n	8009224 <mqtt_message_received+0x2e8>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800921c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009220:	2b04      	cmp	r3, #4
 8009222:	d138      	bne.n	8009296 <mqtt_message_received+0x35a>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	3318      	adds	r3, #24
 8009228:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800922a:	4611      	mov	r1, r2
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff fb4b 	bl	80088c8 <mqtt_take_request>
 8009232:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d01c      	beq.n	8009274 <mqtt_message_received+0x338>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800923a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800923e:	2b09      	cmp	r3, #9
 8009240:	d10a      	bne.n	8009258 <mqtt_message_received+0x31c>
          if (length < 3) {
 8009242:	893b      	ldrh	r3, [r7, #8]
 8009244:	2b02      	cmp	r3, #2
 8009246:	d928      	bls.n	800929a <mqtt_message_received+0x35e>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	3302      	adds	r3, #2
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	4619      	mov	r1, r3
 8009250:	6a38      	ldr	r0, [r7, #32]
 8009252:	f7ff fe58 	bl	8008f06 <mqtt_incomming_suback>
 8009256:	e00a      	b.n	800926e <mqtt_message_received+0x332>
          }
        } else if (r->cb != NULL) {
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d006      	beq.n	800926e <mqtt_message_received+0x332>
          r->cb(r->arg, ERR_OK);
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	6a3a      	ldr	r2, [r7, #32]
 8009266:	6892      	ldr	r2, [r2, #8]
 8009268:	2100      	movs	r1, #0
 800926a:	4610      	mov	r0, r2
 800926c:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800926e:	6a38      	ldr	r0, [r7, #32]
 8009270:	f7ff fb1a 	bl	80088a8 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8009274:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8009276:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009278:	e012      	b.n	80092a0 <mqtt_message_received+0x364>
        goto out_disconnect;
 800927a:	bf00      	nop
 800927c:	e00e      	b.n	800929c <mqtt_message_received+0x360>
        goto out_disconnect;
 800927e:	bf00      	nop
 8009280:	e00c      	b.n	800929c <mqtt_message_received+0x360>
        goto out_disconnect;
 8009282:	bf00      	nop
 8009284:	e00a      	b.n	800929c <mqtt_message_received+0x360>
        goto out_disconnect;
 8009286:	bf00      	nop
 8009288:	e008      	b.n	800929c <mqtt_message_received+0x360>
          goto out_disconnect;
 800928a:	bf00      	nop
 800928c:	e006      	b.n	800929c <mqtt_message_received+0x360>
        goto out_disconnect;
 800928e:	bf00      	nop
 8009290:	e004      	b.n	800929c <mqtt_message_received+0x360>
      goto out_disconnect;
 8009292:	bf00      	nop
 8009294:	e002      	b.n	800929c <mqtt_message_received+0x360>
      goto out_disconnect;
 8009296:	bf00      	nop
 8009298:	e000      	b.n	800929c <mqtt_message_received+0x360>
            goto out_disconnect;
 800929a:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800929c:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	373c      	adds	r7, #60	; 0x3c
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd90      	pop	{r4, r7, pc}

080092a8 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 80092c2:	e0bc      	b.n	800943e <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d903      	bls.n	80092d2 <mqtt_parse_incoming+0x2a>
 80092ca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	da4d      	bge.n	800936e <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 80092d2:	7dfa      	ldrb	r2, [r7, #23]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092d8:	429a      	cmp	r2, r3
 80092da:	d206      	bcs.n	80092ea <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	4413      	add	r3, r2
 80092e2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80092e6:	75bb      	strb	r3, [r7, #22]
 80092e8:	e012      	b.n	8009310 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 80092ea:	8bfb      	ldrh	r3, [r7, #30]
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	83fa      	strh	r2, [r7, #30]
 80092f0:	4619      	mov	r1, r3
 80092f2:	6838      	ldr	r0, [r7, #0]
 80092f4:	f002 fbc2 	bl	800ba7c <pbuf_get_at>
 80092f8:	4603      	mov	r3, r0
 80092fa:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009300:	1c59      	adds	r1, r3, #1
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6691      	str	r1, [r2, #104]	; 0x68
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	4413      	add	r3, r2
 800930a:	7dba      	ldrb	r2, [r7, #22]
 800930c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	3301      	adds	r3, #1
 8009314:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 8009316:	7dfb      	ldrb	r3, [r7, #23]
 8009318:	2b01      	cmp	r3, #1
 800931a:	f240 8090 	bls.w	800943e <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800931e:	7dbb      	ldrb	r3, [r7, #22]
 8009320:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	1e9a      	subs	r2, r3, #2
 8009328:	4613      	mov	r3, r2
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	1a9b      	subs	r3, r3, r2
 800932e:	fa01 f303 	lsl.w	r3, r1, r3
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	4313      	orrs	r3, r2
 8009336:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8009338:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800933c:	2b00      	cmp	r3, #0
 800933e:	db7e      	blt.n	800943e <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10b      	bne.n	800935e <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8009346:	7df9      	ldrb	r1, [r7, #23]
 8009348:	2300      	movs	r3, #0
 800934a:	2200      	movs	r2, #0
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7ff fdf5 	bl	8008f3c <mqtt_message_received>
            client->msg_idx = 0;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 8009358:	2300      	movs	r3, #0
 800935a:	75fb      	strb	r3, [r7, #23]
 800935c:	e06f      	b.n	800943e <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800935e:	7dfa      	ldrb	r2, [r7, #23]
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	441a      	add	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800936c:	e067      	b.n	800943e <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	7dfa      	ldrb	r2, [r7, #23]
 8009378:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800937c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009380:	fb02 f201 	mul.w	r2, r2, r1
 8009384:	1a9b      	subs	r3, r3, r2
 8009386:	b29a      	uxth	r2, r3
 8009388:	7dfb      	ldrb	r3, [r7, #23]
 800938a:	b29b      	uxth	r3, r3
 800938c:	4413      	add	r3, r2
 800938e:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	891a      	ldrh	r2, [r3, #8]
 8009394:	8bfb      	ldrh	r3, [r7, #30]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	b29b      	uxth	r3, r3
 800939a:	461a      	mov	r2, r3
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	4293      	cmp	r3, r2
 80093a0:	d905      	bls.n	80093ae <mqtt_parse_incoming+0x106>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	891a      	ldrh	r2, [r3, #8]
 80093a6:	8bfb      	ldrh	r3, [r7, #30]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	e001      	b.n	80093b2 <mqtt_parse_incoming+0x10a>
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 80093b4:	8a7b      	ldrh	r3, [r7, #18]
 80093b6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80093ba:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 80093bc:	8aba      	ldrh	r2, [r7, #20]
 80093be:	8a3b      	ldrh	r3, [r7, #16]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d901      	bls.n	80093c8 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 80093c4:	8a3b      	ldrh	r3, [r7, #16]
 80093c6:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80093ce:	8a7b      	ldrh	r3, [r7, #18]
 80093d0:	18d1      	adds	r1, r2, r3
 80093d2:	8bfb      	ldrh	r3, [r7, #30]
 80093d4:	8aba      	ldrh	r2, [r7, #20]
 80093d6:	6838      	ldr	r0, [r7, #0]
 80093d8:	f002 fa82 	bl	800b8e0 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80093e0:	8abb      	ldrh	r3, [r7, #20]
 80093e2:	441a      	add	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 80093e8:	8bfa      	ldrh	r2, [r7, #30]
 80093ea:	8abb      	ldrh	r3, [r7, #20]
 80093ec:	4413      	add	r3, r2
 80093ee:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 80093f0:	8abb      	ldrh	r3, [r7, #20]
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <mqtt_parse_incoming+0x15e>
 80093fe:	8aba      	ldrh	r2, [r7, #20]
 8009400:	8a3b      	ldrh	r3, [r7, #16]
 8009402:	429a      	cmp	r2, r3
 8009404:	d11b      	bne.n	800943e <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8009406:	8a7a      	ldrh	r2, [r7, #18]
 8009408:	8abb      	ldrh	r3, [r7, #20]
 800940a:	4413      	add	r3, r2
 800940c:	b29a      	uxth	r2, r3
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	b29b      	uxth	r3, r3
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	b29a      	uxth	r2, r3
 8009416:	7df9      	ldrb	r1, [r7, #23]
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff fd8e 	bl	8008f3c <mqtt_message_received>
 8009420:	4603      	mov	r3, r0
 8009422:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8009424:	89fb      	ldrh	r3, [r7, #14]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <mqtt_parse_incoming+0x186>
          return res;
 800942a:	89fb      	ldrh	r3, [r7, #14]
 800942c:	e00e      	b.n	800944c <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d104      	bne.n	800943e <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	891b      	ldrh	r3, [r3, #8]
 8009442:	8bfa      	ldrh	r2, [r7, #30]
 8009444:	429a      	cmp	r2, r3
 8009446:	f4ff af3d 	bcc.w	80092c4 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3720      	adds	r7, #32
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d106      	bne.n	800947a <mqtt_tcp_recv_cb+0x26>
 800946c:	4b24      	ldr	r3, [pc, #144]	; (8009500 <mqtt_tcp_recv_cb+0xac>)
 800946e:	f240 32a7 	movw	r2, #935	; 0x3a7
 8009472:	4924      	ldr	r1, [pc, #144]	; (8009504 <mqtt_tcp_recv_cb+0xb0>)
 8009474:	4824      	ldr	r0, [pc, #144]	; (8009508 <mqtt_tcp_recv_cb+0xb4>)
 8009476:	f00e f89f 	bl	80175b8 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	429a      	cmp	r2, r3
 8009482:	d006      	beq.n	8009492 <mqtt_tcp_recv_cb+0x3e>
 8009484:	4b1e      	ldr	r3, [pc, #120]	; (8009500 <mqtt_tcp_recv_cb+0xac>)
 8009486:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800948a:	4920      	ldr	r1, [pc, #128]	; (800950c <mqtt_tcp_recv_cb+0xb8>)
 800948c:	481e      	ldr	r0, [pc, #120]	; (8009508 <mqtt_tcp_recv_cb+0xb4>)
 800948e:	f00e f893 	bl	80175b8 <iprintf>

  if (p == NULL) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d105      	bne.n	80094a4 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8009498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800949c:	6978      	ldr	r0, [r7, #20]
 800949e:	f7ff fbfd 	bl	8008c9c <mqtt_close>
 80094a2:	e027      	b.n	80094f4 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 80094a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d005      	beq.n	80094b8 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f002 f81d 	bl	800b4ec <pbuf_free>
      return err;
 80094b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094b6:	e01e      	b.n	80094f6 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	891b      	ldrh	r3, [r3, #8]
 80094bc:	4619      	mov	r1, r3
 80094be:	68b8      	ldr	r0, [r7, #8]
 80094c0:	f002 ff0e 	bl	800c2e0 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 80094c4:	6879      	ldr	r1, [r7, #4]
 80094c6:	6978      	ldr	r0, [r7, #20]
 80094c8:	f7ff feee 	bl	80092a8 <mqtt_parse_incoming>
 80094cc:	4603      	mov	r3, r0
 80094ce:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f002 f80b 	bl	800b4ec <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 80094d6:	8a7b      	ldrh	r3, [r7, #18]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d004      	beq.n	80094e6 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 80094dc:	8a7b      	ldrh	r3, [r7, #18]
 80094de:	4619      	mov	r1, r3
 80094e0:	6978      	ldr	r0, [r7, #20]
 80094e2:	f7ff fbdb 	bl	8008c9c <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	885b      	ldrh	r3, [r3, #2]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2200      	movs	r2, #0
 80094f2:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	08018b58 	.word	0x08018b58
 8009504:	08018df8 	.word	0x08018df8
 8009508:	08018bd0 	.word	0x08018bd0
 800950c:	08018e1c 	.word	0x08018e1c

08009510 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	4613      	mov	r3, r2
 800951c:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	7a9b      	ldrb	r3, [r3, #10]
 8009526:	2b03      	cmp	r3, #3
 8009528:	d127      	bne.n	800957a <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2200      	movs	r2, #0
 800952e:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2200      	movs	r2, #0
 8009534:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8009536:	e00d      	b.n	8009554 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d006      	beq.n	800954e <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	6892      	ldr	r2, [r2, #8]
 8009548:	2100      	movs	r1, #0
 800954a:	4610      	mov	r0, r2
 800954c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800954e:	6938      	ldr	r0, [r7, #16]
 8009550:	f7ff f9aa 	bl	80088a8 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	3318      	adds	r3, #24
 8009558:	2100      	movs	r1, #0
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff f9b4 	bl	80088c8 <mqtt_take_request>
 8009560:	6138      	str	r0, [r7, #16]
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e7      	bne.n	8009538 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	4619      	mov	r1, r3
 8009574:	4610      	mov	r0, r2
 8009576:	f7ff f851 	bl	800861c <mqtt_output_send>
  }
  return ERR_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <mqtt_tcp_err_cb+0x24>
 800959a:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <mqtt_tcp_err_cb+0x3c>)
 800959c:	f240 32f6 	movw	r2, #1014	; 0x3f6
 80095a0:	4908      	ldr	r1, [pc, #32]	; (80095c4 <mqtt_tcp_err_cb+0x40>)
 80095a2:	4809      	ldr	r0, [pc, #36]	; (80095c8 <mqtt_tcp_err_cb+0x44>)
 80095a4:	f00e f808 	bl	80175b8 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80095ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f7ff fb72 	bl	8008c9c <mqtt_close>
}
 80095b8:	bf00      	nop
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	08018b58 	.word	0x08018b58
 80095c4:	08018e44 	.word	0x08018e44
 80095c8:	08018bd0 	.word	0x08018bd0

080095cc <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	7a9b      	ldrb	r3, [r3, #10]
 80095de:	2b03      	cmp	r3, #3
 80095e0:	d105      	bne.n	80095ee <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	33ec      	adds	r3, #236	; 0xec
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff f817 	bl	800861c <mqtt_output_send>
  }
  return ERR_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800960a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8009612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009616:	e025      	b.n	8009664 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2200      	movs	r2, #0
 800961c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800961e:	4913      	ldr	r1, [pc, #76]	; (800966c <mqtt_tcp_connect_cb+0x74>)
 8009620:	68b8      	ldr	r0, [r7, #8]
 8009622:	f003 fe4d 	bl	800d2c0 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8009626:	4912      	ldr	r1, [pc, #72]	; (8009670 <mqtt_tcp_connect_cb+0x78>)
 8009628:	68b8      	ldr	r0, [r7, #8]
 800962a:	f003 fe6b 	bl	800d304 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800962e:	2202      	movs	r2, #2
 8009630:	4910      	ldr	r1, [pc, #64]	; (8009674 <mqtt_tcp_connect_cb+0x7c>)
 8009632:	68b8      	ldr	r0, [r7, #8]
 8009634:	f003 feaa 	bl	800d38c <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2202      	movs	r2, #2
 800963c:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	490d      	ldr	r1, [pc, #52]	; (8009678 <mqtt_tcp_connect_cb+0x80>)
 8009642:	f241 3088 	movw	r0, #5000	; 0x1388
 8009646:	f008 fb91 	bl	8011d6c <sys_timeout>
  client->cyclic_tick = 0;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2200      	movs	r2, #0
 800964e:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	4619      	mov	r1, r3
 800965c:	4610      	mov	r0, r2
 800965e:	f7fe ffdd 	bl	800861c <mqtt_output_send>

  return ERR_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	08009455 	.word	0x08009455
 8009670:	08009511 	.word	0x08009511
 8009674:	080095cd 	.word	0x080095cd
 8009678:	08008d5d 	.word	0x08008d5d

0800967c <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08c      	sub	sp, #48	; 0x30
 8009680:	af02      	add	r7, sp, #8
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d106      	bne.n	800969e <mqtt_publish+0x22>
 8009690:	4b5d      	ldr	r3, [pc, #372]	; (8009808 <mqtt_publish+0x18c>)
 8009692:	f240 4254 	movw	r2, #1108	; 0x454
 8009696:	495d      	ldr	r1, [pc, #372]	; (800980c <mqtt_publish+0x190>)
 8009698:	485d      	ldr	r0, [pc, #372]	; (8009810 <mqtt_publish+0x194>)
 800969a:	f00d ff8d 	bl	80175b8 <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d106      	bne.n	80096b2 <mqtt_publish+0x36>
 80096a4:	4b58      	ldr	r3, [pc, #352]	; (8009808 <mqtt_publish+0x18c>)
 80096a6:	f240 4255 	movw	r2, #1109	; 0x455
 80096aa:	495a      	ldr	r1, [pc, #360]	; (8009814 <mqtt_publish+0x198>)
 80096ac:	4858      	ldr	r0, [pc, #352]	; (8009810 <mqtt_publish+0x194>)
 80096ae:	f00d ff83 	bl	80175b8 <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	7a9b      	ldrb	r3, [r3, #10]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d109      	bne.n	80096ce <mqtt_publish+0x52>
 80096ba:	4b53      	ldr	r3, [pc, #332]	; (8009808 <mqtt_publish+0x18c>)
 80096bc:	f240 4256 	movw	r2, #1110	; 0x456
 80096c0:	4955      	ldr	r1, [pc, #340]	; (8009818 <mqtt_publish+0x19c>)
 80096c2:	4853      	ldr	r0, [pc, #332]	; (8009810 <mqtt_publish+0x194>)
 80096c4:	f00d ff78 	bl	80175b8 <iprintf>
 80096c8:	f06f 030a 	mvn.w	r3, #10
 80096cc:	e097      	b.n	80097fe <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 80096ce:	68b8      	ldr	r0, [r7, #8]
 80096d0:	f7f6 fd88 	bl	80001e4 <strlen>
 80096d4:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80096dc:	4293      	cmp	r3, r2
 80096de:	d909      	bls.n	80096f4 <mqtt_publish+0x78>
 80096e0:	4b49      	ldr	r3, [pc, #292]	; (8009808 <mqtt_publish+0x18c>)
 80096e2:	f240 4259 	movw	r2, #1113	; 0x459
 80096e6:	494d      	ldr	r1, [pc, #308]	; (800981c <mqtt_publish+0x1a0>)
 80096e8:	4849      	ldr	r0, [pc, #292]	; (8009810 <mqtt_publish+0x194>)
 80096ea:	f00d ff65 	bl	80175b8 <iprintf>
 80096ee:	f06f 030f 	mvn.w	r3, #15
 80096f2:	e084      	b.n	80097fe <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 80096f8:	8b7b      	ldrh	r3, [r7, #26]
 80096fa:	1c9a      	adds	r2, r3, #2
 80096fc:	887b      	ldrh	r3, [r7, #2]
 80096fe:	4413      	add	r3, r2
 8009700:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8009702:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009706:	2b00      	cmp	r3, #0
 8009708:	d008      	beq.n	800971c <mqtt_publish+0xa0>
    total_len += 2;
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	3302      	adds	r3, #2
 800970e:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7fe feee 	bl	80084f2 <msg_generate_packet_id>
 8009716:	4603      	mov	r3, r0
 8009718:	84fb      	strh	r3, [r7, #38]	; 0x26
 800971a:	e001      	b.n	8009720 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009726:	d309      	bcc.n	800973c <mqtt_publish+0xc0>
 8009728:	4b37      	ldr	r3, [pc, #220]	; (8009808 <mqtt_publish+0x18c>)
 800972a:	f240 4265 	movw	r2, #1125	; 0x465
 800972e:	493c      	ldr	r1, [pc, #240]	; (8009820 <mqtt_publish+0x1a4>)
 8009730:	4837      	ldr	r0, [pc, #220]	; (8009810 <mqtt_publish+0x194>)
 8009732:	f00d ff41 	bl	80175b8 <iprintf>
 8009736:	f06f 030f 	mvn.w	r3, #15
 800973a:	e060      	b.n	80097fe <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f103 001c 	add.w	r0, r3, #28
 8009746:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974e:	2104      	movs	r1, #4
 8009750:	f7ff f818 	bl	8008784 <mqtt_create_request>
 8009754:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <mqtt_publish+0xe6>
    return ERR_MEM;
 800975c:	f04f 33ff 	mov.w	r3, #4294967295
 8009760:	e04d      	b.n	80097fe <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	33ec      	adds	r3, #236	; 0xec
 8009766:	8b3a      	ldrh	r2, [r7, #24]
 8009768:	4611      	mov	r1, r2
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff fa64 	bl	8008c38 <mqtt_output_check_space>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d105      	bne.n	8009782 <mqtt_publish+0x106>
    mqtt_delete_request(r);
 8009776:	6978      	ldr	r0, [r7, #20]
 8009778:	f7ff f896 	bl	80088a8 <mqtt_delete_request>
    return ERR_MEM;
 800977c:	f04f 33ff 	mov.w	r3, #4294967295
 8009780:	e03d      	b.n	80097fe <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009788:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800978c:	8b3b      	ldrh	r3, [r7, #24]
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	4613      	mov	r3, r2
 8009798:	2200      	movs	r2, #0
 800979a:	2103      	movs	r1, #3
 800979c:	f7ff fa01 	bl	8008ba2 <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	33ec      	adds	r3, #236	; 0xec
 80097a4:	8b7a      	ldrh	r2, [r7, #26]
 80097a6:	68b9      	ldr	r1, [r7, #8]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff f9ce 	bl	8008b4a <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 80097ae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d006      	beq.n	80097c4 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	33ec      	adds	r3, #236	; 0xec
 80097ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff f98d 	bl	8008ade <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d009      	beq.n	80097de <mqtt_publish+0x162>
 80097ca:	887b      	ldrh	r3, [r7, #2]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d006      	beq.n	80097de <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	33ec      	adds	r3, #236	; 0xec
 80097d4:	887a      	ldrh	r2, [r7, #2]
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff f998 	bl	8008b0e <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3318      	adds	r3, #24
 80097e2:	6979      	ldr	r1, [r7, #20]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff f813 	bl	8008810 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	4619      	mov	r1, r3
 80097f6:	4610      	mov	r0, r2
 80097f8:	f7fe ff10 	bl	800861c <mqtt_output_send>
  return ERR_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3728      	adds	r7, #40	; 0x28
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	08018b58 	.word	0x08018b58
 800980c:	08018e64 	.word	0x08018e64
 8009810:	08018bd0 	.word	0x08018bd0
 8009814:	08018e84 	.word	0x08018e84
 8009818:	08018ea0 	.word	0x08018ea0
 800981c:	08018ec0 	.word	0x08018ec0
 8009820:	08018ee4 	.word	0x08018ee4

08009824 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08c      	sub	sp, #48	; 0x30
 8009828:	af02      	add	r7, sp, #8
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	4613      	mov	r3, r2
 8009832:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d106      	bne.n	8009848 <mqtt_sub_unsub+0x24>
 800983a:	4b5e      	ldr	r3, [pc, #376]	; (80099b4 <mqtt_sub_unsub+0x190>)
 800983c:	f240 429f 	movw	r2, #1183	; 0x49f
 8009840:	495d      	ldr	r1, [pc, #372]	; (80099b8 <mqtt_sub_unsub+0x194>)
 8009842:	485e      	ldr	r0, [pc, #376]	; (80099bc <mqtt_sub_unsub+0x198>)
 8009844:	f00d feb8 	bl	80175b8 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <mqtt_sub_unsub+0x38>
 800984e:	4b59      	ldr	r3, [pc, #356]	; (80099b4 <mqtt_sub_unsub+0x190>)
 8009850:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8009854:	495a      	ldr	r1, [pc, #360]	; (80099c0 <mqtt_sub_unsub+0x19c>)
 8009856:	4859      	ldr	r0, [pc, #356]	; (80099bc <mqtt_sub_unsub+0x198>)
 8009858:	f00d feae 	bl	80175b8 <iprintf>

  topic_strlen = strlen(topic);
 800985c:	68b8      	ldr	r0, [r7, #8]
 800985e:	f7f6 fcc1 	bl	80001e4 <strlen>
 8009862:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800986a:	4293      	cmp	r3, r2
 800986c:	d909      	bls.n	8009882 <mqtt_sub_unsub+0x5e>
 800986e:	4b51      	ldr	r3, [pc, #324]	; (80099b4 <mqtt_sub_unsub+0x190>)
 8009870:	f240 42a3 	movw	r2, #1187	; 0x4a3
 8009874:	4953      	ldr	r1, [pc, #332]	; (80099c4 <mqtt_sub_unsub+0x1a0>)
 8009876:	4851      	ldr	r0, [pc, #324]	; (80099bc <mqtt_sub_unsub+0x198>)
 8009878:	f00d fe9e 	bl	80175b8 <iprintf>
 800987c:	f06f 030f 	mvn.w	r3, #15
 8009880:	e093      	b.n	80099aa <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8009886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009888:	3304      	adds	r3, #4
 800988a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800988e:	2a00      	cmp	r2, #0
 8009890:	bf14      	ite	ne
 8009892:	2201      	movne	r2, #1
 8009894:	2200      	moveq	r2, #0
 8009896:	b2d2      	uxtb	r2, r2
 8009898:	4413      	add	r3, r2
 800989a:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098a2:	d309      	bcc.n	80098b8 <mqtt_sub_unsub+0x94>
 80098a4:	4b43      	ldr	r3, [pc, #268]	; (80099b4 <mqtt_sub_unsub+0x190>)
 80098a6:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80098aa:	4947      	ldr	r1, [pc, #284]	; (80099c8 <mqtt_sub_unsub+0x1a4>)
 80098ac:	4843      	ldr	r0, [pc, #268]	; (80099bc <mqtt_sub_unsub+0x198>)
 80098ae:	f00d fe83 	bl	80175b8 <iprintf>
 80098b2:	f06f 030f 	mvn.w	r3, #15
 80098b6:	e078      	b.n	80099aa <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 80098bc:	79fb      	ldrb	r3, [r7, #7]
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d906      	bls.n	80098d0 <mqtt_sub_unsub+0xac>
 80098c2:	4b3c      	ldr	r3, [pc, #240]	; (80099b4 <mqtt_sub_unsub+0x190>)
 80098c4:	f240 42aa 	movw	r2, #1194	; 0x4aa
 80098c8:	4940      	ldr	r1, [pc, #256]	; (80099cc <mqtt_sub_unsub+0x1a8>)
 80098ca:	483c      	ldr	r0, [pc, #240]	; (80099bc <mqtt_sub_unsub+0x198>)
 80098cc:	f00d fe74 	bl	80175b8 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	7a9b      	ldrb	r3, [r3, #10]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d102      	bne.n	80098de <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 80098d8:	f06f 030a 	mvn.w	r3, #10
 80098dc:	e065      	b.n	80099aa <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f7fe fe07 	bl	80084f2 <msg_generate_packet_id>
 80098e4:	4603      	mov	r3, r0
 80098e6:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f103 001c 	add.w	r0, r3, #28
 80098ee:	8b3a      	ldrh	r2, [r7, #24]
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2104      	movs	r1, #4
 80098f8:	f7fe ff44 	bl	8008784 <mqtt_create_request>
 80098fc:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d102      	bne.n	800990a <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 8009904:	f04f 33ff 	mov.w	r3, #4294967295
 8009908:	e04f      	b.n	80099aa <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	33ec      	adds	r3, #236	; 0xec
 800990e:	8b7a      	ldrh	r2, [r7, #26]
 8009910:	4611      	mov	r1, r2
 8009912:	4618      	mov	r0, r3
 8009914:	f7ff f990 	bl	8008c38 <mqtt_output_check_space>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d105      	bne.n	800992a <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 800991e:	6978      	ldr	r0, [r7, #20]
 8009920:	f7fe ffc2 	bl	80088a8 <mqtt_delete_request>
    return ERR_MEM;
 8009924:	f04f 33ff 	mov.w	r3, #4294967295
 8009928:	e03f      	b.n	80099aa <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009930:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <mqtt_sub_unsub+0x118>
 8009938:	2108      	movs	r1, #8
 800993a:	e000      	b.n	800993e <mqtt_sub_unsub+0x11a>
 800993c:	210a      	movs	r1, #10
 800993e:	8b7b      	ldrh	r3, [r7, #26]
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	2300      	movs	r3, #0
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	2301      	movs	r3, #1
 8009948:	2200      	movs	r2, #0
 800994a:	f7ff f92a 	bl	8008ba2 <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	33ec      	adds	r3, #236	; 0xec
 8009952:	8b3a      	ldrh	r2, [r7, #24]
 8009954:	4611      	mov	r1, r2
 8009956:	4618      	mov	r0, r3
 8009958:	f7ff f8c1 	bl	8008ade <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	33ec      	adds	r3, #236	; 0xec
 8009960:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009962:	68b9      	ldr	r1, [r7, #8]
 8009964:	4618      	mov	r0, r3
 8009966:	f7ff f8f0 	bl	8008b4a <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 800996a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00b      	beq.n	800998a <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	2b02      	cmp	r3, #2
 800997c:	bf28      	it	cs
 800997e:	2302      	movcs	r3, #2
 8009980:	b2db      	uxtb	r3, r3
 8009982:	4619      	mov	r1, r3
 8009984:	4610      	mov	r0, r2
 8009986:	f7ff f89b 	bl	8008ac0 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3318      	adds	r3, #24
 800998e:	6979      	ldr	r1, [r7, #20]
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe ff3d 	bl	8008810 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	4619      	mov	r1, r3
 80099a2:	4610      	mov	r0, r2
 80099a4:	f7fe fe3a 	bl	800861c <mqtt_output_send>
  return ERR_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3728      	adds	r7, #40	; 0x28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	08018b58 	.word	0x08018b58
 80099b8:	08018f08 	.word	0x08018f08
 80099bc:	08018bd0 	.word	0x08018bd0
 80099c0:	08018f28 	.word	0x08018f28
 80099c4:	08018f48 	.word	0x08018f48
 80099c8:	08018f70 	.word	0x08018f70
 80099cc:	08018f98 	.word	0x08018f98

080099d0 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
 80099dc:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d106      	bne.n	80099f2 <mqtt_set_inpub_callback+0x22>
 80099e4:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <mqtt_set_inpub_callback+0x3c>)
 80099e6:	f240 42da 	movw	r2, #1242	; 0x4da
 80099ea:	4909      	ldr	r1, [pc, #36]	; (8009a10 <mqtt_set_inpub_callback+0x40>)
 80099ec:	4809      	ldr	r0, [pc, #36]	; (8009a14 <mqtt_set_inpub_callback+0x44>)
 80099ee:	f00d fde3 	bl	80175b8 <iprintf>
  client->data_cb = data_cb;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009a04:	bf00      	nop
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	08018b58 	.word	0x08018b58
 8009a10:	08018fb0 	.word	0x08018fb0
 8009a14:	08018bd0 	.word	0x08018bd0

08009a18 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8009a1c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8009a20:	2001      	movs	r0, #1
 8009a22:	f000 fe61 	bl	800a6e8 <mem_calloc>
 8009a26:	4603      	mov	r3, r0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08c      	sub	sp, #48	; 0x30
 8009a30:	af02      	add	r7, sp, #8
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8009a3c:	230a      	movs	r3, #10
 8009a3e:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a46:	2300      	movs	r3, #0
 8009a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	83fb      	strh	r3, [r7, #30]
 8009a56:	2300      	movs	r3, #0
 8009a58:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d106      	bne.n	8009a6e <mqtt_client_connect+0x42>
 8009a60:	4bac      	ldr	r3, [pc, #688]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009a62:	f240 520f 	movw	r2, #1295	; 0x50f
 8009a66:	49ac      	ldr	r1, [pc, #688]	; (8009d18 <mqtt_client_connect+0x2ec>)
 8009a68:	48ac      	ldr	r0, [pc, #688]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009a6a:	f00d fda5 	bl	80175b8 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d106      	bne.n	8009a82 <mqtt_client_connect+0x56>
 8009a74:	4ba7      	ldr	r3, [pc, #668]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009a76:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8009a7a:	49a9      	ldr	r1, [pc, #676]	; (8009d20 <mqtt_client_connect+0x2f4>)
 8009a7c:	48a7      	ldr	r0, [pc, #668]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009a7e:	f00d fd9b 	bl	80175b8 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8009a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d106      	bne.n	8009a96 <mqtt_client_connect+0x6a>
 8009a88:	4ba2      	ldr	r3, [pc, #648]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009a8a:	f240 5211 	movw	r2, #1297	; 0x511
 8009a8e:	49a5      	ldr	r1, [pc, #660]	; (8009d24 <mqtt_client_connect+0x2f8>)
 8009a90:	48a2      	ldr	r0, [pc, #648]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009a92:	f00d fd91 	bl	80175b8 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8009a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d106      	bne.n	8009aac <mqtt_client_connect+0x80>
 8009a9e:	4b9d      	ldr	r3, [pc, #628]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009aa0:	f240 5212 	movw	r2, #1298	; 0x512
 8009aa4:	49a0      	ldr	r1, [pc, #640]	; (8009d28 <mqtt_client_connect+0x2fc>)
 8009aa6:	489d      	ldr	r0, [pc, #628]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009aa8:	f00d fd86 	bl	80175b8 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	7a9b      	ldrb	r3, [r3, #10]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8009ab4:	f06f 0309 	mvn.w	r3, #9
 8009ab8:	e221      	b.n	8009efe <mqtt_client_connect+0x4d2>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8009aba:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8009abe:	2100      	movs	r1, #0
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f00d fd71 	bl	80175a8 <memset>
  client->connect_arg = arg;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aca:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8009ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad4:	899a      	ldrh	r2, [r3, #12]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	331c      	adds	r3, #28
 8009ade:	2104      	movs	r1, #4
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fe ffbf 	bl	8008a64 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8009ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d073      	beq.n	8009bd6 <mqtt_client_connect+0x1aa>
 8009aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d06f      	beq.n	8009bd6 <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8009af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009afa:	f043 0304 	orr.w	r3, r3, #4
 8009afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 8009b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b04:	7e1b      	ldrb	r3, [r3, #24]
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	b25b      	sxtb	r3, r3
 8009b0a:	f003 0318 	and.w	r3, r3, #24
 8009b0e:	b25a      	sxtb	r2, r3
 8009b10:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009b14:	4313      	orrs	r3, r2
 8009b16:	b25b      	sxtb	r3, r3
 8009b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 8009b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1e:	7e5b      	ldrb	r3, [r3, #25]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d005      	beq.n	8009b30 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8009b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b28:	f043 0320 	orr.w	r3, r3, #32
 8009b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 8009b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7f6 fb55 	bl	80001e4 <strlen>
 8009b3a:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	2bff      	cmp	r3, #255	; 0xff
 8009b40:	d909      	bls.n	8009b56 <mqtt_client_connect+0x12a>
 8009b42:	4b74      	ldr	r3, [pc, #464]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009b44:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8009b48:	4978      	ldr	r1, [pc, #480]	; (8009d2c <mqtt_client_connect+0x300>)
 8009b4a:	4874      	ldr	r0, [pc, #464]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009b4c:	f00d fd34 	bl	80175b8 <iprintf>
 8009b50:	f06f 0305 	mvn.w	r3, #5
 8009b54:	e1d3      	b.n	8009efe <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d109      	bne.n	8009b70 <mqtt_client_connect+0x144>
 8009b5c:	4b6d      	ldr	r3, [pc, #436]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009b5e:	f240 5229 	movw	r2, #1321	; 0x529
 8009b62:	4973      	ldr	r1, [pc, #460]	; (8009d30 <mqtt_client_connect+0x304>)
 8009b64:	486d      	ldr	r0, [pc, #436]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009b66:	f00d fd27 	bl	80175b8 <iprintf>
 8009b6a:	f06f 0305 	mvn.w	r3, #5
 8009b6e:	e1c6      	b.n	8009efe <mqtt_client_connect+0x4d2>
    will_topic_len = (u8_t)len;
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 8009b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7f6 fb32 	bl	80001e4 <strlen>
 8009b80:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	2bff      	cmp	r3, #255	; 0xff
 8009b86:	d909      	bls.n	8009b9c <mqtt_client_connect+0x170>
 8009b88:	4b62      	ldr	r3, [pc, #392]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009b8a:	f240 522c 	movw	r2, #1324	; 0x52c
 8009b8e:	4969      	ldr	r1, [pc, #420]	; (8009d34 <mqtt_client_connect+0x308>)
 8009b90:	4862      	ldr	r0, [pc, #392]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009b92:	f00d fd11 	bl	80175b8 <iprintf>
 8009b96:	f06f 0305 	mvn.w	r3, #5
 8009b9a:	e1b0      	b.n	8009efe <mqtt_client_connect+0x4d2>
    will_msg_len = (u8_t)len;
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8009ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ba4:	1c9a      	adds	r2, r3, #2
 8009ba6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009baa:	4413      	add	r3, r2
 8009bac:	1c9a      	adds	r2, r3, #2
 8009bae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009bb2:	4413      	add	r3, r2
 8009bb4:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bbc:	d309      	bcc.n	8009bd2 <mqtt_client_connect+0x1a6>
 8009bbe:	4b55      	ldr	r3, [pc, #340]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009bc0:	f240 522f 	movw	r2, #1327	; 0x52f
 8009bc4:	495c      	ldr	r1, [pc, #368]	; (8009d38 <mqtt_client_connect+0x30c>)
 8009bc6:	4855      	ldr	r0, [pc, #340]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009bc8:	f00d fcf6 	bl	80175b8 <iprintf>
 8009bcc:	f06f 0305 	mvn.w	r3, #5
 8009bd0:	e195      	b.n	8009efe <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d03d      	beq.n	8009c5a <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8009bde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009be2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 8009bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7f6 faf8 	bl	80001e4 <strlen>
 8009bf4:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bfc:	d309      	bcc.n	8009c12 <mqtt_client_connect+0x1e6>
 8009bfe:	4b45      	ldr	r3, [pc, #276]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009c00:	f240 5235 	movw	r2, #1333	; 0x535
 8009c04:	494d      	ldr	r1, [pc, #308]	; (8009d3c <mqtt_client_connect+0x310>)
 8009c06:	4845      	ldr	r0, [pc, #276]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009c08:	f00d fcd6 	bl	80175b8 <iprintf>
 8009c0c:	f06f 0305 	mvn.w	r3, #5
 8009c10:	e175      	b.n	8009efe <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d109      	bne.n	8009c2c <mqtt_client_connect+0x200>
 8009c18:	4b3e      	ldr	r3, [pc, #248]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009c1a:	f240 5236 	movw	r2, #1334	; 0x536
 8009c1e:	4948      	ldr	r1, [pc, #288]	; (8009d40 <mqtt_client_connect+0x314>)
 8009c20:	483e      	ldr	r0, [pc, #248]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009c22:	f00d fcc9 	bl	80175b8 <iprintf>
 8009c26:	f06f 0305 	mvn.w	r3, #5
 8009c2a:	e168      	b.n	8009efe <mqtt_client_connect+0x4d2>
    client_user_len = (u16_t)len;
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 8009c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c32:	1c9a      	adds	r2, r3, #2
 8009c34:	8bfb      	ldrh	r3, [r7, #30]
 8009c36:	4413      	add	r3, r2
 8009c38:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c40:	d309      	bcc.n	8009c56 <mqtt_client_connect+0x22a>
 8009c42:	4b34      	ldr	r3, [pc, #208]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009c44:	f240 5239 	movw	r2, #1337	; 0x539
 8009c48:	493b      	ldr	r1, [pc, #236]	; (8009d38 <mqtt_client_connect+0x30c>)
 8009c4a:	4834      	ldr	r0, [pc, #208]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009c4c:	f00d fcb4 	bl	80175b8 <iprintf>
 8009c50:	f06f 0305 	mvn.w	r3, #5
 8009c54:	e153      	b.n	8009efe <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 8009c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d03d      	beq.n	8009cde <mqtt_client_connect+0x2b2>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8009c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 8009c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7f6 fab6 	bl	80001e4 <strlen>
 8009c78:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c80:	d309      	bcc.n	8009c96 <mqtt_client_connect+0x26a>
 8009c82:	4b24      	ldr	r3, [pc, #144]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009c84:	f240 523f 	movw	r2, #1343	; 0x53f
 8009c88:	492e      	ldr	r1, [pc, #184]	; (8009d44 <mqtt_client_connect+0x318>)
 8009c8a:	4824      	ldr	r0, [pc, #144]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009c8c:	f00d fc94 	bl	80175b8 <iprintf>
 8009c90:	f06f 0305 	mvn.w	r3, #5
 8009c94:	e133      	b.n	8009efe <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d109      	bne.n	8009cb0 <mqtt_client_connect+0x284>
 8009c9c:	4b1d      	ldr	r3, [pc, #116]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009c9e:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8009ca2:	4929      	ldr	r1, [pc, #164]	; (8009d48 <mqtt_client_connect+0x31c>)
 8009ca4:	481d      	ldr	r0, [pc, #116]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009ca6:	f00d fc87 	bl	80175b8 <iprintf>
 8009caa:	f06f 0305 	mvn.w	r3, #5
 8009cae:	e126      	b.n	8009efe <mqtt_client_connect+0x4d2>
    client_pass_len = (u16_t)len;
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 8009cb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cb6:	1c9a      	adds	r2, r3, #2
 8009cb8:	8bbb      	ldrh	r3, [r7, #28]
 8009cba:	4413      	add	r3, r2
 8009cbc:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cc4:	d309      	bcc.n	8009cda <mqtt_client_connect+0x2ae>
 8009cc6:	4b13      	ldr	r3, [pc, #76]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009cc8:	f240 5243 	movw	r2, #1347	; 0x543
 8009ccc:	491a      	ldr	r1, [pc, #104]	; (8009d38 <mqtt_client_connect+0x30c>)
 8009cce:	4813      	ldr	r0, [pc, #76]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009cd0:	f00d fc72 	bl	80175b8 <iprintf>
 8009cd4:	f06f 0305 	mvn.w	r3, #5
 8009cd8:	e111      	b.n	8009efe <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8009cde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ce2:	f043 0302 	orr.w	r3, r3, #2
 8009ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 8009cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7f6 fa78 	bl	80001e4 <strlen>
 8009cf4:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cfc:	d328      	bcc.n	8009d50 <mqtt_client_connect+0x324>
 8009cfe:	4b05      	ldr	r3, [pc, #20]	; (8009d14 <mqtt_client_connect+0x2e8>)
 8009d00:	f240 524b 	movw	r2, #1355	; 0x54b
 8009d04:	4911      	ldr	r1, [pc, #68]	; (8009d4c <mqtt_client_connect+0x320>)
 8009d06:	4805      	ldr	r0, [pc, #20]	; (8009d1c <mqtt_client_connect+0x2f0>)
 8009d08:	f00d fc56 	bl	80175b8 <iprintf>
 8009d0c:	f06f 0305 	mvn.w	r3, #5
 8009d10:	e0f5      	b.n	8009efe <mqtt_client_connect+0x4d2>
 8009d12:	bf00      	nop
 8009d14:	08018b58 	.word	0x08018b58
 8009d18:	08018fd8 	.word	0x08018fd8
 8009d1c:	08018bd0 	.word	0x08018bd0
 8009d20:	08018ffc 	.word	0x08018ffc
 8009d24:	08019024 	.word	0x08019024
 8009d28:	08019050 	.word	0x08019050
 8009d2c:	08019084 	.word	0x08019084
 8009d30:	080190c4 	.word	0x080190c4
 8009d34:	08019104 	.word	0x08019104
 8009d38:	08019140 	.word	0x08019140
 8009d3c:	08019170 	.word	0x08019170
 8009d40:	080191b0 	.word	0x080191b0
 8009d44:	080191f4 	.word	0x080191f4
 8009d48:	08019234 	.word	0x08019234
 8009d4c:	08019278 	.word	0x08019278
  client_id_length = (u16_t)len;
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 8009d54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d56:	1c9a      	adds	r2, r3, #2
 8009d58:	8afb      	ldrh	r3, [r7, #22]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d64:	d309      	bcc.n	8009d7a <mqtt_client_connect+0x34e>
 8009d66:	4b68      	ldr	r3, [pc, #416]	; (8009f08 <mqtt_client_connect+0x4dc>)
 8009d68:	f240 524e 	movw	r2, #1358	; 0x54e
 8009d6c:	4967      	ldr	r1, [pc, #412]	; (8009f0c <mqtt_client_connect+0x4e0>)
 8009d6e:	4868      	ldr	r0, [pc, #416]	; (8009f10 <mqtt_client_connect+0x4e4>)
 8009d70:	f00d fc22 	bl	80175b8 <iprintf>
 8009d74:	f06f 0305 	mvn.w	r3, #5
 8009d78:	e0c1      	b.n	8009efe <mqtt_client_connect+0x4d2>
  remaining_length = (u16_t)len;
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	33ec      	adds	r3, #236	; 0xec
 8009d82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d84:	4611      	mov	r1, r2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fe ff56 	bl	8008c38 <mqtt_output_check_space>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d102      	bne.n	8009d98 <mqtt_client_connect+0x36c>
    return ERR_MEM;
 8009d92:	f04f 33ff 	mov.w	r3, #4294967295
 8009d96:	e0b2      	b.n	8009efe <mqtt_client_connect+0x4d2>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8009d98:	2000      	movs	r0, #0
 8009d9a:	f003 fa71 	bl	800d280 <tcp_new_ip_type>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d102      	bne.n	8009db2 <mqtt_client_connect+0x386>
    return ERR_MEM;
 8009dac:	f04f 33ff 	mov.w	r3, #4294967295
 8009db0:	e0a5      	b.n	8009efe <mqtt_client_connect+0x4d2>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f003 fa6f 	bl	800d29c <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	4953      	ldr	r1, [pc, #332]	; (8009f14 <mqtt_client_connect+0x4e8>)
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f002 f998 	bl	800c0fc <tcp_bind>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8009dd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f040 8084 	bne.w	8009ee4 <mqtt_client_connect+0x4b8>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	68d8      	ldr	r0, [r3, #12]
 8009de0:	88fa      	ldrh	r2, [r7, #6]
 8009de2:	4b4d      	ldr	r3, [pc, #308]	; (8009f18 <mqtt_client_connect+0x4ec>)
 8009de4:	68b9      	ldr	r1, [r7, #8]
 8009de6:	f002 fb11 	bl	800c40c <tcp_connect>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8009df0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d177      	bne.n	8009ee8 <mqtt_client_connect+0x4bc>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	4947      	ldr	r1, [pc, #284]	; (8009f1c <mqtt_client_connect+0x4f0>)
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f003 faa2 	bl	800d348 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2201      	movs	r2, #1
 8009e08:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e12:	9301      	str	r3, [sp, #4]
 8009e14:	2300      	movs	r3, #0
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	2300      	movs	r3, #0
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	f7fe fec0 	bl	8008ba2 <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	33ec      	adds	r3, #236	; 0xec
 8009e26:	2204      	movs	r2, #4
 8009e28:	493d      	ldr	r1, [pc, #244]	; (8009f20 <mqtt_client_connect+0x4f4>)
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fe8d 	bl	8008b4a <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	33ec      	adds	r3, #236	; 0xec
 8009e34:	2104      	movs	r1, #4
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fe fe42 	bl	8008ac0 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	33ec      	adds	r3, #236	; 0xec
 8009e40:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009e44:	4611      	mov	r1, r2
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe fe3a 	bl	8008ac0 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e54:	899b      	ldrh	r3, [r3, #12]
 8009e56:	4619      	mov	r1, r3
 8009e58:	4610      	mov	r0, r2
 8009e5a:	f7fe fe40 	bl	8008ade <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	8afa      	ldrh	r2, [r7, #22]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	f7fe fe6d 	bl	8008b4a <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8009e70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e74:	f003 0304 	and.w	r3, r3, #4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d015      	beq.n	8009ea8 <mqtt_client_connect+0x47c>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009e8a:	b292      	uxth	r2, r2
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	f7fe fe5c 	bl	8008b4a <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009ea0:	b292      	uxth	r2, r2
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	f7fe fe51 	bl	8008b4a <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8009ea8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	da08      	bge.n	8009ec2 <mqtt_client_connect+0x496>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	8bfa      	ldrh	r2, [r7, #30]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	f7fe fe44 	bl	8008b4a <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8009ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d008      	beq.n	8009ee0 <mqtt_client_connect+0x4b4>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	8bba      	ldrh	r2, [r7, #28]
 8009eda:	4619      	mov	r1, r3
 8009edc:	f7fe fe35 	bl	8008b4a <mqtt_output_append_string>
  }
  return ERR_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	e00c      	b.n	8009efe <mqtt_client_connect+0x4d2>
    goto tcp_fail;
 8009ee4:	bf00      	nop
 8009ee6:	e000      	b.n	8009eea <mqtt_client_connect+0x4be>
    goto tcp_fail;
 8009ee8:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f002 f8f8 	bl	800c0e4 <tcp_abort>
  client->conn = NULL;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	60da      	str	r2, [r3, #12]
  return err;
 8009efa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3728      	adds	r7, #40	; 0x28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	08018b58 	.word	0x08018b58
 8009f0c:	08019140 	.word	0x08019140
 8009f10:	08018bd0 	.word	0x08018bd0
 8009f14:	0801c16c 	.word	0x0801c16c
 8009f18:	080095f9 	.word	0x080095f9
 8009f1c:	08009585 	.word	0x08009585
 8009f20:	080192b4 	.word	0x080192b4

08009f24 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009f2e:	88fb      	ldrh	r3, [r7, #6]
 8009f30:	021b      	lsls	r3, r3, #8
 8009f32:	b21a      	sxth	r2, r3
 8009f34:	88fb      	ldrh	r3, [r7, #6]
 8009f36:	0a1b      	lsrs	r3, r3, #8
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	b21b      	sxth	r3, r3
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	b21b      	sxth	r3, r3
 8009f40:	b29b      	uxth	r3, r3
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b083      	sub	sp, #12
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	061a      	lsls	r2, r3, #24
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	021b      	lsls	r3, r3, #8
 8009f5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f62:	431a      	orrs	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	0a1b      	lsrs	r3, r3, #8
 8009f68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	0e1b      	lsrs	r3, r3, #24
 8009f72:	4313      	orrs	r3, r2
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009f86:	2300      	movs	r3, #0
 8009f88:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009f8a:	f000 f8d5 	bl	800a138 <mem_init>
  memp_init();
 8009f8e:	f000 fc03 	bl	800a798 <memp_init>
  pbuf_init();
  netif_init();
 8009f92:	f000 fcbb 	bl	800a90c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009f96:	f007 ff8b 	bl	8011eb0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009f9a:	f001 fda9 	bl	800baf0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009f9e:	f007 fec3 	bl	8011d28 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009fa2:	bf00      	nop
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009fb6:	4b05      	ldr	r3, [pc, #20]	; (8009fcc <ptr_to_mem+0x20>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	88fb      	ldrh	r3, [r7, #6]
 8009fbc:	4413      	add	r3, r2
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	20000224 	.word	0x20000224

08009fd0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009fd8:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <mem_to_ptr+0x20>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	b29b      	uxth	r3, r3
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	20000224 	.word	0x20000224

08009ff4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009ff4:	b590      	push	{r4, r7, lr}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009ffc:	4b45      	ldr	r3, [pc, #276]	; (800a114 <plug_holes+0x120>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	429a      	cmp	r2, r3
 800a004:	d206      	bcs.n	800a014 <plug_holes+0x20>
 800a006:	4b44      	ldr	r3, [pc, #272]	; (800a118 <plug_holes+0x124>)
 800a008:	f240 12df 	movw	r2, #479	; 0x1df
 800a00c:	4943      	ldr	r1, [pc, #268]	; (800a11c <plug_holes+0x128>)
 800a00e:	4844      	ldr	r0, [pc, #272]	; (800a120 <plug_holes+0x12c>)
 800a010:	f00d fad2 	bl	80175b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a014:	4b43      	ldr	r3, [pc, #268]	; (800a124 <plug_holes+0x130>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d306      	bcc.n	800a02c <plug_holes+0x38>
 800a01e:	4b3e      	ldr	r3, [pc, #248]	; (800a118 <plug_holes+0x124>)
 800a020:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a024:	4940      	ldr	r1, [pc, #256]	; (800a128 <plug_holes+0x134>)
 800a026:	483e      	ldr	r0, [pc, #248]	; (800a120 <plug_holes+0x12c>)
 800a028:	f00d fac6 	bl	80175b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	791b      	ldrb	r3, [r3, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d006      	beq.n	800a042 <plug_holes+0x4e>
 800a034:	4b38      	ldr	r3, [pc, #224]	; (800a118 <plug_holes+0x124>)
 800a036:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a03a:	493c      	ldr	r1, [pc, #240]	; (800a12c <plug_holes+0x138>)
 800a03c:	4838      	ldr	r0, [pc, #224]	; (800a120 <plug_holes+0x12c>)
 800a03e:	f00d fabb 	bl	80175b8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a04a:	d906      	bls.n	800a05a <plug_holes+0x66>
 800a04c:	4b32      	ldr	r3, [pc, #200]	; (800a118 <plug_holes+0x124>)
 800a04e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a052:	4937      	ldr	r1, [pc, #220]	; (800a130 <plug_holes+0x13c>)
 800a054:	4832      	ldr	r0, [pc, #200]	; (800a120 <plug_holes+0x12c>)
 800a056:	f00d faaf 	bl	80175b8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	4618      	mov	r0, r3
 800a060:	f7ff ffa4 	bl	8009fac <ptr_to_mem>
 800a064:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d024      	beq.n	800a0b8 <plug_holes+0xc4>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	791b      	ldrb	r3, [r3, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d120      	bne.n	800a0b8 <plug_holes+0xc4>
 800a076:	4b2b      	ldr	r3, [pc, #172]	; (800a124 <plug_holes+0x130>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d01b      	beq.n	800a0b8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a080:	4b2c      	ldr	r3, [pc, #176]	; (800a134 <plug_holes+0x140>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	429a      	cmp	r2, r3
 800a088:	d102      	bne.n	800a090 <plug_holes+0x9c>
      lfree = mem;
 800a08a:	4a2a      	ldr	r2, [pc, #168]	; (800a134 <plug_holes+0x140>)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	881a      	ldrh	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0a0:	d00a      	beq.n	800a0b8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	881b      	ldrh	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff ff80 	bl	8009fac <ptr_to_mem>
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7ff ff8e 	bl	8009fd0 <mem_to_ptr>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	885b      	ldrh	r3, [r3, #2]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff ff75 	bl	8009fac <ptr_to_mem>
 800a0c2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d01f      	beq.n	800a10c <plug_holes+0x118>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	791b      	ldrb	r3, [r3, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d11b      	bne.n	800a10c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a0d4:	4b17      	ldr	r3, [pc, #92]	; (800a134 <plug_holes+0x140>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d102      	bne.n	800a0e4 <plug_holes+0xf0>
      lfree = pmem;
 800a0de:	4a15      	ldr	r2, [pc, #84]	; (800a134 <plug_holes+0x140>)
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	881a      	ldrh	r2, [r3, #0]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0f4:	d00a      	beq.n	800a10c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7ff ff56 	bl	8009fac <ptr_to_mem>
 800a100:	4604      	mov	r4, r0
 800a102:	68b8      	ldr	r0, [r7, #8]
 800a104:	f7ff ff64 	bl	8009fd0 <mem_to_ptr>
 800a108:	4603      	mov	r3, r0
 800a10a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a10c:	bf00      	nop
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	bd90      	pop	{r4, r7, pc}
 800a114:	20000224 	.word	0x20000224
 800a118:	08019308 	.word	0x08019308
 800a11c:	08019338 	.word	0x08019338
 800a120:	08019350 	.word	0x08019350
 800a124:	20000228 	.word	0x20000228
 800a128:	08019378 	.word	0x08019378
 800a12c:	08019394 	.word	0x08019394
 800a130:	080193b0 	.word	0x080193b0
 800a134:	2000022c 	.word	0x2000022c

0800a138 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a13e:	4b18      	ldr	r3, [pc, #96]	; (800a1a0 <mem_init+0x68>)
 800a140:	3303      	adds	r3, #3
 800a142:	f023 0303 	bic.w	r3, r3, #3
 800a146:	461a      	mov	r2, r3
 800a148:	4b16      	ldr	r3, [pc, #88]	; (800a1a4 <mem_init+0x6c>)
 800a14a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a14c:	4b15      	ldr	r3, [pc, #84]	; (800a1a4 <mem_init+0x6c>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a158:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a166:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a16a:	f7ff ff1f 	bl	8009fac <ptr_to_mem>
 800a16e:	4603      	mov	r3, r0
 800a170:	4a0d      	ldr	r2, [pc, #52]	; (800a1a8 <mem_init+0x70>)
 800a172:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a174:	4b0c      	ldr	r3, [pc, #48]	; (800a1a8 <mem_init+0x70>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2201      	movs	r2, #1
 800a17a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a17c:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <mem_init+0x70>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a184:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a186:	4b08      	ldr	r3, [pc, #32]	; (800a1a8 <mem_init+0x70>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a18e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a190:	4b04      	ldr	r3, [pc, #16]	; (800a1a4 <mem_init+0x6c>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a05      	ldr	r2, [pc, #20]	; (800a1ac <mem_init+0x74>)
 800a196:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	200037c0 	.word	0x200037c0
 800a1a4:	20000224 	.word	0x20000224
 800a1a8:	20000228 	.word	0x20000228
 800a1ac:	2000022c 	.word	0x2000022c

0800a1b0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff ff09 	bl	8009fd0 <mem_to_ptr>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff fef0 	bl	8009fac <ptr_to_mem>
 800a1cc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	885b      	ldrh	r3, [r3, #2]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff feea 	bl	8009fac <ptr_to_mem>
 800a1d8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1e2:	d818      	bhi.n	800a216 <mem_link_valid+0x66>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	885b      	ldrh	r3, [r3, #2]
 800a1e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1ec:	d813      	bhi.n	800a216 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a1f2:	8afa      	ldrh	r2, [r7, #22]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d004      	beq.n	800a202 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	8afa      	ldrh	r2, [r7, #22]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d109      	bne.n	800a216 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a202:	4b08      	ldr	r3, [pc, #32]	; (800a224 <mem_link_valid+0x74>)
 800a204:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d006      	beq.n	800a21a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	885b      	ldrh	r3, [r3, #2]
 800a210:	8afa      	ldrh	r2, [r7, #22]
 800a212:	429a      	cmp	r2, r3
 800a214:	d001      	beq.n	800a21a <mem_link_valid+0x6a>
    return 0;
 800a216:	2300      	movs	r3, #0
 800a218:	e000      	b.n	800a21c <mem_link_valid+0x6c>
  }
  return 1;
 800a21a:	2301      	movs	r3, #1
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	20000228 	.word	0x20000228

0800a228 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d04c      	beq.n	800a2d0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f003 0303 	and.w	r3, r3, #3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d007      	beq.n	800a250 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a240:	4b25      	ldr	r3, [pc, #148]	; (800a2d8 <mem_free+0xb0>)
 800a242:	f240 2273 	movw	r2, #627	; 0x273
 800a246:	4925      	ldr	r1, [pc, #148]	; (800a2dc <mem_free+0xb4>)
 800a248:	4825      	ldr	r0, [pc, #148]	; (800a2e0 <mem_free+0xb8>)
 800a24a:	f00d f9b5 	bl	80175b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a24e:	e040      	b.n	800a2d2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3b08      	subs	r3, #8
 800a254:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a256:	4b23      	ldr	r3, [pc, #140]	; (800a2e4 <mem_free+0xbc>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d306      	bcc.n	800a26e <mem_free+0x46>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f103 020c 	add.w	r2, r3, #12
 800a266:	4b20      	ldr	r3, [pc, #128]	; (800a2e8 <mem_free+0xc0>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d907      	bls.n	800a27e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a26e:	4b1a      	ldr	r3, [pc, #104]	; (800a2d8 <mem_free+0xb0>)
 800a270:	f240 227f 	movw	r2, #639	; 0x27f
 800a274:	491d      	ldr	r1, [pc, #116]	; (800a2ec <mem_free+0xc4>)
 800a276:	481a      	ldr	r0, [pc, #104]	; (800a2e0 <mem_free+0xb8>)
 800a278:	f00d f99e 	bl	80175b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a27c:	e029      	b.n	800a2d2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	791b      	ldrb	r3, [r3, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d107      	bne.n	800a296 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a286:	4b14      	ldr	r3, [pc, #80]	; (800a2d8 <mem_free+0xb0>)
 800a288:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a28c:	4918      	ldr	r1, [pc, #96]	; (800a2f0 <mem_free+0xc8>)
 800a28e:	4814      	ldr	r0, [pc, #80]	; (800a2e0 <mem_free+0xb8>)
 800a290:	f00d f992 	bl	80175b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a294:	e01d      	b.n	800a2d2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f7ff ff8a 	bl	800a1b0 <mem_link_valid>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d107      	bne.n	800a2b2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	; (800a2d8 <mem_free+0xb0>)
 800a2a4:	f240 2295 	movw	r2, #661	; 0x295
 800a2a8:	4912      	ldr	r1, [pc, #72]	; (800a2f4 <mem_free+0xcc>)
 800a2aa:	480d      	ldr	r0, [pc, #52]	; (800a2e0 <mem_free+0xb8>)
 800a2ac:	f00d f984 	bl	80175b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a2b0:	e00f      	b.n	800a2d2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a2b8:	4b0f      	ldr	r3, [pc, #60]	; (800a2f8 <mem_free+0xd0>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d202      	bcs.n	800a2c8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a2c2:	4a0d      	ldr	r2, [pc, #52]	; (800a2f8 <mem_free+0xd0>)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f7ff fe93 	bl	8009ff4 <plug_holes>
 800a2ce:	e000      	b.n	800a2d2 <mem_free+0xaa>
    return;
 800a2d0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	08019308 	.word	0x08019308
 800a2dc:	080193dc 	.word	0x080193dc
 800a2e0:	08019350 	.word	0x08019350
 800a2e4:	20000224 	.word	0x20000224
 800a2e8:	20000228 	.word	0x20000228
 800a2ec:	08019400 	.word	0x08019400
 800a2f0:	0801941c 	.word	0x0801941c
 800a2f4:	08019444 	.word	0x08019444
 800a2f8:	2000022c 	.word	0x2000022c

0800a2fc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b088      	sub	sp, #32
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	460b      	mov	r3, r1
 800a306:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a308:	887b      	ldrh	r3, [r7, #2]
 800a30a:	3303      	adds	r3, #3
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	f023 0303 	bic.w	r3, r3, #3
 800a312:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a314:	8bfb      	ldrh	r3, [r7, #30]
 800a316:	2b0b      	cmp	r3, #11
 800a318:	d801      	bhi.n	800a31e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a31a:	230c      	movs	r3, #12
 800a31c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a31e:	8bfb      	ldrh	r3, [r7, #30]
 800a320:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a324:	d803      	bhi.n	800a32e <mem_trim+0x32>
 800a326:	8bfa      	ldrh	r2, [r7, #30]
 800a328:	887b      	ldrh	r3, [r7, #2]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d201      	bcs.n	800a332 <mem_trim+0x36>
    return NULL;
 800a32e:	2300      	movs	r3, #0
 800a330:	e0cc      	b.n	800a4cc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a332:	4b68      	ldr	r3, [pc, #416]	; (800a4d4 <mem_trim+0x1d8>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d304      	bcc.n	800a346 <mem_trim+0x4a>
 800a33c:	4b66      	ldr	r3, [pc, #408]	; (800a4d8 <mem_trim+0x1dc>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	429a      	cmp	r2, r3
 800a344:	d306      	bcc.n	800a354 <mem_trim+0x58>
 800a346:	4b65      	ldr	r3, [pc, #404]	; (800a4dc <mem_trim+0x1e0>)
 800a348:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a34c:	4964      	ldr	r1, [pc, #400]	; (800a4e0 <mem_trim+0x1e4>)
 800a34e:	4865      	ldr	r0, [pc, #404]	; (800a4e4 <mem_trim+0x1e8>)
 800a350:	f00d f932 	bl	80175b8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a354:	4b5f      	ldr	r3, [pc, #380]	; (800a4d4 <mem_trim+0x1d8>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d304      	bcc.n	800a368 <mem_trim+0x6c>
 800a35e:	4b5e      	ldr	r3, [pc, #376]	; (800a4d8 <mem_trim+0x1dc>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	429a      	cmp	r2, r3
 800a366:	d301      	bcc.n	800a36c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	e0af      	b.n	800a4cc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	3b08      	subs	r3, #8
 800a370:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a372:	69b8      	ldr	r0, [r7, #24]
 800a374:	f7ff fe2c 	bl	8009fd0 <mem_to_ptr>
 800a378:	4603      	mov	r3, r0
 800a37a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	881a      	ldrh	r2, [r3, #0]
 800a380:	8afb      	ldrh	r3, [r7, #22]
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	b29b      	uxth	r3, r3
 800a386:	3b08      	subs	r3, #8
 800a388:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a38a:	8bfa      	ldrh	r2, [r7, #30]
 800a38c:	8abb      	ldrh	r3, [r7, #20]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d906      	bls.n	800a3a0 <mem_trim+0xa4>
 800a392:	4b52      	ldr	r3, [pc, #328]	; (800a4dc <mem_trim+0x1e0>)
 800a394:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a398:	4953      	ldr	r1, [pc, #332]	; (800a4e8 <mem_trim+0x1ec>)
 800a39a:	4852      	ldr	r0, [pc, #328]	; (800a4e4 <mem_trim+0x1e8>)
 800a39c:	f00d f90c 	bl	80175b8 <iprintf>
  if (newsize > size) {
 800a3a0:	8bfa      	ldrh	r2, [r7, #30]
 800a3a2:	8abb      	ldrh	r3, [r7, #20]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d901      	bls.n	800a3ac <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e08f      	b.n	800a4cc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a3ac:	8bfa      	ldrh	r2, [r7, #30]
 800a3ae:	8abb      	ldrh	r3, [r7, #20]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d101      	bne.n	800a3b8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	e089      	b.n	800a4cc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	881b      	ldrh	r3, [r3, #0]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7ff fdf5 	bl	8009fac <ptr_to_mem>
 800a3c2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	791b      	ldrb	r3, [r3, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d13f      	bne.n	800a44c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3d4:	d106      	bne.n	800a3e4 <mem_trim+0xe8>
 800a3d6:	4b41      	ldr	r3, [pc, #260]	; (800a4dc <mem_trim+0x1e0>)
 800a3d8:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a3dc:	4943      	ldr	r1, [pc, #268]	; (800a4ec <mem_trim+0x1f0>)
 800a3de:	4841      	ldr	r0, [pc, #260]	; (800a4e4 <mem_trim+0x1e8>)
 800a3e0:	f00d f8ea 	bl	80175b8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a3ea:	8afa      	ldrh	r2, [r7, #22]
 800a3ec:	8bfb      	ldrh	r3, [r7, #30]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	3308      	adds	r3, #8
 800a3f4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a3f6:	4b3e      	ldr	r3, [pc, #248]	; (800a4f0 <mem_trim+0x1f4>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	693a      	ldr	r2, [r7, #16]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d106      	bne.n	800a40e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a400:	89fb      	ldrh	r3, [r7, #14]
 800a402:	4618      	mov	r0, r3
 800a404:	f7ff fdd2 	bl	8009fac <ptr_to_mem>
 800a408:	4603      	mov	r3, r0
 800a40a:	4a39      	ldr	r2, [pc, #228]	; (800a4f0 <mem_trim+0x1f4>)
 800a40c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a40e:	89fb      	ldrh	r3, [r7, #14]
 800a410:	4618      	mov	r0, r3
 800a412:	f7ff fdcb 	bl	8009fac <ptr_to_mem>
 800a416:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	2200      	movs	r2, #0
 800a41c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	89ba      	ldrh	r2, [r7, #12]
 800a422:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	8afa      	ldrh	r2, [r7, #22]
 800a428:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	89fa      	ldrh	r2, [r7, #14]
 800a42e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a438:	d047      	beq.n	800a4ca <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff fdb4 	bl	8009fac <ptr_to_mem>
 800a444:	4602      	mov	r2, r0
 800a446:	89fb      	ldrh	r3, [r7, #14]
 800a448:	8053      	strh	r3, [r2, #2]
 800a44a:	e03e      	b.n	800a4ca <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a44c:	8bfb      	ldrh	r3, [r7, #30]
 800a44e:	f103 0214 	add.w	r2, r3, #20
 800a452:	8abb      	ldrh	r3, [r7, #20]
 800a454:	429a      	cmp	r2, r3
 800a456:	d838      	bhi.n	800a4ca <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a458:	8afa      	ldrh	r2, [r7, #22]
 800a45a:	8bfb      	ldrh	r3, [r7, #30]
 800a45c:	4413      	add	r3, r2
 800a45e:	b29b      	uxth	r3, r3
 800a460:	3308      	adds	r3, #8
 800a462:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a46c:	d106      	bne.n	800a47c <mem_trim+0x180>
 800a46e:	4b1b      	ldr	r3, [pc, #108]	; (800a4dc <mem_trim+0x1e0>)
 800a470:	f240 3216 	movw	r2, #790	; 0x316
 800a474:	491d      	ldr	r1, [pc, #116]	; (800a4ec <mem_trim+0x1f0>)
 800a476:	481b      	ldr	r0, [pc, #108]	; (800a4e4 <mem_trim+0x1e8>)
 800a478:	f00d f89e 	bl	80175b8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a47c:	89fb      	ldrh	r3, [r7, #14]
 800a47e:	4618      	mov	r0, r3
 800a480:	f7ff fd94 	bl	8009fac <ptr_to_mem>
 800a484:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a486:	4b1a      	ldr	r3, [pc, #104]	; (800a4f0 <mem_trim+0x1f4>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	693a      	ldr	r2, [r7, #16]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d202      	bcs.n	800a496 <mem_trim+0x19a>
      lfree = mem2;
 800a490:	4a17      	ldr	r2, [pc, #92]	; (800a4f0 <mem_trim+0x1f4>)
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	2200      	movs	r2, #0
 800a49a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	881a      	ldrh	r2, [r3, #0]
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	8afa      	ldrh	r2, [r7, #22]
 800a4a8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	89fa      	ldrh	r2, [r7, #14]
 800a4ae:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4b8:	d007      	beq.n	800a4ca <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff fd74 	bl	8009fac <ptr_to_mem>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	89fb      	ldrh	r3, [r7, #14]
 800a4c8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a4ca:	687b      	ldr	r3, [r7, #4]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3720      	adds	r7, #32
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	20000224 	.word	0x20000224
 800a4d8:	20000228 	.word	0x20000228
 800a4dc:	08019308 	.word	0x08019308
 800a4e0:	08019478 	.word	0x08019478
 800a4e4:	08019350 	.word	0x08019350
 800a4e8:	08019490 	.word	0x08019490
 800a4ec:	080194b0 	.word	0x080194b0
 800a4f0:	2000022c 	.word	0x2000022c

0800a4f4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a4fe:	88fb      	ldrh	r3, [r7, #6]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <mem_malloc+0x14>
    return NULL;
 800a504:	2300      	movs	r3, #0
 800a506:	e0d9      	b.n	800a6bc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a508:	88fb      	ldrh	r3, [r7, #6]
 800a50a:	3303      	adds	r3, #3
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	f023 0303 	bic.w	r3, r3, #3
 800a512:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a514:	8bbb      	ldrh	r3, [r7, #28]
 800a516:	2b0b      	cmp	r3, #11
 800a518:	d801      	bhi.n	800a51e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a51a:	230c      	movs	r3, #12
 800a51c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a51e:	8bbb      	ldrh	r3, [r7, #28]
 800a520:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a524:	d803      	bhi.n	800a52e <mem_malloc+0x3a>
 800a526:	8bba      	ldrh	r2, [r7, #28]
 800a528:	88fb      	ldrh	r3, [r7, #6]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d201      	bcs.n	800a532 <mem_malloc+0x3e>
    return NULL;
 800a52e:	2300      	movs	r3, #0
 800a530:	e0c4      	b.n	800a6bc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a532:	4b64      	ldr	r3, [pc, #400]	; (800a6c4 <mem_malloc+0x1d0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff fd4a 	bl	8009fd0 <mem_to_ptr>
 800a53c:	4603      	mov	r3, r0
 800a53e:	83fb      	strh	r3, [r7, #30]
 800a540:	e0b4      	b.n	800a6ac <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a542:	8bfb      	ldrh	r3, [r7, #30]
 800a544:	4618      	mov	r0, r3
 800a546:	f7ff fd31 	bl	8009fac <ptr_to_mem>
 800a54a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	791b      	ldrb	r3, [r3, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	f040 80a4 	bne.w	800a69e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	8bfb      	ldrh	r3, [r7, #30]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	f1a3 0208 	sub.w	r2, r3, #8
 800a564:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a566:	429a      	cmp	r2, r3
 800a568:	f0c0 8099 	bcc.w	800a69e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	881b      	ldrh	r3, [r3, #0]
 800a570:	461a      	mov	r2, r3
 800a572:	8bfb      	ldrh	r3, [r7, #30]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	f1a3 0208 	sub.w	r2, r3, #8
 800a57a:	8bbb      	ldrh	r3, [r7, #28]
 800a57c:	3314      	adds	r3, #20
 800a57e:	429a      	cmp	r2, r3
 800a580:	d333      	bcc.n	800a5ea <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a582:	8bfa      	ldrh	r2, [r7, #30]
 800a584:	8bbb      	ldrh	r3, [r7, #28]
 800a586:	4413      	add	r3, r2
 800a588:	b29b      	uxth	r3, r3
 800a58a:	3308      	adds	r3, #8
 800a58c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a58e:	8a7b      	ldrh	r3, [r7, #18]
 800a590:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a594:	d106      	bne.n	800a5a4 <mem_malloc+0xb0>
 800a596:	4b4c      	ldr	r3, [pc, #304]	; (800a6c8 <mem_malloc+0x1d4>)
 800a598:	f240 3287 	movw	r2, #903	; 0x387
 800a59c:	494b      	ldr	r1, [pc, #300]	; (800a6cc <mem_malloc+0x1d8>)
 800a59e:	484c      	ldr	r0, [pc, #304]	; (800a6d0 <mem_malloc+0x1dc>)
 800a5a0:	f00d f80a 	bl	80175b8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a5a4:	8a7b      	ldrh	r3, [r7, #18]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7ff fd00 	bl	8009fac <ptr_to_mem>
 800a5ac:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	881a      	ldrh	r2, [r3, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	8bfa      	ldrh	r2, [r7, #30]
 800a5c0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	8a7a      	ldrh	r2, [r7, #18]
 800a5c6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5d6:	d00b      	beq.n	800a5f0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7ff fce5 	bl	8009fac <ptr_to_mem>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	8a7b      	ldrh	r3, [r7, #18]
 800a5e6:	8053      	strh	r3, [r2, #2]
 800a5e8:	e002      	b.n	800a5f0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a5f0:	4b34      	ldr	r3, [pc, #208]	; (800a6c4 <mem_malloc+0x1d0>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d127      	bne.n	800a64a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a5fa:	4b32      	ldr	r3, [pc, #200]	; (800a6c4 <mem_malloc+0x1d0>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a600:	e005      	b.n	800a60e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	4618      	mov	r0, r3
 800a608:	f7ff fcd0 	bl	8009fac <ptr_to_mem>
 800a60c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	791b      	ldrb	r3, [r3, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d004      	beq.n	800a620 <mem_malloc+0x12c>
 800a616:	4b2f      	ldr	r3, [pc, #188]	; (800a6d4 <mem_malloc+0x1e0>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d1f0      	bne.n	800a602 <mem_malloc+0x10e>
          }
          lfree = cur;
 800a620:	4a28      	ldr	r2, [pc, #160]	; (800a6c4 <mem_malloc+0x1d0>)
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a626:	4b27      	ldr	r3, [pc, #156]	; (800a6c4 <mem_malloc+0x1d0>)
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	4b2a      	ldr	r3, [pc, #168]	; (800a6d4 <mem_malloc+0x1e0>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d00b      	beq.n	800a64a <mem_malloc+0x156>
 800a632:	4b24      	ldr	r3, [pc, #144]	; (800a6c4 <mem_malloc+0x1d0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	791b      	ldrb	r3, [r3, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d006      	beq.n	800a64a <mem_malloc+0x156>
 800a63c:	4b22      	ldr	r3, [pc, #136]	; (800a6c8 <mem_malloc+0x1d4>)
 800a63e:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a642:	4925      	ldr	r1, [pc, #148]	; (800a6d8 <mem_malloc+0x1e4>)
 800a644:	4822      	ldr	r0, [pc, #136]	; (800a6d0 <mem_malloc+0x1dc>)
 800a646:	f00c ffb7 	bl	80175b8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a64a:	8bba      	ldrh	r2, [r7, #28]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	4413      	add	r3, r2
 800a650:	3308      	adds	r3, #8
 800a652:	4a20      	ldr	r2, [pc, #128]	; (800a6d4 <mem_malloc+0x1e0>)
 800a654:	6812      	ldr	r2, [r2, #0]
 800a656:	4293      	cmp	r3, r2
 800a658:	d906      	bls.n	800a668 <mem_malloc+0x174>
 800a65a:	4b1b      	ldr	r3, [pc, #108]	; (800a6c8 <mem_malloc+0x1d4>)
 800a65c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a660:	491e      	ldr	r1, [pc, #120]	; (800a6dc <mem_malloc+0x1e8>)
 800a662:	481b      	ldr	r0, [pc, #108]	; (800a6d0 <mem_malloc+0x1dc>)
 800a664:	f00c ffa8 	bl	80175b8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f003 0303 	and.w	r3, r3, #3
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d006      	beq.n	800a680 <mem_malloc+0x18c>
 800a672:	4b15      	ldr	r3, [pc, #84]	; (800a6c8 <mem_malloc+0x1d4>)
 800a674:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a678:	4919      	ldr	r1, [pc, #100]	; (800a6e0 <mem_malloc+0x1ec>)
 800a67a:	4815      	ldr	r0, [pc, #84]	; (800a6d0 <mem_malloc+0x1dc>)
 800a67c:	f00c ff9c 	bl	80175b8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	f003 0303 	and.w	r3, r3, #3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d006      	beq.n	800a698 <mem_malloc+0x1a4>
 800a68a:	4b0f      	ldr	r3, [pc, #60]	; (800a6c8 <mem_malloc+0x1d4>)
 800a68c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a690:	4914      	ldr	r1, [pc, #80]	; (800a6e4 <mem_malloc+0x1f0>)
 800a692:	480f      	ldr	r0, [pc, #60]	; (800a6d0 <mem_malloc+0x1dc>)
 800a694:	f00c ff90 	bl	80175b8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	3308      	adds	r3, #8
 800a69c:	e00e      	b.n	800a6bc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a69e:	8bfb      	ldrh	r3, [r7, #30]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff fc83 	bl	8009fac <ptr_to_mem>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	881b      	ldrh	r3, [r3, #0]
 800a6aa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a6ac:	8bfa      	ldrh	r2, [r7, #30]
 800a6ae:	8bbb      	ldrh	r3, [r7, #28]
 800a6b0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	f4ff af44 	bcc.w	800a542 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3720      	adds	r7, #32
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	2000022c 	.word	0x2000022c
 800a6c8:	08019308 	.word	0x08019308
 800a6cc:	080194b0 	.word	0x080194b0
 800a6d0:	08019350 	.word	0x08019350
 800a6d4:	20000228 	.word	0x20000228
 800a6d8:	080194c4 	.word	0x080194c4
 800a6dc:	080194e0 	.word	0x080194e0
 800a6e0:	08019510 	.word	0x08019510
 800a6e4:	08019540 	.word	0x08019540

0800a6e8 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	460a      	mov	r2, r1
 800a6f2:	80fb      	strh	r3, [r7, #6]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800a6f8:	88fb      	ldrh	r3, [r7, #6]
 800a6fa:	88ba      	ldrh	r2, [r7, #4]
 800a6fc:	fb02 f303 	mul.w	r3, r2, r3
 800a700:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	b29b      	uxth	r3, r3
 800a706:	461a      	mov	r2, r3
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d001      	beq.n	800a712 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800a70e:	2300      	movs	r3, #0
 800a710:	e00e      	b.n	800a730 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	b29b      	uxth	r3, r3
 800a716:	4618      	mov	r0, r3
 800a718:	f7ff feec 	bl	800a4f4 <mem_malloc>
 800a71c:	60b8      	str	r0, [r7, #8]
  if (p) {
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d004      	beq.n	800a72e <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	2100      	movs	r1, #0
 800a728:	68b8      	ldr	r0, [r7, #8]
 800a72a:	f00c ff3d 	bl	80175a8 <memset>
  }
  return p;
 800a72e:	68bb      	ldr	r3, [r7, #8]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	2200      	movs	r2, #0
 800a746:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	3303      	adds	r3, #3
 800a74e:	f023 0303 	bic.w	r3, r3, #3
 800a752:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a754:	2300      	movs	r3, #0
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	e011      	b.n	800a77e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	881b      	ldrh	r3, [r3, #0]
 800a770:	461a      	mov	r2, r3
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	4413      	add	r3, r2
 800a776:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3301      	adds	r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	885b      	ldrh	r3, [r3, #2]
 800a782:	461a      	mov	r2, r3
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4293      	cmp	r3, r2
 800a788:	dbe7      	blt.n	800a75a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a79e:	2300      	movs	r3, #0
 800a7a0:	80fb      	strh	r3, [r7, #6]
 800a7a2:	e009      	b.n	800a7b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a7a4:	88fb      	ldrh	r3, [r7, #6]
 800a7a6:	4a08      	ldr	r2, [pc, #32]	; (800a7c8 <memp_init+0x30>)
 800a7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7ff ffc3 	bl	800a738 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a7b2:	88fb      	ldrh	r3, [r7, #6]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	80fb      	strh	r3, [r7, #6]
 800a7b8:	88fb      	ldrh	r3, [r7, #6]
 800a7ba:	2b08      	cmp	r3, #8
 800a7bc:	d9f2      	bls.n	800a7a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a7be:	bf00      	nop
 800a7c0:	bf00      	nop
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	0801c0f8 	.word	0x0801c0f8

0800a7cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d012      	beq.n	800a808 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	6812      	ldr	r2, [r2, #0]
 800a7ea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f003 0303 	and.w	r3, r3, #3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d006      	beq.n	800a804 <do_memp_malloc_pool+0x38>
 800a7f6:	4b07      	ldr	r3, [pc, #28]	; (800a814 <do_memp_malloc_pool+0x48>)
 800a7f8:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a7fc:	4906      	ldr	r1, [pc, #24]	; (800a818 <do_memp_malloc_pool+0x4c>)
 800a7fe:	4807      	ldr	r0, [pc, #28]	; (800a81c <do_memp_malloc_pool+0x50>)
 800a800:	f00c feda 	bl	80175b8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	e000      	b.n	800a80a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	08019564 	.word	0x08019564
 800a818:	08019594 	.word	0x08019594
 800a81c:	080195b8 	.word	0x080195b8

0800a820 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	2b08      	cmp	r3, #8
 800a82e:	d908      	bls.n	800a842 <memp_malloc+0x22>
 800a830:	4b0a      	ldr	r3, [pc, #40]	; (800a85c <memp_malloc+0x3c>)
 800a832:	f240 1257 	movw	r2, #343	; 0x157
 800a836:	490a      	ldr	r1, [pc, #40]	; (800a860 <memp_malloc+0x40>)
 800a838:	480a      	ldr	r0, [pc, #40]	; (800a864 <memp_malloc+0x44>)
 800a83a:	f00c febd 	bl	80175b8 <iprintf>
 800a83e:	2300      	movs	r3, #0
 800a840:	e008      	b.n	800a854 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a842:	79fb      	ldrb	r3, [r7, #7]
 800a844:	4a08      	ldr	r2, [pc, #32]	; (800a868 <memp_malloc+0x48>)
 800a846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7ff ffbe 	bl	800a7cc <do_memp_malloc_pool>
 800a850:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a852:	68fb      	ldr	r3, [r7, #12]
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	08019564 	.word	0x08019564
 800a860:	080195f4 	.word	0x080195f4
 800a864:	080195b8 	.word	0x080195b8
 800a868:	0801c0f8 	.word	0x0801c0f8

0800a86c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	f003 0303 	and.w	r3, r3, #3
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d006      	beq.n	800a88e <do_memp_free_pool+0x22>
 800a880:	4b0a      	ldr	r3, [pc, #40]	; (800a8ac <do_memp_free_pool+0x40>)
 800a882:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a886:	490a      	ldr	r1, [pc, #40]	; (800a8b0 <do_memp_free_pool+0x44>)
 800a888:	480a      	ldr	r0, [pc, #40]	; (800a8b4 <do_memp_free_pool+0x48>)
 800a88a:	f00c fe95 	bl	80175b8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a8a4:	bf00      	nop
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	08019564 	.word	0x08019564
 800a8b0:	08019614 	.word	0x08019614
 800a8b4:	080195b8 	.word	0x080195b8

0800a8b8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	6039      	str	r1, [r7, #0]
 800a8c2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a8c4:	79fb      	ldrb	r3, [r7, #7]
 800a8c6:	2b08      	cmp	r3, #8
 800a8c8:	d907      	bls.n	800a8da <memp_free+0x22>
 800a8ca:	4b0c      	ldr	r3, [pc, #48]	; (800a8fc <memp_free+0x44>)
 800a8cc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a8d0:	490b      	ldr	r1, [pc, #44]	; (800a900 <memp_free+0x48>)
 800a8d2:	480c      	ldr	r0, [pc, #48]	; (800a904 <memp_free+0x4c>)
 800a8d4:	f00c fe70 	bl	80175b8 <iprintf>
 800a8d8:	e00c      	b.n	800a8f4 <memp_free+0x3c>

  if (mem == NULL) {
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d008      	beq.n	800a8f2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a8e0:	79fb      	ldrb	r3, [r7, #7]
 800a8e2:	4a09      	ldr	r2, [pc, #36]	; (800a908 <memp_free+0x50>)
 800a8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7ff ffbe 	bl	800a86c <do_memp_free_pool>
 800a8f0:	e000      	b.n	800a8f4 <memp_free+0x3c>
    return;
 800a8f2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	08019564 	.word	0x08019564
 800a900:	08019634 	.word	0x08019634
 800a904:	080195b8 	.word	0x080195b8
 800a908:	0801c0f8 	.word	0x0801c0f8

0800a90c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a90c:	b480      	push	{r7}
 800a90e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a910:	bf00      	nop
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
	...

0800a91c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d108      	bne.n	800a942 <netif_add+0x26>
 800a930:	4b5b      	ldr	r3, [pc, #364]	; (800aaa0 <netif_add+0x184>)
 800a932:	f240 1227 	movw	r2, #295	; 0x127
 800a936:	495b      	ldr	r1, [pc, #364]	; (800aaa4 <netif_add+0x188>)
 800a938:	485b      	ldr	r0, [pc, #364]	; (800aaa8 <netif_add+0x18c>)
 800a93a:	f00c fe3d 	bl	80175b8 <iprintf>
 800a93e:	2300      	movs	r3, #0
 800a940:	e0a9      	b.n	800aa96 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a944:	2b00      	cmp	r3, #0
 800a946:	d108      	bne.n	800a95a <netif_add+0x3e>
 800a948:	4b55      	ldr	r3, [pc, #340]	; (800aaa0 <netif_add+0x184>)
 800a94a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a94e:	4957      	ldr	r1, [pc, #348]	; (800aaac <netif_add+0x190>)
 800a950:	4855      	ldr	r0, [pc, #340]	; (800aaa8 <netif_add+0x18c>)
 800a952:	f00c fe31 	bl	80175b8 <iprintf>
 800a956:	2300      	movs	r3, #0
 800a958:	e09d      	b.n	800aa96 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d101      	bne.n	800a964 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a960:	4b53      	ldr	r3, [pc, #332]	; (800aab0 <netif_add+0x194>)
 800a962:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a96a:	4b51      	ldr	r3, [pc, #324]	; (800aab0 <netif_add+0x194>)
 800a96c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a974:	4b4e      	ldr	r3, [pc, #312]	; (800aab0 <netif_add+0x194>)
 800a976:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	4a49      	ldr	r2, [pc, #292]	; (800aab4 <netif_add+0x198>)
 800a98e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3324      	adds	r3, #36	; 0x24
 800a9a2:	2204      	movs	r2, #4
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f00c fdfe 	bl	80175a8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6a3a      	ldr	r2, [r7, #32]
 800a9b6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a9b8:	4b3f      	ldr	r3, [pc, #252]	; (800aab8 <netif_add+0x19c>)
 800a9ba:	781a      	ldrb	r2, [r3, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9c6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f000 f914 	bl	800abfc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	4798      	blx	r3
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <netif_add+0xc8>
    return NULL;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	e058      	b.n	800aa96 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9ea:	2bff      	cmp	r3, #255	; 0xff
 800a9ec:	d103      	bne.n	800a9f6 <netif_add+0xda>
        netif->num = 0;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a9fa:	4b30      	ldr	r3, [pc, #192]	; (800aabc <netif_add+0x1a0>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	617b      	str	r3, [r7, #20]
 800aa00:	e02b      	b.n	800aa5a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d106      	bne.n	800aa18 <netif_add+0xfc>
 800aa0a:	4b25      	ldr	r3, [pc, #148]	; (800aaa0 <netif_add+0x184>)
 800aa0c:	f240 128b 	movw	r2, #395	; 0x18b
 800aa10:	492b      	ldr	r1, [pc, #172]	; (800aac0 <netif_add+0x1a4>)
 800aa12:	4825      	ldr	r0, [pc, #148]	; (800aaa8 <netif_add+0x18c>)
 800aa14:	f00c fdd0 	bl	80175b8 <iprintf>
        num_netifs++;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2bff      	cmp	r3, #255	; 0xff
 800aa22:	dd06      	ble.n	800aa32 <netif_add+0x116>
 800aa24:	4b1e      	ldr	r3, [pc, #120]	; (800aaa0 <netif_add+0x184>)
 800aa26:	f240 128d 	movw	r2, #397	; 0x18d
 800aa2a:	4926      	ldr	r1, [pc, #152]	; (800aac4 <netif_add+0x1a8>)
 800aa2c:	481e      	ldr	r0, [pc, #120]	; (800aaa8 <netif_add+0x18c>)
 800aa2e:	f00c fdc3 	bl	80175b8 <iprintf>
        if (netif2->num == netif->num) {
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d108      	bne.n	800aa54 <netif_add+0x138>
          netif->num++;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa48:	3301      	adds	r3, #1
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800aa52:	e005      	b.n	800aa60 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	617b      	str	r3, [r7, #20]
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1d0      	bne.n	800aa02 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1be      	bne.n	800a9e4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa6c:	2bfe      	cmp	r3, #254	; 0xfe
 800aa6e:	d103      	bne.n	800aa78 <netif_add+0x15c>
    netif_num = 0;
 800aa70:	4b11      	ldr	r3, [pc, #68]	; (800aab8 <netif_add+0x19c>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	701a      	strb	r2, [r3, #0]
 800aa76:	e006      	b.n	800aa86 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa7e:	3301      	adds	r3, #1
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	4b0d      	ldr	r3, [pc, #52]	; (800aab8 <netif_add+0x19c>)
 800aa84:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800aa86:	4b0d      	ldr	r3, [pc, #52]	; (800aabc <netif_add+0x1a0>)
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800aa8e:	4a0b      	ldr	r2, [pc, #44]	; (800aabc <netif_add+0x1a0>)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800aa94:	68fb      	ldr	r3, [r7, #12]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	08019650 	.word	0x08019650
 800aaa4:	080196e4 	.word	0x080196e4
 800aaa8:	080196a0 	.word	0x080196a0
 800aaac:	08019700 	.word	0x08019700
 800aab0:	0801c16c 	.word	0x0801c16c
 800aab4:	0800ae0f 	.word	0x0800ae0f
 800aab8:	20000254 	.word	0x20000254
 800aabc:	20006cfc 	.word	0x20006cfc
 800aac0:	08019724 	.word	0x08019724
 800aac4:	08019738 	.word	0x08019738

0800aac8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800aad2:	6839      	ldr	r1, [r7, #0]
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f002 fdff 	bl	800d6d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f007 fe73 	bl	80127c8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800aae2:	bf00      	nop
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
	...

0800aaec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b086      	sub	sp, #24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d106      	bne.n	800ab0c <netif_do_set_ipaddr+0x20>
 800aafe:	4b1d      	ldr	r3, [pc, #116]	; (800ab74 <netif_do_set_ipaddr+0x88>)
 800ab00:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ab04:	491c      	ldr	r1, [pc, #112]	; (800ab78 <netif_do_set_ipaddr+0x8c>)
 800ab06:	481d      	ldr	r0, [pc, #116]	; (800ab7c <netif_do_set_ipaddr+0x90>)
 800ab08:	f00c fd56 	bl	80175b8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d106      	bne.n	800ab20 <netif_do_set_ipaddr+0x34>
 800ab12:	4b18      	ldr	r3, [pc, #96]	; (800ab74 <netif_do_set_ipaddr+0x88>)
 800ab14:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ab18:	4917      	ldr	r1, [pc, #92]	; (800ab78 <netif_do_set_ipaddr+0x8c>)
 800ab1a:	4818      	ldr	r0, [pc, #96]	; (800ab7c <netif_do_set_ipaddr+0x90>)
 800ab1c:	f00c fd4c 	bl	80175b8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3304      	adds	r3, #4
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d01c      	beq.n	800ab68 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	3304      	adds	r3, #4
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ab3e:	f107 0314 	add.w	r3, r7, #20
 800ab42:	4619      	mov	r1, r3
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7ff ffbf 	bl	800aac8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <netif_do_set_ipaddr+0x6a>
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	e000      	b.n	800ab58 <netif_do_set_ipaddr+0x6c>
 800ab56:	2300      	movs	r3, #0
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 f8d2 	bl	800ad08 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ab64:	2301      	movs	r3, #1
 800ab66:	e000      	b.n	800ab6a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3718      	adds	r7, #24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	08019650 	.word	0x08019650
 800ab78:	08019768 	.word	0x08019768
 800ab7c:	080196a0 	.word	0x080196a0

0800ab80 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	3308      	adds	r3, #8
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d00a      	beq.n	800abb0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d002      	beq.n	800aba6 <netif_do_set_netmask+0x26>
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	e000      	b.n	800aba8 <netif_do_set_netmask+0x28>
 800aba6:	2300      	movs	r3, #0
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800abac:	2301      	movs	r3, #1
 800abae:	e000      	b.n	800abb2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b085      	sub	sp, #20
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	60f8      	str	r0, [r7, #12]
 800abc6:	60b9      	str	r1, [r7, #8]
 800abc8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	330c      	adds	r3, #12
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d00a      	beq.n	800abee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <netif_do_set_gw+0x26>
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	e000      	b.n	800abe6 <netif_do_set_gw+0x28>
 800abe4:	2300      	movs	r3, #0
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800abea:	2301      	movs	r3, #1
 800abec:	e000      	b.n	800abf0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ac18:	4b1c      	ldr	r3, [pc, #112]	; (800ac8c <netif_set_addr+0x90>)
 800ac1a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ac22:	4b1a      	ldr	r3, [pc, #104]	; (800ac8c <netif_set_addr+0x90>)
 800ac24:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ac2c:	4b17      	ldr	r3, [pc, #92]	; (800ac8c <netif_set_addr+0x90>)
 800ac2e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <netif_set_addr+0x42>
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <netif_set_addr+0x46>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e000      	b.n	800ac44 <netif_set_addr+0x48>
 800ac42:	2300      	movs	r3, #0
 800ac44:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d006      	beq.n	800ac5a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ac4c:	f107 0310 	add.w	r3, r7, #16
 800ac50:	461a      	mov	r2, r3
 800ac52:	68b9      	ldr	r1, [r7, #8]
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f7ff ff49 	bl	800aaec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ac5a:	69fa      	ldr	r2, [r7, #28]
 800ac5c:	6879      	ldr	r1, [r7, #4]
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f7ff ff8e 	bl	800ab80 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ac64:	69ba      	ldr	r2, [r7, #24]
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7ff ffa8 	bl	800abbe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d106      	bne.n	800ac82 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ac74:	f107 0310 	add.w	r3, r7, #16
 800ac78:	461a      	mov	r2, r3
 800ac7a:	68b9      	ldr	r1, [r7, #8]
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f7ff ff35 	bl	800aaec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ac82:	bf00      	nop
 800ac84:	3720      	adds	r7, #32
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	0801c16c 	.word	0x0801c16c

0800ac90 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ac98:	4a04      	ldr	r2, [pc, #16]	; (800acac <netif_set_default+0x1c>)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ac9e:	bf00      	nop
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	20006d00 	.word	0x20006d00

0800acb0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d107      	bne.n	800acce <netif_set_up+0x1e>
 800acbe:	4b0f      	ldr	r3, [pc, #60]	; (800acfc <netif_set_up+0x4c>)
 800acc0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800acc4:	490e      	ldr	r1, [pc, #56]	; (800ad00 <netif_set_up+0x50>)
 800acc6:	480f      	ldr	r0, [pc, #60]	; (800ad04 <netif_set_up+0x54>)
 800acc8:	f00c fc76 	bl	80175b8 <iprintf>
 800accc:	e013      	b.n	800acf6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10c      	bne.n	800acf6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ace2:	f043 0301 	orr.w	r3, r3, #1
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800acee:	2103      	movs	r1, #3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 f809 	bl	800ad08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	08019650 	.word	0x08019650
 800ad00:	080197d8 	.word	0x080197d8
 800ad04:	080196a0 	.word	0x080196a0

0800ad08 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d106      	bne.n	800ad28 <netif_issue_reports+0x20>
 800ad1a:	4b18      	ldr	r3, [pc, #96]	; (800ad7c <netif_issue_reports+0x74>)
 800ad1c:	f240 326d 	movw	r2, #877	; 0x36d
 800ad20:	4917      	ldr	r1, [pc, #92]	; (800ad80 <netif_issue_reports+0x78>)
 800ad22:	4818      	ldr	r0, [pc, #96]	; (800ad84 <netif_issue_reports+0x7c>)
 800ad24:	f00c fc48 	bl	80175b8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad2e:	f003 0304 	and.w	r3, r3, #4
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d01e      	beq.n	800ad74 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad3c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d017      	beq.n	800ad74 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d013      	beq.n	800ad76 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	3304      	adds	r3, #4
 800ad52:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00e      	beq.n	800ad76 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad5e:	f003 0308 	and.w	r3, r3, #8
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d007      	beq.n	800ad76 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	3304      	adds	r3, #4
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f00a faef 	bl	8015350 <etharp_request>
 800ad72:	e000      	b.n	800ad76 <netif_issue_reports+0x6e>
    return;
 800ad74:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ad76:	3708      	adds	r7, #8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	08019650 	.word	0x08019650
 800ad80:	080197f4 	.word	0x080197f4
 800ad84:	080196a0 	.word	0x080196a0

0800ad88 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d107      	bne.n	800ada6 <netif_set_down+0x1e>
 800ad96:	4b12      	ldr	r3, [pc, #72]	; (800ade0 <netif_set_down+0x58>)
 800ad98:	f240 329b 	movw	r2, #923	; 0x39b
 800ad9c:	4911      	ldr	r1, [pc, #68]	; (800ade4 <netif_set_down+0x5c>)
 800ad9e:	4812      	ldr	r0, [pc, #72]	; (800ade8 <netif_set_down+0x60>)
 800ada0:	f00c fc0a 	bl	80175b8 <iprintf>
 800ada4:	e019      	b.n	800adda <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d012      	beq.n	800adda <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800adba:	f023 0301 	bic.w	r3, r3, #1
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800adcc:	f003 0308 	and.w	r3, r3, #8
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f009 fe75 	bl	8014ac4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	08019650 	.word	0x08019650
 800ade4:	08019818 	.word	0x08019818
 800ade8:	080196a0 	.word	0x080196a0

0800adec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d002      	beq.n	800ae02 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	61da      	str	r2, [r3, #28]
  }
}
 800ae02:	bf00      	nop
 800ae04:	370c      	adds	r7, #12
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b085      	sub	sp, #20
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ae1a:	f06f 030b 	mvn.w	r3, #11
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
	...

0800ae2c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	4603      	mov	r3, r0
 800ae34:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ae36:	79fb      	ldrb	r3, [r7, #7]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d013      	beq.n	800ae64 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ae3c:	4b0d      	ldr	r3, [pc, #52]	; (800ae74 <netif_get_by_index+0x48>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	60fb      	str	r3, [r7, #12]
 800ae42:	e00c      	b.n	800ae5e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	79fa      	ldrb	r2, [r7, #7]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d101      	bne.n	800ae58 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	e006      	b.n	800ae66 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	60fb      	str	r3, [r7, #12]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1ef      	bne.n	800ae44 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	20006cfc 	.word	0x20006cfc

0800ae78 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ae7e:	4b0c      	ldr	r3, [pc, #48]	; (800aeb0 <pbuf_free_ooseq+0x38>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ae84:	4b0b      	ldr	r3, [pc, #44]	; (800aeb4 <pbuf_free_ooseq+0x3c>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	607b      	str	r3, [r7, #4]
 800ae8a:	e00a      	b.n	800aea2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d003      	beq.n	800ae9c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f002 fc5d 	bl	800d754 <tcp_free_ooseq>
      return;
 800ae9a:	e005      	b.n	800aea8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	607b      	str	r3, [r7, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1f1      	bne.n	800ae8c <pbuf_free_ooseq+0x14>
    }
  }
}
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	20006d04 	.word	0x20006d04
 800aeb4:	20006d0c 	.word	0x20006d0c

0800aeb8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800aebc:	4b03      	ldr	r3, [pc, #12]	; (800aecc <pbuf_pool_is_empty+0x14>)
 800aebe:	2201      	movs	r2, #1
 800aec0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800aec2:	bf00      	nop
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	20006d04 	.word	0x20006d04

0800aed0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	4611      	mov	r1, r2
 800aedc:	461a      	mov	r2, r3
 800aede:	460b      	mov	r3, r1
 800aee0:	80fb      	strh	r3, [r7, #6]
 800aee2:	4613      	mov	r3, r2
 800aee4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	88fa      	ldrh	r2, [r7, #6]
 800aef6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	88ba      	ldrh	r2, [r7, #4]
 800aefc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800aefe:	8b3b      	ldrh	r3, [r7, #24]
 800af00:	b2da      	uxtb	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	7f3a      	ldrb	r2, [r7, #28]
 800af0a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2201      	movs	r2, #1
 800af10:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	73da      	strb	r2, [r3, #15]
}
 800af18:	bf00      	nop
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08c      	sub	sp, #48	; 0x30
 800af28:	af02      	add	r7, sp, #8
 800af2a:	4603      	mov	r3, r0
 800af2c:	71fb      	strb	r3, [r7, #7]
 800af2e:	460b      	mov	r3, r1
 800af30:	80bb      	strh	r3, [r7, #4]
 800af32:	4613      	mov	r3, r2
 800af34:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800af36:	79fb      	ldrb	r3, [r7, #7]
 800af38:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800af3a:	887b      	ldrh	r3, [r7, #2]
 800af3c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800af40:	d07f      	beq.n	800b042 <pbuf_alloc+0x11e>
 800af42:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800af46:	f300 80c8 	bgt.w	800b0da <pbuf_alloc+0x1b6>
 800af4a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800af4e:	d010      	beq.n	800af72 <pbuf_alloc+0x4e>
 800af50:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800af54:	f300 80c1 	bgt.w	800b0da <pbuf_alloc+0x1b6>
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d002      	beq.n	800af62 <pbuf_alloc+0x3e>
 800af5c:	2b41      	cmp	r3, #65	; 0x41
 800af5e:	f040 80bc 	bne.w	800b0da <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800af62:	887a      	ldrh	r2, [r7, #2]
 800af64:	88bb      	ldrh	r3, [r7, #4]
 800af66:	4619      	mov	r1, r3
 800af68:	2000      	movs	r0, #0
 800af6a:	f000 f8d1 	bl	800b110 <pbuf_alloc_reference>
 800af6e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800af70:	e0bd      	b.n	800b0ee <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800af72:	2300      	movs	r3, #0
 800af74:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800af76:	2300      	movs	r3, #0
 800af78:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800af7a:	88bb      	ldrh	r3, [r7, #4]
 800af7c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800af7e:	2008      	movs	r0, #8
 800af80:	f7ff fc4e 	bl	800a820 <memp_malloc>
 800af84:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d109      	bne.n	800afa0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800af8c:	f7ff ff94 	bl	800aeb8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	2b00      	cmp	r3, #0
 800af94:	d002      	beq.n	800af9c <pbuf_alloc+0x78>
            pbuf_free(p);
 800af96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af98:	f000 faa8 	bl	800b4ec <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800af9c:	2300      	movs	r3, #0
 800af9e:	e0a7      	b.n	800b0f0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800afa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afa2:	3303      	adds	r3, #3
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	f023 0303 	bic.w	r3, r3, #3
 800afaa:	b29b      	uxth	r3, r3
 800afac:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	8b7a      	ldrh	r2, [r7, #26]
 800afb4:	4293      	cmp	r3, r2
 800afb6:	bf28      	it	cs
 800afb8:	4613      	movcs	r3, r2
 800afba:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800afbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afbe:	3310      	adds	r3, #16
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	4413      	add	r3, r2
 800afc4:	3303      	adds	r3, #3
 800afc6:	f023 0303 	bic.w	r3, r3, #3
 800afca:	4618      	mov	r0, r3
 800afcc:	89f9      	ldrh	r1, [r7, #14]
 800afce:	8b7a      	ldrh	r2, [r7, #26]
 800afd0:	2300      	movs	r3, #0
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	887b      	ldrh	r3, [r7, #2]
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	460b      	mov	r3, r1
 800afda:	4601      	mov	r1, r0
 800afdc:	6938      	ldr	r0, [r7, #16]
 800afde:	f7ff ff77 	bl	800aed0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f003 0303 	and.w	r3, r3, #3
 800afea:	2b00      	cmp	r3, #0
 800afec:	d006      	beq.n	800affc <pbuf_alloc+0xd8>
 800afee:	4b42      	ldr	r3, [pc, #264]	; (800b0f8 <pbuf_alloc+0x1d4>)
 800aff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aff4:	4941      	ldr	r1, [pc, #260]	; (800b0fc <pbuf_alloc+0x1d8>)
 800aff6:	4842      	ldr	r0, [pc, #264]	; (800b100 <pbuf_alloc+0x1dc>)
 800aff8:	f00c fade 	bl	80175b8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800affc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800affe:	3303      	adds	r3, #3
 800b000:	f023 0303 	bic.w	r3, r3, #3
 800b004:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b008:	d106      	bne.n	800b018 <pbuf_alloc+0xf4>
 800b00a:	4b3b      	ldr	r3, [pc, #236]	; (800b0f8 <pbuf_alloc+0x1d4>)
 800b00c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b010:	493c      	ldr	r1, [pc, #240]	; (800b104 <pbuf_alloc+0x1e0>)
 800b012:	483b      	ldr	r0, [pc, #236]	; (800b100 <pbuf_alloc+0x1dc>)
 800b014:	f00c fad0 	bl	80175b8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d102      	bne.n	800b024 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	627b      	str	r3, [r7, #36]	; 0x24
 800b022:	e002      	b.n	800b02a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b02e:	8b7a      	ldrh	r2, [r7, #26]
 800b030:	89fb      	ldrh	r3, [r7, #14]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b036:	2300      	movs	r3, #0
 800b038:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b03a:	8b7b      	ldrh	r3, [r7, #26]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d19e      	bne.n	800af7e <pbuf_alloc+0x5a>
      break;
 800b040:	e055      	b.n	800b0ee <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b042:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b044:	3303      	adds	r3, #3
 800b046:	b29b      	uxth	r3, r3
 800b048:	f023 0303 	bic.w	r3, r3, #3
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	88bb      	ldrh	r3, [r7, #4]
 800b050:	3303      	adds	r3, #3
 800b052:	b29b      	uxth	r3, r3
 800b054:	f023 0303 	bic.w	r3, r3, #3
 800b058:	b29b      	uxth	r3, r3
 800b05a:	4413      	add	r3, r2
 800b05c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b05e:	8b3b      	ldrh	r3, [r7, #24]
 800b060:	3310      	adds	r3, #16
 800b062:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b064:	8b3a      	ldrh	r2, [r7, #24]
 800b066:	88bb      	ldrh	r3, [r7, #4]
 800b068:	3303      	adds	r3, #3
 800b06a:	f023 0303 	bic.w	r3, r3, #3
 800b06e:	429a      	cmp	r2, r3
 800b070:	d306      	bcc.n	800b080 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b072:	8afa      	ldrh	r2, [r7, #22]
 800b074:	88bb      	ldrh	r3, [r7, #4]
 800b076:	3303      	adds	r3, #3
 800b078:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d201      	bcs.n	800b084 <pbuf_alloc+0x160>
        return NULL;
 800b080:	2300      	movs	r3, #0
 800b082:	e035      	b.n	800b0f0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b084:	8afb      	ldrh	r3, [r7, #22]
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff fa34 	bl	800a4f4 <mem_malloc>
 800b08c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b090:	2b00      	cmp	r3, #0
 800b092:	d101      	bne.n	800b098 <pbuf_alloc+0x174>
        return NULL;
 800b094:	2300      	movs	r3, #0
 800b096:	e02b      	b.n	800b0f0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b098:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b09a:	3310      	adds	r3, #16
 800b09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b09e:	4413      	add	r3, r2
 800b0a0:	3303      	adds	r3, #3
 800b0a2:	f023 0303 	bic.w	r3, r3, #3
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	88b9      	ldrh	r1, [r7, #4]
 800b0aa:	88ba      	ldrh	r2, [r7, #4]
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	9301      	str	r3, [sp, #4]
 800b0b0:	887b      	ldrh	r3, [r7, #2]
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	4601      	mov	r1, r0
 800b0b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0ba:	f7ff ff09 	bl	800aed0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f003 0303 	and.w	r3, r3, #3
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d010      	beq.n	800b0ec <pbuf_alloc+0x1c8>
 800b0ca:	4b0b      	ldr	r3, [pc, #44]	; (800b0f8 <pbuf_alloc+0x1d4>)
 800b0cc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b0d0:	490d      	ldr	r1, [pc, #52]	; (800b108 <pbuf_alloc+0x1e4>)
 800b0d2:	480b      	ldr	r0, [pc, #44]	; (800b100 <pbuf_alloc+0x1dc>)
 800b0d4:	f00c fa70 	bl	80175b8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b0d8:	e008      	b.n	800b0ec <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b0da:	4b07      	ldr	r3, [pc, #28]	; (800b0f8 <pbuf_alloc+0x1d4>)
 800b0dc:	f240 1227 	movw	r2, #295	; 0x127
 800b0e0:	490a      	ldr	r1, [pc, #40]	; (800b10c <pbuf_alloc+0x1e8>)
 800b0e2:	4807      	ldr	r0, [pc, #28]	; (800b100 <pbuf_alloc+0x1dc>)
 800b0e4:	f00c fa68 	bl	80175b8 <iprintf>
      return NULL;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	e001      	b.n	800b0f0 <pbuf_alloc+0x1cc>
      break;
 800b0ec:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3728      	adds	r7, #40	; 0x28
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	08019880 	.word	0x08019880
 800b0fc:	080198b0 	.word	0x080198b0
 800b100:	080198e0 	.word	0x080198e0
 800b104:	08019908 	.word	0x08019908
 800b108:	0801993c 	.word	0x0801993c
 800b10c:	08019968 	.word	0x08019968

0800b110 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af02      	add	r7, sp, #8
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	807b      	strh	r3, [r7, #2]
 800b11c:	4613      	mov	r3, r2
 800b11e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b120:	883b      	ldrh	r3, [r7, #0]
 800b122:	2b41      	cmp	r3, #65	; 0x41
 800b124:	d009      	beq.n	800b13a <pbuf_alloc_reference+0x2a>
 800b126:	883b      	ldrh	r3, [r7, #0]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d006      	beq.n	800b13a <pbuf_alloc_reference+0x2a>
 800b12c:	4b0f      	ldr	r3, [pc, #60]	; (800b16c <pbuf_alloc_reference+0x5c>)
 800b12e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b132:	490f      	ldr	r1, [pc, #60]	; (800b170 <pbuf_alloc_reference+0x60>)
 800b134:	480f      	ldr	r0, [pc, #60]	; (800b174 <pbuf_alloc_reference+0x64>)
 800b136:	f00c fa3f 	bl	80175b8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b13a:	2007      	movs	r0, #7
 800b13c:	f7ff fb70 	bl	800a820 <memp_malloc>
 800b140:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b148:	2300      	movs	r3, #0
 800b14a:	e00b      	b.n	800b164 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b14c:	8879      	ldrh	r1, [r7, #2]
 800b14e:	887a      	ldrh	r2, [r7, #2]
 800b150:	2300      	movs	r3, #0
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	883b      	ldrh	r3, [r7, #0]
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	460b      	mov	r3, r1
 800b15a:	6879      	ldr	r1, [r7, #4]
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f7ff feb7 	bl	800aed0 <pbuf_init_alloced_pbuf>
  return p;
 800b162:	68fb      	ldr	r3, [r7, #12]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	08019880 	.word	0x08019880
 800b170:	08019984 	.word	0x08019984
 800b174:	080198e0 	.word	0x080198e0

0800b178 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b088      	sub	sp, #32
 800b17c:	af02      	add	r7, sp, #8
 800b17e:	607b      	str	r3, [r7, #4]
 800b180:	4603      	mov	r3, r0
 800b182:	73fb      	strb	r3, [r7, #15]
 800b184:	460b      	mov	r3, r1
 800b186:	81bb      	strh	r3, [r7, #12]
 800b188:	4613      	mov	r3, r2
 800b18a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
 800b18e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b190:	8a7b      	ldrh	r3, [r7, #18]
 800b192:	3303      	adds	r3, #3
 800b194:	f023 0203 	bic.w	r2, r3, #3
 800b198:	89bb      	ldrh	r3, [r7, #12]
 800b19a:	441a      	add	r2, r3
 800b19c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d901      	bls.n	800b1a6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e018      	b.n	800b1d8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d007      	beq.n	800b1bc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b1ac:	8a7b      	ldrh	r3, [r7, #18]
 800b1ae:	3303      	adds	r3, #3
 800b1b0:	f023 0303 	bic.w	r3, r3, #3
 800b1b4:	6a3a      	ldr	r2, [r7, #32]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	617b      	str	r3, [r7, #20]
 800b1ba:	e001      	b.n	800b1c0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	89b9      	ldrh	r1, [r7, #12]
 800b1c4:	89ba      	ldrh	r2, [r7, #12]
 800b1c6:	2302      	movs	r3, #2
 800b1c8:	9301      	str	r3, [sp, #4]
 800b1ca:	897b      	ldrh	r3, [r7, #10]
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	6979      	ldr	r1, [r7, #20]
 800b1d2:	f7ff fe7d 	bl	800aed0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b1d6:	687b      	ldr	r3, [r7, #4]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3718      	adds	r7, #24
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <pbuf_realloc+0x20>
 800b1f2:	4b3a      	ldr	r3, [pc, #232]	; (800b2dc <pbuf_realloc+0xfc>)
 800b1f4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b1f8:	4939      	ldr	r1, [pc, #228]	; (800b2e0 <pbuf_realloc+0x100>)
 800b1fa:	483a      	ldr	r0, [pc, #232]	; (800b2e4 <pbuf_realloc+0x104>)
 800b1fc:	f00c f9dc 	bl	80175b8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	891b      	ldrh	r3, [r3, #8]
 800b204:	887a      	ldrh	r2, [r7, #2]
 800b206:	429a      	cmp	r2, r3
 800b208:	d263      	bcs.n	800b2d2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	891a      	ldrh	r2, [r3, #8]
 800b20e:	887b      	ldrh	r3, [r7, #2]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b214:	887b      	ldrh	r3, [r7, #2]
 800b216:	817b      	strh	r3, [r7, #10]
  q = p;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b21c:	e018      	b.n	800b250 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	895b      	ldrh	r3, [r3, #10]
 800b222:	897a      	ldrh	r2, [r7, #10]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	891a      	ldrh	r2, [r3, #8]
 800b22c:	893b      	ldrh	r3, [r7, #8]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	b29a      	uxth	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d106      	bne.n	800b250 <pbuf_realloc+0x70>
 800b242:	4b26      	ldr	r3, [pc, #152]	; (800b2dc <pbuf_realloc+0xfc>)
 800b244:	f240 12af 	movw	r2, #431	; 0x1af
 800b248:	4927      	ldr	r1, [pc, #156]	; (800b2e8 <pbuf_realloc+0x108>)
 800b24a:	4826      	ldr	r0, [pc, #152]	; (800b2e4 <pbuf_realloc+0x104>)
 800b24c:	f00c f9b4 	bl	80175b8 <iprintf>
  while (rem_len > q->len) {
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	895b      	ldrh	r3, [r3, #10]
 800b254:	897a      	ldrh	r2, [r7, #10]
 800b256:	429a      	cmp	r2, r3
 800b258:	d8e1      	bhi.n	800b21e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	7b1b      	ldrb	r3, [r3, #12]
 800b25e:	f003 030f 	and.w	r3, r3, #15
 800b262:	2b00      	cmp	r3, #0
 800b264:	d121      	bne.n	800b2aa <pbuf_realloc+0xca>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	895b      	ldrh	r3, [r3, #10]
 800b26a:	897a      	ldrh	r2, [r7, #10]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d01c      	beq.n	800b2aa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	7b5b      	ldrb	r3, [r3, #13]
 800b274:	f003 0302 	and.w	r3, r3, #2
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d116      	bne.n	800b2aa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	b29a      	uxth	r2, r3
 800b286:	897b      	ldrh	r3, [r7, #10]
 800b288:	4413      	add	r3, r2
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	4619      	mov	r1, r3
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f7ff f834 	bl	800a2fc <mem_trim>
 800b294:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d106      	bne.n	800b2aa <pbuf_realloc+0xca>
 800b29c:	4b0f      	ldr	r3, [pc, #60]	; (800b2dc <pbuf_realloc+0xfc>)
 800b29e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b2a2:	4912      	ldr	r1, [pc, #72]	; (800b2ec <pbuf_realloc+0x10c>)
 800b2a4:	480f      	ldr	r0, [pc, #60]	; (800b2e4 <pbuf_realloc+0x104>)
 800b2a6:	f00c f987 	bl	80175b8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	897a      	ldrh	r2, [r7, #10]
 800b2ae:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	895a      	ldrh	r2, [r3, #10]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d004      	beq.n	800b2ca <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f000 f911 	bl	800b4ec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	601a      	str	r2, [r3, #0]
 800b2d0:	e000      	b.n	800b2d4 <pbuf_realloc+0xf4>
    return;
 800b2d2:	bf00      	nop

}
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	08019880 	.word	0x08019880
 800b2e0:	08019998 	.word	0x08019998
 800b2e4:	080198e0 	.word	0x080198e0
 800b2e8:	080199b0 	.word	0x080199b0
 800b2ec:	080199c8 	.word	0x080199c8

0800b2f0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d106      	bne.n	800b312 <pbuf_add_header_impl+0x22>
 800b304:	4b2b      	ldr	r3, [pc, #172]	; (800b3b4 <pbuf_add_header_impl+0xc4>)
 800b306:	f240 12df 	movw	r2, #479	; 0x1df
 800b30a:	492b      	ldr	r1, [pc, #172]	; (800b3b8 <pbuf_add_header_impl+0xc8>)
 800b30c:	482b      	ldr	r0, [pc, #172]	; (800b3bc <pbuf_add_header_impl+0xcc>)
 800b30e:	f00c f953 	bl	80175b8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d003      	beq.n	800b320 <pbuf_add_header_impl+0x30>
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b31e:	d301      	bcc.n	800b324 <pbuf_add_header_impl+0x34>
    return 1;
 800b320:	2301      	movs	r3, #1
 800b322:	e043      	b.n	800b3ac <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d101      	bne.n	800b32e <pbuf_add_header_impl+0x3e>
    return 0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	e03e      	b.n	800b3ac <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	891a      	ldrh	r2, [r3, #8]
 800b336:	8a7b      	ldrh	r3, [r7, #18]
 800b338:	4413      	add	r3, r2
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	8a7a      	ldrh	r2, [r7, #18]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d901      	bls.n	800b346 <pbuf_add_header_impl+0x56>
    return 1;
 800b342:	2301      	movs	r3, #1
 800b344:	e032      	b.n	800b3ac <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	7b1b      	ldrb	r3, [r3, #12]
 800b34a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b34c:	8a3b      	ldrh	r3, [r7, #16]
 800b34e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00c      	beq.n	800b370 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	685a      	ldr	r2, [r3, #4]
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	425b      	negs	r3, r3
 800b35e:	4413      	add	r3, r2
 800b360:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3310      	adds	r3, #16
 800b366:	697a      	ldr	r2, [r7, #20]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d20d      	bcs.n	800b388 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b36c:	2301      	movs	r3, #1
 800b36e:	e01d      	b.n	800b3ac <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b370:	79fb      	ldrb	r3, [r7, #7]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d006      	beq.n	800b384 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	425b      	negs	r3, r3
 800b37e:	4413      	add	r3, r2
 800b380:	617b      	str	r3, [r7, #20]
 800b382:	e001      	b.n	800b388 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b384:	2301      	movs	r3, #1
 800b386:	e011      	b.n	800b3ac <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	895a      	ldrh	r2, [r3, #10]
 800b392:	8a7b      	ldrh	r3, [r7, #18]
 800b394:	4413      	add	r3, r2
 800b396:	b29a      	uxth	r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	891a      	ldrh	r2, [r3, #8]
 800b3a0:	8a7b      	ldrh	r3, [r7, #18]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	811a      	strh	r2, [r3, #8]


  return 0;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3718      	adds	r7, #24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	08019880 	.word	0x08019880
 800b3b8:	080199e4 	.word	0x080199e4
 800b3bc:	080198e0 	.word	0x080198e0

0800b3c0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7ff ff8e 	bl	800b2f0 <pbuf_add_header_impl>
 800b3d4:	4603      	mov	r3, r0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
	...

0800b3e0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d106      	bne.n	800b3fe <pbuf_remove_header+0x1e>
 800b3f0:	4b20      	ldr	r3, [pc, #128]	; (800b474 <pbuf_remove_header+0x94>)
 800b3f2:	f240 224b 	movw	r2, #587	; 0x24b
 800b3f6:	4920      	ldr	r1, [pc, #128]	; (800b478 <pbuf_remove_header+0x98>)
 800b3f8:	4820      	ldr	r0, [pc, #128]	; (800b47c <pbuf_remove_header+0x9c>)
 800b3fa:	f00c f8dd 	bl	80175b8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d003      	beq.n	800b40c <pbuf_remove_header+0x2c>
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b40a:	d301      	bcc.n	800b410 <pbuf_remove_header+0x30>
    return 1;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e02c      	b.n	800b46a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <pbuf_remove_header+0x3a>
    return 0;
 800b416:	2300      	movs	r3, #0
 800b418:	e027      	b.n	800b46a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	895b      	ldrh	r3, [r3, #10]
 800b422:	89fa      	ldrh	r2, [r7, #14]
 800b424:	429a      	cmp	r2, r3
 800b426:	d908      	bls.n	800b43a <pbuf_remove_header+0x5a>
 800b428:	4b12      	ldr	r3, [pc, #72]	; (800b474 <pbuf_remove_header+0x94>)
 800b42a:	f240 2255 	movw	r2, #597	; 0x255
 800b42e:	4914      	ldr	r1, [pc, #80]	; (800b480 <pbuf_remove_header+0xa0>)
 800b430:	4812      	ldr	r0, [pc, #72]	; (800b47c <pbuf_remove_header+0x9c>)
 800b432:	f00c f8c1 	bl	80175b8 <iprintf>
 800b436:	2301      	movs	r3, #1
 800b438:	e017      	b.n	800b46a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685a      	ldr	r2, [r3, #4]
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	441a      	add	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	895a      	ldrh	r2, [r3, #10]
 800b450:	89fb      	ldrh	r3, [r7, #14]
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	b29a      	uxth	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	891a      	ldrh	r2, [r3, #8]
 800b45e:	89fb      	ldrh	r3, [r7, #14]
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	b29a      	uxth	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	08019880 	.word	0x08019880
 800b478:	080199e4 	.word	0x080199e4
 800b47c:	080198e0 	.word	0x080198e0
 800b480:	080199f0 	.word	0x080199f0

0800b484 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	460b      	mov	r3, r1
 800b48e:	807b      	strh	r3, [r7, #2]
 800b490:	4613      	mov	r3, r2
 800b492:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b494:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	da08      	bge.n	800b4ae <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b49c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b4a0:	425b      	negs	r3, r3
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7ff ff9b 	bl	800b3e0 <pbuf_remove_header>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	e007      	b.n	800b4be <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b4ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b4b2:	787a      	ldrb	r2, [r7, #1]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7ff ff1a 	bl	800b2f0 <pbuf_add_header_impl>
 800b4bc:	4603      	mov	r3, r0
  }
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b082      	sub	sp, #8
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b4d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7ff ffd2 	bl	800b484 <pbuf_header_impl>
 800b4e0:	4603      	mov	r3, r0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d10b      	bne.n	800b512 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d106      	bne.n	800b50e <pbuf_free+0x22>
 800b500:	4b38      	ldr	r3, [pc, #224]	; (800b5e4 <pbuf_free+0xf8>)
 800b502:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b506:	4938      	ldr	r1, [pc, #224]	; (800b5e8 <pbuf_free+0xfc>)
 800b508:	4838      	ldr	r0, [pc, #224]	; (800b5ec <pbuf_free+0x100>)
 800b50a:	f00c f855 	bl	80175b8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b50e:	2300      	movs	r3, #0
 800b510:	e063      	b.n	800b5da <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b512:	2300      	movs	r3, #0
 800b514:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b516:	e05c      	b.n	800b5d2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	7b9b      	ldrb	r3, [r3, #14]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d106      	bne.n	800b52e <pbuf_free+0x42>
 800b520:	4b30      	ldr	r3, [pc, #192]	; (800b5e4 <pbuf_free+0xf8>)
 800b522:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b526:	4932      	ldr	r1, [pc, #200]	; (800b5f0 <pbuf_free+0x104>)
 800b528:	4830      	ldr	r0, [pc, #192]	; (800b5ec <pbuf_free+0x100>)
 800b52a:	f00c f845 	bl	80175b8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	7b9b      	ldrb	r3, [r3, #14]
 800b532:	3b01      	subs	r3, #1
 800b534:	b2da      	uxtb	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	739a      	strb	r2, [r3, #14]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	7b9b      	ldrb	r3, [r3, #14]
 800b53e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b540:	7dbb      	ldrb	r3, [r7, #22]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d143      	bne.n	800b5ce <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	7b1b      	ldrb	r3, [r3, #12]
 800b550:	f003 030f 	and.w	r3, r3, #15
 800b554:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	7b5b      	ldrb	r3, [r3, #13]
 800b55a:	f003 0302 	and.w	r3, r3, #2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d011      	beq.n	800b586 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d106      	bne.n	800b57c <pbuf_free+0x90>
 800b56e:	4b1d      	ldr	r3, [pc, #116]	; (800b5e4 <pbuf_free+0xf8>)
 800b570:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b574:	491f      	ldr	r1, [pc, #124]	; (800b5f4 <pbuf_free+0x108>)
 800b576:	481d      	ldr	r0, [pc, #116]	; (800b5ec <pbuf_free+0x100>)
 800b578:	f00c f81e 	bl	80175b8 <iprintf>
        pc->custom_free_function(p);
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	4798      	blx	r3
 800b584:	e01d      	b.n	800b5c2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b586:	7bfb      	ldrb	r3, [r7, #15]
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d104      	bne.n	800b596 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b58c:	6879      	ldr	r1, [r7, #4]
 800b58e:	2008      	movs	r0, #8
 800b590:	f7ff f992 	bl	800a8b8 <memp_free>
 800b594:	e015      	b.n	800b5c2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b596:	7bfb      	ldrb	r3, [r7, #15]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d104      	bne.n	800b5a6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b59c:	6879      	ldr	r1, [r7, #4]
 800b59e:	2007      	movs	r0, #7
 800b5a0:	f7ff f98a 	bl	800a8b8 <memp_free>
 800b5a4:	e00d      	b.n	800b5c2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d103      	bne.n	800b5b4 <pbuf_free+0xc8>
          mem_free(p);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7fe fe3b 	bl	800a228 <mem_free>
 800b5b2:	e006      	b.n	800b5c2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <pbuf_free+0xf8>)
 800b5b6:	f240 320f 	movw	r2, #783	; 0x30f
 800b5ba:	490f      	ldr	r1, [pc, #60]	; (800b5f8 <pbuf_free+0x10c>)
 800b5bc:	480b      	ldr	r0, [pc, #44]	; (800b5ec <pbuf_free+0x100>)
 800b5be:	f00b fffb 	bl	80175b8 <iprintf>
        }
      }
      count++;
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	607b      	str	r3, [r7, #4]
 800b5cc:	e001      	b.n	800b5d2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d19f      	bne.n	800b518 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	08019880 	.word	0x08019880
 800b5e8:	080199e4 	.word	0x080199e4
 800b5ec:	080198e0 	.word	0x080198e0
 800b5f0:	08019a10 	.word	0x08019a10
 800b5f4:	08019a28 	.word	0x08019a28
 800b5f8:	08019a4c 	.word	0x08019a4c

0800b5fc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b608:	e005      	b.n	800b616 <pbuf_clen+0x1a>
    ++len;
 800b60a:	89fb      	ldrh	r3, [r7, #14]
 800b60c:	3301      	adds	r3, #1
 800b60e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1f6      	bne.n	800b60a <pbuf_clen+0xe>
  }
  return len;
 800b61c:	89fb      	ldrh	r3, [r7, #14]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3714      	adds	r7, #20
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
	...

0800b62c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d010      	beq.n	800b65c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	7b9b      	ldrb	r3, [r3, #14]
 800b63e:	3301      	adds	r3, #1
 800b640:	b2da      	uxtb	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	7b9b      	ldrb	r3, [r3, #14]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d106      	bne.n	800b65c <pbuf_ref+0x30>
 800b64e:	4b05      	ldr	r3, [pc, #20]	; (800b664 <pbuf_ref+0x38>)
 800b650:	f240 3242 	movw	r2, #834	; 0x342
 800b654:	4904      	ldr	r1, [pc, #16]	; (800b668 <pbuf_ref+0x3c>)
 800b656:	4805      	ldr	r0, [pc, #20]	; (800b66c <pbuf_ref+0x40>)
 800b658:	f00b ffae 	bl	80175b8 <iprintf>
  }
}
 800b65c:	bf00      	nop
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	08019880 	.word	0x08019880
 800b668:	08019a60 	.word	0x08019a60
 800b66c:	080198e0 	.word	0x080198e0

0800b670 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <pbuf_cat+0x16>
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d107      	bne.n	800b696 <pbuf_cat+0x26>
 800b686:	4b20      	ldr	r3, [pc, #128]	; (800b708 <pbuf_cat+0x98>)
 800b688:	f240 3259 	movw	r2, #857	; 0x359
 800b68c:	491f      	ldr	r1, [pc, #124]	; (800b70c <pbuf_cat+0x9c>)
 800b68e:	4820      	ldr	r0, [pc, #128]	; (800b710 <pbuf_cat+0xa0>)
 800b690:	f00b ff92 	bl	80175b8 <iprintf>
 800b694:	e034      	b.n	800b700 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	60fb      	str	r3, [r7, #12]
 800b69a:	e00a      	b.n	800b6b2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	891a      	ldrh	r2, [r3, #8]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	891b      	ldrh	r3, [r3, #8]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	60fb      	str	r3, [r7, #12]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1f0      	bne.n	800b69c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	891a      	ldrh	r2, [r3, #8]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	895b      	ldrh	r3, [r3, #10]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d006      	beq.n	800b6d4 <pbuf_cat+0x64>
 800b6c6:	4b10      	ldr	r3, [pc, #64]	; (800b708 <pbuf_cat+0x98>)
 800b6c8:	f240 3262 	movw	r2, #866	; 0x362
 800b6cc:	4911      	ldr	r1, [pc, #68]	; (800b714 <pbuf_cat+0xa4>)
 800b6ce:	4810      	ldr	r0, [pc, #64]	; (800b710 <pbuf_cat+0xa0>)
 800b6d0:	f00b ff72 	bl	80175b8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d006      	beq.n	800b6ea <pbuf_cat+0x7a>
 800b6dc:	4b0a      	ldr	r3, [pc, #40]	; (800b708 <pbuf_cat+0x98>)
 800b6de:	f240 3263 	movw	r2, #867	; 0x363
 800b6e2:	490d      	ldr	r1, [pc, #52]	; (800b718 <pbuf_cat+0xa8>)
 800b6e4:	480a      	ldr	r0, [pc, #40]	; (800b710 <pbuf_cat+0xa0>)
 800b6e6:	f00b ff67 	bl	80175b8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	891a      	ldrh	r2, [r3, #8]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	891b      	ldrh	r3, [r3, #8]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	08019880 	.word	0x08019880
 800b70c:	08019a74 	.word	0x08019a74
 800b710:	080198e0 	.word	0x080198e0
 800b714:	08019aac 	.word	0x08019aac
 800b718:	08019adc 	.word	0x08019adc

0800b71c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7ff ffa1 	bl	800b670 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b72e:	6838      	ldr	r0, [r7, #0]
 800b730:	f7ff ff7c 	bl	800b62c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b734:	bf00      	nop
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b746:	2300      	movs	r3, #0
 800b748:	617b      	str	r3, [r7, #20]
 800b74a:	2300      	movs	r3, #0
 800b74c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d008      	beq.n	800b766 <pbuf_copy+0x2a>
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d005      	beq.n	800b766 <pbuf_copy+0x2a>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	891a      	ldrh	r2, [r3, #8]
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	891b      	ldrh	r3, [r3, #8]
 800b762:	429a      	cmp	r2, r3
 800b764:	d209      	bcs.n	800b77a <pbuf_copy+0x3e>
 800b766:	4b57      	ldr	r3, [pc, #348]	; (800b8c4 <pbuf_copy+0x188>)
 800b768:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b76c:	4956      	ldr	r1, [pc, #344]	; (800b8c8 <pbuf_copy+0x18c>)
 800b76e:	4857      	ldr	r0, [pc, #348]	; (800b8cc <pbuf_copy+0x190>)
 800b770:	f00b ff22 	bl	80175b8 <iprintf>
 800b774:	f06f 030f 	mvn.w	r3, #15
 800b778:	e09f      	b.n	800b8ba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	895b      	ldrh	r3, [r3, #10]
 800b77e:	461a      	mov	r2, r3
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	1ad2      	subs	r2, r2, r3
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	895b      	ldrh	r3, [r3, #10]
 800b788:	4619      	mov	r1, r3
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	1acb      	subs	r3, r1, r3
 800b78e:	429a      	cmp	r2, r3
 800b790:	d306      	bcc.n	800b7a0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	895b      	ldrh	r3, [r3, #10]
 800b796:	461a      	mov	r2, r3
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	60fb      	str	r3, [r7, #12]
 800b79e:	e005      	b.n	800b7ac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	895b      	ldrh	r3, [r3, #10]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	685a      	ldr	r2, [r3, #4]
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	18d0      	adds	r0, r2, r3
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	685a      	ldr	r2, [r3, #4]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	4619      	mov	r1, r3
 800b7c0:	f00b feca 	bl	8017558 <memcpy>
    offset_to += len;
 800b7c4:	697a      	ldr	r2, [r7, #20]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	895b      	ldrh	r3, [r3, #10]
 800b7d8:	461a      	mov	r2, r3
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d906      	bls.n	800b7ee <pbuf_copy+0xb2>
 800b7e0:	4b38      	ldr	r3, [pc, #224]	; (800b8c4 <pbuf_copy+0x188>)
 800b7e2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b7e6:	493a      	ldr	r1, [pc, #232]	; (800b8d0 <pbuf_copy+0x194>)
 800b7e8:	4838      	ldr	r0, [pc, #224]	; (800b8cc <pbuf_copy+0x190>)
 800b7ea:	f00b fee5 	bl	80175b8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	895b      	ldrh	r3, [r3, #10]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d906      	bls.n	800b808 <pbuf_copy+0xcc>
 800b7fa:	4b32      	ldr	r3, [pc, #200]	; (800b8c4 <pbuf_copy+0x188>)
 800b7fc:	f240 32da 	movw	r2, #986	; 0x3da
 800b800:	4934      	ldr	r1, [pc, #208]	; (800b8d4 <pbuf_copy+0x198>)
 800b802:	4832      	ldr	r0, [pc, #200]	; (800b8cc <pbuf_copy+0x190>)
 800b804:	f00b fed8 	bl	80175b8 <iprintf>
    if (offset_from >= p_from->len) {
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	895b      	ldrh	r3, [r3, #10]
 800b80c:	461a      	mov	r2, r3
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	4293      	cmp	r3, r2
 800b812:	d304      	bcc.n	800b81e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b814:	2300      	movs	r3, #0
 800b816:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	895b      	ldrh	r3, [r3, #10]
 800b822:	461a      	mov	r2, r3
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	4293      	cmp	r3, r2
 800b828:	d114      	bne.n	800b854 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b82a:	2300      	movs	r3, #0
 800b82c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d10c      	bne.n	800b854 <pbuf_copy+0x118>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d009      	beq.n	800b854 <pbuf_copy+0x118>
 800b840:	4b20      	ldr	r3, [pc, #128]	; (800b8c4 <pbuf_copy+0x188>)
 800b842:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b846:	4924      	ldr	r1, [pc, #144]	; (800b8d8 <pbuf_copy+0x19c>)
 800b848:	4820      	ldr	r0, [pc, #128]	; (800b8cc <pbuf_copy+0x190>)
 800b84a:	f00b feb5 	bl	80175b8 <iprintf>
 800b84e:	f06f 030f 	mvn.w	r3, #15
 800b852:	e032      	b.n	800b8ba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d013      	beq.n	800b882 <pbuf_copy+0x146>
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	895a      	ldrh	r2, [r3, #10]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	891b      	ldrh	r3, [r3, #8]
 800b862:	429a      	cmp	r2, r3
 800b864:	d10d      	bne.n	800b882 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d009      	beq.n	800b882 <pbuf_copy+0x146>
 800b86e:	4b15      	ldr	r3, [pc, #84]	; (800b8c4 <pbuf_copy+0x188>)
 800b870:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b874:	4919      	ldr	r1, [pc, #100]	; (800b8dc <pbuf_copy+0x1a0>)
 800b876:	4815      	ldr	r0, [pc, #84]	; (800b8cc <pbuf_copy+0x190>)
 800b878:	f00b fe9e 	bl	80175b8 <iprintf>
 800b87c:	f06f 0305 	mvn.w	r3, #5
 800b880:	e01b      	b.n	800b8ba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d013      	beq.n	800b8b0 <pbuf_copy+0x174>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	895a      	ldrh	r2, [r3, #10]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	891b      	ldrh	r3, [r3, #8]
 800b890:	429a      	cmp	r2, r3
 800b892:	d10d      	bne.n	800b8b0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d009      	beq.n	800b8b0 <pbuf_copy+0x174>
 800b89c:	4b09      	ldr	r3, [pc, #36]	; (800b8c4 <pbuf_copy+0x188>)
 800b89e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b8a2:	490e      	ldr	r1, [pc, #56]	; (800b8dc <pbuf_copy+0x1a0>)
 800b8a4:	4809      	ldr	r0, [pc, #36]	; (800b8cc <pbuf_copy+0x190>)
 800b8a6:	f00b fe87 	bl	80175b8 <iprintf>
 800b8aa:	f06f 0305 	mvn.w	r3, #5
 800b8ae:	e004      	b.n	800b8ba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f47f af61 	bne.w	800b77a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	08019880 	.word	0x08019880
 800b8c8:	08019b28 	.word	0x08019b28
 800b8cc:	080198e0 	.word	0x080198e0
 800b8d0:	08019b58 	.word	0x08019b58
 800b8d4:	08019b70 	.word	0x08019b70
 800b8d8:	08019b8c 	.word	0x08019b8c
 800b8dc:	08019b9c 	.word	0x08019b9c

0800b8e0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	80fb      	strh	r3, [r7, #6]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d108      	bne.n	800b916 <pbuf_copy_partial+0x36>
 800b904:	4b2b      	ldr	r3, [pc, #172]	; (800b9b4 <pbuf_copy_partial+0xd4>)
 800b906:	f240 420a 	movw	r2, #1034	; 0x40a
 800b90a:	492b      	ldr	r1, [pc, #172]	; (800b9b8 <pbuf_copy_partial+0xd8>)
 800b90c:	482b      	ldr	r0, [pc, #172]	; (800b9bc <pbuf_copy_partial+0xdc>)
 800b90e:	f00b fe53 	bl	80175b8 <iprintf>
 800b912:	2300      	movs	r3, #0
 800b914:	e04a      	b.n	800b9ac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d108      	bne.n	800b92e <pbuf_copy_partial+0x4e>
 800b91c:	4b25      	ldr	r3, [pc, #148]	; (800b9b4 <pbuf_copy_partial+0xd4>)
 800b91e:	f240 420b 	movw	r2, #1035	; 0x40b
 800b922:	4927      	ldr	r1, [pc, #156]	; (800b9c0 <pbuf_copy_partial+0xe0>)
 800b924:	4825      	ldr	r0, [pc, #148]	; (800b9bc <pbuf_copy_partial+0xdc>)
 800b926:	f00b fe47 	bl	80175b8 <iprintf>
 800b92a:	2300      	movs	r3, #0
 800b92c:	e03e      	b.n	800b9ac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	61fb      	str	r3, [r7, #28]
 800b932:	e034      	b.n	800b99e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b934:	88bb      	ldrh	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00a      	beq.n	800b950 <pbuf_copy_partial+0x70>
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	895b      	ldrh	r3, [r3, #10]
 800b93e:	88ba      	ldrh	r2, [r7, #4]
 800b940:	429a      	cmp	r2, r3
 800b942:	d305      	bcc.n	800b950 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	895b      	ldrh	r3, [r3, #10]
 800b948:	88ba      	ldrh	r2, [r7, #4]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	80bb      	strh	r3, [r7, #4]
 800b94e:	e023      	b.n	800b998 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	895a      	ldrh	r2, [r3, #10]
 800b954:	88bb      	ldrh	r3, [r7, #4]
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b95a:	8b3a      	ldrh	r2, [r7, #24]
 800b95c:	88fb      	ldrh	r3, [r7, #6]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d901      	bls.n	800b966 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b962:	88fb      	ldrh	r3, [r7, #6]
 800b964:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b966:	8b7b      	ldrh	r3, [r7, #26]
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	18d0      	adds	r0, r2, r3
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	88bb      	ldrh	r3, [r7, #4]
 800b972:	4413      	add	r3, r2
 800b974:	8b3a      	ldrh	r2, [r7, #24]
 800b976:	4619      	mov	r1, r3
 800b978:	f00b fdee 	bl	8017558 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b97c:	8afa      	ldrh	r2, [r7, #22]
 800b97e:	8b3b      	ldrh	r3, [r7, #24]
 800b980:	4413      	add	r3, r2
 800b982:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b984:	8b7a      	ldrh	r2, [r7, #26]
 800b986:	8b3b      	ldrh	r3, [r7, #24]
 800b988:	4413      	add	r3, r2
 800b98a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b98c:	88fa      	ldrh	r2, [r7, #6]
 800b98e:	8b3b      	ldrh	r3, [r7, #24]
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b994:	2300      	movs	r3, #0
 800b996:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	61fb      	str	r3, [r7, #28]
 800b99e:	88fb      	ldrh	r3, [r7, #6]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <pbuf_copy_partial+0xca>
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1c4      	bne.n	800b934 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b9aa:	8afb      	ldrh	r3, [r7, #22]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3720      	adds	r7, #32
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	08019880 	.word	0x08019880
 800b9b8:	08019bc8 	.word	0x08019bc8
 800b9bc:	080198e0 	.word	0x080198e0
 800b9c0:	08019be8 	.word	0x08019be8

0800b9c4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b087      	sub	sp, #28
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800b9d2:	897b      	ldrh	r3, [r7, #10]
 800b9d4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800b9da:	e007      	b.n	800b9ec <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	895b      	ldrh	r3, [r3, #10]
 800b9e0:	8afa      	ldrh	r2, [r7, #22]
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d004      	beq.n	800b9fc <pbuf_skip_const+0x38>
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	895b      	ldrh	r3, [r3, #10]
 800b9f6:	8afa      	ldrh	r2, [r7, #22]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d2ef      	bcs.n	800b9dc <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d002      	beq.n	800ba08 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	8afa      	ldrh	r2, [r7, #22]
 800ba06:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800ba08:	693b      	ldr	r3, [r7, #16]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	371c      	adds	r7, #28
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
	...

0800ba18 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	603a      	str	r2, [r7, #0]
 800ba22:	71fb      	strb	r3, [r7, #7]
 800ba24:	460b      	mov	r3, r1
 800ba26:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	8919      	ldrh	r1, [r3, #8]
 800ba2c:	88ba      	ldrh	r2, [r7, #4]
 800ba2e:	79fb      	ldrb	r3, [r7, #7]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7ff fa77 	bl	800af24 <pbuf_alloc>
 800ba36:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d101      	bne.n	800ba42 <pbuf_clone+0x2a>
    return NULL;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e011      	b.n	800ba66 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f7ff fe79 	bl	800b73c <pbuf_copy>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ba4e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d006      	beq.n	800ba64 <pbuf_clone+0x4c>
 800ba56:	4b06      	ldr	r3, [pc, #24]	; (800ba70 <pbuf_clone+0x58>)
 800ba58:	f240 5224 	movw	r2, #1316	; 0x524
 800ba5c:	4905      	ldr	r1, [pc, #20]	; (800ba74 <pbuf_clone+0x5c>)
 800ba5e:	4806      	ldr	r0, [pc, #24]	; (800ba78 <pbuf_clone+0x60>)
 800ba60:	f00b fdaa 	bl	80175b8 <iprintf>
  return q;
 800ba64:	68fb      	ldr	r3, [r7, #12]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	08019880 	.word	0x08019880
 800ba74:	08019cf4 	.word	0x08019cf4
 800ba78:	080198e0 	.word	0x080198e0

0800ba7c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800ba88:	887b      	ldrh	r3, [r7, #2]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f80c 	bl	800baaa <pbuf_try_get_at>
 800ba92:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	db02      	blt.n	800baa0 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	e000      	b.n	800baa2 <pbuf_get_at+0x26>
  }
  return 0;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	460b      	mov	r3, r1
 800bab4:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800bab6:	f107 020a 	add.w	r2, r7, #10
 800baba:	887b      	ldrh	r3, [r7, #2]
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7ff ff80 	bl	800b9c4 <pbuf_skip_const>
 800bac4:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00a      	beq.n	800bae2 <pbuf_try_get_at+0x38>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	895a      	ldrh	r2, [r3, #10]
 800bad0:	897b      	ldrh	r3, [r7, #10]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d905      	bls.n	800bae2 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	897a      	ldrh	r2, [r7, #10]
 800badc:	4413      	add	r3, r2
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	e001      	b.n	800bae6 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800bae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
	...

0800baf0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800baf4:	f00b fd78 	bl	80175e8 <rand>
 800baf8:	4603      	mov	r3, r0
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	4b01      	ldr	r3, [pc, #4]	; (800bb10 <tcp_init+0x20>)
 800bb0a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bb0c:	bf00      	nop
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	2000011c 	.word	0x2000011c

0800bb14 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	7d1b      	ldrb	r3, [r3, #20]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d105      	bne.n	800bb30 <tcp_free+0x1c>
 800bb24:	4b06      	ldr	r3, [pc, #24]	; (800bb40 <tcp_free+0x2c>)
 800bb26:	22d4      	movs	r2, #212	; 0xd4
 800bb28:	4906      	ldr	r1, [pc, #24]	; (800bb44 <tcp_free+0x30>)
 800bb2a:	4807      	ldr	r0, [pc, #28]	; (800bb48 <tcp_free+0x34>)
 800bb2c:	f00b fd44 	bl	80175b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bb30:	6879      	ldr	r1, [r7, #4]
 800bb32:	2001      	movs	r0, #1
 800bb34:	f7fe fec0 	bl	800a8b8 <memp_free>
}
 800bb38:	bf00      	nop
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	08019d80 	.word	0x08019d80
 800bb44:	08019db0 	.word	0x08019db0
 800bb48:	08019dc4 	.word	0x08019dc4

0800bb4c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	7d1b      	ldrb	r3, [r3, #20]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d105      	bne.n	800bb68 <tcp_free_listen+0x1c>
 800bb5c:	4b06      	ldr	r3, [pc, #24]	; (800bb78 <tcp_free_listen+0x2c>)
 800bb5e:	22df      	movs	r2, #223	; 0xdf
 800bb60:	4906      	ldr	r1, [pc, #24]	; (800bb7c <tcp_free_listen+0x30>)
 800bb62:	4807      	ldr	r0, [pc, #28]	; (800bb80 <tcp_free_listen+0x34>)
 800bb64:	f00b fd28 	bl	80175b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bb68:	6879      	ldr	r1, [r7, #4]
 800bb6a:	2002      	movs	r0, #2
 800bb6c:	f7fe fea4 	bl	800a8b8 <memp_free>
}
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	08019d80 	.word	0x08019d80
 800bb7c:	08019dec 	.word	0x08019dec
 800bb80:	08019dc4 	.word	0x08019dc4

0800bb84 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bb88:	f001 f898 	bl	800ccbc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bb8c:	4b07      	ldr	r3, [pc, #28]	; (800bbac <tcp_tmr+0x28>)
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	3301      	adds	r3, #1
 800bb92:	b2da      	uxtb	r2, r3
 800bb94:	4b05      	ldr	r3, [pc, #20]	; (800bbac <tcp_tmr+0x28>)
 800bb96:	701a      	strb	r2, [r3, #0]
 800bb98:	4b04      	ldr	r3, [pc, #16]	; (800bbac <tcp_tmr+0x28>)
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d001      	beq.n	800bba8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bba4:	f000 fd4a 	bl	800c63c <tcp_slowtmr>
  }
}
 800bba8:	bf00      	nop
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	20000255 	.word	0x20000255

0800bbb0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d105      	bne.n	800bbcc <tcp_remove_listener+0x1c>
 800bbc0:	4b0d      	ldr	r3, [pc, #52]	; (800bbf8 <tcp_remove_listener+0x48>)
 800bbc2:	22ff      	movs	r2, #255	; 0xff
 800bbc4:	490d      	ldr	r1, [pc, #52]	; (800bbfc <tcp_remove_listener+0x4c>)
 800bbc6:	480e      	ldr	r0, [pc, #56]	; (800bc00 <tcp_remove_listener+0x50>)
 800bbc8:	f00b fcf6 	bl	80175b8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	60fb      	str	r3, [r7, #12]
 800bbd0:	e00a      	b.n	800bbe8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d102      	bne.n	800bbe2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	60fb      	str	r3, [r7, #12]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1f1      	bne.n	800bbd2 <tcp_remove_listener+0x22>
    }
  }
}
 800bbee:	bf00      	nop
 800bbf0:	bf00      	nop
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	08019d80 	.word	0x08019d80
 800bbfc:	08019e08 	.word	0x08019e08
 800bc00:	08019dc4 	.word	0x08019dc4

0800bc04 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d106      	bne.n	800bc20 <tcp_listen_closed+0x1c>
 800bc12:	4b14      	ldr	r3, [pc, #80]	; (800bc64 <tcp_listen_closed+0x60>)
 800bc14:	f240 1211 	movw	r2, #273	; 0x111
 800bc18:	4913      	ldr	r1, [pc, #76]	; (800bc68 <tcp_listen_closed+0x64>)
 800bc1a:	4814      	ldr	r0, [pc, #80]	; (800bc6c <tcp_listen_closed+0x68>)
 800bc1c:	f00b fccc 	bl	80175b8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7d1b      	ldrb	r3, [r3, #20]
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d006      	beq.n	800bc36 <tcp_listen_closed+0x32>
 800bc28:	4b0e      	ldr	r3, [pc, #56]	; (800bc64 <tcp_listen_closed+0x60>)
 800bc2a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bc2e:	4910      	ldr	r1, [pc, #64]	; (800bc70 <tcp_listen_closed+0x6c>)
 800bc30:	480e      	ldr	r0, [pc, #56]	; (800bc6c <tcp_listen_closed+0x68>)
 800bc32:	f00b fcc1 	bl	80175b8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bc36:	2301      	movs	r3, #1
 800bc38:	60fb      	str	r3, [r7, #12]
 800bc3a:	e00b      	b.n	800bc54 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bc3c:	4a0d      	ldr	r2, [pc, #52]	; (800bc74 <tcp_listen_closed+0x70>)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	6879      	ldr	r1, [r7, #4]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7ff ffb1 	bl	800bbb0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	3301      	adds	r3, #1
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	d9f0      	bls.n	800bc3c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bc5a:	bf00      	nop
 800bc5c:	bf00      	nop
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	08019d80 	.word	0x08019d80
 800bc68:	08019e30 	.word	0x08019e30
 800bc6c:	08019dc4 	.word	0x08019dc4
 800bc70:	08019e3c 	.word	0x08019e3c
 800bc74:	0801c134 	.word	0x0801c134

0800bc78 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bc78:	b5b0      	push	{r4, r5, r7, lr}
 800bc7a:	b088      	sub	sp, #32
 800bc7c:	af04      	add	r7, sp, #16
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d106      	bne.n	800bc98 <tcp_close_shutdown+0x20>
 800bc8a:	4b63      	ldr	r3, [pc, #396]	; (800be18 <tcp_close_shutdown+0x1a0>)
 800bc8c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bc90:	4962      	ldr	r1, [pc, #392]	; (800be1c <tcp_close_shutdown+0x1a4>)
 800bc92:	4863      	ldr	r0, [pc, #396]	; (800be20 <tcp_close_shutdown+0x1a8>)
 800bc94:	f00b fc90 	bl	80175b8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bc98:	78fb      	ldrb	r3, [r7, #3]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d066      	beq.n	800bd6c <tcp_close_shutdown+0xf4>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	7d1b      	ldrb	r3, [r3, #20]
 800bca2:	2b04      	cmp	r3, #4
 800bca4:	d003      	beq.n	800bcae <tcp_close_shutdown+0x36>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	7d1b      	ldrb	r3, [r3, #20]
 800bcaa:	2b07      	cmp	r3, #7
 800bcac:	d15e      	bne.n	800bd6c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d104      	bne.n	800bcc0 <tcp_close_shutdown+0x48>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bcbe:	d055      	beq.n	800bd6c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	8b5b      	ldrh	r3, [r3, #26]
 800bcc4:	f003 0310 	and.w	r3, r3, #16
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d106      	bne.n	800bcda <tcp_close_shutdown+0x62>
 800bccc:	4b52      	ldr	r3, [pc, #328]	; (800be18 <tcp_close_shutdown+0x1a0>)
 800bcce:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bcd2:	4954      	ldr	r1, [pc, #336]	; (800be24 <tcp_close_shutdown+0x1ac>)
 800bcd4:	4852      	ldr	r0, [pc, #328]	; (800be20 <tcp_close_shutdown+0x1a8>)
 800bcd6:	f00b fc6f 	bl	80175b8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bce2:	687d      	ldr	r5, [r7, #4]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	3304      	adds	r3, #4
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	8ad2      	ldrh	r2, [r2, #22]
 800bcec:	6879      	ldr	r1, [r7, #4]
 800bcee:	8b09      	ldrh	r1, [r1, #24]
 800bcf0:	9102      	str	r1, [sp, #8]
 800bcf2:	9201      	str	r2, [sp, #4]
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	4622      	mov	r2, r4
 800bcfa:	4601      	mov	r1, r0
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f005 fd91 	bl	8011824 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f001 fb72 	bl	800d3ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bd08:	4b47      	ldr	r3, [pc, #284]	; (800be28 <tcp_close_shutdown+0x1b0>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d105      	bne.n	800bd1e <tcp_close_shutdown+0xa6>
 800bd12:	4b45      	ldr	r3, [pc, #276]	; (800be28 <tcp_close_shutdown+0x1b0>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	4a43      	ldr	r2, [pc, #268]	; (800be28 <tcp_close_shutdown+0x1b0>)
 800bd1a:	6013      	str	r3, [r2, #0]
 800bd1c:	e013      	b.n	800bd46 <tcp_close_shutdown+0xce>
 800bd1e:	4b42      	ldr	r3, [pc, #264]	; (800be28 <tcp_close_shutdown+0x1b0>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	60fb      	str	r3, [r7, #12]
 800bd24:	e00c      	b.n	800bd40 <tcp_close_shutdown+0xc8>
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d104      	bne.n	800bd3a <tcp_close_shutdown+0xc2>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	68da      	ldr	r2, [r3, #12]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	60da      	str	r2, [r3, #12]
 800bd38:	e005      	b.n	800bd46 <tcp_close_shutdown+0xce>
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	60fb      	str	r3, [r7, #12]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1ef      	bne.n	800bd26 <tcp_close_shutdown+0xae>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	60da      	str	r2, [r3, #12]
 800bd4c:	4b37      	ldr	r3, [pc, #220]	; (800be2c <tcp_close_shutdown+0x1b4>)
 800bd4e:	2201      	movs	r2, #1
 800bd50:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bd52:	4b37      	ldr	r3, [pc, #220]	; (800be30 <tcp_close_shutdown+0x1b8>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d102      	bne.n	800bd62 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bd5c:	f004 f806 	bl	800fd6c <tcp_trigger_input_pcb_close>
 800bd60:	e002      	b.n	800bd68 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7ff fed6 	bl	800bb14 <tcp_free>
      }
      return ERR_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e050      	b.n	800be0e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	7d1b      	ldrb	r3, [r3, #20]
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d03b      	beq.n	800bdec <tcp_close_shutdown+0x174>
 800bd74:	2b02      	cmp	r3, #2
 800bd76:	dc44      	bgt.n	800be02 <tcp_close_shutdown+0x18a>
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <tcp_close_shutdown+0x10a>
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d02a      	beq.n	800bdd6 <tcp_close_shutdown+0x15e>
 800bd80:	e03f      	b.n	800be02 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	8adb      	ldrh	r3, [r3, #22]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d021      	beq.n	800bdce <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bd8a:	4b2a      	ldr	r3, [pc, #168]	; (800be34 <tcp_close_shutdown+0x1bc>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d105      	bne.n	800bda0 <tcp_close_shutdown+0x128>
 800bd94:	4b27      	ldr	r3, [pc, #156]	; (800be34 <tcp_close_shutdown+0x1bc>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	4a26      	ldr	r2, [pc, #152]	; (800be34 <tcp_close_shutdown+0x1bc>)
 800bd9c:	6013      	str	r3, [r2, #0]
 800bd9e:	e013      	b.n	800bdc8 <tcp_close_shutdown+0x150>
 800bda0:	4b24      	ldr	r3, [pc, #144]	; (800be34 <tcp_close_shutdown+0x1bc>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	60bb      	str	r3, [r7, #8]
 800bda6:	e00c      	b.n	800bdc2 <tcp_close_shutdown+0x14a>
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d104      	bne.n	800bdbc <tcp_close_shutdown+0x144>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	68da      	ldr	r2, [r3, #12]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	60da      	str	r2, [r3, #12]
 800bdba:	e005      	b.n	800bdc8 <tcp_close_shutdown+0x150>
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	60bb      	str	r3, [r7, #8]
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d1ef      	bne.n	800bda8 <tcp_close_shutdown+0x130>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f7ff fea0 	bl	800bb14 <tcp_free>
      break;
 800bdd4:	e01a      	b.n	800be0c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f7ff ff14 	bl	800bc04 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bddc:	6879      	ldr	r1, [r7, #4]
 800bdde:	4816      	ldr	r0, [pc, #88]	; (800be38 <tcp_close_shutdown+0x1c0>)
 800bde0:	f001 fb54 	bl	800d48c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f7ff feb1 	bl	800bb4c <tcp_free_listen>
      break;
 800bdea:	e00f      	b.n	800be0c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bdec:	6879      	ldr	r1, [r7, #4]
 800bdee:	480e      	ldr	r0, [pc, #56]	; (800be28 <tcp_close_shutdown+0x1b0>)
 800bdf0:	f001 fb4c 	bl	800d48c <tcp_pcb_remove>
 800bdf4:	4b0d      	ldr	r3, [pc, #52]	; (800be2c <tcp_close_shutdown+0x1b4>)
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff fe8a 	bl	800bb14 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800be00:	e004      	b.n	800be0c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 f81a 	bl	800be3c <tcp_close_shutdown_fin>
 800be08:	4603      	mov	r3, r0
 800be0a:	e000      	b.n	800be0e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bdb0      	pop	{r4, r5, r7, pc}
 800be16:	bf00      	nop
 800be18:	08019d80 	.word	0x08019d80
 800be1c:	08019e54 	.word	0x08019e54
 800be20:	08019dc4 	.word	0x08019dc4
 800be24:	08019e74 	.word	0x08019e74
 800be28:	20006d0c 	.word	0x20006d0c
 800be2c:	20006d08 	.word	0x20006d08
 800be30:	20006d20 	.word	0x20006d20
 800be34:	20006d18 	.word	0x20006d18
 800be38:	20006d14 	.word	0x20006d14

0800be3c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d106      	bne.n	800be58 <tcp_close_shutdown_fin+0x1c>
 800be4a:	4b2e      	ldr	r3, [pc, #184]	; (800bf04 <tcp_close_shutdown_fin+0xc8>)
 800be4c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800be50:	492d      	ldr	r1, [pc, #180]	; (800bf08 <tcp_close_shutdown_fin+0xcc>)
 800be52:	482e      	ldr	r0, [pc, #184]	; (800bf0c <tcp_close_shutdown_fin+0xd0>)
 800be54:	f00b fbb0 	bl	80175b8 <iprintf>

  switch (pcb->state) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	7d1b      	ldrb	r3, [r3, #20]
 800be5c:	2b07      	cmp	r3, #7
 800be5e:	d020      	beq.n	800bea2 <tcp_close_shutdown_fin+0x66>
 800be60:	2b07      	cmp	r3, #7
 800be62:	dc2b      	bgt.n	800bebc <tcp_close_shutdown_fin+0x80>
 800be64:	2b03      	cmp	r3, #3
 800be66:	d002      	beq.n	800be6e <tcp_close_shutdown_fin+0x32>
 800be68:	2b04      	cmp	r3, #4
 800be6a:	d00d      	beq.n	800be88 <tcp_close_shutdown_fin+0x4c>
 800be6c:	e026      	b.n	800bebc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f004 fde6 	bl	8010a40 <tcp_send_fin>
 800be74:	4603      	mov	r3, r0
 800be76:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d11f      	bne.n	800bec0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2205      	movs	r2, #5
 800be84:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be86:	e01b      	b.n	800bec0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f004 fdd9 	bl	8010a40 <tcp_send_fin>
 800be8e:	4603      	mov	r3, r0
 800be90:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d114      	bne.n	800bec4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2205      	movs	r2, #5
 800be9e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bea0:	e010      	b.n	800bec4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f004 fdcc 	bl	8010a40 <tcp_send_fin>
 800bea8:	4603      	mov	r3, r0
 800beaa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800beac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d109      	bne.n	800bec8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2209      	movs	r2, #9
 800beb8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800beba:	e005      	b.n	800bec8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bebc:	2300      	movs	r3, #0
 800bebe:	e01c      	b.n	800befa <tcp_close_shutdown_fin+0xbe>
      break;
 800bec0:	bf00      	nop
 800bec2:	e002      	b.n	800beca <tcp_close_shutdown_fin+0x8e>
      break;
 800bec4:	bf00      	nop
 800bec6:	e000      	b.n	800beca <tcp_close_shutdown_fin+0x8e>
      break;
 800bec8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800beca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d103      	bne.n	800beda <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f004 fef2 	bl	8010cbc <tcp_output>
 800bed8:	e00d      	b.n	800bef6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800beda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee2:	d108      	bne.n	800bef6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	8b5b      	ldrh	r3, [r3, #26]
 800bee8:	f043 0308 	orr.w	r3, r3, #8
 800beec:	b29a      	uxth	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bef2:	2300      	movs	r3, #0
 800bef4:	e001      	b.n	800befa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	08019d80 	.word	0x08019d80
 800bf08:	08019e30 	.word	0x08019e30
 800bf0c:	08019dc4 	.word	0x08019dc4

0800bf10 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d109      	bne.n	800bf32 <tcp_close+0x22>
 800bf1e:	4b0f      	ldr	r3, [pc, #60]	; (800bf5c <tcp_close+0x4c>)
 800bf20:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bf24:	490e      	ldr	r1, [pc, #56]	; (800bf60 <tcp_close+0x50>)
 800bf26:	480f      	ldr	r0, [pc, #60]	; (800bf64 <tcp_close+0x54>)
 800bf28:	f00b fb46 	bl	80175b8 <iprintf>
 800bf2c:	f06f 030f 	mvn.w	r3, #15
 800bf30:	e00f      	b.n	800bf52 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	7d1b      	ldrb	r3, [r3, #20]
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d006      	beq.n	800bf48 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	8b5b      	ldrh	r3, [r3, #26]
 800bf3e:	f043 0310 	orr.w	r3, r3, #16
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bf48:	2101      	movs	r1, #1
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff fe94 	bl	800bc78 <tcp_close_shutdown>
 800bf50:	4603      	mov	r3, r0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	08019d80 	.word	0x08019d80
 800bf60:	08019e90 	.word	0x08019e90
 800bf64:	08019dc4 	.word	0x08019dc4

0800bf68 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b08e      	sub	sp, #56	; 0x38
 800bf6c:	af04      	add	r7, sp, #16
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d107      	bne.n	800bf88 <tcp_abandon+0x20>
 800bf78:	4b52      	ldr	r3, [pc, #328]	; (800c0c4 <tcp_abandon+0x15c>)
 800bf7a:	f240 223d 	movw	r2, #573	; 0x23d
 800bf7e:	4952      	ldr	r1, [pc, #328]	; (800c0c8 <tcp_abandon+0x160>)
 800bf80:	4852      	ldr	r0, [pc, #328]	; (800c0cc <tcp_abandon+0x164>)
 800bf82:	f00b fb19 	bl	80175b8 <iprintf>
 800bf86:	e099      	b.n	800c0bc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	7d1b      	ldrb	r3, [r3, #20]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d106      	bne.n	800bf9e <tcp_abandon+0x36>
 800bf90:	4b4c      	ldr	r3, [pc, #304]	; (800c0c4 <tcp_abandon+0x15c>)
 800bf92:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bf96:	494e      	ldr	r1, [pc, #312]	; (800c0d0 <tcp_abandon+0x168>)
 800bf98:	484c      	ldr	r0, [pc, #304]	; (800c0cc <tcp_abandon+0x164>)
 800bf9a:	f00b fb0d 	bl	80175b8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	7d1b      	ldrb	r3, [r3, #20]
 800bfa2:	2b0a      	cmp	r3, #10
 800bfa4:	d107      	bne.n	800bfb6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bfa6:	6879      	ldr	r1, [r7, #4]
 800bfa8:	484a      	ldr	r0, [pc, #296]	; (800c0d4 <tcp_abandon+0x16c>)
 800bfaa:	f001 fa6f 	bl	800d48c <tcp_pcb_remove>
    tcp_free(pcb);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7ff fdb0 	bl	800bb14 <tcp_free>
 800bfb4:	e082      	b.n	800c0bc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfd0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	7d1b      	ldrb	r3, [r3, #20]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d126      	bne.n	800c02e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	8adb      	ldrh	r3, [r3, #22]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d02e      	beq.n	800c046 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bfe8:	4b3b      	ldr	r3, [pc, #236]	; (800c0d8 <tcp_abandon+0x170>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d105      	bne.n	800bffe <tcp_abandon+0x96>
 800bff2:	4b39      	ldr	r3, [pc, #228]	; (800c0d8 <tcp_abandon+0x170>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	4a37      	ldr	r2, [pc, #220]	; (800c0d8 <tcp_abandon+0x170>)
 800bffa:	6013      	str	r3, [r2, #0]
 800bffc:	e013      	b.n	800c026 <tcp_abandon+0xbe>
 800bffe:	4b36      	ldr	r3, [pc, #216]	; (800c0d8 <tcp_abandon+0x170>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	61fb      	str	r3, [r7, #28]
 800c004:	e00c      	b.n	800c020 <tcp_abandon+0xb8>
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d104      	bne.n	800c01a <tcp_abandon+0xb2>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	68da      	ldr	r2, [r3, #12]
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	60da      	str	r2, [r3, #12]
 800c018:	e005      	b.n	800c026 <tcp_abandon+0xbe>
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	61fb      	str	r3, [r7, #28]
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1ef      	bne.n	800c006 <tcp_abandon+0x9e>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	60da      	str	r2, [r3, #12]
 800c02c:	e00b      	b.n	800c046 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	8adb      	ldrh	r3, [r3, #22]
 800c036:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c038:	6879      	ldr	r1, [r7, #4]
 800c03a:	4828      	ldr	r0, [pc, #160]	; (800c0dc <tcp_abandon+0x174>)
 800c03c:	f001 fa26 	bl	800d48c <tcp_pcb_remove>
 800c040:	4b27      	ldr	r3, [pc, #156]	; (800c0e0 <tcp_abandon+0x178>)
 800c042:	2201      	movs	r2, #1
 800c044:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d004      	beq.n	800c058 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c052:	4618      	mov	r0, r3
 800c054:	f000 ff12 	bl	800ce7c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d004      	beq.n	800c06a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c064:	4618      	mov	r0, r3
 800c066:	f000 ff09 	bl	800ce7c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d004      	beq.n	800c07c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c076:	4618      	mov	r0, r3
 800c078:	f000 ff00 	bl	800ce7c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00e      	beq.n	800c0a0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c082:	6879      	ldr	r1, [r7, #4]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	3304      	adds	r3, #4
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	8b12      	ldrh	r2, [r2, #24]
 800c08c:	9202      	str	r2, [sp, #8]
 800c08e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c090:	9201      	str	r2, [sp, #4]
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	460b      	mov	r3, r1
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	69b9      	ldr	r1, [r7, #24]
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f005 fbc2 	bl	8011824 <tcp_rst>
    }
    last_state = pcb->state;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	7d1b      	ldrb	r3, [r3, #20]
 800c0a4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff fd34 	bl	800bb14 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d004      	beq.n	800c0bc <tcp_abandon+0x154>
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	f06f 010c 	mvn.w	r1, #12
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	4798      	blx	r3
  }
}
 800c0bc:	3728      	adds	r7, #40	; 0x28
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	08019d80 	.word	0x08019d80
 800c0c8:	08019ec4 	.word	0x08019ec4
 800c0cc:	08019dc4 	.word	0x08019dc4
 800c0d0:	08019ee0 	.word	0x08019ee0
 800c0d4:	20006d1c 	.word	0x20006d1c
 800c0d8:	20006d18 	.word	0x20006d18
 800c0dc:	20006d0c 	.word	0x20006d0c
 800c0e0:	20006d08 	.word	0x20006d08

0800c0e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c0ec:	2101      	movs	r1, #1
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f7ff ff3a 	bl	800bf68 <tcp_abandon>
}
 800c0f4:	bf00      	nop
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b088      	sub	sp, #32
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	4613      	mov	r3, r2
 800c108:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c10a:	2304      	movs	r3, #4
 800c10c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d101      	bne.n	800c118 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c114:	4b3e      	ldr	r3, [pc, #248]	; (800c210 <tcp_bind+0x114>)
 800c116:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d109      	bne.n	800c132 <tcp_bind+0x36>
 800c11e:	4b3d      	ldr	r3, [pc, #244]	; (800c214 <tcp_bind+0x118>)
 800c120:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c124:	493c      	ldr	r1, [pc, #240]	; (800c218 <tcp_bind+0x11c>)
 800c126:	483d      	ldr	r0, [pc, #244]	; (800c21c <tcp_bind+0x120>)
 800c128:	f00b fa46 	bl	80175b8 <iprintf>
 800c12c:	f06f 030f 	mvn.w	r3, #15
 800c130:	e06a      	b.n	800c208 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	7d1b      	ldrb	r3, [r3, #20]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d009      	beq.n	800c14e <tcp_bind+0x52>
 800c13a:	4b36      	ldr	r3, [pc, #216]	; (800c214 <tcp_bind+0x118>)
 800c13c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c140:	4937      	ldr	r1, [pc, #220]	; (800c220 <tcp_bind+0x124>)
 800c142:	4836      	ldr	r0, [pc, #216]	; (800c21c <tcp_bind+0x120>)
 800c144:	f00b fa38 	bl	80175b8 <iprintf>
 800c148:	f06f 0305 	mvn.w	r3, #5
 800c14c:	e05c      	b.n	800c208 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c14e:	88fb      	ldrh	r3, [r7, #6]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d109      	bne.n	800c168 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c154:	f000 f914 	bl	800c380 <tcp_new_port>
 800c158:	4603      	mov	r3, r0
 800c15a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c15c:	88fb      	ldrh	r3, [r7, #6]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d135      	bne.n	800c1ce <tcp_bind+0xd2>
      return ERR_BUF;
 800c162:	f06f 0301 	mvn.w	r3, #1
 800c166:	e04f      	b.n	800c208 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c168:	2300      	movs	r3, #0
 800c16a:	61fb      	str	r3, [r7, #28]
 800c16c:	e02b      	b.n	800c1c6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c16e:	4a2d      	ldr	r2, [pc, #180]	; (800c224 <tcp_bind+0x128>)
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	61bb      	str	r3, [r7, #24]
 800c17a:	e01e      	b.n	800c1ba <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	8adb      	ldrh	r3, [r3, #22]
 800c180:	88fa      	ldrh	r2, [r7, #6]
 800c182:	429a      	cmp	r2, r3
 800c184:	d116      	bne.n	800c1b4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c186:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d010      	beq.n	800c1ae <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00c      	beq.n	800c1ae <tcp_bind+0xb2>
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d009      	beq.n	800c1ae <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d005      	beq.n	800c1ae <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d102      	bne.n	800c1b4 <tcp_bind+0xb8>
              return ERR_USE;
 800c1ae:	f06f 0307 	mvn.w	r3, #7
 800c1b2:	e029      	b.n	800c208 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	61bb      	str	r3, [r7, #24]
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1dd      	bne.n	800c17c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	61fb      	str	r3, [r7, #28]
 800c1c6:	69fa      	ldr	r2, [r7, #28]
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	dbcf      	blt.n	800c16e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00c      	beq.n	800c1ee <tcp_bind+0xf2>
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d008      	beq.n	800c1ee <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d002      	beq.n	800c1e8 <tcp_bind+0xec>
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	e000      	b.n	800c1ea <tcp_bind+0xee>
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	68fa      	ldr	r2, [r7, #12]
 800c1ec:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	88fa      	ldrh	r2, [r7, #6]
 800c1f2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c1f4:	4b0c      	ldr	r3, [pc, #48]	; (800c228 <tcp_bind+0x12c>)
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	60da      	str	r2, [r3, #12]
 800c1fc:	4a0a      	ldr	r2, [pc, #40]	; (800c228 <tcp_bind+0x12c>)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6013      	str	r3, [r2, #0]
 800c202:	f005 fcd1 	bl	8011ba8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3720      	adds	r7, #32
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	0801c16c 	.word	0x0801c16c
 800c214:	08019d80 	.word	0x08019d80
 800c218:	08019f14 	.word	0x08019f14
 800c21c:	08019dc4 	.word	0x08019dc4
 800c220:	08019f2c 	.word	0x08019f2c
 800c224:	0801c134 	.word	0x0801c134
 800c228:	20006d18 	.word	0x20006d18

0800c22c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d106      	bne.n	800c248 <tcp_update_rcv_ann_wnd+0x1c>
 800c23a:	4b25      	ldr	r3, [pc, #148]	; (800c2d0 <tcp_update_rcv_ann_wnd+0xa4>)
 800c23c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c240:	4924      	ldr	r1, [pc, #144]	; (800c2d4 <tcp_update_rcv_ann_wnd+0xa8>)
 800c242:	4825      	ldr	r0, [pc, #148]	; (800c2d8 <tcp_update_rcv_ann_wnd+0xac>)
 800c244:	f00b f9b8 	bl	80175b8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c250:	4413      	add	r3, r2
 800c252:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c25c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c260:	bf28      	it	cs
 800c262:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c266:	b292      	uxth	r2, r2
 800c268:	4413      	add	r3, r2
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	2b00      	cmp	r3, #0
 800c270:	db08      	blt.n	800c284 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	1ad3      	subs	r3, r2, r3
 800c282:	e020      	b.n	800c2c6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	2b00      	cmp	r3, #0
 800c290:	dd03      	ble.n	800c29a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c298:	e014      	b.n	800c2c4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2ac:	d306      	bcc.n	800c2bc <tcp_update_rcv_ann_wnd+0x90>
 800c2ae:	4b08      	ldr	r3, [pc, #32]	; (800c2d0 <tcp_update_rcv_ann_wnd+0xa4>)
 800c2b0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c2b4:	4909      	ldr	r1, [pc, #36]	; (800c2dc <tcp_update_rcv_ann_wnd+0xb0>)
 800c2b6:	4808      	ldr	r0, [pc, #32]	; (800c2d8 <tcp_update_rcv_ann_wnd+0xac>)
 800c2b8:	f00b f97e 	bl	80175b8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c2c4:	2300      	movs	r3, #0
  }
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	08019d80 	.word	0x08019d80
 800c2d4:	08019fdc 	.word	0x08019fdc
 800c2d8:	08019dc4 	.word	0x08019dc4
 800c2dc:	0801a000 	.word	0x0801a000

0800c2e0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d107      	bne.n	800c302 <tcp_recved+0x22>
 800c2f2:	4b1f      	ldr	r3, [pc, #124]	; (800c370 <tcp_recved+0x90>)
 800c2f4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c2f8:	491e      	ldr	r1, [pc, #120]	; (800c374 <tcp_recved+0x94>)
 800c2fa:	481f      	ldr	r0, [pc, #124]	; (800c378 <tcp_recved+0x98>)
 800c2fc:	f00b f95c 	bl	80175b8 <iprintf>
 800c300:	e032      	b.n	800c368 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	7d1b      	ldrb	r3, [r3, #20]
 800c306:	2b01      	cmp	r3, #1
 800c308:	d106      	bne.n	800c318 <tcp_recved+0x38>
 800c30a:	4b19      	ldr	r3, [pc, #100]	; (800c370 <tcp_recved+0x90>)
 800c30c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c310:	491a      	ldr	r1, [pc, #104]	; (800c37c <tcp_recved+0x9c>)
 800c312:	4819      	ldr	r0, [pc, #100]	; (800c378 <tcp_recved+0x98>)
 800c314:	f00b f950 	bl	80175b8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c31c:	887b      	ldrh	r3, [r7, #2]
 800c31e:	4413      	add	r3, r2
 800c320:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c322:	89fb      	ldrh	r3, [r7, #14]
 800c324:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c328:	d804      	bhi.n	800c334 <tcp_recved+0x54>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c32e:	89fa      	ldrh	r2, [r7, #14]
 800c330:	429a      	cmp	r2, r3
 800c332:	d204      	bcs.n	800c33e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c33a:	851a      	strh	r2, [r3, #40]	; 0x28
 800c33c:	e002      	b.n	800c344 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	89fa      	ldrh	r2, [r7, #14]
 800c342:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7ff ff71 	bl	800c22c <tcp_update_rcv_ann_wnd>
 800c34a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c352:	d309      	bcc.n	800c368 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	8b5b      	ldrh	r3, [r3, #26]
 800c358:	f043 0302 	orr.w	r3, r3, #2
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f004 fcaa 	bl	8010cbc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	08019d80 	.word	0x08019d80
 800c374:	0801a01c 	.word	0x0801a01c
 800c378:	08019dc4 	.word	0x08019dc4
 800c37c:	0801a034 	.word	0x0801a034

0800c380 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c386:	2300      	movs	r3, #0
 800c388:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c38a:	4b1e      	ldr	r3, [pc, #120]	; (800c404 <tcp_new_port+0x84>)
 800c38c:	881b      	ldrh	r3, [r3, #0]
 800c38e:	3301      	adds	r3, #1
 800c390:	b29a      	uxth	r2, r3
 800c392:	4b1c      	ldr	r3, [pc, #112]	; (800c404 <tcp_new_port+0x84>)
 800c394:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c396:	4b1b      	ldr	r3, [pc, #108]	; (800c404 <tcp_new_port+0x84>)
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d103      	bne.n	800c3aa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c3a2:	4b18      	ldr	r3, [pc, #96]	; (800c404 <tcp_new_port+0x84>)
 800c3a4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c3a8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	71fb      	strb	r3, [r7, #7]
 800c3ae:	e01e      	b.n	800c3ee <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c3b0:	79fb      	ldrb	r3, [r7, #7]
 800c3b2:	4a15      	ldr	r2, [pc, #84]	; (800c408 <tcp_new_port+0x88>)
 800c3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	603b      	str	r3, [r7, #0]
 800c3bc:	e011      	b.n	800c3e2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	8ada      	ldrh	r2, [r3, #22]
 800c3c2:	4b10      	ldr	r3, [pc, #64]	; (800c404 <tcp_new_port+0x84>)
 800c3c4:	881b      	ldrh	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d108      	bne.n	800c3dc <tcp_new_port+0x5c>
        n++;
 800c3ca:	88bb      	ldrh	r3, [r7, #4]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c3d0:	88bb      	ldrh	r3, [r7, #4]
 800c3d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3d6:	d3d8      	bcc.n	800c38a <tcp_new_port+0xa>
          return 0;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	e00d      	b.n	800c3f8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	603b      	str	r3, [r7, #0]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1ea      	bne.n	800c3be <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c3e8:	79fb      	ldrb	r3, [r7, #7]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	71fb      	strb	r3, [r7, #7]
 800c3ee:	79fb      	ldrb	r3, [r7, #7]
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	d9dd      	bls.n	800c3b0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c3f4:	4b03      	ldr	r3, [pc, #12]	; (800c404 <tcp_new_port+0x84>)
 800c3f6:	881b      	ldrh	r3, [r3, #0]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr
 800c404:	2000011c 	.word	0x2000011c
 800c408:	0801c134 	.word	0x0801c134

0800c40c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b08a      	sub	sp, #40	; 0x28
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	603b      	str	r3, [r7, #0]
 800c418:	4613      	mov	r3, r2
 800c41a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800c41c:	2300      	movs	r3, #0
 800c41e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d109      	bne.n	800c43a <tcp_connect+0x2e>
 800c426:	4b7d      	ldr	r3, [pc, #500]	; (800c61c <tcp_connect+0x210>)
 800c428:	f240 4235 	movw	r2, #1077	; 0x435
 800c42c:	497c      	ldr	r1, [pc, #496]	; (800c620 <tcp_connect+0x214>)
 800c42e:	487d      	ldr	r0, [pc, #500]	; (800c624 <tcp_connect+0x218>)
 800c430:	f00b f8c2 	bl	80175b8 <iprintf>
 800c434:	f06f 030f 	mvn.w	r3, #15
 800c438:	e0ec      	b.n	800c614 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d109      	bne.n	800c454 <tcp_connect+0x48>
 800c440:	4b76      	ldr	r3, [pc, #472]	; (800c61c <tcp_connect+0x210>)
 800c442:	f240 4236 	movw	r2, #1078	; 0x436
 800c446:	4978      	ldr	r1, [pc, #480]	; (800c628 <tcp_connect+0x21c>)
 800c448:	4876      	ldr	r0, [pc, #472]	; (800c624 <tcp_connect+0x218>)
 800c44a:	f00b f8b5 	bl	80175b8 <iprintf>
 800c44e:	f06f 030f 	mvn.w	r3, #15
 800c452:	e0df      	b.n	800c614 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	7d1b      	ldrb	r3, [r3, #20]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d009      	beq.n	800c470 <tcp_connect+0x64>
 800c45c:	4b6f      	ldr	r3, [pc, #444]	; (800c61c <tcp_connect+0x210>)
 800c45e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800c462:	4972      	ldr	r1, [pc, #456]	; (800c62c <tcp_connect+0x220>)
 800c464:	486f      	ldr	r0, [pc, #444]	; (800c624 <tcp_connect+0x218>)
 800c466:	f00b f8a7 	bl	80175b8 <iprintf>
 800c46a:	f06f 0309 	mvn.w	r3, #9
 800c46e:	e0d1      	b.n	800c614 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d002      	beq.n	800c47c <tcp_connect+0x70>
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	e000      	b.n	800c47e <tcp_connect+0x72>
 800c47c:	2300      	movs	r3, #0
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	88fa      	ldrh	r2, [r7, #6]
 800c486:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	7a1b      	ldrb	r3, [r3, #8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d006      	beq.n	800c49e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	7a1b      	ldrb	r3, [r3, #8]
 800c494:	4618      	mov	r0, r3
 800c496:	f7fe fcc9 	bl	800ae2c <netif_get_by_index>
 800c49a:	6278      	str	r0, [r7, #36]	; 0x24
 800c49c:	e005      	b.n	800c4aa <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f009 f8f4 	bl	8015690 <ip4_route>
 800c4a8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d102      	bne.n	800c4b6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800c4b0:	f06f 0303 	mvn.w	r3, #3
 800c4b4:	e0ae      	b.n	800c614 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d003      	beq.n	800c4c4 <tcp_connect+0xb8>
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d111      	bne.n	800c4e8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <tcp_connect+0xc4>
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	e000      	b.n	800c4d2 <tcp_connect+0xc6>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d102      	bne.n	800c4e0 <tcp_connect+0xd4>
      return ERR_RTE;
 800c4da:	f06f 0303 	mvn.w	r3, #3
 800c4de:	e099      	b.n	800c614 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	8adb      	ldrh	r3, [r3, #22]
 800c4ec:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	8adb      	ldrh	r3, [r3, #22]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10c      	bne.n	800c510 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800c4f6:	f7ff ff43 	bl	800c380 <tcp_new_port>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	8adb      	ldrh	r3, [r3, #22]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d102      	bne.n	800c510 <tcp_connect+0x104>
      return ERR_BUF;
 800c50a:	f06f 0301 	mvn.w	r3, #1
 800c50e:	e081      	b.n	800c614 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f001 f84f 	bl	800d5b4 <tcp_next_iss>
 800c516:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2200      	movs	r2, #0
 800c51c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	1e5a      	subs	r2, r3, #1
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	1e5a      	subs	r2, r3, #1
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	1e5a      	subs	r2, r3, #1
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c542:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c55a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c564:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	3304      	adds	r3, #4
 800c56e:	461a      	mov	r2, r3
 800c570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c572:	f001 f845 	bl	800d600 <tcp_eff_send_mss_netif>
 800c576:	4603      	mov	r3, r0
 800c578:	461a      	mov	r2, r3
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2201      	movs	r2, #1
 800c582:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800c58e:	2102      	movs	r1, #2
 800c590:	68f8      	ldr	r0, [r7, #12]
 800c592:	f004 faa5 	bl	8010ae0 <tcp_enqueue_flags>
 800c596:	4603      	mov	r3, r0
 800c598:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800c59a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d136      	bne.n	800c610 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2202      	movs	r2, #2
 800c5a6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800c5a8:	8b7b      	ldrh	r3, [r7, #26]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d021      	beq.n	800c5f2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800c5ae:	4b20      	ldr	r3, [pc, #128]	; (800c630 <tcp_connect+0x224>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d105      	bne.n	800c5c4 <tcp_connect+0x1b8>
 800c5b8:	4b1d      	ldr	r3, [pc, #116]	; (800c630 <tcp_connect+0x224>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	4a1c      	ldr	r2, [pc, #112]	; (800c630 <tcp_connect+0x224>)
 800c5c0:	6013      	str	r3, [r2, #0]
 800c5c2:	e013      	b.n	800c5ec <tcp_connect+0x1e0>
 800c5c4:	4b1a      	ldr	r3, [pc, #104]	; (800c630 <tcp_connect+0x224>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	623b      	str	r3, [r7, #32]
 800c5ca:	e00c      	b.n	800c5e6 <tcp_connect+0x1da>
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d104      	bne.n	800c5e0 <tcp_connect+0x1d4>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	68da      	ldr	r2, [r3, #12]
 800c5da:	6a3b      	ldr	r3, [r7, #32]
 800c5dc:	60da      	str	r2, [r3, #12]
 800c5de:	e005      	b.n	800c5ec <tcp_connect+0x1e0>
 800c5e0:	6a3b      	ldr	r3, [r7, #32]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	623b      	str	r3, [r7, #32]
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1ef      	bne.n	800c5cc <tcp_connect+0x1c0>
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800c5f2:	4b10      	ldr	r3, [pc, #64]	; (800c634 <tcp_connect+0x228>)
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	60da      	str	r2, [r3, #12]
 800c5fa:	4a0e      	ldr	r2, [pc, #56]	; (800c634 <tcp_connect+0x228>)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6013      	str	r3, [r2, #0]
 800c600:	f005 fad2 	bl	8011ba8 <tcp_timer_needed>
 800c604:	4b0c      	ldr	r3, [pc, #48]	; (800c638 <tcp_connect+0x22c>)
 800c606:	2201      	movs	r2, #1
 800c608:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f004 fb56 	bl	8010cbc <tcp_output>
  }
  return ret;
 800c610:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3728      	adds	r7, #40	; 0x28
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	08019d80 	.word	0x08019d80
 800c620:	0801a05c 	.word	0x0801a05c
 800c624:	08019dc4 	.word	0x08019dc4
 800c628:	0801a078 	.word	0x0801a078
 800c62c:	0801a094 	.word	0x0801a094
 800c630:	20006d18 	.word	0x20006d18
 800c634:	20006d0c 	.word	0x20006d0c
 800c638:	20006d08 	.word	0x20006d08

0800c63c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c63c:	b5b0      	push	{r4, r5, r7, lr}
 800c63e:	b090      	sub	sp, #64	; 0x40
 800c640:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c642:	2300      	movs	r3, #0
 800c644:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c648:	4b94      	ldr	r3, [pc, #592]	; (800c89c <tcp_slowtmr+0x260>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	3301      	adds	r3, #1
 800c64e:	4a93      	ldr	r2, [pc, #588]	; (800c89c <tcp_slowtmr+0x260>)
 800c650:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c652:	4b93      	ldr	r3, [pc, #588]	; (800c8a0 <tcp_slowtmr+0x264>)
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	3301      	adds	r3, #1
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	4b91      	ldr	r3, [pc, #580]	; (800c8a0 <tcp_slowtmr+0x264>)
 800c65c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c662:	4b90      	ldr	r3, [pc, #576]	; (800c8a4 <tcp_slowtmr+0x268>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c668:	e29f      	b.n	800cbaa <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	7d1b      	ldrb	r3, [r3, #20]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d106      	bne.n	800c680 <tcp_slowtmr+0x44>
 800c672:	4b8d      	ldr	r3, [pc, #564]	; (800c8a8 <tcp_slowtmr+0x26c>)
 800c674:	f240 42be 	movw	r2, #1214	; 0x4be
 800c678:	498c      	ldr	r1, [pc, #560]	; (800c8ac <tcp_slowtmr+0x270>)
 800c67a:	488d      	ldr	r0, [pc, #564]	; (800c8b0 <tcp_slowtmr+0x274>)
 800c67c:	f00a ff9c 	bl	80175b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c682:	7d1b      	ldrb	r3, [r3, #20]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d106      	bne.n	800c696 <tcp_slowtmr+0x5a>
 800c688:	4b87      	ldr	r3, [pc, #540]	; (800c8a8 <tcp_slowtmr+0x26c>)
 800c68a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c68e:	4989      	ldr	r1, [pc, #548]	; (800c8b4 <tcp_slowtmr+0x278>)
 800c690:	4887      	ldr	r0, [pc, #540]	; (800c8b0 <tcp_slowtmr+0x274>)
 800c692:	f00a ff91 	bl	80175b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c698:	7d1b      	ldrb	r3, [r3, #20]
 800c69a:	2b0a      	cmp	r3, #10
 800c69c:	d106      	bne.n	800c6ac <tcp_slowtmr+0x70>
 800c69e:	4b82      	ldr	r3, [pc, #520]	; (800c8a8 <tcp_slowtmr+0x26c>)
 800c6a0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c6a4:	4984      	ldr	r1, [pc, #528]	; (800c8b8 <tcp_slowtmr+0x27c>)
 800c6a6:	4882      	ldr	r0, [pc, #520]	; (800c8b0 <tcp_slowtmr+0x274>)
 800c6a8:	f00a ff86 	bl	80175b8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ae:	7f9a      	ldrb	r2, [r3, #30]
 800c6b0:	4b7b      	ldr	r3, [pc, #492]	; (800c8a0 <tcp_slowtmr+0x264>)
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d105      	bne.n	800c6c4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c6c2:	e272      	b.n	800cbaa <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c6c4:	4b76      	ldr	r3, [pc, #472]	; (800c8a0 <tcp_slowtmr+0x264>)
 800c6c6:	781a      	ldrb	r2, [r3, #0]
 800c6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ca:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6da:	7d1b      	ldrb	r3, [r3, #20]
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	d10a      	bne.n	800c6f6 <tcp_slowtmr+0xba>
 800c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6e6:	2b05      	cmp	r3, #5
 800c6e8:	d905      	bls.n	800c6f6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c6ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6f4:	e11e      	b.n	800c934 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6fc:	2b0b      	cmp	r3, #11
 800c6fe:	d905      	bls.n	800c70c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c704:	3301      	adds	r3, #1
 800c706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c70a:	e113      	b.n	800c934 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c712:	2b00      	cmp	r3, #0
 800c714:	d075      	beq.n	800c802 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d006      	beq.n	800c72c <tcp_slowtmr+0xf0>
 800c71e:	4b62      	ldr	r3, [pc, #392]	; (800c8a8 <tcp_slowtmr+0x26c>)
 800c720:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c724:	4965      	ldr	r1, [pc, #404]	; (800c8bc <tcp_slowtmr+0x280>)
 800c726:	4862      	ldr	r0, [pc, #392]	; (800c8b0 <tcp_slowtmr+0x274>)
 800c728:	f00a ff46 	bl	80175b8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c730:	2b00      	cmp	r3, #0
 800c732:	d106      	bne.n	800c742 <tcp_slowtmr+0x106>
 800c734:	4b5c      	ldr	r3, [pc, #368]	; (800c8a8 <tcp_slowtmr+0x26c>)
 800c736:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c73a:	4961      	ldr	r1, [pc, #388]	; (800c8c0 <tcp_slowtmr+0x284>)
 800c73c:	485c      	ldr	r0, [pc, #368]	; (800c8b0 <tcp_slowtmr+0x274>)
 800c73e:	f00a ff3b 	bl	80175b8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c744:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c748:	2b0b      	cmp	r3, #11
 800c74a:	d905      	bls.n	800c758 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c750:	3301      	adds	r3, #1
 800c752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c756:	e0ed      	b.n	800c934 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c75e:	3b01      	subs	r3, #1
 800c760:	4a58      	ldr	r2, [pc, #352]	; (800c8c4 <tcp_slowtmr+0x288>)
 800c762:	5cd3      	ldrb	r3, [r2, r3]
 800c764:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c768:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c76c:	7c7a      	ldrb	r2, [r7, #17]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d907      	bls.n	800c782 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c774:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c778:	3301      	adds	r3, #1
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c784:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c788:	7c7a      	ldrb	r2, [r7, #17]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	f200 80d2 	bhi.w	800c934 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c790:	2301      	movs	r3, #1
 800c792:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d108      	bne.n	800c7b0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c79e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7a0:	f005 f934 	bl	8011a0c <tcp_zero_window_probe>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d014      	beq.n	800c7d4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	623b      	str	r3, [r7, #32]
 800c7ae:	e011      	b.n	800c7d4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7ba:	f003 fff9 	bl	80107b0 <tcp_split_unsent_seg>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d107      	bne.n	800c7d4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c7c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7c6:	f004 fa79 	bl	8010cbc <tcp_output>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d101      	bne.n	800c7d4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 80ac 	beq.w	800c934 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c7ea:	2b06      	cmp	r3, #6
 800c7ec:	f200 80a2 	bhi.w	800c934 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c800:	e098      	b.n	800c934 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c804:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c808:	2b00      	cmp	r3, #0
 800c80a:	db0f      	blt.n	800c82c <tcp_slowtmr+0x1f0>
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c812:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c816:	4293      	cmp	r3, r2
 800c818:	d008      	beq.n	800c82c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c820:	b29b      	uxth	r3, r3
 800c822:	3301      	adds	r3, #1
 800c824:	b29b      	uxth	r3, r3
 800c826:	b21a      	sxth	r2, r3
 800c828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c834:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c838:	429a      	cmp	r2, r3
 800c83a:	db7b      	blt.n	800c934 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c83c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c83e:	f004 fd2f 	bl	80112a0 <tcp_rexmit_rto_prepare>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d007      	beq.n	800c858 <tcp_slowtmr+0x21c>
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d171      	bne.n	800c934 <tcp_slowtmr+0x2f8>
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c854:	2b00      	cmp	r3, #0
 800c856:	d06d      	beq.n	800c934 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85a:	7d1b      	ldrb	r3, [r3, #20]
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d03a      	beq.n	800c8d6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c866:	2b0c      	cmp	r3, #12
 800c868:	bf28      	it	cs
 800c86a:	230c      	movcs	r3, #12
 800c86c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c870:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c874:	10db      	asrs	r3, r3, #3
 800c876:	b21b      	sxth	r3, r3
 800c878:	461a      	mov	r2, r3
 800c87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c880:	4413      	add	r3, r2
 800c882:	7efa      	ldrb	r2, [r7, #27]
 800c884:	4910      	ldr	r1, [pc, #64]	; (800c8c8 <tcp_slowtmr+0x28c>)
 800c886:	5c8a      	ldrb	r2, [r1, r2]
 800c888:	4093      	lsls	r3, r2
 800c88a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c892:	4293      	cmp	r3, r2
 800c894:	dc1a      	bgt.n	800c8cc <tcp_slowtmr+0x290>
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	b21a      	sxth	r2, r3
 800c89a:	e019      	b.n	800c8d0 <tcp_slowtmr+0x294>
 800c89c:	20006d10 	.word	0x20006d10
 800c8a0:	20000256 	.word	0x20000256
 800c8a4:	20006d0c 	.word	0x20006d0c
 800c8a8:	08019d80 	.word	0x08019d80
 800c8ac:	0801a0c4 	.word	0x0801a0c4
 800c8b0:	08019dc4 	.word	0x08019dc4
 800c8b4:	0801a0f0 	.word	0x0801a0f0
 800c8b8:	0801a11c 	.word	0x0801a11c
 800c8bc:	0801a14c 	.word	0x0801a14c
 800c8c0:	0801a180 	.word	0x0801a180
 800c8c4:	0801c12c 	.word	0x0801c12c
 800c8c8:	0801c11c 	.word	0x0801c11c
 800c8cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d8:	2200      	movs	r2, #0
 800c8da:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	bf28      	it	cs
 800c8ec:	4613      	movcs	r3, r2
 800c8ee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c8f0:	8a7b      	ldrh	r3, [r7, #18]
 800c8f2:	085b      	lsrs	r3, r3, #1
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c906:	005b      	lsls	r3, r3, #1
 800c908:	b29b      	uxth	r3, r3
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d206      	bcs.n	800c91c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	b29a      	uxth	r2, r3
 800c916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c918:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c928:	2200      	movs	r2, #0
 800c92a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c92e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c930:	f004 fd26 	bl	8011380 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	7d1b      	ldrb	r3, [r3, #20]
 800c938:	2b06      	cmp	r3, #6
 800c93a:	d111      	bne.n	800c960 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93e:	8b5b      	ldrh	r3, [r3, #26]
 800c940:	f003 0310 	and.w	r3, r3, #16
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00b      	beq.n	800c960 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c948:	4b9d      	ldr	r3, [pc, #628]	; (800cbc0 <tcp_slowtmr+0x584>)
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94e:	6a1b      	ldr	r3, [r3, #32]
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	2b28      	cmp	r3, #40	; 0x28
 800c954:	d904      	bls.n	800c960 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c95a:	3301      	adds	r3, #1
 800c95c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c962:	7a5b      	ldrb	r3, [r3, #9]
 800c964:	f003 0308 	and.w	r3, r3, #8
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d04c      	beq.n	800ca06 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c970:	2b04      	cmp	r3, #4
 800c972:	d003      	beq.n	800c97c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c978:	2b07      	cmp	r3, #7
 800c97a:	d144      	bne.n	800ca06 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c97c:	4b90      	ldr	r3, [pc, #576]	; (800cbc0 <tcp_slowtmr+0x584>)
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c982:	6a1b      	ldr	r3, [r3, #32]
 800c984:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c98c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c990:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c994:	498b      	ldr	r1, [pc, #556]	; (800cbc4 <tcp_slowtmr+0x588>)
 800c996:	fba1 1303 	umull	r1, r3, r1, r3
 800c99a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d90a      	bls.n	800c9b6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c9a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c9aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c9b4:	e027      	b.n	800ca06 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9b6:	4b82      	ldr	r3, [pc, #520]	; (800cbc0 <tcp_slowtmr+0x584>)
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	4b7e      	ldr	r3, [pc, #504]	; (800cbc8 <tcp_slowtmr+0x58c>)
 800c9d0:	fb03 f300 	mul.w	r3, r3, r0
 800c9d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c9d6:	497b      	ldr	r1, [pc, #492]	; (800cbc4 <tcp_slowtmr+0x588>)
 800c9d8:	fba1 1303 	umull	r1, r3, r1, r3
 800c9dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d911      	bls.n	800ca06 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c9e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9e4:	f004 ffd2 	bl	801198c <tcp_keepalive>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c9ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d107      	bne.n	800ca06 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca02:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ca06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d011      	beq.n	800ca32 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ca0e:	4b6c      	ldr	r3, [pc, #432]	; (800cbc0 <tcp_slowtmr+0x584>)
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	6a1b      	ldr	r3, [r3, #32]
 800ca16:	1ad2      	subs	r2, r2, r3
 800ca18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ca1e:	4619      	mov	r1, r3
 800ca20:	460b      	mov	r3, r1
 800ca22:	005b      	lsls	r3, r3, #1
 800ca24:	440b      	add	r3, r1
 800ca26:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d302      	bcc.n	800ca32 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ca2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca2e:	f000 fe91 	bl	800d754 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca34:	7d1b      	ldrb	r3, [r3, #20]
 800ca36:	2b03      	cmp	r3, #3
 800ca38:	d10b      	bne.n	800ca52 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca3a:	4b61      	ldr	r3, [pc, #388]	; (800cbc0 <tcp_slowtmr+0x584>)
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca40:	6a1b      	ldr	r3, [r3, #32]
 800ca42:	1ad3      	subs	r3, r2, r3
 800ca44:	2b28      	cmp	r3, #40	; 0x28
 800ca46:	d904      	bls.n	800ca52 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ca48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ca52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca54:	7d1b      	ldrb	r3, [r3, #20]
 800ca56:	2b09      	cmp	r3, #9
 800ca58:	d10b      	bne.n	800ca72 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ca5a:	4b59      	ldr	r3, [pc, #356]	; (800cbc0 <tcp_slowtmr+0x584>)
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca60:	6a1b      	ldr	r3, [r3, #32]
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	2bf0      	cmp	r3, #240	; 0xf0
 800ca66:	d904      	bls.n	800ca72 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ca68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ca72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d060      	beq.n	800cb3c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca80:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ca82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca84:	f000 fcb2 	bl	800d3ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d010      	beq.n	800cab0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ca8e:	4b4f      	ldr	r3, [pc, #316]	; (800cbcc <tcp_slowtmr+0x590>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d106      	bne.n	800caa6 <tcp_slowtmr+0x46a>
 800ca98:	4b4d      	ldr	r3, [pc, #308]	; (800cbd0 <tcp_slowtmr+0x594>)
 800ca9a:	f240 526d 	movw	r2, #1389	; 0x56d
 800ca9e:	494d      	ldr	r1, [pc, #308]	; (800cbd4 <tcp_slowtmr+0x598>)
 800caa0:	484d      	ldr	r0, [pc, #308]	; (800cbd8 <tcp_slowtmr+0x59c>)
 800caa2:	f00a fd89 	bl	80175b8 <iprintf>
        prev->next = pcb->next;
 800caa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa8:	68da      	ldr	r2, [r3, #12]
 800caaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caac:	60da      	str	r2, [r3, #12]
 800caae:	e00f      	b.n	800cad0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cab0:	4b46      	ldr	r3, [pc, #280]	; (800cbcc <tcp_slowtmr+0x590>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d006      	beq.n	800cac8 <tcp_slowtmr+0x48c>
 800caba:	4b45      	ldr	r3, [pc, #276]	; (800cbd0 <tcp_slowtmr+0x594>)
 800cabc:	f240 5271 	movw	r2, #1393	; 0x571
 800cac0:	4946      	ldr	r1, [pc, #280]	; (800cbdc <tcp_slowtmr+0x5a0>)
 800cac2:	4845      	ldr	r0, [pc, #276]	; (800cbd8 <tcp_slowtmr+0x59c>)
 800cac4:	f00a fd78 	bl	80175b8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	4a3f      	ldr	r2, [pc, #252]	; (800cbcc <tcp_slowtmr+0x590>)
 800cace:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cad0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d013      	beq.n	800cb00 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cada:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cade:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cae0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae4:	3304      	adds	r3, #4
 800cae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cae8:	8ad2      	ldrh	r2, [r2, #22]
 800caea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800caec:	8b09      	ldrh	r1, [r1, #24]
 800caee:	9102      	str	r1, [sp, #8]
 800caf0:	9201      	str	r2, [sp, #4]
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	462b      	mov	r3, r5
 800caf6:	4622      	mov	r2, r4
 800caf8:	4601      	mov	r1, r0
 800cafa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cafc:	f004 fe92 	bl	8011824 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb02:	691b      	ldr	r3, [r3, #16]
 800cb04:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb08:	7d1b      	ldrb	r3, [r3, #20]
 800cb0a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cb16:	6838      	ldr	r0, [r7, #0]
 800cb18:	f7fe fffc 	bl	800bb14 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cb1c:	4b30      	ldr	r3, [pc, #192]	; (800cbe0 <tcp_slowtmr+0x5a4>)
 800cb1e:	2200      	movs	r2, #0
 800cb20:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d004      	beq.n	800cb32 <tcp_slowtmr+0x4f6>
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f06f 010c 	mvn.w	r1, #12
 800cb2e:	68b8      	ldr	r0, [r7, #8]
 800cb30:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cb32:	4b2b      	ldr	r3, [pc, #172]	; (800cbe0 <tcp_slowtmr+0x5a4>)
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d037      	beq.n	800cbaa <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800cb3a:	e590      	b.n	800c65e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb48:	7f1b      	ldrb	r3, [r3, #28]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	b2da      	uxtb	r2, r3
 800cb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb50:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb54:	7f1a      	ldrb	r2, [r3, #28]
 800cb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb58:	7f5b      	ldrb	r3, [r3, #29]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d325      	bcc.n	800cbaa <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb60:	2200      	movs	r2, #0
 800cb62:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cb64:	4b1e      	ldr	r3, [pc, #120]	; (800cbe0 <tcp_slowtmr+0x5a4>)
 800cb66:	2200      	movs	r2, #0
 800cb68:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00b      	beq.n	800cb8c <tcp_slowtmr+0x550>
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb7c:	6912      	ldr	r2, [r2, #16]
 800cb7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb80:	4610      	mov	r0, r2
 800cb82:	4798      	blx	r3
 800cb84:	4603      	mov	r3, r0
 800cb86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cb8a:	e002      	b.n	800cb92 <tcp_slowtmr+0x556>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cb92:	4b13      	ldr	r3, [pc, #76]	; (800cbe0 <tcp_slowtmr+0x5a4>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d000      	beq.n	800cb9c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800cb9a:	e560      	b.n	800c65e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cb9c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800cba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cba6:	f004 f889 	bl	8010cbc <tcp_output>
  while (pcb != NULL) {
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f47f ad5c 	bne.w	800c66a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cbb6:	4b0b      	ldr	r3, [pc, #44]	; (800cbe4 <tcp_slowtmr+0x5a8>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cbbc:	e067      	b.n	800cc8e <tcp_slowtmr+0x652>
 800cbbe:	bf00      	nop
 800cbc0:	20006d10 	.word	0x20006d10
 800cbc4:	10624dd3 	.word	0x10624dd3
 800cbc8:	000124f8 	.word	0x000124f8
 800cbcc:	20006d0c 	.word	0x20006d0c
 800cbd0:	08019d80 	.word	0x08019d80
 800cbd4:	0801a1b8 	.word	0x0801a1b8
 800cbd8:	08019dc4 	.word	0x08019dc4
 800cbdc:	0801a1e4 	.word	0x0801a1e4
 800cbe0:	20006d08 	.word	0x20006d08
 800cbe4:	20006d1c 	.word	0x20006d1c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbea:	7d1b      	ldrb	r3, [r3, #20]
 800cbec:	2b0a      	cmp	r3, #10
 800cbee:	d006      	beq.n	800cbfe <tcp_slowtmr+0x5c2>
 800cbf0:	4b2b      	ldr	r3, [pc, #172]	; (800cca0 <tcp_slowtmr+0x664>)
 800cbf2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cbf6:	492b      	ldr	r1, [pc, #172]	; (800cca4 <tcp_slowtmr+0x668>)
 800cbf8:	482b      	ldr	r0, [pc, #172]	; (800cca8 <tcp_slowtmr+0x66c>)
 800cbfa:	f00a fcdd 	bl	80175b8 <iprintf>
    pcb_remove = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cc04:	4b29      	ldr	r3, [pc, #164]	; (800ccac <tcp_slowtmr+0x670>)
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0a:	6a1b      	ldr	r3, [r3, #32]
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	2bf0      	cmp	r3, #240	; 0xf0
 800cc10:	d904      	bls.n	800cc1c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cc12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc16:	3301      	adds	r3, #1
 800cc18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cc1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d02f      	beq.n	800cc84 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cc24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc26:	f000 fbe1 	bl	800d3ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d010      	beq.n	800cc52 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cc30:	4b1f      	ldr	r3, [pc, #124]	; (800ccb0 <tcp_slowtmr+0x674>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d106      	bne.n	800cc48 <tcp_slowtmr+0x60c>
 800cc3a:	4b19      	ldr	r3, [pc, #100]	; (800cca0 <tcp_slowtmr+0x664>)
 800cc3c:	f240 52af 	movw	r2, #1455	; 0x5af
 800cc40:	491c      	ldr	r1, [pc, #112]	; (800ccb4 <tcp_slowtmr+0x678>)
 800cc42:	4819      	ldr	r0, [pc, #100]	; (800cca8 <tcp_slowtmr+0x66c>)
 800cc44:	f00a fcb8 	bl	80175b8 <iprintf>
        prev->next = pcb->next;
 800cc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4a:	68da      	ldr	r2, [r3, #12]
 800cc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4e:	60da      	str	r2, [r3, #12]
 800cc50:	e00f      	b.n	800cc72 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cc52:	4b17      	ldr	r3, [pc, #92]	; (800ccb0 <tcp_slowtmr+0x674>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d006      	beq.n	800cc6a <tcp_slowtmr+0x62e>
 800cc5c:	4b10      	ldr	r3, [pc, #64]	; (800cca0 <tcp_slowtmr+0x664>)
 800cc5e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cc62:	4915      	ldr	r1, [pc, #84]	; (800ccb8 <tcp_slowtmr+0x67c>)
 800cc64:	4810      	ldr	r0, [pc, #64]	; (800cca8 <tcp_slowtmr+0x66c>)
 800cc66:	f00a fca7 	bl	80175b8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	4a10      	ldr	r2, [pc, #64]	; (800ccb0 <tcp_slowtmr+0x674>)
 800cc70:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc74:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cc7c:	69f8      	ldr	r0, [r7, #28]
 800cc7e:	f7fe ff49 	bl	800bb14 <tcp_free>
 800cc82:	e004      	b.n	800cc8e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc86:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1a9      	bne.n	800cbe8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	3730      	adds	r7, #48	; 0x30
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	08019d80 	.word	0x08019d80
 800cca4:	0801a210 	.word	0x0801a210
 800cca8:	08019dc4 	.word	0x08019dc4
 800ccac:	20006d10 	.word	0x20006d10
 800ccb0:	20006d1c 	.word	0x20006d1c
 800ccb4:	0801a240 	.word	0x0801a240
 800ccb8:	0801a268 	.word	0x0801a268

0800ccbc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ccc2:	4b2d      	ldr	r3, [pc, #180]	; (800cd78 <tcp_fasttmr+0xbc>)
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	4b2b      	ldr	r3, [pc, #172]	; (800cd78 <tcp_fasttmr+0xbc>)
 800cccc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ccce:	4b2b      	ldr	r3, [pc, #172]	; (800cd7c <tcp_fasttmr+0xc0>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ccd4:	e048      	b.n	800cd68 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	7f9a      	ldrb	r2, [r3, #30]
 800ccda:	4b27      	ldr	r3, [pc, #156]	; (800cd78 <tcp_fasttmr+0xbc>)
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d03f      	beq.n	800cd62 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cce2:	4b25      	ldr	r3, [pc, #148]	; (800cd78 <tcp_fasttmr+0xbc>)
 800cce4:	781a      	ldrb	r2, [r3, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	8b5b      	ldrh	r3, [r3, #26]
 800ccee:	f003 0301 	and.w	r3, r3, #1
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d010      	beq.n	800cd18 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	8b5b      	ldrh	r3, [r3, #26]
 800ccfa:	f043 0302 	orr.w	r3, r3, #2
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f003 ffd9 	bl	8010cbc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	8b5b      	ldrh	r3, [r3, #26]
 800cd0e:	f023 0303 	bic.w	r3, r3, #3
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	8b5b      	ldrh	r3, [r3, #26]
 800cd1c:	f003 0308 	and.w	r3, r3, #8
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d009      	beq.n	800cd38 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	8b5b      	ldrh	r3, [r3, #26]
 800cd28:	f023 0308 	bic.w	r3, r3, #8
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff f882 	bl	800be3c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00a      	beq.n	800cd5c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cd46:	4b0e      	ldr	r3, [pc, #56]	; (800cd80 <tcp_fasttmr+0xc4>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f819 	bl	800cd84 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cd52:	4b0b      	ldr	r3, [pc, #44]	; (800cd80 <tcp_fasttmr+0xc4>)
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d000      	beq.n	800cd5c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cd5a:	e7b8      	b.n	800ccce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	607b      	str	r3, [r7, #4]
 800cd60:	e002      	b.n	800cd68 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1b3      	bne.n	800ccd6 <tcp_fasttmr+0x1a>
    }
  }
}
 800cd6e:	bf00      	nop
 800cd70:	bf00      	nop
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	20000256 	.word	0x20000256
 800cd7c:	20006d0c 	.word	0x20006d0c
 800cd80:	20006d08 	.word	0x20006d08

0800cd84 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cd84:	b590      	push	{r4, r7, lr}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d109      	bne.n	800cda6 <tcp_process_refused_data+0x22>
 800cd92:	4b37      	ldr	r3, [pc, #220]	; (800ce70 <tcp_process_refused_data+0xec>)
 800cd94:	f240 6209 	movw	r2, #1545	; 0x609
 800cd98:	4936      	ldr	r1, [pc, #216]	; (800ce74 <tcp_process_refused_data+0xf0>)
 800cd9a:	4837      	ldr	r0, [pc, #220]	; (800ce78 <tcp_process_refused_data+0xf4>)
 800cd9c:	f00a fc0c 	bl	80175b8 <iprintf>
 800cda0:	f06f 030f 	mvn.w	r3, #15
 800cda4:	e060      	b.n	800ce68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdaa:	7b5b      	ldrb	r3, [r3, #13]
 800cdac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdb2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00b      	beq.n	800cddc <tcp_process_refused_data+0x58>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6918      	ldr	r0, [r3, #16]
 800cdce:	2300      	movs	r3, #0
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	6879      	ldr	r1, [r7, #4]
 800cdd4:	47a0      	blx	r4
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	73fb      	strb	r3, [r7, #15]
 800cdda:	e007      	b.n	800cdec <tcp_process_refused_data+0x68>
 800cddc:	2300      	movs	r3, #0
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	6879      	ldr	r1, [r7, #4]
 800cde2:	2000      	movs	r0, #0
 800cde4:	f000 f8a4 	bl	800cf30 <tcp_recv_null>
 800cde8:	4603      	mov	r3, r0
 800cdea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cdec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d12a      	bne.n	800ce4a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cdf4:	7bbb      	ldrb	r3, [r7, #14]
 800cdf6:	f003 0320 	and.w	r3, r3, #32
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d033      	beq.n	800ce66 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce06:	d005      	beq.n	800ce14 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00b      	beq.n	800ce36 <tcp_process_refused_data+0xb2>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6918      	ldr	r0, [r3, #16]
 800ce28:	2300      	movs	r3, #0
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	6879      	ldr	r1, [r7, #4]
 800ce2e:	47a0      	blx	r4
 800ce30:	4603      	mov	r3, r0
 800ce32:	73fb      	strb	r3, [r7, #15]
 800ce34:	e001      	b.n	800ce3a <tcp_process_refused_data+0xb6>
 800ce36:	2300      	movs	r3, #0
 800ce38:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ce3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce3e:	f113 0f0d 	cmn.w	r3, #13
 800ce42:	d110      	bne.n	800ce66 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ce44:	f06f 030c 	mvn.w	r3, #12
 800ce48:	e00e      	b.n	800ce68 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ce4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce4e:	f113 0f0d 	cmn.w	r3, #13
 800ce52:	d102      	bne.n	800ce5a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ce54:	f06f 030c 	mvn.w	r3, #12
 800ce58:	e006      	b.n	800ce68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ce60:	f06f 0304 	mvn.w	r3, #4
 800ce64:	e000      	b.n	800ce68 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3714      	adds	r7, #20
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd90      	pop	{r4, r7, pc}
 800ce70:	08019d80 	.word	0x08019d80
 800ce74:	0801a290 	.word	0x0801a290
 800ce78:	08019dc4 	.word	0x08019dc4

0800ce7c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ce84:	e007      	b.n	800ce96 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f80a 	bl	800cea6 <tcp_seg_free>
    seg = next;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1f4      	bne.n	800ce86 <tcp_segs_free+0xa>
  }
}
 800ce9c:	bf00      	nop
 800ce9e:	bf00      	nop
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b082      	sub	sp, #8
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d00c      	beq.n	800cece <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d004      	beq.n	800cec6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7fe fb13 	bl	800b4ec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cec6:	6879      	ldr	r1, [r7, #4]
 800cec8:	2003      	movs	r0, #3
 800ceca:	f7fd fcf5 	bl	800a8b8 <memp_free>
  }
}
 800cece:	bf00      	nop
 800ced0:	3708      	adds	r7, #8
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
	...

0800ced8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d106      	bne.n	800cef4 <tcp_seg_copy+0x1c>
 800cee6:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <tcp_seg_copy+0x4c>)
 800cee8:	f240 6282 	movw	r2, #1666	; 0x682
 800ceec:	490e      	ldr	r1, [pc, #56]	; (800cf28 <tcp_seg_copy+0x50>)
 800ceee:	480f      	ldr	r0, [pc, #60]	; (800cf2c <tcp_seg_copy+0x54>)
 800cef0:	f00a fb62 	bl	80175b8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cef4:	2003      	movs	r0, #3
 800cef6:	f7fd fc93 	bl	800a820 <memp_malloc>
 800cefa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d101      	bne.n	800cf06 <tcp_seg_copy+0x2e>
    return NULL;
 800cf02:	2300      	movs	r3, #0
 800cf04:	e00a      	b.n	800cf1c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cf06:	2210      	movs	r2, #16
 800cf08:	6879      	ldr	r1, [r7, #4]
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f00a fb24 	bl	8017558 <memcpy>
  pbuf_ref(cseg->p);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fe fb89 	bl	800b62c <pbuf_ref>
  return cseg;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	08019d80 	.word	0x08019d80
 800cf28:	0801a2d4 	.word	0x0801a2d4
 800cf2c:	08019dc4 	.word	0x08019dc4

0800cf30 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
 800cf3c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d109      	bne.n	800cf58 <tcp_recv_null+0x28>
 800cf44:	4b12      	ldr	r3, [pc, #72]	; (800cf90 <tcp_recv_null+0x60>)
 800cf46:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cf4a:	4912      	ldr	r1, [pc, #72]	; (800cf94 <tcp_recv_null+0x64>)
 800cf4c:	4812      	ldr	r0, [pc, #72]	; (800cf98 <tcp_recv_null+0x68>)
 800cf4e:	f00a fb33 	bl	80175b8 <iprintf>
 800cf52:	f06f 030f 	mvn.w	r3, #15
 800cf56:	e016      	b.n	800cf86 <tcp_recv_null+0x56>

  if (p != NULL) {
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d009      	beq.n	800cf72 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	891b      	ldrh	r3, [r3, #8]
 800cf62:	4619      	mov	r1, r3
 800cf64:	68b8      	ldr	r0, [r7, #8]
 800cf66:	f7ff f9bb 	bl	800c2e0 <tcp_recved>
    pbuf_free(p);
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f7fe fabe 	bl	800b4ec <pbuf_free>
 800cf70:	e008      	b.n	800cf84 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cf72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d104      	bne.n	800cf84 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cf7a:	68b8      	ldr	r0, [r7, #8]
 800cf7c:	f7fe ffc8 	bl	800bf10 <tcp_close>
 800cf80:	4603      	mov	r3, r0
 800cf82:	e000      	b.n	800cf86 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	08019d80 	.word	0x08019d80
 800cf94:	0801a2f0 	.word	0x0801a2f0
 800cf98:	08019dc4 	.word	0x08019dc4

0800cf9c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b086      	sub	sp, #24
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cfa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	db01      	blt.n	800cfb2 <tcp_kill_prio+0x16>
 800cfae:	79fb      	ldrb	r3, [r7, #7]
 800cfb0:	e000      	b.n	800cfb4 <tcp_kill_prio+0x18>
 800cfb2:	237f      	movs	r3, #127	; 0x7f
 800cfb4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cfb6:	7afb      	ldrb	r3, [r7, #11]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d034      	beq.n	800d026 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cfbc:	7afb      	ldrb	r3, [r7, #11]
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfca:	4b19      	ldr	r3, [pc, #100]	; (800d030 <tcp_kill_prio+0x94>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	617b      	str	r3, [r7, #20]
 800cfd0:	e01f      	b.n	800d012 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	7d5b      	ldrb	r3, [r3, #21]
 800cfd6:	7afa      	ldrb	r2, [r7, #11]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d80c      	bhi.n	800cff6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cfe0:	7afa      	ldrb	r2, [r7, #11]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d112      	bne.n	800d00c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cfe6:	4b13      	ldr	r3, [pc, #76]	; (800d034 <tcp_kill_prio+0x98>)
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	6a1b      	ldr	r3, [r3, #32]
 800cfee:	1ad3      	subs	r3, r2, r3
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d80a      	bhi.n	800d00c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cff6:	4b0f      	ldr	r3, [pc, #60]	; (800d034 <tcp_kill_prio+0x98>)
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	6a1b      	ldr	r3, [r3, #32]
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	7d5b      	ldrb	r3, [r3, #21]
 800d00a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	617b      	str	r3, [r7, #20]
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d1dc      	bne.n	800cfd2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d004      	beq.n	800d028 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d01e:	6938      	ldr	r0, [r7, #16]
 800d020:	f7ff f860 	bl	800c0e4 <tcp_abort>
 800d024:	e000      	b.n	800d028 <tcp_kill_prio+0x8c>
    return;
 800d026:	bf00      	nop
  }
}
 800d028:	3718      	adds	r7, #24
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	20006d0c 	.word	0x20006d0c
 800d034:	20006d10 	.word	0x20006d10

0800d038 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	4603      	mov	r3, r0
 800d040:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d042:	79fb      	ldrb	r3, [r7, #7]
 800d044:	2b08      	cmp	r3, #8
 800d046:	d009      	beq.n	800d05c <tcp_kill_state+0x24>
 800d048:	79fb      	ldrb	r3, [r7, #7]
 800d04a:	2b09      	cmp	r3, #9
 800d04c:	d006      	beq.n	800d05c <tcp_kill_state+0x24>
 800d04e:	4b1a      	ldr	r3, [pc, #104]	; (800d0b8 <tcp_kill_state+0x80>)
 800d050:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d054:	4919      	ldr	r1, [pc, #100]	; (800d0bc <tcp_kill_state+0x84>)
 800d056:	481a      	ldr	r0, [pc, #104]	; (800d0c0 <tcp_kill_state+0x88>)
 800d058:	f00a faae 	bl	80175b8 <iprintf>

  inactivity = 0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d060:	2300      	movs	r3, #0
 800d062:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d064:	4b17      	ldr	r3, [pc, #92]	; (800d0c4 <tcp_kill_state+0x8c>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	617b      	str	r3, [r7, #20]
 800d06a:	e017      	b.n	800d09c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	7d1b      	ldrb	r3, [r3, #20]
 800d070:	79fa      	ldrb	r2, [r7, #7]
 800d072:	429a      	cmp	r2, r3
 800d074:	d10f      	bne.n	800d096 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d076:	4b14      	ldr	r3, [pc, #80]	; (800d0c8 <tcp_kill_state+0x90>)
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	6a1b      	ldr	r3, [r3, #32]
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	429a      	cmp	r2, r3
 800d084:	d807      	bhi.n	800d096 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d086:	4b10      	ldr	r3, [pc, #64]	; (800d0c8 <tcp_kill_state+0x90>)
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	6a1b      	ldr	r3, [r3, #32]
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	617b      	str	r3, [r7, #20]
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1e4      	bne.n	800d06c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d003      	beq.n	800d0b0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d0a8:	2100      	movs	r1, #0
 800d0aa:	6938      	ldr	r0, [r7, #16]
 800d0ac:	f7fe ff5c 	bl	800bf68 <tcp_abandon>
  }
}
 800d0b0:	bf00      	nop
 800d0b2:	3718      	adds	r7, #24
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	08019d80 	.word	0x08019d80
 800d0bc:	0801a30c 	.word	0x0801a30c
 800d0c0:	08019dc4 	.word	0x08019dc4
 800d0c4:	20006d0c 	.word	0x20006d0c
 800d0c8:	20006d10 	.word	0x20006d10

0800d0cc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0da:	4b12      	ldr	r3, [pc, #72]	; (800d124 <tcp_kill_timewait+0x58>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	60fb      	str	r3, [r7, #12]
 800d0e0:	e012      	b.n	800d108 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d0e2:	4b11      	ldr	r3, [pc, #68]	; (800d128 <tcp_kill_timewait+0x5c>)
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6a1b      	ldr	r3, [r3, #32]
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d807      	bhi.n	800d102 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d0f2:	4b0d      	ldr	r3, [pc, #52]	; (800d128 <tcp_kill_timewait+0x5c>)
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	6a1b      	ldr	r3, [r3, #32]
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	68db      	ldr	r3, [r3, #12]
 800d106:	60fb      	str	r3, [r7, #12]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d1e9      	bne.n	800d0e2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d114:	68b8      	ldr	r0, [r7, #8]
 800d116:	f7fe ffe5 	bl	800c0e4 <tcp_abort>
  }
}
 800d11a:	bf00      	nop
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	20006d1c 	.word	0x20006d1c
 800d128:	20006d10 	.word	0x20006d10

0800d12c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d132:	4b10      	ldr	r3, [pc, #64]	; (800d174 <tcp_handle_closepend+0x48>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d138:	e014      	b.n	800d164 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	8b5b      	ldrh	r3, [r3, #26]
 800d144:	f003 0308 	and.w	r3, r3, #8
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d009      	beq.n	800d160 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	8b5b      	ldrh	r3, [r3, #26]
 800d150:	f023 0308 	bic.w	r3, r3, #8
 800d154:	b29a      	uxth	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7fe fe6e 	bl	800be3c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1e7      	bne.n	800d13a <tcp_handle_closepend+0xe>
  }
}
 800d16a:	bf00      	nop
 800d16c:	bf00      	nop
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	20006d0c 	.word	0x20006d0c

0800d178 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	4603      	mov	r3, r0
 800d180:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d182:	2001      	movs	r0, #1
 800d184:	f7fd fb4c 	bl	800a820 <memp_malloc>
 800d188:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d126      	bne.n	800d1de <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d190:	f7ff ffcc 	bl	800d12c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d194:	f7ff ff9a 	bl	800d0cc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d198:	2001      	movs	r0, #1
 800d19a:	f7fd fb41 	bl	800a820 <memp_malloc>
 800d19e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d11b      	bne.n	800d1de <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d1a6:	2009      	movs	r0, #9
 800d1a8:	f7ff ff46 	bl	800d038 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1ac:	2001      	movs	r0, #1
 800d1ae:	f7fd fb37 	bl	800a820 <memp_malloc>
 800d1b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d111      	bne.n	800d1de <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d1ba:	2008      	movs	r0, #8
 800d1bc:	f7ff ff3c 	bl	800d038 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1c0:	2001      	movs	r0, #1
 800d1c2:	f7fd fb2d 	bl	800a820 <memp_malloc>
 800d1c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d107      	bne.n	800d1de <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d1ce:	79fb      	ldrb	r3, [r7, #7]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7ff fee3 	bl	800cf9c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1d6:	2001      	movs	r0, #1
 800d1d8:	f7fd fb22 	bl	800a820 <memp_malloc>
 800d1dc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d03f      	beq.n	800d264 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d1e4:	229c      	movs	r2, #156	; 0x9c
 800d1e6:	2100      	movs	r1, #0
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f00a f9dd 	bl	80175a8 <memset>
    pcb->prio = prio;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	79fa      	ldrb	r2, [r7, #7]
 800d1f2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d1fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d204:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	22ff      	movs	r2, #255	; 0xff
 800d212:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d21a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2206      	movs	r2, #6
 800d220:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2206      	movs	r2, #6
 800d228:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d230:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2201      	movs	r2, #1
 800d236:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d23a:	4b0d      	ldr	r3, [pc, #52]	; (800d270 <tcp_alloc+0xf8>)
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d242:	4b0c      	ldr	r3, [pc, #48]	; (800d274 <tcp_alloc+0xfc>)
 800d244:	781a      	ldrb	r2, [r3, #0]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d250:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	4a08      	ldr	r2, [pc, #32]	; (800d278 <tcp_alloc+0x100>)
 800d258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	4a07      	ldr	r2, [pc, #28]	; (800d27c <tcp_alloc+0x104>)
 800d260:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d264:	68fb      	ldr	r3, [r7, #12]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20006d10 	.word	0x20006d10
 800d274:	20000256 	.word	0x20000256
 800d278:	0800cf31 	.word	0x0800cf31
 800d27c:	006ddd00 	.word	0x006ddd00

0800d280 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	4603      	mov	r3, r0
 800d288:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d28a:	2040      	movs	r0, #64	; 0x40
 800d28c:	f7ff ff74 	bl	800d178 <tcp_alloc>
 800d290:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d292:	68fb      	ldr	r3, [r7, #12]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3710      	adds	r7, #16
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	683a      	ldr	r2, [r7, #0]
 800d2b0:	611a      	str	r2, [r3, #16]
  }
}
 800d2b2:	bf00      	nop
 800d2b4:	370c      	adds	r7, #12
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr
	...

0800d2c0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00e      	beq.n	800d2ee <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	7d1b      	ldrb	r3, [r3, #20]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d106      	bne.n	800d2e6 <tcp_recv+0x26>
 800d2d8:	4b07      	ldr	r3, [pc, #28]	; (800d2f8 <tcp_recv+0x38>)
 800d2da:	f240 72df 	movw	r2, #2015	; 0x7df
 800d2de:	4907      	ldr	r1, [pc, #28]	; (800d2fc <tcp_recv+0x3c>)
 800d2e0:	4807      	ldr	r0, [pc, #28]	; (800d300 <tcp_recv+0x40>)
 800d2e2:	f00a f969 	bl	80175b8 <iprintf>
    pcb->recv = recv;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	683a      	ldr	r2, [r7, #0]
 800d2ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d2ee:	bf00      	nop
 800d2f0:	3708      	adds	r7, #8
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	08019d80 	.word	0x08019d80
 800d2fc:	0801a31c 	.word	0x0801a31c
 800d300:	08019dc4 	.word	0x08019dc4

0800d304 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00e      	beq.n	800d332 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	7d1b      	ldrb	r3, [r3, #20]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d106      	bne.n	800d32a <tcp_sent+0x26>
 800d31c:	4b07      	ldr	r3, [pc, #28]	; (800d33c <tcp_sent+0x38>)
 800d31e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d322:	4907      	ldr	r1, [pc, #28]	; (800d340 <tcp_sent+0x3c>)
 800d324:	4807      	ldr	r0, [pc, #28]	; (800d344 <tcp_sent+0x40>)
 800d326:	f00a f947 	bl	80175b8 <iprintf>
    pcb->sent = sent;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	683a      	ldr	r2, [r7, #0]
 800d32e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d332:	bf00      	nop
 800d334:	3708      	adds	r7, #8
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	08019d80 	.word	0x08019d80
 800d340:	0801a344 	.word	0x0801a344
 800d344:	08019dc4 	.word	0x08019dc4

0800d348 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00e      	beq.n	800d376 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	7d1b      	ldrb	r3, [r3, #20]
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d106      	bne.n	800d36e <tcp_err+0x26>
 800d360:	4b07      	ldr	r3, [pc, #28]	; (800d380 <tcp_err+0x38>)
 800d362:	f640 020d 	movw	r2, #2061	; 0x80d
 800d366:	4907      	ldr	r1, [pc, #28]	; (800d384 <tcp_err+0x3c>)
 800d368:	4807      	ldr	r0, [pc, #28]	; (800d388 <tcp_err+0x40>)
 800d36a:	f00a f925 	bl	80175b8 <iprintf>
    pcb->errf = err;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	683a      	ldr	r2, [r7, #0]
 800d372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d376:	bf00      	nop
 800d378:	3708      	adds	r7, #8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	08019d80 	.word	0x08019d80
 800d384:	0801a36c 	.word	0x0801a36c
 800d388:	08019dc4 	.word	0x08019dc4

0800d38c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	4613      	mov	r3, r2
 800d398:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d107      	bne.n	800d3b0 <tcp_poll+0x24>
 800d3a0:	4b0e      	ldr	r3, [pc, #56]	; (800d3dc <tcp_poll+0x50>)
 800d3a2:	f640 023d 	movw	r2, #2109	; 0x83d
 800d3a6:	490e      	ldr	r1, [pc, #56]	; (800d3e0 <tcp_poll+0x54>)
 800d3a8:	480e      	ldr	r0, [pc, #56]	; (800d3e4 <tcp_poll+0x58>)
 800d3aa:	f00a f905 	bl	80175b8 <iprintf>
 800d3ae:	e011      	b.n	800d3d4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	7d1b      	ldrb	r3, [r3, #20]
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d106      	bne.n	800d3c6 <tcp_poll+0x3a>
 800d3b8:	4b08      	ldr	r3, [pc, #32]	; (800d3dc <tcp_poll+0x50>)
 800d3ba:	f640 023e 	movw	r2, #2110	; 0x83e
 800d3be:	490a      	ldr	r1, [pc, #40]	; (800d3e8 <tcp_poll+0x5c>)
 800d3c0:	4808      	ldr	r0, [pc, #32]	; (800d3e4 <tcp_poll+0x58>)
 800d3c2:	f00a f8f9 	bl	80175b8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	68ba      	ldr	r2, [r7, #8]
 800d3ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	79fa      	ldrb	r2, [r7, #7]
 800d3d2:	775a      	strb	r2, [r3, #29]
}
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	08019d80 	.word	0x08019d80
 800d3e0:	0801a394 	.word	0x0801a394
 800d3e4:	08019dc4 	.word	0x08019dc4
 800d3e8:	0801a3ac 	.word	0x0801a3ac

0800d3ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d107      	bne.n	800d40a <tcp_pcb_purge+0x1e>
 800d3fa:	4b21      	ldr	r3, [pc, #132]	; (800d480 <tcp_pcb_purge+0x94>)
 800d3fc:	f640 0251 	movw	r2, #2129	; 0x851
 800d400:	4920      	ldr	r1, [pc, #128]	; (800d484 <tcp_pcb_purge+0x98>)
 800d402:	4821      	ldr	r0, [pc, #132]	; (800d488 <tcp_pcb_purge+0x9c>)
 800d404:	f00a f8d8 	bl	80175b8 <iprintf>
 800d408:	e037      	b.n	800d47a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	7d1b      	ldrb	r3, [r3, #20]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d033      	beq.n	800d47a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d416:	2b0a      	cmp	r3, #10
 800d418:	d02f      	beq.n	800d47a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d02b      	beq.n	800d47a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d426:	2b00      	cmp	r3, #0
 800d428:	d007      	beq.n	800d43a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fe f85c 	bl	800b4ec <pbuf_free>
      pcb->refused_data = NULL;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d002      	beq.n	800d448 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 f986 	bl	800d754 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d44e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d454:	4618      	mov	r0, r3
 800d456:	f7ff fd11 	bl	800ce7c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d45e:	4618      	mov	r0, r3
 800d460:	f7ff fd0c 	bl	800ce7c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	66da      	str	r2, [r3, #108]	; 0x6c
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2200      	movs	r2, #0
 800d476:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	08019d80 	.word	0x08019d80
 800d484:	0801a3cc 	.word	0x0801a3cc
 800d488:	08019dc4 	.word	0x08019dc4

0800d48c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d106      	bne.n	800d4aa <tcp_pcb_remove+0x1e>
 800d49c:	4b3e      	ldr	r3, [pc, #248]	; (800d598 <tcp_pcb_remove+0x10c>)
 800d49e:	f640 0283 	movw	r2, #2179	; 0x883
 800d4a2:	493e      	ldr	r1, [pc, #248]	; (800d59c <tcp_pcb_remove+0x110>)
 800d4a4:	483e      	ldr	r0, [pc, #248]	; (800d5a0 <tcp_pcb_remove+0x114>)
 800d4a6:	f00a f887 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d106      	bne.n	800d4be <tcp_pcb_remove+0x32>
 800d4b0:	4b39      	ldr	r3, [pc, #228]	; (800d598 <tcp_pcb_remove+0x10c>)
 800d4b2:	f640 0284 	movw	r2, #2180	; 0x884
 800d4b6:	493b      	ldr	r1, [pc, #236]	; (800d5a4 <tcp_pcb_remove+0x118>)
 800d4b8:	4839      	ldr	r0, [pc, #228]	; (800d5a0 <tcp_pcb_remove+0x114>)
 800d4ba:	f00a f87d 	bl	80175b8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d105      	bne.n	800d4d4 <tcp_pcb_remove+0x48>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	68da      	ldr	r2, [r3, #12]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	601a      	str	r2, [r3, #0]
 800d4d2:	e013      	b.n	800d4fc <tcp_pcb_remove+0x70>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	60fb      	str	r3, [r7, #12]
 800d4da:	e00c      	b.n	800d4f6 <tcp_pcb_remove+0x6a>
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	683a      	ldr	r2, [r7, #0]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d104      	bne.n	800d4f0 <tcp_pcb_remove+0x64>
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	68da      	ldr	r2, [r3, #12]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	60da      	str	r2, [r3, #12]
 800d4ee:	e005      	b.n	800d4fc <tcp_pcb_remove+0x70>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	60fb      	str	r3, [r7, #12]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1ef      	bne.n	800d4dc <tcp_pcb_remove+0x50>
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	2200      	movs	r2, #0
 800d500:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d502:	6838      	ldr	r0, [r7, #0]
 800d504:	f7ff ff72 	bl	800d3ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	7d1b      	ldrb	r3, [r3, #20]
 800d50c:	2b0a      	cmp	r3, #10
 800d50e:	d013      	beq.n	800d538 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d514:	2b01      	cmp	r3, #1
 800d516:	d00f      	beq.n	800d538 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	8b5b      	ldrh	r3, [r3, #26]
 800d51c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d520:	2b00      	cmp	r3, #0
 800d522:	d009      	beq.n	800d538 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	8b5b      	ldrh	r3, [r3, #26]
 800d528:	f043 0302 	orr.w	r3, r3, #2
 800d52c:	b29a      	uxth	r2, r3
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d532:	6838      	ldr	r0, [r7, #0]
 800d534:	f003 fbc2 	bl	8010cbc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	7d1b      	ldrb	r3, [r3, #20]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d020      	beq.n	800d582 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d544:	2b00      	cmp	r3, #0
 800d546:	d006      	beq.n	800d556 <tcp_pcb_remove+0xca>
 800d548:	4b13      	ldr	r3, [pc, #76]	; (800d598 <tcp_pcb_remove+0x10c>)
 800d54a:	f640 0293 	movw	r2, #2195	; 0x893
 800d54e:	4916      	ldr	r1, [pc, #88]	; (800d5a8 <tcp_pcb_remove+0x11c>)
 800d550:	4813      	ldr	r0, [pc, #76]	; (800d5a0 <tcp_pcb_remove+0x114>)
 800d552:	f00a f831 	bl	80175b8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d006      	beq.n	800d56c <tcp_pcb_remove+0xe0>
 800d55e:	4b0e      	ldr	r3, [pc, #56]	; (800d598 <tcp_pcb_remove+0x10c>)
 800d560:	f640 0294 	movw	r2, #2196	; 0x894
 800d564:	4911      	ldr	r1, [pc, #68]	; (800d5ac <tcp_pcb_remove+0x120>)
 800d566:	480e      	ldr	r0, [pc, #56]	; (800d5a0 <tcp_pcb_remove+0x114>)
 800d568:	f00a f826 	bl	80175b8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d570:	2b00      	cmp	r3, #0
 800d572:	d006      	beq.n	800d582 <tcp_pcb_remove+0xf6>
 800d574:	4b08      	ldr	r3, [pc, #32]	; (800d598 <tcp_pcb_remove+0x10c>)
 800d576:	f640 0296 	movw	r2, #2198	; 0x896
 800d57a:	490d      	ldr	r1, [pc, #52]	; (800d5b0 <tcp_pcb_remove+0x124>)
 800d57c:	4808      	ldr	r0, [pc, #32]	; (800d5a0 <tcp_pcb_remove+0x114>)
 800d57e:	f00a f81b 	bl	80175b8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2200      	movs	r2, #0
 800d586:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	2200      	movs	r2, #0
 800d58c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d58e:	bf00      	nop
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	08019d80 	.word	0x08019d80
 800d59c:	0801a3e8 	.word	0x0801a3e8
 800d5a0:	08019dc4 	.word	0x08019dc4
 800d5a4:	0801a404 	.word	0x0801a404
 800d5a8:	0801a424 	.word	0x0801a424
 800d5ac:	0801a43c 	.word	0x0801a43c
 800d5b0:	0801a458 	.word	0x0801a458

0800d5b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d106      	bne.n	800d5d0 <tcp_next_iss+0x1c>
 800d5c2:	4b0a      	ldr	r3, [pc, #40]	; (800d5ec <tcp_next_iss+0x38>)
 800d5c4:	f640 02af 	movw	r2, #2223	; 0x8af
 800d5c8:	4909      	ldr	r1, [pc, #36]	; (800d5f0 <tcp_next_iss+0x3c>)
 800d5ca:	480a      	ldr	r0, [pc, #40]	; (800d5f4 <tcp_next_iss+0x40>)
 800d5cc:	f009 fff4 	bl	80175b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d5d0:	4b09      	ldr	r3, [pc, #36]	; (800d5f8 <tcp_next_iss+0x44>)
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	4b09      	ldr	r3, [pc, #36]	; (800d5fc <tcp_next_iss+0x48>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4413      	add	r3, r2
 800d5da:	4a07      	ldr	r2, [pc, #28]	; (800d5f8 <tcp_next_iss+0x44>)
 800d5dc:	6013      	str	r3, [r2, #0]
  return iss;
 800d5de:	4b06      	ldr	r3, [pc, #24]	; (800d5f8 <tcp_next_iss+0x44>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	08019d80 	.word	0x08019d80
 800d5f0:	0801a470 	.word	0x0801a470
 800d5f4:	08019dc4 	.word	0x08019dc4
 800d5f8:	20000120 	.word	0x20000120
 800d5fc:	20006d10 	.word	0x20006d10

0800d600 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
 800d606:	4603      	mov	r3, r0
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	607a      	str	r2, [r7, #4]
 800d60c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d106      	bne.n	800d622 <tcp_eff_send_mss_netif+0x22>
 800d614:	4b14      	ldr	r3, [pc, #80]	; (800d668 <tcp_eff_send_mss_netif+0x68>)
 800d616:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d61a:	4914      	ldr	r1, [pc, #80]	; (800d66c <tcp_eff_send_mss_netif+0x6c>)
 800d61c:	4814      	ldr	r0, [pc, #80]	; (800d670 <tcp_eff_send_mss_netif+0x70>)
 800d61e:	f009 ffcb 	bl	80175b8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d101      	bne.n	800d62c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d628:	89fb      	ldrh	r3, [r7, #14]
 800d62a:	e019      	b.n	800d660 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d630:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d632:	8afb      	ldrh	r3, [r7, #22]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d012      	beq.n	800d65e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d638:	2328      	movs	r3, #40	; 0x28
 800d63a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d63c:	8afa      	ldrh	r2, [r7, #22]
 800d63e:	8abb      	ldrh	r3, [r7, #20]
 800d640:	429a      	cmp	r2, r3
 800d642:	d904      	bls.n	800d64e <tcp_eff_send_mss_netif+0x4e>
 800d644:	8afa      	ldrh	r2, [r7, #22]
 800d646:	8abb      	ldrh	r3, [r7, #20]
 800d648:	1ad3      	subs	r3, r2, r3
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	e000      	b.n	800d650 <tcp_eff_send_mss_netif+0x50>
 800d64e:	2300      	movs	r3, #0
 800d650:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d652:	8a7a      	ldrh	r2, [r7, #18]
 800d654:	89fb      	ldrh	r3, [r7, #14]
 800d656:	4293      	cmp	r3, r2
 800d658:	bf28      	it	cs
 800d65a:	4613      	movcs	r3, r2
 800d65c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d65e:	89fb      	ldrh	r3, [r7, #14]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3718      	adds	r7, #24
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	08019d80 	.word	0x08019d80
 800d66c:	0801a48c 	.word	0x0801a48c
 800d670:	08019dc4 	.word	0x08019dc4

0800d674 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d119      	bne.n	800d6bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d688:	4b10      	ldr	r3, [pc, #64]	; (800d6cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d68a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d68e:	4910      	ldr	r1, [pc, #64]	; (800d6d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d690:	4810      	ldr	r0, [pc, #64]	; (800d6d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d692:	f009 ff91 	bl	80175b8 <iprintf>

  while (pcb != NULL) {
 800d696:	e011      	b.n	800d6bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d108      	bne.n	800d6b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d6aa:	68f8      	ldr	r0, [r7, #12]
 800d6ac:	f7fe fd1a 	bl	800c0e4 <tcp_abort>
      pcb = next;
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	60fb      	str	r3, [r7, #12]
 800d6b4:	e002      	b.n	800d6bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1ea      	bne.n	800d698 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d6c2:	bf00      	nop
 800d6c4:	bf00      	nop
 800d6c6:	3710      	adds	r7, #16
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	08019d80 	.word	0x08019d80
 800d6d0:	0801a4b4 	.word	0x0801a4b4
 800d6d4:	08019dc4 	.word	0x08019dc4

0800d6d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d02a      	beq.n	800d73e <tcp_netif_ip_addr_changed+0x66>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d026      	beq.n	800d73e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d6f0:	4b15      	ldr	r3, [pc, #84]	; (800d748 <tcp_netif_ip_addr_changed+0x70>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7ff ffbc 	bl	800d674 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d6fc:	4b13      	ldr	r3, [pc, #76]	; (800d74c <tcp_netif_ip_addr_changed+0x74>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4619      	mov	r1, r3
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7ff ffb6 	bl	800d674 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d017      	beq.n	800d73e <tcp_netif_ip_addr_changed+0x66>
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d013      	beq.n	800d73e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d716:	4b0e      	ldr	r3, [pc, #56]	; (800d750 <tcp_netif_ip_addr_changed+0x78>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	60fb      	str	r3, [r7, #12]
 800d71c:	e00c      	b.n	800d738 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	429a      	cmp	r2, r3
 800d728:	d103      	bne.n	800d732 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	60fb      	str	r3, [r7, #12]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1ef      	bne.n	800d71e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d73e:	bf00      	nop
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	20006d0c 	.word	0x20006d0c
 800d74c:	20006d18 	.word	0x20006d18
 800d750:	20006d14 	.word	0x20006d14

0800d754 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d760:	2b00      	cmp	r3, #0
 800d762:	d007      	beq.n	800d774 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d768:	4618      	mov	r0, r3
 800d76a:	f7ff fb87 	bl	800ce7c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d774:	bf00      	nop
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d77c:	b590      	push	{r4, r7, lr}
 800d77e:	b08d      	sub	sp, #52	; 0x34
 800d780:	af04      	add	r7, sp, #16
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d105      	bne.n	800d798 <tcp_input+0x1c>
 800d78c:	4b9b      	ldr	r3, [pc, #620]	; (800d9fc <tcp_input+0x280>)
 800d78e:	2283      	movs	r2, #131	; 0x83
 800d790:	499b      	ldr	r1, [pc, #620]	; (800da00 <tcp_input+0x284>)
 800d792:	489c      	ldr	r0, [pc, #624]	; (800da04 <tcp_input+0x288>)
 800d794:	f009 ff10 	bl	80175b8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	4a9a      	ldr	r2, [pc, #616]	; (800da08 <tcp_input+0x28c>)
 800d79e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	895b      	ldrh	r3, [r3, #10]
 800d7a4:	2b13      	cmp	r3, #19
 800d7a6:	f240 83c4 	bls.w	800df32 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d7aa:	4b98      	ldr	r3, [pc, #608]	; (800da0c <tcp_input+0x290>)
 800d7ac:	695b      	ldr	r3, [r3, #20]
 800d7ae:	4a97      	ldr	r2, [pc, #604]	; (800da0c <tcp_input+0x290>)
 800d7b0:	6812      	ldr	r2, [r2, #0]
 800d7b2:	4611      	mov	r1, r2
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f008 fa1f 	bl	8015bf8 <ip4_addr_isbroadcast_u32>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	f040 83ba 	bne.w	800df36 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d7c2:	4b92      	ldr	r3, [pc, #584]	; (800da0c <tcp_input+0x290>)
 800d7c4:	695b      	ldr	r3, [r3, #20]
 800d7c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d7ca:	2be0      	cmp	r3, #224	; 0xe0
 800d7cc:	f000 83b3 	beq.w	800df36 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d7d0:	4b8d      	ldr	r3, [pc, #564]	; (800da08 <tcp_input+0x28c>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	899b      	ldrh	r3, [r3, #12]
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fc fba3 	bl	8009f24 <lwip_htons>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	0b1b      	lsrs	r3, r3, #12
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d7ea:	7cbb      	ldrb	r3, [r7, #18]
 800d7ec:	2b13      	cmp	r3, #19
 800d7ee:	f240 83a4 	bls.w	800df3a <tcp_input+0x7be>
 800d7f2:	7cbb      	ldrb	r3, [r7, #18]
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	891b      	ldrh	r3, [r3, #8]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	f200 839d 	bhi.w	800df3a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d800:	7cbb      	ldrb	r3, [r7, #18]
 800d802:	b29b      	uxth	r3, r3
 800d804:	3b14      	subs	r3, #20
 800d806:	b29a      	uxth	r2, r3
 800d808:	4b81      	ldr	r3, [pc, #516]	; (800da10 <tcp_input+0x294>)
 800d80a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d80c:	4b81      	ldr	r3, [pc, #516]	; (800da14 <tcp_input+0x298>)
 800d80e:	2200      	movs	r2, #0
 800d810:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	895a      	ldrh	r2, [r3, #10]
 800d816:	7cbb      	ldrb	r3, [r7, #18]
 800d818:	b29b      	uxth	r3, r3
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d309      	bcc.n	800d832 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d81e:	4b7c      	ldr	r3, [pc, #496]	; (800da10 <tcp_input+0x294>)
 800d820:	881a      	ldrh	r2, [r3, #0]
 800d822:	4b7d      	ldr	r3, [pc, #500]	; (800da18 <tcp_input+0x29c>)
 800d824:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d826:	7cbb      	ldrb	r3, [r7, #18]
 800d828:	4619      	mov	r1, r3
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7fd fdd8 	bl	800b3e0 <pbuf_remove_header>
 800d830:	e04e      	b.n	800d8d0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d105      	bne.n	800d846 <tcp_input+0xca>
 800d83a:	4b70      	ldr	r3, [pc, #448]	; (800d9fc <tcp_input+0x280>)
 800d83c:	22c2      	movs	r2, #194	; 0xc2
 800d83e:	4977      	ldr	r1, [pc, #476]	; (800da1c <tcp_input+0x2a0>)
 800d840:	4870      	ldr	r0, [pc, #448]	; (800da04 <tcp_input+0x288>)
 800d842:	f009 feb9 	bl	80175b8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d846:	2114      	movs	r1, #20
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7fd fdc9 	bl	800b3e0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	895a      	ldrh	r2, [r3, #10]
 800d852:	4b71      	ldr	r3, [pc, #452]	; (800da18 <tcp_input+0x29c>)
 800d854:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d856:	4b6e      	ldr	r3, [pc, #440]	; (800da10 <tcp_input+0x294>)
 800d858:	881a      	ldrh	r2, [r3, #0]
 800d85a:	4b6f      	ldr	r3, [pc, #444]	; (800da18 <tcp_input+0x29c>)
 800d85c:	881b      	ldrh	r3, [r3, #0]
 800d85e:	1ad3      	subs	r3, r2, r3
 800d860:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d862:	4b6d      	ldr	r3, [pc, #436]	; (800da18 <tcp_input+0x29c>)
 800d864:	881b      	ldrh	r3, [r3, #0]
 800d866:	4619      	mov	r1, r3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7fd fdb9 	bl	800b3e0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	895b      	ldrh	r3, [r3, #10]
 800d874:	8a3a      	ldrh	r2, [r7, #16]
 800d876:	429a      	cmp	r2, r3
 800d878:	f200 8361 	bhi.w	800df3e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	4a64      	ldr	r2, [pc, #400]	; (800da14 <tcp_input+0x298>)
 800d884:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	8a3a      	ldrh	r2, [r7, #16]
 800d88c:	4611      	mov	r1, r2
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fd fda6 	bl	800b3e0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	891a      	ldrh	r2, [r3, #8]
 800d898:	8a3b      	ldrh	r3, [r7, #16]
 800d89a:	1ad3      	subs	r3, r2, r3
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	895b      	ldrh	r3, [r3, #10]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d005      	beq.n	800d8b6 <tcp_input+0x13a>
 800d8aa:	4b54      	ldr	r3, [pc, #336]	; (800d9fc <tcp_input+0x280>)
 800d8ac:	22df      	movs	r2, #223	; 0xdf
 800d8ae:	495c      	ldr	r1, [pc, #368]	; (800da20 <tcp_input+0x2a4>)
 800d8b0:	4854      	ldr	r0, [pc, #336]	; (800da04 <tcp_input+0x288>)
 800d8b2:	f009 fe81 	bl	80175b8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	891a      	ldrh	r2, [r3, #8]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	891b      	ldrh	r3, [r3, #8]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d005      	beq.n	800d8d0 <tcp_input+0x154>
 800d8c4:	4b4d      	ldr	r3, [pc, #308]	; (800d9fc <tcp_input+0x280>)
 800d8c6:	22e0      	movs	r2, #224	; 0xe0
 800d8c8:	4956      	ldr	r1, [pc, #344]	; (800da24 <tcp_input+0x2a8>)
 800d8ca:	484e      	ldr	r0, [pc, #312]	; (800da04 <tcp_input+0x288>)
 800d8cc:	f009 fe74 	bl	80175b8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d8d0:	4b4d      	ldr	r3, [pc, #308]	; (800da08 <tcp_input+0x28c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	881b      	ldrh	r3, [r3, #0]
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	4a4b      	ldr	r2, [pc, #300]	; (800da08 <tcp_input+0x28c>)
 800d8da:	6814      	ldr	r4, [r2, #0]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7fc fb21 	bl	8009f24 <lwip_htons>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d8e6:	4b48      	ldr	r3, [pc, #288]	; (800da08 <tcp_input+0x28c>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	885b      	ldrh	r3, [r3, #2]
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	4a46      	ldr	r2, [pc, #280]	; (800da08 <tcp_input+0x28c>)
 800d8f0:	6814      	ldr	r4, [r2, #0]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fc fb16 	bl	8009f24 <lwip_htons>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d8fc:	4b42      	ldr	r3, [pc, #264]	; (800da08 <tcp_input+0x28c>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	4a41      	ldr	r2, [pc, #260]	; (800da08 <tcp_input+0x28c>)
 800d904:	6814      	ldr	r4, [r2, #0]
 800d906:	4618      	mov	r0, r3
 800d908:	f7fc fb21 	bl	8009f4e <lwip_htonl>
 800d90c:	4603      	mov	r3, r0
 800d90e:	6063      	str	r3, [r4, #4]
 800d910:	6863      	ldr	r3, [r4, #4]
 800d912:	4a45      	ldr	r2, [pc, #276]	; (800da28 <tcp_input+0x2ac>)
 800d914:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d916:	4b3c      	ldr	r3, [pc, #240]	; (800da08 <tcp_input+0x28c>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	4a3a      	ldr	r2, [pc, #232]	; (800da08 <tcp_input+0x28c>)
 800d91e:	6814      	ldr	r4, [r2, #0]
 800d920:	4618      	mov	r0, r3
 800d922:	f7fc fb14 	bl	8009f4e <lwip_htonl>
 800d926:	4603      	mov	r3, r0
 800d928:	60a3      	str	r3, [r4, #8]
 800d92a:	68a3      	ldr	r3, [r4, #8]
 800d92c:	4a3f      	ldr	r2, [pc, #252]	; (800da2c <tcp_input+0x2b0>)
 800d92e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d930:	4b35      	ldr	r3, [pc, #212]	; (800da08 <tcp_input+0x28c>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	89db      	ldrh	r3, [r3, #14]
 800d936:	b29b      	uxth	r3, r3
 800d938:	4a33      	ldr	r2, [pc, #204]	; (800da08 <tcp_input+0x28c>)
 800d93a:	6814      	ldr	r4, [r2, #0]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fc faf1 	bl	8009f24 <lwip_htons>
 800d942:	4603      	mov	r3, r0
 800d944:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d946:	4b30      	ldr	r3, [pc, #192]	; (800da08 <tcp_input+0x28c>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	899b      	ldrh	r3, [r3, #12]
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	4618      	mov	r0, r3
 800d950:	f7fc fae8 	bl	8009f24 <lwip_htons>
 800d954:	4603      	mov	r3, r0
 800d956:	b2db      	uxtb	r3, r3
 800d958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	4b34      	ldr	r3, [pc, #208]	; (800da30 <tcp_input+0x2b4>)
 800d960:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	891a      	ldrh	r2, [r3, #8]
 800d966:	4b33      	ldr	r3, [pc, #204]	; (800da34 <tcp_input+0x2b8>)
 800d968:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d96a:	4b31      	ldr	r3, [pc, #196]	; (800da30 <tcp_input+0x2b4>)
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	f003 0303 	and.w	r3, r3, #3
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00c      	beq.n	800d990 <tcp_input+0x214>
    tcplen++;
 800d976:	4b2f      	ldr	r3, [pc, #188]	; (800da34 <tcp_input+0x2b8>)
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	3301      	adds	r3, #1
 800d97c:	b29a      	uxth	r2, r3
 800d97e:	4b2d      	ldr	r3, [pc, #180]	; (800da34 <tcp_input+0x2b8>)
 800d980:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	891a      	ldrh	r2, [r3, #8]
 800d986:	4b2b      	ldr	r3, [pc, #172]	; (800da34 <tcp_input+0x2b8>)
 800d988:	881b      	ldrh	r3, [r3, #0]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	f200 82d9 	bhi.w	800df42 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d990:	2300      	movs	r3, #0
 800d992:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d994:	4b28      	ldr	r3, [pc, #160]	; (800da38 <tcp_input+0x2bc>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	61fb      	str	r3, [r7, #28]
 800d99a:	e09d      	b.n	800dad8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	7d1b      	ldrb	r3, [r3, #20]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d105      	bne.n	800d9b0 <tcp_input+0x234>
 800d9a4:	4b15      	ldr	r3, [pc, #84]	; (800d9fc <tcp_input+0x280>)
 800d9a6:	22fb      	movs	r2, #251	; 0xfb
 800d9a8:	4924      	ldr	r1, [pc, #144]	; (800da3c <tcp_input+0x2c0>)
 800d9aa:	4816      	ldr	r0, [pc, #88]	; (800da04 <tcp_input+0x288>)
 800d9ac:	f009 fe04 	bl	80175b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	7d1b      	ldrb	r3, [r3, #20]
 800d9b4:	2b0a      	cmp	r3, #10
 800d9b6:	d105      	bne.n	800d9c4 <tcp_input+0x248>
 800d9b8:	4b10      	ldr	r3, [pc, #64]	; (800d9fc <tcp_input+0x280>)
 800d9ba:	22fc      	movs	r2, #252	; 0xfc
 800d9bc:	4920      	ldr	r1, [pc, #128]	; (800da40 <tcp_input+0x2c4>)
 800d9be:	4811      	ldr	r0, [pc, #68]	; (800da04 <tcp_input+0x288>)
 800d9c0:	f009 fdfa 	bl	80175b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	7d1b      	ldrb	r3, [r3, #20]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d105      	bne.n	800d9d8 <tcp_input+0x25c>
 800d9cc:	4b0b      	ldr	r3, [pc, #44]	; (800d9fc <tcp_input+0x280>)
 800d9ce:	22fd      	movs	r2, #253	; 0xfd
 800d9d0:	491c      	ldr	r1, [pc, #112]	; (800da44 <tcp_input+0x2c8>)
 800d9d2:	480c      	ldr	r0, [pc, #48]	; (800da04 <tcp_input+0x288>)
 800d9d4:	f009 fdf0 	bl	80175b8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	7a1b      	ldrb	r3, [r3, #8]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d033      	beq.n	800da48 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	7a1a      	ldrb	r2, [r3, #8]
 800d9e4:	4b09      	ldr	r3, [pc, #36]	; (800da0c <tcp_input+0x290>)
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d029      	beq.n	800da48 <tcp_input+0x2cc>
      prev = pcb;
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	61bb      	str	r3, [r7, #24]
      continue;
 800d9f8:	e06b      	b.n	800dad2 <tcp_input+0x356>
 800d9fa:	bf00      	nop
 800d9fc:	0801a4e8 	.word	0x0801a4e8
 800da00:	0801a51c 	.word	0x0801a51c
 800da04:	0801a534 	.word	0x0801a534
 800da08:	20000268 	.word	0x20000268
 800da0c:	200037a8 	.word	0x200037a8
 800da10:	2000026c 	.word	0x2000026c
 800da14:	20000270 	.word	0x20000270
 800da18:	2000026e 	.word	0x2000026e
 800da1c:	0801a55c 	.word	0x0801a55c
 800da20:	0801a56c 	.word	0x0801a56c
 800da24:	0801a578 	.word	0x0801a578
 800da28:	20000278 	.word	0x20000278
 800da2c:	2000027c 	.word	0x2000027c
 800da30:	20000284 	.word	0x20000284
 800da34:	20000282 	.word	0x20000282
 800da38:	20006d0c 	.word	0x20006d0c
 800da3c:	0801a598 	.word	0x0801a598
 800da40:	0801a5c0 	.word	0x0801a5c0
 800da44:	0801a5ec 	.word	0x0801a5ec
    }

    if (pcb->remote_port == tcphdr->src &&
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	8b1a      	ldrh	r2, [r3, #24]
 800da4c:	4b94      	ldr	r3, [pc, #592]	; (800dca0 <tcp_input+0x524>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	881b      	ldrh	r3, [r3, #0]
 800da52:	b29b      	uxth	r3, r3
 800da54:	429a      	cmp	r2, r3
 800da56:	d13a      	bne.n	800dace <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	8ada      	ldrh	r2, [r3, #22]
 800da5c:	4b90      	ldr	r3, [pc, #576]	; (800dca0 <tcp_input+0x524>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	885b      	ldrh	r3, [r3, #2]
 800da62:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800da64:	429a      	cmp	r2, r3
 800da66:	d132      	bne.n	800dace <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	685a      	ldr	r2, [r3, #4]
 800da6c:	4b8d      	ldr	r3, [pc, #564]	; (800dca4 <tcp_input+0x528>)
 800da6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800da70:	429a      	cmp	r2, r3
 800da72:	d12c      	bne.n	800dace <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	4b8a      	ldr	r3, [pc, #552]	; (800dca4 <tcp_input+0x528>)
 800da7a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d126      	bne.n	800dace <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	69fa      	ldr	r2, [r7, #28]
 800da86:	429a      	cmp	r2, r3
 800da88:	d106      	bne.n	800da98 <tcp_input+0x31c>
 800da8a:	4b87      	ldr	r3, [pc, #540]	; (800dca8 <tcp_input+0x52c>)
 800da8c:	f240 120d 	movw	r2, #269	; 0x10d
 800da90:	4986      	ldr	r1, [pc, #536]	; (800dcac <tcp_input+0x530>)
 800da92:	4887      	ldr	r0, [pc, #540]	; (800dcb0 <tcp_input+0x534>)
 800da94:	f009 fd90 	bl	80175b8 <iprintf>
      if (prev != NULL) {
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00a      	beq.n	800dab4 <tcp_input+0x338>
        prev->next = pcb->next;
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	68da      	ldr	r2, [r3, #12]
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800daa6:	4b83      	ldr	r3, [pc, #524]	; (800dcb4 <tcp_input+0x538>)
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800daae:	4a81      	ldr	r2, [pc, #516]	; (800dcb4 <tcp_input+0x538>)
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	69fa      	ldr	r2, [r7, #28]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d111      	bne.n	800dae2 <tcp_input+0x366>
 800dabe:	4b7a      	ldr	r3, [pc, #488]	; (800dca8 <tcp_input+0x52c>)
 800dac0:	f240 1215 	movw	r2, #277	; 0x115
 800dac4:	497c      	ldr	r1, [pc, #496]	; (800dcb8 <tcp_input+0x53c>)
 800dac6:	487a      	ldr	r0, [pc, #488]	; (800dcb0 <tcp_input+0x534>)
 800dac8:	f009 fd76 	bl	80175b8 <iprintf>
      break;
 800dacc:	e009      	b.n	800dae2 <tcp_input+0x366>
    }
    prev = pcb;
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	61fb      	str	r3, [r7, #28]
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	f47f af5e 	bne.w	800d99c <tcp_input+0x220>
 800dae0:	e000      	b.n	800dae4 <tcp_input+0x368>
      break;
 800dae2:	bf00      	nop
  }

  if (pcb == NULL) {
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f040 8095 	bne.w	800dc16 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800daec:	4b73      	ldr	r3, [pc, #460]	; (800dcbc <tcp_input+0x540>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	61fb      	str	r3, [r7, #28]
 800daf2:	e03f      	b.n	800db74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	7d1b      	ldrb	r3, [r3, #20]
 800daf8:	2b0a      	cmp	r3, #10
 800dafa:	d006      	beq.n	800db0a <tcp_input+0x38e>
 800dafc:	4b6a      	ldr	r3, [pc, #424]	; (800dca8 <tcp_input+0x52c>)
 800dafe:	f240 121f 	movw	r2, #287	; 0x11f
 800db02:	496f      	ldr	r1, [pc, #444]	; (800dcc0 <tcp_input+0x544>)
 800db04:	486a      	ldr	r0, [pc, #424]	; (800dcb0 <tcp_input+0x534>)
 800db06:	f009 fd57 	bl	80175b8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	7a1b      	ldrb	r3, [r3, #8]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d009      	beq.n	800db26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	7a1a      	ldrb	r2, [r3, #8]
 800db16:	4b63      	ldr	r3, [pc, #396]	; (800dca4 <tcp_input+0x528>)
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db1e:	3301      	adds	r3, #1
 800db20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db22:	429a      	cmp	r2, r3
 800db24:	d122      	bne.n	800db6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800db26:	69fb      	ldr	r3, [r7, #28]
 800db28:	8b1a      	ldrh	r2, [r3, #24]
 800db2a:	4b5d      	ldr	r3, [pc, #372]	; (800dca0 <tcp_input+0x524>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	b29b      	uxth	r3, r3
 800db32:	429a      	cmp	r2, r3
 800db34:	d11b      	bne.n	800db6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	8ada      	ldrh	r2, [r3, #22]
 800db3a:	4b59      	ldr	r3, [pc, #356]	; (800dca0 <tcp_input+0x524>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	885b      	ldrh	r3, [r3, #2]
 800db40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800db42:	429a      	cmp	r2, r3
 800db44:	d113      	bne.n	800db6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	685a      	ldr	r2, [r3, #4]
 800db4a:	4b56      	ldr	r3, [pc, #344]	; (800dca4 <tcp_input+0x528>)
 800db4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800db4e:	429a      	cmp	r2, r3
 800db50:	d10d      	bne.n	800db6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	4b53      	ldr	r3, [pc, #332]	; (800dca4 <tcp_input+0x528>)
 800db58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d107      	bne.n	800db6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800db5e:	69f8      	ldr	r0, [r7, #28]
 800db60:	f000 fb54 	bl	800e20c <tcp_timewait_input>
        }
        pbuf_free(p);
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7fd fcc1 	bl	800b4ec <pbuf_free>
        return;
 800db6a:	e1f0      	b.n	800df4e <tcp_input+0x7d2>
        continue;
 800db6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	61fb      	str	r3, [r7, #28]
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d1bc      	bne.n	800daf4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800db7a:	2300      	movs	r3, #0
 800db7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800db7e:	4b51      	ldr	r3, [pc, #324]	; (800dcc4 <tcp_input+0x548>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	617b      	str	r3, [r7, #20]
 800db84:	e02a      	b.n	800dbdc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	7a1b      	ldrb	r3, [r3, #8]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00c      	beq.n	800dba8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	7a1a      	ldrb	r2, [r3, #8]
 800db92:	4b44      	ldr	r3, [pc, #272]	; (800dca4 <tcp_input+0x528>)
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db9a:	3301      	adds	r3, #1
 800db9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d002      	beq.n	800dba8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	61bb      	str	r3, [r7, #24]
        continue;
 800dba6:	e016      	b.n	800dbd6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	8ada      	ldrh	r2, [r3, #22]
 800dbac:	4b3c      	ldr	r3, [pc, #240]	; (800dca0 <tcp_input+0x524>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	885b      	ldrh	r3, [r3, #2]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d10c      	bne.n	800dbd2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	4b39      	ldr	r3, [pc, #228]	; (800dca4 <tcp_input+0x528>)
 800dbbe:	695b      	ldr	r3, [r3, #20]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d00f      	beq.n	800dbe4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00d      	beq.n	800dbe6 <tcp_input+0x46a>
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d009      	beq.n	800dbe6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	617b      	str	r3, [r7, #20]
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d1d1      	bne.n	800db86 <tcp_input+0x40a>
 800dbe2:	e000      	b.n	800dbe6 <tcp_input+0x46a>
            break;
 800dbe4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d014      	beq.n	800dc16 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00a      	beq.n	800dc08 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	68da      	ldr	r2, [r3, #12]
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dbfa:	4b32      	ldr	r3, [pc, #200]	; (800dcc4 <tcp_input+0x548>)
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dc02:	4a30      	ldr	r2, [pc, #192]	; (800dcc4 <tcp_input+0x548>)
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dc08:	6978      	ldr	r0, [r7, #20]
 800dc0a:	f000 fa01 	bl	800e010 <tcp_listen_input>
      }
      pbuf_free(p);
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7fd fc6c 	bl	800b4ec <pbuf_free>
      return;
 800dc14:	e19b      	b.n	800df4e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dc16:	69fb      	ldr	r3, [r7, #28]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 8160 	beq.w	800dede <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dc1e:	4b2a      	ldr	r3, [pc, #168]	; (800dcc8 <tcp_input+0x54c>)
 800dc20:	2200      	movs	r2, #0
 800dc22:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	891a      	ldrh	r2, [r3, #8]
 800dc28:	4b27      	ldr	r3, [pc, #156]	; (800dcc8 <tcp_input+0x54c>)
 800dc2a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dc2c:	4a26      	ldr	r2, [pc, #152]	; (800dcc8 <tcp_input+0x54c>)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dc32:	4b1b      	ldr	r3, [pc, #108]	; (800dca0 <tcp_input+0x524>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4a24      	ldr	r2, [pc, #144]	; (800dcc8 <tcp_input+0x54c>)
 800dc38:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dc3a:	4b24      	ldr	r3, [pc, #144]	; (800dccc <tcp_input+0x550>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dc40:	4b23      	ldr	r3, [pc, #140]	; (800dcd0 <tcp_input+0x554>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dc46:	4b23      	ldr	r3, [pc, #140]	; (800dcd4 <tcp_input+0x558>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dc4c:	4b22      	ldr	r3, [pc, #136]	; (800dcd8 <tcp_input+0x55c>)
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	f003 0308 	and.w	r3, r3, #8
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d006      	beq.n	800dc66 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	7b5b      	ldrb	r3, [r3, #13]
 800dc5c:	f043 0301 	orr.w	r3, r3, #1
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d038      	beq.n	800dce0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dc6e:	69f8      	ldr	r0, [r7, #28]
 800dc70:	f7ff f888 	bl	800cd84 <tcp_process_refused_data>
 800dc74:	4603      	mov	r3, r0
 800dc76:	f113 0f0d 	cmn.w	r3, #13
 800dc7a:	d007      	beq.n	800dc8c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d02d      	beq.n	800dce0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dc84:	4b15      	ldr	r3, [pc, #84]	; (800dcdc <tcp_input+0x560>)
 800dc86:	881b      	ldrh	r3, [r3, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d029      	beq.n	800dce0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f040 8104 	bne.w	800de9e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dc96:	69f8      	ldr	r0, [r7, #28]
 800dc98:	f003 fe16 	bl	80118c8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dc9c:	e0ff      	b.n	800de9e <tcp_input+0x722>
 800dc9e:	bf00      	nop
 800dca0:	20000268 	.word	0x20000268
 800dca4:	200037a8 	.word	0x200037a8
 800dca8:	0801a4e8 	.word	0x0801a4e8
 800dcac:	0801a614 	.word	0x0801a614
 800dcb0:	0801a534 	.word	0x0801a534
 800dcb4:	20006d0c 	.word	0x20006d0c
 800dcb8:	0801a640 	.word	0x0801a640
 800dcbc:	20006d1c 	.word	0x20006d1c
 800dcc0:	0801a66c 	.word	0x0801a66c
 800dcc4:	20006d14 	.word	0x20006d14
 800dcc8:	20000258 	.word	0x20000258
 800dccc:	20000288 	.word	0x20000288
 800dcd0:	20000285 	.word	0x20000285
 800dcd4:	20000280 	.word	0x20000280
 800dcd8:	20000284 	.word	0x20000284
 800dcdc:	20000282 	.word	0x20000282
      }
    }
    tcp_input_pcb = pcb;
 800dce0:	4a9c      	ldr	r2, [pc, #624]	; (800df54 <tcp_input+0x7d8>)
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dce6:	69f8      	ldr	r0, [r7, #28]
 800dce8:	f000 fb0a 	bl	800e300 <tcp_process>
 800dcec:	4603      	mov	r3, r0
 800dcee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dcf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcf4:	f113 0f0d 	cmn.w	r3, #13
 800dcf8:	f000 80d3 	beq.w	800dea2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800dcfc:	4b96      	ldr	r3, [pc, #600]	; (800df58 <tcp_input+0x7dc>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	f003 0308 	and.w	r3, r3, #8
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d015      	beq.n	800dd34 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d008      	beq.n	800dd24 <tcp_input+0x5a8>
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd18:	69fa      	ldr	r2, [r7, #28]
 800dd1a:	6912      	ldr	r2, [r2, #16]
 800dd1c:	f06f 010d 	mvn.w	r1, #13
 800dd20:	4610      	mov	r0, r2
 800dd22:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dd24:	69f9      	ldr	r1, [r7, #28]
 800dd26:	488d      	ldr	r0, [pc, #564]	; (800df5c <tcp_input+0x7e0>)
 800dd28:	f7ff fbb0 	bl	800d48c <tcp_pcb_remove>
        tcp_free(pcb);
 800dd2c:	69f8      	ldr	r0, [r7, #28]
 800dd2e:	f7fd fef1 	bl	800bb14 <tcp_free>
 800dd32:	e0c1      	b.n	800deb8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800dd34:	2300      	movs	r3, #0
 800dd36:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dd38:	4b89      	ldr	r3, [pc, #548]	; (800df60 <tcp_input+0x7e4>)
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d01d      	beq.n	800dd7c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dd40:	4b87      	ldr	r3, [pc, #540]	; (800df60 <tcp_input+0x7e4>)
 800dd42:	881b      	ldrh	r3, [r3, #0]
 800dd44:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00a      	beq.n	800dd66 <tcp_input+0x5ea>
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd56:	69fa      	ldr	r2, [r7, #28]
 800dd58:	6910      	ldr	r0, [r2, #16]
 800dd5a:	89fa      	ldrh	r2, [r7, #14]
 800dd5c:	69f9      	ldr	r1, [r7, #28]
 800dd5e:	4798      	blx	r3
 800dd60:	4603      	mov	r3, r0
 800dd62:	74fb      	strb	r3, [r7, #19]
 800dd64:	e001      	b.n	800dd6a <tcp_input+0x5ee>
 800dd66:	2300      	movs	r3, #0
 800dd68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dd6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd6e:	f113 0f0d 	cmn.w	r3, #13
 800dd72:	f000 8098 	beq.w	800dea6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dd76:	4b7a      	ldr	r3, [pc, #488]	; (800df60 <tcp_input+0x7e4>)
 800dd78:	2200      	movs	r2, #0
 800dd7a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dd7c:	69f8      	ldr	r0, [r7, #28]
 800dd7e:	f000 f907 	bl	800df90 <tcp_input_delayed_close>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	f040 8090 	bne.w	800deaa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dd8a:	4b76      	ldr	r3, [pc, #472]	; (800df64 <tcp_input+0x7e8>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d041      	beq.n	800de16 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d006      	beq.n	800dda8 <tcp_input+0x62c>
 800dd9a:	4b73      	ldr	r3, [pc, #460]	; (800df68 <tcp_input+0x7ec>)
 800dd9c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dda0:	4972      	ldr	r1, [pc, #456]	; (800df6c <tcp_input+0x7f0>)
 800dda2:	4873      	ldr	r0, [pc, #460]	; (800df70 <tcp_input+0x7f4>)
 800dda4:	f009 fc08 	bl	80175b8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	8b5b      	ldrh	r3, [r3, #26]
 800ddac:	f003 0310 	and.w	r3, r3, #16
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d008      	beq.n	800ddc6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ddb4:	4b6b      	ldr	r3, [pc, #428]	; (800df64 <tcp_input+0x7e8>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7fd fb97 	bl	800b4ec <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ddbe:	69f8      	ldr	r0, [r7, #28]
 800ddc0:	f7fe f990 	bl	800c0e4 <tcp_abort>
            goto aborted;
 800ddc4:	e078      	b.n	800deb8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d00c      	beq.n	800ddea <tcp_input+0x66e>
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	6918      	ldr	r0, [r3, #16]
 800ddda:	4b62      	ldr	r3, [pc, #392]	; (800df64 <tcp_input+0x7e8>)
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	2300      	movs	r3, #0
 800dde0:	69f9      	ldr	r1, [r7, #28]
 800dde2:	47a0      	blx	r4
 800dde4:	4603      	mov	r3, r0
 800dde6:	74fb      	strb	r3, [r7, #19]
 800dde8:	e008      	b.n	800ddfc <tcp_input+0x680>
 800ddea:	4b5e      	ldr	r3, [pc, #376]	; (800df64 <tcp_input+0x7e8>)
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	2300      	movs	r3, #0
 800ddf0:	69f9      	ldr	r1, [r7, #28]
 800ddf2:	2000      	movs	r0, #0
 800ddf4:	f7ff f89c 	bl	800cf30 <tcp_recv_null>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ddfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de00:	f113 0f0d 	cmn.w	r3, #13
 800de04:	d053      	beq.n	800deae <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800de06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d003      	beq.n	800de16 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800de0e:	4b55      	ldr	r3, [pc, #340]	; (800df64 <tcp_input+0x7e8>)
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	69fb      	ldr	r3, [r7, #28]
 800de14:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800de16:	4b50      	ldr	r3, [pc, #320]	; (800df58 <tcp_input+0x7dc>)
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	f003 0320 	and.w	r3, r3, #32
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d030      	beq.n	800de84 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de26:	2b00      	cmp	r3, #0
 800de28:	d009      	beq.n	800de3e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de2e:	7b5a      	ldrb	r2, [r3, #13]
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de34:	f042 0220 	orr.w	r2, r2, #32
 800de38:	b2d2      	uxtb	r2, r2
 800de3a:	735a      	strb	r2, [r3, #13]
 800de3c:	e022      	b.n	800de84 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800de3e:	69fb      	ldr	r3, [r7, #28]
 800de40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de42:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de46:	d005      	beq.n	800de54 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800de48:	69fb      	ldr	r3, [r7, #28]
 800de4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de4c:	3301      	adds	r3, #1
 800de4e:	b29a      	uxth	r2, r3
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800de54:	69fb      	ldr	r3, [r7, #28]
 800de56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d00b      	beq.n	800de76 <tcp_input+0x6fa>
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	6918      	ldr	r0, [r3, #16]
 800de68:	2300      	movs	r3, #0
 800de6a:	2200      	movs	r2, #0
 800de6c:	69f9      	ldr	r1, [r7, #28]
 800de6e:	47a0      	blx	r4
 800de70:	4603      	mov	r3, r0
 800de72:	74fb      	strb	r3, [r7, #19]
 800de74:	e001      	b.n	800de7a <tcp_input+0x6fe>
 800de76:	2300      	movs	r3, #0
 800de78:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800de7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de7e:	f113 0f0d 	cmn.w	r3, #13
 800de82:	d016      	beq.n	800deb2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800de84:	4b33      	ldr	r3, [pc, #204]	; (800df54 <tcp_input+0x7d8>)
 800de86:	2200      	movs	r2, #0
 800de88:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800de8a:	69f8      	ldr	r0, [r7, #28]
 800de8c:	f000 f880 	bl	800df90 <tcp_input_delayed_close>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d10f      	bne.n	800deb6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800de96:	69f8      	ldr	r0, [r7, #28]
 800de98:	f002 ff10 	bl	8010cbc <tcp_output>
 800de9c:	e00c      	b.n	800deb8 <tcp_input+0x73c>
        goto aborted;
 800de9e:	bf00      	nop
 800dea0:	e00a      	b.n	800deb8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800dea2:	bf00      	nop
 800dea4:	e008      	b.n	800deb8 <tcp_input+0x73c>
              goto aborted;
 800dea6:	bf00      	nop
 800dea8:	e006      	b.n	800deb8 <tcp_input+0x73c>
          goto aborted;
 800deaa:	bf00      	nop
 800deac:	e004      	b.n	800deb8 <tcp_input+0x73c>
            goto aborted;
 800deae:	bf00      	nop
 800deb0:	e002      	b.n	800deb8 <tcp_input+0x73c>
              goto aborted;
 800deb2:	bf00      	nop
 800deb4:	e000      	b.n	800deb8 <tcp_input+0x73c>
          goto aborted;
 800deb6:	bf00      	nop
    tcp_input_pcb = NULL;
 800deb8:	4b26      	ldr	r3, [pc, #152]	; (800df54 <tcp_input+0x7d8>)
 800deba:	2200      	movs	r2, #0
 800debc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800debe:	4b29      	ldr	r3, [pc, #164]	; (800df64 <tcp_input+0x7e8>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dec4:	4b2b      	ldr	r3, [pc, #172]	; (800df74 <tcp_input+0x7f8>)
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d03f      	beq.n	800df4c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800decc:	4b29      	ldr	r3, [pc, #164]	; (800df74 <tcp_input+0x7f8>)
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fd fb0b 	bl	800b4ec <pbuf_free>
      inseg.p = NULL;
 800ded6:	4b27      	ldr	r3, [pc, #156]	; (800df74 <tcp_input+0x7f8>)
 800ded8:	2200      	movs	r2, #0
 800deda:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800dedc:	e036      	b.n	800df4c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800dede:	4b26      	ldr	r3, [pc, #152]	; (800df78 <tcp_input+0x7fc>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	899b      	ldrh	r3, [r3, #12]
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fc f81c 	bl	8009f24 <lwip_htons>
 800deec:	4603      	mov	r3, r0
 800deee:	b2db      	uxtb	r3, r3
 800def0:	f003 0304 	and.w	r3, r3, #4
 800def4:	2b00      	cmp	r3, #0
 800def6:	d118      	bne.n	800df2a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800def8:	4b20      	ldr	r3, [pc, #128]	; (800df7c <tcp_input+0x800>)
 800defa:	6819      	ldr	r1, [r3, #0]
 800defc:	4b20      	ldr	r3, [pc, #128]	; (800df80 <tcp_input+0x804>)
 800defe:	881b      	ldrh	r3, [r3, #0]
 800df00:	461a      	mov	r2, r3
 800df02:	4b20      	ldr	r3, [pc, #128]	; (800df84 <tcp_input+0x808>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df08:	4b1b      	ldr	r3, [pc, #108]	; (800df78 <tcp_input+0x7fc>)
 800df0a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df0c:	885b      	ldrh	r3, [r3, #2]
 800df0e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df10:	4a19      	ldr	r2, [pc, #100]	; (800df78 <tcp_input+0x7fc>)
 800df12:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df14:	8812      	ldrh	r2, [r2, #0]
 800df16:	b292      	uxth	r2, r2
 800df18:	9202      	str	r2, [sp, #8]
 800df1a:	9301      	str	r3, [sp, #4]
 800df1c:	4b1a      	ldr	r3, [pc, #104]	; (800df88 <tcp_input+0x80c>)
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	4b1a      	ldr	r3, [pc, #104]	; (800df8c <tcp_input+0x810>)
 800df22:	4602      	mov	r2, r0
 800df24:	2000      	movs	r0, #0
 800df26:	f003 fc7d 	bl	8011824 <tcp_rst>
    pbuf_free(p);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f7fd fade 	bl	800b4ec <pbuf_free>
  return;
 800df30:	e00c      	b.n	800df4c <tcp_input+0x7d0>
    goto dropped;
 800df32:	bf00      	nop
 800df34:	e006      	b.n	800df44 <tcp_input+0x7c8>
    goto dropped;
 800df36:	bf00      	nop
 800df38:	e004      	b.n	800df44 <tcp_input+0x7c8>
    goto dropped;
 800df3a:	bf00      	nop
 800df3c:	e002      	b.n	800df44 <tcp_input+0x7c8>
      goto dropped;
 800df3e:	bf00      	nop
 800df40:	e000      	b.n	800df44 <tcp_input+0x7c8>
      goto dropped;
 800df42:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f7fd fad1 	bl	800b4ec <pbuf_free>
 800df4a:	e000      	b.n	800df4e <tcp_input+0x7d2>
  return;
 800df4c:	bf00      	nop
}
 800df4e:	3724      	adds	r7, #36	; 0x24
 800df50:	46bd      	mov	sp, r7
 800df52:	bd90      	pop	{r4, r7, pc}
 800df54:	20006d20 	.word	0x20006d20
 800df58:	20000285 	.word	0x20000285
 800df5c:	20006d0c 	.word	0x20006d0c
 800df60:	20000280 	.word	0x20000280
 800df64:	20000288 	.word	0x20000288
 800df68:	0801a4e8 	.word	0x0801a4e8
 800df6c:	0801a69c 	.word	0x0801a69c
 800df70:	0801a534 	.word	0x0801a534
 800df74:	20000258 	.word	0x20000258
 800df78:	20000268 	.word	0x20000268
 800df7c:	2000027c 	.word	0x2000027c
 800df80:	20000282 	.word	0x20000282
 800df84:	20000278 	.word	0x20000278
 800df88:	200037b8 	.word	0x200037b8
 800df8c:	200037bc 	.word	0x200037bc

0800df90 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d106      	bne.n	800dfac <tcp_input_delayed_close+0x1c>
 800df9e:	4b17      	ldr	r3, [pc, #92]	; (800dffc <tcp_input_delayed_close+0x6c>)
 800dfa0:	f240 225a 	movw	r2, #602	; 0x25a
 800dfa4:	4916      	ldr	r1, [pc, #88]	; (800e000 <tcp_input_delayed_close+0x70>)
 800dfa6:	4817      	ldr	r0, [pc, #92]	; (800e004 <tcp_input_delayed_close+0x74>)
 800dfa8:	f009 fb06 	bl	80175b8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dfac:	4b16      	ldr	r3, [pc, #88]	; (800e008 <tcp_input_delayed_close+0x78>)
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	f003 0310 	and.w	r3, r3, #16
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d01c      	beq.n	800dff2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	8b5b      	ldrh	r3, [r3, #26]
 800dfbc:	f003 0310 	and.w	r3, r3, #16
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d10d      	bne.n	800dfe0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d008      	beq.n	800dfe0 <tcp_input_delayed_close+0x50>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	6912      	ldr	r2, [r2, #16]
 800dfd8:	f06f 010e 	mvn.w	r1, #14
 800dfdc:	4610      	mov	r0, r2
 800dfde:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dfe0:	6879      	ldr	r1, [r7, #4]
 800dfe2:	480a      	ldr	r0, [pc, #40]	; (800e00c <tcp_input_delayed_close+0x7c>)
 800dfe4:	f7ff fa52 	bl	800d48c <tcp_pcb_remove>
    tcp_free(pcb);
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f7fd fd93 	bl	800bb14 <tcp_free>
    return 1;
 800dfee:	2301      	movs	r3, #1
 800dff0:	e000      	b.n	800dff4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800dff2:	2300      	movs	r3, #0
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	0801a4e8 	.word	0x0801a4e8
 800e000:	0801a6b8 	.word	0x0801a6b8
 800e004:	0801a534 	.word	0x0801a534
 800e008:	20000285 	.word	0x20000285
 800e00c:	20006d0c 	.word	0x20006d0c

0800e010 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e010:	b590      	push	{r4, r7, lr}
 800e012:	b08b      	sub	sp, #44	; 0x2c
 800e014:	af04      	add	r7, sp, #16
 800e016:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e018:	4b6f      	ldr	r3, [pc, #444]	; (800e1d8 <tcp_listen_input+0x1c8>)
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	f003 0304 	and.w	r3, r3, #4
 800e020:	2b00      	cmp	r3, #0
 800e022:	f040 80d2 	bne.w	800e1ca <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d106      	bne.n	800e03a <tcp_listen_input+0x2a>
 800e02c:	4b6b      	ldr	r3, [pc, #428]	; (800e1dc <tcp_listen_input+0x1cc>)
 800e02e:	f240 2281 	movw	r2, #641	; 0x281
 800e032:	496b      	ldr	r1, [pc, #428]	; (800e1e0 <tcp_listen_input+0x1d0>)
 800e034:	486b      	ldr	r0, [pc, #428]	; (800e1e4 <tcp_listen_input+0x1d4>)
 800e036:	f009 fabf 	bl	80175b8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e03a:	4b67      	ldr	r3, [pc, #412]	; (800e1d8 <tcp_listen_input+0x1c8>)
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	f003 0310 	and.w	r3, r3, #16
 800e042:	2b00      	cmp	r3, #0
 800e044:	d019      	beq.n	800e07a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e046:	4b68      	ldr	r3, [pc, #416]	; (800e1e8 <tcp_listen_input+0x1d8>)
 800e048:	6819      	ldr	r1, [r3, #0]
 800e04a:	4b68      	ldr	r3, [pc, #416]	; (800e1ec <tcp_listen_input+0x1dc>)
 800e04c:	881b      	ldrh	r3, [r3, #0]
 800e04e:	461a      	mov	r2, r3
 800e050:	4b67      	ldr	r3, [pc, #412]	; (800e1f0 <tcp_listen_input+0x1e0>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e056:	4b67      	ldr	r3, [pc, #412]	; (800e1f4 <tcp_listen_input+0x1e4>)
 800e058:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e05a:	885b      	ldrh	r3, [r3, #2]
 800e05c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e05e:	4a65      	ldr	r2, [pc, #404]	; (800e1f4 <tcp_listen_input+0x1e4>)
 800e060:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e062:	8812      	ldrh	r2, [r2, #0]
 800e064:	b292      	uxth	r2, r2
 800e066:	9202      	str	r2, [sp, #8]
 800e068:	9301      	str	r3, [sp, #4]
 800e06a:	4b63      	ldr	r3, [pc, #396]	; (800e1f8 <tcp_listen_input+0x1e8>)
 800e06c:	9300      	str	r3, [sp, #0]
 800e06e:	4b63      	ldr	r3, [pc, #396]	; (800e1fc <tcp_listen_input+0x1ec>)
 800e070:	4602      	mov	r2, r0
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f003 fbd6 	bl	8011824 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e078:	e0a9      	b.n	800e1ce <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e07a:	4b57      	ldr	r3, [pc, #348]	; (800e1d8 <tcp_listen_input+0x1c8>)
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	f003 0302 	and.w	r3, r3, #2
 800e082:	2b00      	cmp	r3, #0
 800e084:	f000 80a3 	beq.w	800e1ce <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	7d5b      	ldrb	r3, [r3, #21]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7ff f873 	bl	800d178 <tcp_alloc>
 800e092:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d111      	bne.n	800e0be <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	699b      	ldr	r3, [r3, #24]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d00a      	beq.n	800e0b8 <tcp_listen_input+0xa8>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	699b      	ldr	r3, [r3, #24]
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	6910      	ldr	r0, [r2, #16]
 800e0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ae:	2100      	movs	r1, #0
 800e0b0:	4798      	blx	r3
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	73bb      	strb	r3, [r7, #14]
      return;
 800e0b6:	e08b      	b.n	800e1d0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e0b8:	23f0      	movs	r3, #240	; 0xf0
 800e0ba:	73bb      	strb	r3, [r7, #14]
      return;
 800e0bc:	e088      	b.n	800e1d0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e0be:	4b50      	ldr	r3, [pc, #320]	; (800e200 <tcp_listen_input+0x1f0>)
 800e0c0:	695a      	ldr	r2, [r3, #20]
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e0c6:	4b4e      	ldr	r3, [pc, #312]	; (800e200 <tcp_listen_input+0x1f0>)
 800e0c8:	691a      	ldr	r2, [r3, #16]
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	8ada      	ldrh	r2, [r3, #22]
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e0d6:	4b47      	ldr	r3, [pc, #284]	; (800e1f4 <tcp_listen_input+0x1e4>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	881b      	ldrh	r3, [r3, #0]
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	2203      	movs	r2, #3
 800e0e6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e0e8:	4b41      	ldr	r3, [pc, #260]	; (800e1f0 <tcp_listen_input+0x1e0>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	1c5a      	adds	r2, r3, #1
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e0fa:	6978      	ldr	r0, [r7, #20]
 800e0fc:	f7ff fa5a 	bl	800d5b4 <tcp_next_iss>
 800e100:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	693a      	ldr	r2, [r7, #16]
 800e106:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	693a      	ldr	r2, [r7, #16]
 800e10c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	693a      	ldr	r2, [r7, #16]
 800e112:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	693a      	ldr	r2, [r7, #16]
 800e118:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e11a:	4b35      	ldr	r3, [pc, #212]	; (800e1f0 <tcp_listen_input+0x1e0>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	1e5a      	subs	r2, r3, #1
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	691a      	ldr	r2, [r3, #16]
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	7a5b      	ldrb	r3, [r3, #9]
 800e136:	f003 030c 	and.w	r3, r3, #12
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	7a1a      	ldrb	r2, [r3, #8]
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e148:	4b2e      	ldr	r3, [pc, #184]	; (800e204 <tcp_listen_input+0x1f4>)
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	60da      	str	r2, [r3, #12]
 800e150:	4a2c      	ldr	r2, [pc, #176]	; (800e204 <tcp_listen_input+0x1f4>)
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	6013      	str	r3, [r2, #0]
 800e156:	f003 fd27 	bl	8011ba8 <tcp_timer_needed>
 800e15a:	4b2b      	ldr	r3, [pc, #172]	; (800e208 <tcp_listen_input+0x1f8>)
 800e15c:	2201      	movs	r2, #1
 800e15e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e160:	6978      	ldr	r0, [r7, #20]
 800e162:	f001 fd8d 	bl	800fc80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e166:	4b23      	ldr	r3, [pc, #140]	; (800e1f4 <tcp_listen_input+0x1e4>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	89db      	ldrh	r3, [r3, #14]
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	3304      	adds	r3, #4
 800e188:	4618      	mov	r0, r3
 800e18a:	f007 fa81 	bl	8015690 <ip4_route>
 800e18e:	4601      	mov	r1, r0
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	3304      	adds	r3, #4
 800e194:	461a      	mov	r2, r3
 800e196:	4620      	mov	r0, r4
 800e198:	f7ff fa32 	bl	800d600 <tcp_eff_send_mss_netif>
 800e19c:	4603      	mov	r3, r0
 800e19e:	461a      	mov	r2, r3
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e1a4:	2112      	movs	r1, #18
 800e1a6:	6978      	ldr	r0, [r7, #20]
 800e1a8:	f002 fc9a 	bl	8010ae0 <tcp_enqueue_flags>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e1b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d004      	beq.n	800e1c2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e1b8:	2100      	movs	r1, #0
 800e1ba:	6978      	ldr	r0, [r7, #20]
 800e1bc:	f7fd fed4 	bl	800bf68 <tcp_abandon>
      return;
 800e1c0:	e006      	b.n	800e1d0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e1c2:	6978      	ldr	r0, [r7, #20]
 800e1c4:	f002 fd7a 	bl	8010cbc <tcp_output>
  return;
 800e1c8:	e001      	b.n	800e1ce <tcp_listen_input+0x1be>
    return;
 800e1ca:	bf00      	nop
 800e1cc:	e000      	b.n	800e1d0 <tcp_listen_input+0x1c0>
  return;
 800e1ce:	bf00      	nop
}
 800e1d0:	371c      	adds	r7, #28
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd90      	pop	{r4, r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	20000284 	.word	0x20000284
 800e1dc:	0801a4e8 	.word	0x0801a4e8
 800e1e0:	0801a6e0 	.word	0x0801a6e0
 800e1e4:	0801a534 	.word	0x0801a534
 800e1e8:	2000027c 	.word	0x2000027c
 800e1ec:	20000282 	.word	0x20000282
 800e1f0:	20000278 	.word	0x20000278
 800e1f4:	20000268 	.word	0x20000268
 800e1f8:	200037b8 	.word	0x200037b8
 800e1fc:	200037bc 	.word	0x200037bc
 800e200:	200037a8 	.word	0x200037a8
 800e204:	20006d0c 	.word	0x20006d0c
 800e208:	20006d08 	.word	0x20006d08

0800e20c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b086      	sub	sp, #24
 800e210:	af04      	add	r7, sp, #16
 800e212:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e214:	4b2f      	ldr	r3, [pc, #188]	; (800e2d4 <tcp_timewait_input+0xc8>)
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	f003 0304 	and.w	r3, r3, #4
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d153      	bne.n	800e2c8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <tcp_timewait_input+0x28>
 800e226:	4b2c      	ldr	r3, [pc, #176]	; (800e2d8 <tcp_timewait_input+0xcc>)
 800e228:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e22c:	492b      	ldr	r1, [pc, #172]	; (800e2dc <tcp_timewait_input+0xd0>)
 800e22e:	482c      	ldr	r0, [pc, #176]	; (800e2e0 <tcp_timewait_input+0xd4>)
 800e230:	f009 f9c2 	bl	80175b8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e234:	4b27      	ldr	r3, [pc, #156]	; (800e2d4 <tcp_timewait_input+0xc8>)
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	f003 0302 	and.w	r3, r3, #2
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d02a      	beq.n	800e296 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e240:	4b28      	ldr	r3, [pc, #160]	; (800e2e4 <tcp_timewait_input+0xd8>)
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e248:	1ad3      	subs	r3, r2, r3
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	db2d      	blt.n	800e2aa <tcp_timewait_input+0x9e>
 800e24e:	4b25      	ldr	r3, [pc, #148]	; (800e2e4 <tcp_timewait_input+0xd8>)
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e256:	6879      	ldr	r1, [r7, #4]
 800e258:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e25a:	440b      	add	r3, r1
 800e25c:	1ad3      	subs	r3, r2, r3
 800e25e:	2b00      	cmp	r3, #0
 800e260:	dc23      	bgt.n	800e2aa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e262:	4b21      	ldr	r3, [pc, #132]	; (800e2e8 <tcp_timewait_input+0xdc>)
 800e264:	6819      	ldr	r1, [r3, #0]
 800e266:	4b21      	ldr	r3, [pc, #132]	; (800e2ec <tcp_timewait_input+0xe0>)
 800e268:	881b      	ldrh	r3, [r3, #0]
 800e26a:	461a      	mov	r2, r3
 800e26c:	4b1d      	ldr	r3, [pc, #116]	; (800e2e4 <tcp_timewait_input+0xd8>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e272:	4b1f      	ldr	r3, [pc, #124]	; (800e2f0 <tcp_timewait_input+0xe4>)
 800e274:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e276:	885b      	ldrh	r3, [r3, #2]
 800e278:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e27a:	4a1d      	ldr	r2, [pc, #116]	; (800e2f0 <tcp_timewait_input+0xe4>)
 800e27c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e27e:	8812      	ldrh	r2, [r2, #0]
 800e280:	b292      	uxth	r2, r2
 800e282:	9202      	str	r2, [sp, #8]
 800e284:	9301      	str	r3, [sp, #4]
 800e286:	4b1b      	ldr	r3, [pc, #108]	; (800e2f4 <tcp_timewait_input+0xe8>)
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	4b1b      	ldr	r3, [pc, #108]	; (800e2f8 <tcp_timewait_input+0xec>)
 800e28c:	4602      	mov	r2, r0
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f003 fac8 	bl	8011824 <tcp_rst>
      return;
 800e294:	e01b      	b.n	800e2ce <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e296:	4b0f      	ldr	r3, [pc, #60]	; (800e2d4 <tcp_timewait_input+0xc8>)
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	f003 0301 	and.w	r3, r3, #1
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d003      	beq.n	800e2aa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e2a2:	4b16      	ldr	r3, [pc, #88]	; (800e2fc <tcp_timewait_input+0xf0>)
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e2aa:	4b10      	ldr	r3, [pc, #64]	; (800e2ec <tcp_timewait_input+0xe0>)
 800e2ac:	881b      	ldrh	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00c      	beq.n	800e2cc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	8b5b      	ldrh	r3, [r3, #26]
 800e2b6:	f043 0302 	orr.w	r3, r3, #2
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f002 fcfb 	bl	8010cbc <tcp_output>
  }
  return;
 800e2c6:	e001      	b.n	800e2cc <tcp_timewait_input+0xc0>
    return;
 800e2c8:	bf00      	nop
 800e2ca:	e000      	b.n	800e2ce <tcp_timewait_input+0xc2>
  return;
 800e2cc:	bf00      	nop
}
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	20000284 	.word	0x20000284
 800e2d8:	0801a4e8 	.word	0x0801a4e8
 800e2dc:	0801a700 	.word	0x0801a700
 800e2e0:	0801a534 	.word	0x0801a534
 800e2e4:	20000278 	.word	0x20000278
 800e2e8:	2000027c 	.word	0x2000027c
 800e2ec:	20000282 	.word	0x20000282
 800e2f0:	20000268 	.word	0x20000268
 800e2f4:	200037b8 	.word	0x200037b8
 800e2f8:	200037bc 	.word	0x200037bc
 800e2fc:	20006d10 	.word	0x20006d10

0800e300 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e300:	b590      	push	{r4, r7, lr}
 800e302:	b08d      	sub	sp, #52	; 0x34
 800e304:	af04      	add	r7, sp, #16
 800e306:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e308:	2300      	movs	r3, #0
 800e30a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e30c:	2300      	movs	r3, #0
 800e30e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d106      	bne.n	800e324 <tcp_process+0x24>
 800e316:	4ba5      	ldr	r3, [pc, #660]	; (800e5ac <tcp_process+0x2ac>)
 800e318:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e31c:	49a4      	ldr	r1, [pc, #656]	; (800e5b0 <tcp_process+0x2b0>)
 800e31e:	48a5      	ldr	r0, [pc, #660]	; (800e5b4 <tcp_process+0x2b4>)
 800e320:	f009 f94a 	bl	80175b8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e324:	4ba4      	ldr	r3, [pc, #656]	; (800e5b8 <tcp_process+0x2b8>)
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	f003 0304 	and.w	r3, r3, #4
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d04e      	beq.n	800e3ce <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	7d1b      	ldrb	r3, [r3, #20]
 800e334:	2b02      	cmp	r3, #2
 800e336:	d108      	bne.n	800e34a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e33c:	4b9f      	ldr	r3, [pc, #636]	; (800e5bc <tcp_process+0x2bc>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	429a      	cmp	r2, r3
 800e342:	d123      	bne.n	800e38c <tcp_process+0x8c>
        acceptable = 1;
 800e344:	2301      	movs	r3, #1
 800e346:	76fb      	strb	r3, [r7, #27]
 800e348:	e020      	b.n	800e38c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e34e:	4b9c      	ldr	r3, [pc, #624]	; (800e5c0 <tcp_process+0x2c0>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	429a      	cmp	r2, r3
 800e354:	d102      	bne.n	800e35c <tcp_process+0x5c>
        acceptable = 1;
 800e356:	2301      	movs	r3, #1
 800e358:	76fb      	strb	r3, [r7, #27]
 800e35a:	e017      	b.n	800e38c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e35c:	4b98      	ldr	r3, [pc, #608]	; (800e5c0 <tcp_process+0x2c0>)
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e364:	1ad3      	subs	r3, r2, r3
 800e366:	2b00      	cmp	r3, #0
 800e368:	db10      	blt.n	800e38c <tcp_process+0x8c>
 800e36a:	4b95      	ldr	r3, [pc, #596]	; (800e5c0 <tcp_process+0x2c0>)
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e372:	6879      	ldr	r1, [r7, #4]
 800e374:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e376:	440b      	add	r3, r1
 800e378:	1ad3      	subs	r3, r2, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	dc06      	bgt.n	800e38c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	8b5b      	ldrh	r3, [r3, #26]
 800e382:	f043 0302 	orr.w	r3, r3, #2
 800e386:	b29a      	uxth	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e38c:	7efb      	ldrb	r3, [r7, #27]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d01b      	beq.n	800e3ca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	7d1b      	ldrb	r3, [r3, #20]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d106      	bne.n	800e3a8 <tcp_process+0xa8>
 800e39a:	4b84      	ldr	r3, [pc, #528]	; (800e5ac <tcp_process+0x2ac>)
 800e39c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e3a0:	4988      	ldr	r1, [pc, #544]	; (800e5c4 <tcp_process+0x2c4>)
 800e3a2:	4884      	ldr	r0, [pc, #528]	; (800e5b4 <tcp_process+0x2b4>)
 800e3a4:	f009 f908 	bl	80175b8 <iprintf>
      recv_flags |= TF_RESET;
 800e3a8:	4b87      	ldr	r3, [pc, #540]	; (800e5c8 <tcp_process+0x2c8>)
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	f043 0308 	orr.w	r3, r3, #8
 800e3b0:	b2da      	uxtb	r2, r3
 800e3b2:	4b85      	ldr	r3, [pc, #532]	; (800e5c8 <tcp_process+0x2c8>)
 800e3b4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	8b5b      	ldrh	r3, [r3, #26]
 800e3ba:	f023 0301 	bic.w	r3, r3, #1
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e3c4:	f06f 030d 	mvn.w	r3, #13
 800e3c8:	e37a      	b.n	800eac0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	e378      	b.n	800eac0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e3ce:	4b7a      	ldr	r3, [pc, #488]	; (800e5b8 <tcp_process+0x2b8>)
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	f003 0302 	and.w	r3, r3, #2
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d010      	beq.n	800e3fc <tcp_process+0xfc>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	7d1b      	ldrb	r3, [r3, #20]
 800e3de:	2b02      	cmp	r3, #2
 800e3e0:	d00c      	beq.n	800e3fc <tcp_process+0xfc>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	7d1b      	ldrb	r3, [r3, #20]
 800e3e6:	2b03      	cmp	r3, #3
 800e3e8:	d008      	beq.n	800e3fc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	8b5b      	ldrh	r3, [r3, #26]
 800e3ee:	f043 0302 	orr.w	r3, r3, #2
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	e361      	b.n	800eac0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	8b5b      	ldrh	r3, [r3, #26]
 800e400:	f003 0310 	and.w	r3, r3, #16
 800e404:	2b00      	cmp	r3, #0
 800e406:	d103      	bne.n	800e410 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e408:	4b70      	ldr	r3, [pc, #448]	; (800e5cc <tcp_process+0x2cc>)
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f001 fc2d 	bl	800fc80 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	7d1b      	ldrb	r3, [r3, #20]
 800e42a:	3b02      	subs	r3, #2
 800e42c:	2b07      	cmp	r3, #7
 800e42e:	f200 8337 	bhi.w	800eaa0 <tcp_process+0x7a0>
 800e432:	a201      	add	r2, pc, #4	; (adr r2, 800e438 <tcp_process+0x138>)
 800e434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e438:	0800e459 	.word	0x0800e459
 800e43c:	0800e689 	.word	0x0800e689
 800e440:	0800e801 	.word	0x0800e801
 800e444:	0800e82b 	.word	0x0800e82b
 800e448:	0800e94f 	.word	0x0800e94f
 800e44c:	0800e801 	.word	0x0800e801
 800e450:	0800e9db 	.word	0x0800e9db
 800e454:	0800ea6b 	.word	0x0800ea6b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e458:	4b57      	ldr	r3, [pc, #348]	; (800e5b8 <tcp_process+0x2b8>)
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	f003 0310 	and.w	r3, r3, #16
 800e460:	2b00      	cmp	r3, #0
 800e462:	f000 80e4 	beq.w	800e62e <tcp_process+0x32e>
 800e466:	4b54      	ldr	r3, [pc, #336]	; (800e5b8 <tcp_process+0x2b8>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	f003 0302 	and.w	r3, r3, #2
 800e46e:	2b00      	cmp	r3, #0
 800e470:	f000 80dd 	beq.w	800e62e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e478:	1c5a      	adds	r2, r3, #1
 800e47a:	4b50      	ldr	r3, [pc, #320]	; (800e5bc <tcp_process+0x2bc>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	429a      	cmp	r2, r3
 800e480:	f040 80d5 	bne.w	800e62e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e484:	4b4e      	ldr	r3, [pc, #312]	; (800e5c0 <tcp_process+0x2c0>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	1c5a      	adds	r2, r3, #1
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e496:	4b49      	ldr	r3, [pc, #292]	; (800e5bc <tcp_process+0x2bc>)
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e49e:	4b4c      	ldr	r3, [pc, #304]	; (800e5d0 <tcp_process+0x2d0>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	89db      	ldrh	r3, [r3, #14]
 800e4a4:	b29a      	uxth	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e4b8:	4b41      	ldr	r3, [pc, #260]	; (800e5c0 <tcp_process+0x2c0>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	1e5a      	subs	r2, r3, #1
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2204      	movs	r2, #4
 800e4c6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	3304      	adds	r3, #4
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f007 f8dd 	bl	8015690 <ip4_route>
 800e4d6:	4601      	mov	r1, r0
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	3304      	adds	r3, #4
 800e4dc:	461a      	mov	r2, r3
 800e4de:	4620      	mov	r0, r4
 800e4e0:	f7ff f88e 	bl	800d600 <tcp_eff_send_mss_netif>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4f0:	009a      	lsls	r2, r3, #2
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4f6:	005b      	lsls	r3, r3, #1
 800e4f8:	f241 111c 	movw	r1, #4380	; 0x111c
 800e4fc:	428b      	cmp	r3, r1
 800e4fe:	bf38      	it	cc
 800e500:	460b      	movcc	r3, r1
 800e502:	429a      	cmp	r2, r3
 800e504:	d204      	bcs.n	800e510 <tcp_process+0x210>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	e00d      	b.n	800e52c <tcp_process+0x22c>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e514:	005b      	lsls	r3, r3, #1
 800e516:	f241 121c 	movw	r2, #4380	; 0x111c
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d904      	bls.n	800e528 <tcp_process+0x228>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e522:	005b      	lsls	r3, r3, #1
 800e524:	b29b      	uxth	r3, r3
 800e526:	e001      	b.n	800e52c <tcp_process+0x22c>
 800e528:	f241 131c 	movw	r3, #4380	; 0x111c
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d106      	bne.n	800e54a <tcp_process+0x24a>
 800e53c:	4b1b      	ldr	r3, [pc, #108]	; (800e5ac <tcp_process+0x2ac>)
 800e53e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e542:	4924      	ldr	r1, [pc, #144]	; (800e5d4 <tcp_process+0x2d4>)
 800e544:	481b      	ldr	r0, [pc, #108]	; (800e5b4 <tcp_process+0x2b4>)
 800e546:	f009 f837 	bl	80175b8 <iprintf>
        --pcb->snd_queuelen;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e550:	3b01      	subs	r3, #1
 800e552:	b29a      	uxth	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e55e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d111      	bne.n	800e58a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e56a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d106      	bne.n	800e580 <tcp_process+0x280>
 800e572:	4b0e      	ldr	r3, [pc, #56]	; (800e5ac <tcp_process+0x2ac>)
 800e574:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e578:	4917      	ldr	r1, [pc, #92]	; (800e5d8 <tcp_process+0x2d8>)
 800e57a:	480e      	ldr	r0, [pc, #56]	; (800e5b4 <tcp_process+0x2b4>)
 800e57c:	f009 f81c 	bl	80175b8 <iprintf>
          pcb->unsent = rseg->next;
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	66da      	str	r2, [r3, #108]	; 0x6c
 800e588:	e003      	b.n	800e592 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e592:	69f8      	ldr	r0, [r7, #28]
 800e594:	f7fe fc87 	bl	800cea6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d11d      	bne.n	800e5dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5a6:	861a      	strh	r2, [r3, #48]	; 0x30
 800e5a8:	e01f      	b.n	800e5ea <tcp_process+0x2ea>
 800e5aa:	bf00      	nop
 800e5ac:	0801a4e8 	.word	0x0801a4e8
 800e5b0:	0801a720 	.word	0x0801a720
 800e5b4:	0801a534 	.word	0x0801a534
 800e5b8:	20000284 	.word	0x20000284
 800e5bc:	2000027c 	.word	0x2000027c
 800e5c0:	20000278 	.word	0x20000278
 800e5c4:	0801a73c 	.word	0x0801a73c
 800e5c8:	20000285 	.word	0x20000285
 800e5cc:	20006d10 	.word	0x20006d10
 800e5d0:	20000268 	.word	0x20000268
 800e5d4:	0801a75c 	.word	0x0801a75c
 800e5d8:	0801a774 	.word	0x0801a774
        } else {
          pcb->rtime = 0;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00a      	beq.n	800e60a <tcp_process+0x30a>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	6910      	ldr	r0, [r2, #16]
 800e5fe:	2200      	movs	r2, #0
 800e600:	6879      	ldr	r1, [r7, #4]
 800e602:	4798      	blx	r3
 800e604:	4603      	mov	r3, r0
 800e606:	76bb      	strb	r3, [r7, #26]
 800e608:	e001      	b.n	800e60e <tcp_process+0x30e>
 800e60a:	2300      	movs	r3, #0
 800e60c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e60e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e612:	f113 0f0d 	cmn.w	r3, #13
 800e616:	d102      	bne.n	800e61e <tcp_process+0x31e>
          return ERR_ABRT;
 800e618:	f06f 030c 	mvn.w	r3, #12
 800e61c:	e250      	b.n	800eac0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	8b5b      	ldrh	r3, [r3, #26]
 800e622:	f043 0302 	orr.w	r3, r3, #2
 800e626:	b29a      	uxth	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e62c:	e23a      	b.n	800eaa4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e62e:	4b9d      	ldr	r3, [pc, #628]	; (800e8a4 <tcp_process+0x5a4>)
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	f003 0310 	and.w	r3, r3, #16
 800e636:	2b00      	cmp	r3, #0
 800e638:	f000 8234 	beq.w	800eaa4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e63c:	4b9a      	ldr	r3, [pc, #616]	; (800e8a8 <tcp_process+0x5a8>)
 800e63e:	6819      	ldr	r1, [r3, #0]
 800e640:	4b9a      	ldr	r3, [pc, #616]	; (800e8ac <tcp_process+0x5ac>)
 800e642:	881b      	ldrh	r3, [r3, #0]
 800e644:	461a      	mov	r2, r3
 800e646:	4b9a      	ldr	r3, [pc, #616]	; (800e8b0 <tcp_process+0x5b0>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e64c:	4b99      	ldr	r3, [pc, #612]	; (800e8b4 <tcp_process+0x5b4>)
 800e64e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e650:	885b      	ldrh	r3, [r3, #2]
 800e652:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e654:	4a97      	ldr	r2, [pc, #604]	; (800e8b4 <tcp_process+0x5b4>)
 800e656:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e658:	8812      	ldrh	r2, [r2, #0]
 800e65a:	b292      	uxth	r2, r2
 800e65c:	9202      	str	r2, [sp, #8]
 800e65e:	9301      	str	r3, [sp, #4]
 800e660:	4b95      	ldr	r3, [pc, #596]	; (800e8b8 <tcp_process+0x5b8>)
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	4b95      	ldr	r3, [pc, #596]	; (800e8bc <tcp_process+0x5bc>)
 800e666:	4602      	mov	r2, r0
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f003 f8db 	bl	8011824 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e674:	2b05      	cmp	r3, #5
 800e676:	f200 8215 	bhi.w	800eaa4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2200      	movs	r2, #0
 800e67e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f002 fea5 	bl	80113d0 <tcp_rexmit_rto>
      break;
 800e686:	e20d      	b.n	800eaa4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e688:	4b86      	ldr	r3, [pc, #536]	; (800e8a4 <tcp_process+0x5a4>)
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	f003 0310 	and.w	r3, r3, #16
 800e690:	2b00      	cmp	r3, #0
 800e692:	f000 80a1 	beq.w	800e7d8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e696:	4b84      	ldr	r3, [pc, #528]	; (800e8a8 <tcp_process+0x5a8>)
 800e698:	681a      	ldr	r2, [r3, #0]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e69e:	1ad3      	subs	r3, r2, r3
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	db7e      	blt.n	800e7a4 <tcp_process+0x4a4>
 800e6a6:	4b80      	ldr	r3, [pc, #512]	; (800e8a8 <tcp_process+0x5a8>)
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6ae:	1ad3      	subs	r3, r2, r3
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	dc77      	bgt.n	800e7a4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2204      	movs	r2, #4
 800e6b8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d102      	bne.n	800e6c8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e6c2:	23fa      	movs	r3, #250	; 0xfa
 800e6c4:	76bb      	strb	r3, [r7, #26]
 800e6c6:	e01d      	b.n	800e704 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d106      	bne.n	800e6e0 <tcp_process+0x3e0>
 800e6d2:	4b7b      	ldr	r3, [pc, #492]	; (800e8c0 <tcp_process+0x5c0>)
 800e6d4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e6d8:	497a      	ldr	r1, [pc, #488]	; (800e8c4 <tcp_process+0x5c4>)
 800e6da:	487b      	ldr	r0, [pc, #492]	; (800e8c8 <tcp_process+0x5c8>)
 800e6dc:	f008 ff6c 	bl	80175b8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6e4:	699b      	ldr	r3, [r3, #24]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00a      	beq.n	800e700 <tcp_process+0x400>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ee:	699b      	ldr	r3, [r3, #24]
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	6910      	ldr	r0, [r2, #16]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	6879      	ldr	r1, [r7, #4]
 800e6f8:	4798      	blx	r3
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	76bb      	strb	r3, [r7, #26]
 800e6fe:	e001      	b.n	800e704 <tcp_process+0x404>
 800e700:	23f0      	movs	r3, #240	; 0xf0
 800e702:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e704:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00a      	beq.n	800e722 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e70c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e710:	f113 0f0d 	cmn.w	r3, #13
 800e714:	d002      	beq.n	800e71c <tcp_process+0x41c>
              tcp_abort(pcb);
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f7fd fce4 	bl	800c0e4 <tcp_abort>
            }
            return ERR_ABRT;
 800e71c:	f06f 030c 	mvn.w	r3, #12
 800e720:	e1ce      	b.n	800eac0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f000 fae0 	bl	800ece8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e728:	4b68      	ldr	r3, [pc, #416]	; (800e8cc <tcp_process+0x5cc>)
 800e72a:	881b      	ldrh	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d005      	beq.n	800e73c <tcp_process+0x43c>
            recv_acked--;
 800e730:	4b66      	ldr	r3, [pc, #408]	; (800e8cc <tcp_process+0x5cc>)
 800e732:	881b      	ldrh	r3, [r3, #0]
 800e734:	3b01      	subs	r3, #1
 800e736:	b29a      	uxth	r2, r3
 800e738:	4b64      	ldr	r3, [pc, #400]	; (800e8cc <tcp_process+0x5cc>)
 800e73a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e740:	009a      	lsls	r2, r3, #2
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e746:	005b      	lsls	r3, r3, #1
 800e748:	f241 111c 	movw	r1, #4380	; 0x111c
 800e74c:	428b      	cmp	r3, r1
 800e74e:	bf38      	it	cc
 800e750:	460b      	movcc	r3, r1
 800e752:	429a      	cmp	r2, r3
 800e754:	d204      	bcs.n	800e760 <tcp_process+0x460>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	e00d      	b.n	800e77c <tcp_process+0x47c>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e764:	005b      	lsls	r3, r3, #1
 800e766:	f241 121c 	movw	r2, #4380	; 0x111c
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d904      	bls.n	800e778 <tcp_process+0x478>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e772:	005b      	lsls	r3, r3, #1
 800e774:	b29b      	uxth	r3, r3
 800e776:	e001      	b.n	800e77c <tcp_process+0x47c>
 800e778:	f241 131c 	movw	r3, #4380	; 0x111c
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e782:	4b53      	ldr	r3, [pc, #332]	; (800e8d0 <tcp_process+0x5d0>)
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	f003 0320 	and.w	r3, r3, #32
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d037      	beq.n	800e7fe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	8b5b      	ldrh	r3, [r3, #26]
 800e792:	f043 0302 	orr.w	r3, r3, #2
 800e796:	b29a      	uxth	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2207      	movs	r2, #7
 800e7a0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e7a2:	e02c      	b.n	800e7fe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7a4:	4b40      	ldr	r3, [pc, #256]	; (800e8a8 <tcp_process+0x5a8>)
 800e7a6:	6819      	ldr	r1, [r3, #0]
 800e7a8:	4b40      	ldr	r3, [pc, #256]	; (800e8ac <tcp_process+0x5ac>)
 800e7aa:	881b      	ldrh	r3, [r3, #0]
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	4b40      	ldr	r3, [pc, #256]	; (800e8b0 <tcp_process+0x5b0>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7b4:	4b3f      	ldr	r3, [pc, #252]	; (800e8b4 <tcp_process+0x5b4>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7b8:	885b      	ldrh	r3, [r3, #2]
 800e7ba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7bc:	4a3d      	ldr	r2, [pc, #244]	; (800e8b4 <tcp_process+0x5b4>)
 800e7be:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7c0:	8812      	ldrh	r2, [r2, #0]
 800e7c2:	b292      	uxth	r2, r2
 800e7c4:	9202      	str	r2, [sp, #8]
 800e7c6:	9301      	str	r3, [sp, #4]
 800e7c8:	4b3b      	ldr	r3, [pc, #236]	; (800e8b8 <tcp_process+0x5b8>)
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	4b3b      	ldr	r3, [pc, #236]	; (800e8bc <tcp_process+0x5bc>)
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f003 f827 	bl	8011824 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e7d6:	e167      	b.n	800eaa8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e7d8:	4b32      	ldr	r3, [pc, #200]	; (800e8a4 <tcp_process+0x5a4>)
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	f003 0302 	and.w	r3, r3, #2
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	f000 8161 	beq.w	800eaa8 <tcp_process+0x7a8>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ea:	1e5a      	subs	r2, r3, #1
 800e7ec:	4b30      	ldr	r3, [pc, #192]	; (800e8b0 <tcp_process+0x5b0>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	f040 8159 	bne.w	800eaa8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f002 fe0c 	bl	8011414 <tcp_rexmit>
      break;
 800e7fc:	e154      	b.n	800eaa8 <tcp_process+0x7a8>
 800e7fe:	e153      	b.n	800eaa8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 fa71 	bl	800ece8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e806:	4b32      	ldr	r3, [pc, #200]	; (800e8d0 <tcp_process+0x5d0>)
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	f003 0320 	and.w	r3, r3, #32
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f000 814c 	beq.w	800eaac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	8b5b      	ldrh	r3, [r3, #26]
 800e818:	f043 0302 	orr.w	r3, r3, #2
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2207      	movs	r2, #7
 800e826:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e828:	e140      	b.n	800eaac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 fa5c 	bl	800ece8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e830:	4b27      	ldr	r3, [pc, #156]	; (800e8d0 <tcp_process+0x5d0>)
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	f003 0320 	and.w	r3, r3, #32
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d071      	beq.n	800e920 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e83c:	4b19      	ldr	r3, [pc, #100]	; (800e8a4 <tcp_process+0x5a4>)
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	f003 0310 	and.w	r3, r3, #16
 800e844:	2b00      	cmp	r3, #0
 800e846:	d060      	beq.n	800e90a <tcp_process+0x60a>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e84c:	4b16      	ldr	r3, [pc, #88]	; (800e8a8 <tcp_process+0x5a8>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	429a      	cmp	r2, r3
 800e852:	d15a      	bne.n	800e90a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d156      	bne.n	800e90a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	8b5b      	ldrh	r3, [r3, #26]
 800e860:	f043 0302 	orr.w	r3, r3, #2
 800e864:	b29a      	uxth	r2, r3
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f7fe fdbe 	bl	800d3ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e870:	4b18      	ldr	r3, [pc, #96]	; (800e8d4 <tcp_process+0x5d4>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	429a      	cmp	r2, r3
 800e878:	d105      	bne.n	800e886 <tcp_process+0x586>
 800e87a:	4b16      	ldr	r3, [pc, #88]	; (800e8d4 <tcp_process+0x5d4>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	4a14      	ldr	r2, [pc, #80]	; (800e8d4 <tcp_process+0x5d4>)
 800e882:	6013      	str	r3, [r2, #0]
 800e884:	e02e      	b.n	800e8e4 <tcp_process+0x5e4>
 800e886:	4b13      	ldr	r3, [pc, #76]	; (800e8d4 <tcp_process+0x5d4>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	617b      	str	r3, [r7, #20]
 800e88c:	e027      	b.n	800e8de <tcp_process+0x5de>
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	429a      	cmp	r2, r3
 800e896:	d11f      	bne.n	800e8d8 <tcp_process+0x5d8>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	68da      	ldr	r2, [r3, #12]
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	60da      	str	r2, [r3, #12]
 800e8a0:	e020      	b.n	800e8e4 <tcp_process+0x5e4>
 800e8a2:	bf00      	nop
 800e8a4:	20000284 	.word	0x20000284
 800e8a8:	2000027c 	.word	0x2000027c
 800e8ac:	20000282 	.word	0x20000282
 800e8b0:	20000278 	.word	0x20000278
 800e8b4:	20000268 	.word	0x20000268
 800e8b8:	200037b8 	.word	0x200037b8
 800e8bc:	200037bc 	.word	0x200037bc
 800e8c0:	0801a4e8 	.word	0x0801a4e8
 800e8c4:	0801a788 	.word	0x0801a788
 800e8c8:	0801a534 	.word	0x0801a534
 800e8cc:	20000280 	.word	0x20000280
 800e8d0:	20000285 	.word	0x20000285
 800e8d4:	20006d0c 	.word	0x20006d0c
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	617b      	str	r3, [r7, #20]
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d1d4      	bne.n	800e88e <tcp_process+0x58e>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	60da      	str	r2, [r3, #12]
 800e8ea:	4b77      	ldr	r3, [pc, #476]	; (800eac8 <tcp_process+0x7c8>)
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	220a      	movs	r2, #10
 800e8f4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e8f6:	4b75      	ldr	r3, [pc, #468]	; (800eacc <tcp_process+0x7cc>)
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	60da      	str	r2, [r3, #12]
 800e8fe:	4a73      	ldr	r2, [pc, #460]	; (800eacc <tcp_process+0x7cc>)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6013      	str	r3, [r2, #0]
 800e904:	f003 f950 	bl	8011ba8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e908:	e0d2      	b.n	800eab0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	8b5b      	ldrh	r3, [r3, #26]
 800e90e:	f043 0302 	orr.w	r3, r3, #2
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2208      	movs	r2, #8
 800e91c:	751a      	strb	r2, [r3, #20]
      break;
 800e91e:	e0c7      	b.n	800eab0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e920:	4b6b      	ldr	r3, [pc, #428]	; (800ead0 <tcp_process+0x7d0>)
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	f003 0310 	and.w	r3, r3, #16
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f000 80c1 	beq.w	800eab0 <tcp_process+0x7b0>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e932:	4b68      	ldr	r3, [pc, #416]	; (800ead4 <tcp_process+0x7d4>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	429a      	cmp	r2, r3
 800e938:	f040 80ba 	bne.w	800eab0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e940:	2b00      	cmp	r3, #0
 800e942:	f040 80b5 	bne.w	800eab0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2206      	movs	r2, #6
 800e94a:	751a      	strb	r2, [r3, #20]
      break;
 800e94c:	e0b0      	b.n	800eab0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 f9ca 	bl	800ece8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e954:	4b60      	ldr	r3, [pc, #384]	; (800ead8 <tcp_process+0x7d8>)
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	f003 0320 	and.w	r3, r3, #32
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f000 80a9 	beq.w	800eab4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	8b5b      	ldrh	r3, [r3, #26]
 800e966:	f043 0302 	orr.w	r3, r3, #2
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7fe fd3b 	bl	800d3ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e976:	4b59      	ldr	r3, [pc, #356]	; (800eadc <tcp_process+0x7dc>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d105      	bne.n	800e98c <tcp_process+0x68c>
 800e980:	4b56      	ldr	r3, [pc, #344]	; (800eadc <tcp_process+0x7dc>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	4a55      	ldr	r2, [pc, #340]	; (800eadc <tcp_process+0x7dc>)
 800e988:	6013      	str	r3, [r2, #0]
 800e98a:	e013      	b.n	800e9b4 <tcp_process+0x6b4>
 800e98c:	4b53      	ldr	r3, [pc, #332]	; (800eadc <tcp_process+0x7dc>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	613b      	str	r3, [r7, #16]
 800e992:	e00c      	b.n	800e9ae <tcp_process+0x6ae>
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d104      	bne.n	800e9a8 <tcp_process+0x6a8>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	68da      	ldr	r2, [r3, #12]
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	60da      	str	r2, [r3, #12]
 800e9a6:	e005      	b.n	800e9b4 <tcp_process+0x6b4>
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	613b      	str	r3, [r7, #16]
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d1ef      	bne.n	800e994 <tcp_process+0x694>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	60da      	str	r2, [r3, #12]
 800e9ba:	4b43      	ldr	r3, [pc, #268]	; (800eac8 <tcp_process+0x7c8>)
 800e9bc:	2201      	movs	r2, #1
 800e9be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	220a      	movs	r2, #10
 800e9c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e9c6:	4b41      	ldr	r3, [pc, #260]	; (800eacc <tcp_process+0x7cc>)
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	60da      	str	r2, [r3, #12]
 800e9ce:	4a3f      	ldr	r2, [pc, #252]	; (800eacc <tcp_process+0x7cc>)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	f003 f8e8 	bl	8011ba8 <tcp_timer_needed>
      }
      break;
 800e9d8:	e06c      	b.n	800eab4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 f984 	bl	800ece8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e9e0:	4b3b      	ldr	r3, [pc, #236]	; (800ead0 <tcp_process+0x7d0>)
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	f003 0310 	and.w	r3, r3, #16
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d065      	beq.n	800eab8 <tcp_process+0x7b8>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9f0:	4b38      	ldr	r3, [pc, #224]	; (800ead4 <tcp_process+0x7d4>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d15f      	bne.n	800eab8 <tcp_process+0x7b8>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d15b      	bne.n	800eab8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f7fe fcf3 	bl	800d3ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ea06:	4b35      	ldr	r3, [pc, #212]	; (800eadc <tcp_process+0x7dc>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	687a      	ldr	r2, [r7, #4]
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	d105      	bne.n	800ea1c <tcp_process+0x71c>
 800ea10:	4b32      	ldr	r3, [pc, #200]	; (800eadc <tcp_process+0x7dc>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	4a31      	ldr	r2, [pc, #196]	; (800eadc <tcp_process+0x7dc>)
 800ea18:	6013      	str	r3, [r2, #0]
 800ea1a:	e013      	b.n	800ea44 <tcp_process+0x744>
 800ea1c:	4b2f      	ldr	r3, [pc, #188]	; (800eadc <tcp_process+0x7dc>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	60fb      	str	r3, [r7, #12]
 800ea22:	e00c      	b.n	800ea3e <tcp_process+0x73e>
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d104      	bne.n	800ea38 <tcp_process+0x738>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	68da      	ldr	r2, [r3, #12]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	60da      	str	r2, [r3, #12]
 800ea36:	e005      	b.n	800ea44 <tcp_process+0x744>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	60fb      	str	r3, [r7, #12]
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d1ef      	bne.n	800ea24 <tcp_process+0x724>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2200      	movs	r2, #0
 800ea48:	60da      	str	r2, [r3, #12]
 800ea4a:	4b1f      	ldr	r3, [pc, #124]	; (800eac8 <tcp_process+0x7c8>)
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	220a      	movs	r2, #10
 800ea54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ea56:	4b1d      	ldr	r3, [pc, #116]	; (800eacc <tcp_process+0x7cc>)
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	60da      	str	r2, [r3, #12]
 800ea5e:	4a1b      	ldr	r2, [pc, #108]	; (800eacc <tcp_process+0x7cc>)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6013      	str	r3, [r2, #0]
 800ea64:	f003 f8a0 	bl	8011ba8 <tcp_timer_needed>
      }
      break;
 800ea68:	e026      	b.n	800eab8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 f93c 	bl	800ece8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ea70:	4b17      	ldr	r3, [pc, #92]	; (800ead0 <tcp_process+0x7d0>)
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	f003 0310 	and.w	r3, r3, #16
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d01f      	beq.n	800eabc <tcp_process+0x7bc>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea80:	4b14      	ldr	r3, [pc, #80]	; (800ead4 <tcp_process+0x7d4>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d119      	bne.n	800eabc <tcp_process+0x7bc>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d115      	bne.n	800eabc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ea90:	4b11      	ldr	r3, [pc, #68]	; (800ead8 <tcp_process+0x7d8>)
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	f043 0310 	orr.w	r3, r3, #16
 800ea98:	b2da      	uxtb	r2, r3
 800ea9a:	4b0f      	ldr	r3, [pc, #60]	; (800ead8 <tcp_process+0x7d8>)
 800ea9c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ea9e:	e00d      	b.n	800eabc <tcp_process+0x7bc>
    default:
      break;
 800eaa0:	bf00      	nop
 800eaa2:	e00c      	b.n	800eabe <tcp_process+0x7be>
      break;
 800eaa4:	bf00      	nop
 800eaa6:	e00a      	b.n	800eabe <tcp_process+0x7be>
      break;
 800eaa8:	bf00      	nop
 800eaaa:	e008      	b.n	800eabe <tcp_process+0x7be>
      break;
 800eaac:	bf00      	nop
 800eaae:	e006      	b.n	800eabe <tcp_process+0x7be>
      break;
 800eab0:	bf00      	nop
 800eab2:	e004      	b.n	800eabe <tcp_process+0x7be>
      break;
 800eab4:	bf00      	nop
 800eab6:	e002      	b.n	800eabe <tcp_process+0x7be>
      break;
 800eab8:	bf00      	nop
 800eaba:	e000      	b.n	800eabe <tcp_process+0x7be>
      break;
 800eabc:	bf00      	nop
  }
  return ERR_OK;
 800eabe:	2300      	movs	r3, #0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3724      	adds	r7, #36	; 0x24
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd90      	pop	{r4, r7, pc}
 800eac8:	20006d08 	.word	0x20006d08
 800eacc:	20006d1c 	.word	0x20006d1c
 800ead0:	20000284 	.word	0x20000284
 800ead4:	2000027c 	.word	0x2000027c
 800ead8:	20000285 	.word	0x20000285
 800eadc:	20006d0c 	.word	0x20006d0c

0800eae0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800eae0:	b590      	push	{r4, r7, lr}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d106      	bne.n	800eafe <tcp_oos_insert_segment+0x1e>
 800eaf0:	4b3b      	ldr	r3, [pc, #236]	; (800ebe0 <tcp_oos_insert_segment+0x100>)
 800eaf2:	f240 421f 	movw	r2, #1055	; 0x41f
 800eaf6:	493b      	ldr	r1, [pc, #236]	; (800ebe4 <tcp_oos_insert_segment+0x104>)
 800eaf8:	483b      	ldr	r0, [pc, #236]	; (800ebe8 <tcp_oos_insert_segment+0x108>)
 800eafa:	f008 fd5d 	bl	80175b8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	899b      	ldrh	r3, [r3, #12]
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fb fa0c 	bl	8009f24 <lwip_htons>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	f003 0301 	and.w	r3, r3, #1
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d028      	beq.n	800eb6a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eb18:	6838      	ldr	r0, [r7, #0]
 800eb1a:	f7fe f9af 	bl	800ce7c <tcp_segs_free>
    next = NULL;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	603b      	str	r3, [r7, #0]
 800eb22:	e056      	b.n	800ebd2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	899b      	ldrh	r3, [r3, #12]
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7fb f9f9 	bl	8009f24 <lwip_htons>
 800eb32:	4603      	mov	r3, r0
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	f003 0301 	and.w	r3, r3, #1
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d00d      	beq.n	800eb5a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	899b      	ldrh	r3, [r3, #12]
 800eb44:	b29c      	uxth	r4, r3
 800eb46:	2001      	movs	r0, #1
 800eb48:	f7fb f9ec 	bl	8009f24 <lwip_htons>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	461a      	mov	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	68db      	ldr	r3, [r3, #12]
 800eb54:	4322      	orrs	r2, r4
 800eb56:	b292      	uxth	r2, r2
 800eb58:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f7fe f99e 	bl	800cea6 <tcp_seg_free>
    while (next &&
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00e      	beq.n	800eb8e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	891b      	ldrh	r3, [r3, #8]
 800eb74:	461a      	mov	r2, r3
 800eb76:	4b1d      	ldr	r3, [pc, #116]	; (800ebec <tcp_oos_insert_segment+0x10c>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	441a      	add	r2, r3
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	6839      	ldr	r1, [r7, #0]
 800eb84:	8909      	ldrh	r1, [r1, #8]
 800eb86:	440b      	add	r3, r1
 800eb88:	1ad3      	subs	r3, r2, r3
    while (next &&
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	daca      	bge.n	800eb24 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d01e      	beq.n	800ebd2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	891b      	ldrh	r3, [r3, #8]
 800eb98:	461a      	mov	r2, r3
 800eb9a:	4b14      	ldr	r3, [pc, #80]	; (800ebec <tcp_oos_insert_segment+0x10c>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	441a      	add	r2, r3
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	dd12      	ble.n	800ebd2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	68db      	ldr	r3, [r3, #12]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	4b0d      	ldr	r3, [pc, #52]	; (800ebec <tcp_oos_insert_segment+0x10c>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	1ad3      	subs	r3, r2, r3
 800ebbc:	b29a      	uxth	r2, r3
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	685a      	ldr	r2, [r3, #4]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	891b      	ldrh	r3, [r3, #8]
 800ebca:	4619      	mov	r1, r3
 800ebcc:	4610      	mov	r0, r2
 800ebce:	f7fc fb07 	bl	800b1e0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	683a      	ldr	r2, [r7, #0]
 800ebd6:	601a      	str	r2, [r3, #0]
}
 800ebd8:	bf00      	nop
 800ebda:	3714      	adds	r7, #20
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd90      	pop	{r4, r7, pc}
 800ebe0:	0801a4e8 	.word	0x0801a4e8
 800ebe4:	0801a7a8 	.word	0x0801a7a8
 800ebe8:	0801a534 	.word	0x0801a534
 800ebec:	20000278 	.word	0x20000278

0800ebf0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ebf0:	b5b0      	push	{r4, r5, r7, lr}
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	607a      	str	r2, [r7, #4]
 800ebfc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ebfe:	e03e      	b.n	800ec7e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fc fcf4 	bl	800b5fc <pbuf_clen>
 800ec14:	4603      	mov	r3, r0
 800ec16:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec1e:	8a7a      	ldrh	r2, [r7, #18]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d906      	bls.n	800ec32 <tcp_free_acked_segments+0x42>
 800ec24:	4b2a      	ldr	r3, [pc, #168]	; (800ecd0 <tcp_free_acked_segments+0xe0>)
 800ec26:	f240 4257 	movw	r2, #1111	; 0x457
 800ec2a:	492a      	ldr	r1, [pc, #168]	; (800ecd4 <tcp_free_acked_segments+0xe4>)
 800ec2c:	482a      	ldr	r0, [pc, #168]	; (800ecd8 <tcp_free_acked_segments+0xe8>)
 800ec2e:	f008 fcc3 	bl	80175b8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ec38:	8a7b      	ldrh	r3, [r7, #18]
 800ec3a:	1ad3      	subs	r3, r2, r3
 800ec3c:	b29a      	uxth	r2, r3
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	891a      	ldrh	r2, [r3, #8]
 800ec48:	4b24      	ldr	r3, [pc, #144]	; (800ecdc <tcp_free_acked_segments+0xec>)
 800ec4a:	881b      	ldrh	r3, [r3, #0]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	b29a      	uxth	r2, r3
 800ec50:	4b22      	ldr	r3, [pc, #136]	; (800ecdc <tcp_free_acked_segments+0xec>)
 800ec52:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ec54:	6978      	ldr	r0, [r7, #20]
 800ec56:	f7fe f926 	bl	800cea6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d00c      	beq.n	800ec7e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d109      	bne.n	800ec7e <tcp_free_acked_segments+0x8e>
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d106      	bne.n	800ec7e <tcp_free_acked_segments+0x8e>
 800ec70:	4b17      	ldr	r3, [pc, #92]	; (800ecd0 <tcp_free_acked_segments+0xe0>)
 800ec72:	f240 4261 	movw	r2, #1121	; 0x461
 800ec76:	491a      	ldr	r1, [pc, #104]	; (800ece0 <tcp_free_acked_segments+0xf0>)
 800ec78:	4817      	ldr	r0, [pc, #92]	; (800ecd8 <tcp_free_acked_segments+0xe8>)
 800ec7a:	f008 fc9d 	bl	80175b8 <iprintf>
  while (seg_list != NULL &&
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d020      	beq.n	800ecc6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fb f95f 	bl	8009f4e <lwip_htonl>
 800ec90:	4604      	mov	r4, r0
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	891b      	ldrh	r3, [r3, #8]
 800ec96:	461d      	mov	r5, r3
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	899b      	ldrh	r3, [r3, #12]
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fb f93f 	bl	8009f24 <lwip_htons>
 800eca6:	4603      	mov	r3, r0
 800eca8:	b2db      	uxtb	r3, r3
 800ecaa:	f003 0303 	and.w	r3, r3, #3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d001      	beq.n	800ecb6 <tcp_free_acked_segments+0xc6>
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	e000      	b.n	800ecb8 <tcp_free_acked_segments+0xc8>
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	442b      	add	r3, r5
 800ecba:	18e2      	adds	r2, r4, r3
 800ecbc:	4b09      	ldr	r3, [pc, #36]	; (800ece4 <tcp_free_acked_segments+0xf4>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	dd9c      	ble.n	800ec00 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ecc6:	68bb      	ldr	r3, [r7, #8]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3718      	adds	r7, #24
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bdb0      	pop	{r4, r5, r7, pc}
 800ecd0:	0801a4e8 	.word	0x0801a4e8
 800ecd4:	0801a7d0 	.word	0x0801a7d0
 800ecd8:	0801a534 	.word	0x0801a534
 800ecdc:	20000280 	.word	0x20000280
 800ece0:	0801a7f8 	.word	0x0801a7f8
 800ece4:	2000027c 	.word	0x2000027c

0800ece8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ece8:	b5b0      	push	{r4, r5, r7, lr}
 800ecea:	b094      	sub	sp, #80	; 0x50
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d106      	bne.n	800ed08 <tcp_receive+0x20>
 800ecfa:	4ba6      	ldr	r3, [pc, #664]	; (800ef94 <tcp_receive+0x2ac>)
 800ecfc:	f240 427b 	movw	r2, #1147	; 0x47b
 800ed00:	49a5      	ldr	r1, [pc, #660]	; (800ef98 <tcp_receive+0x2b0>)
 800ed02:	48a6      	ldr	r0, [pc, #664]	; (800ef9c <tcp_receive+0x2b4>)
 800ed04:	f008 fc58 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	7d1b      	ldrb	r3, [r3, #20]
 800ed0c:	2b03      	cmp	r3, #3
 800ed0e:	d806      	bhi.n	800ed1e <tcp_receive+0x36>
 800ed10:	4ba0      	ldr	r3, [pc, #640]	; (800ef94 <tcp_receive+0x2ac>)
 800ed12:	f240 427c 	movw	r2, #1148	; 0x47c
 800ed16:	49a2      	ldr	r1, [pc, #648]	; (800efa0 <tcp_receive+0x2b8>)
 800ed18:	48a0      	ldr	r0, [pc, #640]	; (800ef9c <tcp_receive+0x2b4>)
 800ed1a:	f008 fc4d 	bl	80175b8 <iprintf>

  if (flags & TCP_ACK) {
 800ed1e:	4ba1      	ldr	r3, [pc, #644]	; (800efa4 <tcp_receive+0x2bc>)
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	f003 0310 	and.w	r3, r3, #16
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	f000 8263 	beq.w	800f1f2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed32:	461a      	mov	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed38:	4413      	add	r3, r2
 800ed3a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed40:	4b99      	ldr	r3, [pc, #612]	; (800efa8 <tcp_receive+0x2c0>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	1ad3      	subs	r3, r2, r3
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	db1b      	blt.n	800ed82 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed4e:	4b96      	ldr	r3, [pc, #600]	; (800efa8 <tcp_receive+0x2c0>)
 800ed50:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d106      	bne.n	800ed64 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed5a:	4b94      	ldr	r3, [pc, #592]	; (800efac <tcp_receive+0x2c4>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	1ad3      	subs	r3, r2, r3
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	db0e      	blt.n	800ed82 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed68:	4b90      	ldr	r3, [pc, #576]	; (800efac <tcp_receive+0x2c4>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d125      	bne.n	800edbc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ed70:	4b8f      	ldr	r3, [pc, #572]	; (800efb0 <tcp_receive+0x2c8>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	89db      	ldrh	r3, [r3, #14]
 800ed76:	b29a      	uxth	r2, r3
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d91c      	bls.n	800edbc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ed82:	4b8b      	ldr	r3, [pc, #556]	; (800efb0 <tcp_receive+0x2c8>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	89db      	ldrh	r3, [r3, #14]
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d205      	bcs.n	800edac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800edac:	4b7e      	ldr	r3, [pc, #504]	; (800efa8 <tcp_receive+0x2c0>)
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800edb4:	4b7d      	ldr	r3, [pc, #500]	; (800efac <tcp_receive+0x2c4>)
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800edbc:	4b7b      	ldr	r3, [pc, #492]	; (800efac <tcp_receive+0x2c4>)
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edc4:	1ad3      	subs	r3, r2, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	dc58      	bgt.n	800ee7c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800edca:	4b7a      	ldr	r3, [pc, #488]	; (800efb4 <tcp_receive+0x2cc>)
 800edcc:	881b      	ldrh	r3, [r3, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d14b      	bne.n	800ee6a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800eddc:	4413      	add	r3, r2
 800edde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d142      	bne.n	800ee6a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800edea:	2b00      	cmp	r3, #0
 800edec:	db3d      	blt.n	800ee6a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edf2:	4b6e      	ldr	r3, [pc, #440]	; (800efac <tcp_receive+0x2c4>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d137      	bne.n	800ee6a <tcp_receive+0x182>
              found_dupack = 1;
 800edfa:	2301      	movs	r3, #1
 800edfc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee04:	2bff      	cmp	r3, #255	; 0xff
 800ee06:	d007      	beq.n	800ee18 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee0e:	3301      	adds	r3, #1
 800ee10:	b2da      	uxtb	r2, r3
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee1e:	2b03      	cmp	r3, #3
 800ee20:	d91b      	bls.n	800ee5a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee2c:	4413      	add	r3, r2
 800ee2e:	b29a      	uxth	r2, r3
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d30a      	bcc.n	800ee50 <tcp_receive+0x168>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee44:	4413      	add	r3, r2
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ee4e:	e004      	b.n	800ee5a <tcp_receive+0x172>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee60:	2b02      	cmp	r3, #2
 800ee62:	d902      	bls.n	800ee6a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f002 fb41 	bl	80114ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ee6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	f040 8160 	bne.w	800f132 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ee7a:	e15a      	b.n	800f132 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee7c:	4b4b      	ldr	r3, [pc, #300]	; (800efac <tcp_receive+0x2c4>)
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee84:	1ad3      	subs	r3, r2, r3
 800ee86:	3b01      	subs	r3, #1
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f2c0 814d 	blt.w	800f128 <tcp_receive+0x440>
 800ee8e:	4b47      	ldr	r3, [pc, #284]	; (800efac <tcp_receive+0x2c4>)
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee96:	1ad3      	subs	r3, r2, r3
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f300 8145 	bgt.w	800f128 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	8b5b      	ldrh	r3, [r3, #26]
 800eea2:	f003 0304 	and.w	r3, r3, #4
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d010      	beq.n	800eecc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	8b5b      	ldrh	r3, [r3, #26]
 800eeae:	f023 0304 	bic.w	r3, r3, #4
 800eeb2:	b29a      	uxth	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2200      	movs	r2, #0
 800eec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2200      	movs	r2, #0
 800eed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eeda:	10db      	asrs	r3, r3, #3
 800eedc:	b21b      	sxth	r3, r3
 800eede:	b29a      	uxth	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	4413      	add	r3, r2
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	b21a      	sxth	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800eef4:	4b2d      	ldr	r3, [pc, #180]	; (800efac <tcp_receive+0x2c4>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	b29a      	uxth	r2, r3
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2200      	movs	r2, #0
 800ef08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ef0c:	4b27      	ldr	r3, [pc, #156]	; (800efac <tcp_receive+0x2c4>)
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	7d1b      	ldrb	r3, [r3, #20]
 800ef18:	2b03      	cmp	r3, #3
 800ef1a:	f240 8096 	bls.w	800f04a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d244      	bcs.n	800efb8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	8b5b      	ldrh	r3, [r3, #26]
 800ef32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d001      	beq.n	800ef3e <tcp_receive+0x256>
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e000      	b.n	800ef40 <tcp_receive+0x258>
 800ef3e:	2302      	movs	r3, #2
 800ef40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ef44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef4e:	fb12 f303 	smulbb	r3, r2, r3
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef56:	4293      	cmp	r3, r2
 800ef58:	bf28      	it	cs
 800ef5a:	4613      	movcs	r3, r2
 800ef5c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef66:	4413      	add	r3, r2
 800ef68:	b29a      	uxth	r2, r3
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d309      	bcc.n	800ef88 <tcp_receive+0x2a0>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef7c:	4413      	add	r3, r2
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ef86:	e060      	b.n	800f04a <tcp_receive+0x362>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ef92:	e05a      	b.n	800f04a <tcp_receive+0x362>
 800ef94:	0801a4e8 	.word	0x0801a4e8
 800ef98:	0801a818 	.word	0x0801a818
 800ef9c:	0801a534 	.word	0x0801a534
 800efa0:	0801a834 	.word	0x0801a834
 800efa4:	20000284 	.word	0x20000284
 800efa8:	20000278 	.word	0x20000278
 800efac:	2000027c 	.word	0x2000027c
 800efb0:	20000268 	.word	0x20000268
 800efb4:	20000282 	.word	0x20000282
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800efbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800efc0:	4413      	add	r3, r2
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efca:	429a      	cmp	r2, r3
 800efcc:	d309      	bcc.n	800efe2 <tcp_receive+0x2fa>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800efd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800efd6:	4413      	add	r3, r2
 800efd8:	b29a      	uxth	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800efe0:	e004      	b.n	800efec <tcp_receive+0x304>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eff8:	429a      	cmp	r2, r3
 800effa:	d326      	bcc.n	800f04a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f008:	1ad3      	subs	r3, r2, r3
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f01c:	4413      	add	r3, r2
 800f01e:	b29a      	uxth	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f026:	429a      	cmp	r2, r3
 800f028:	d30a      	bcc.n	800f040 <tcp_receive+0x358>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f034:	4413      	add	r3, r2
 800f036:	b29a      	uxth	r2, r3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f03e:	e004      	b.n	800f04a <tcp_receive+0x362>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f046:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f052:	4a98      	ldr	r2, [pc, #608]	; (800f2b4 <tcp_receive+0x5cc>)
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f7ff fdcb 	bl	800ebf0 <tcp_free_acked_segments>
 800f05a:	4602      	mov	r2, r0
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f068:	4a93      	ldr	r2, [pc, #588]	; (800f2b8 <tcp_receive+0x5d0>)
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f7ff fdc0 	bl	800ebf0 <tcp_free_acked_segments>
 800f070:	4602      	mov	r2, r0
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d104      	bne.n	800f088 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f084:	861a      	strh	r2, [r3, #48]	; 0x30
 800f086:	e002      	b.n	800f08e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d103      	bne.n	800f0a4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f0aa:	4b84      	ldr	r3, [pc, #528]	; (800f2bc <tcp_receive+0x5d4>)
 800f0ac:	881b      	ldrh	r3, [r3, #0]
 800f0ae:	4413      	add	r3, r2
 800f0b0:	b29a      	uxth	r2, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	8b5b      	ldrh	r3, [r3, #26]
 800f0bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d035      	beq.n	800f130 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d118      	bne.n	800f0fe <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d00c      	beq.n	800f0ee <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fa ff34 	bl	8009f4e <lwip_htonl>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	dc20      	bgt.n	800f130 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	8b5b      	ldrh	r3, [r3, #26]
 800f0f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f0f6:	b29a      	uxth	r2, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f0fc:	e018      	b.n	800f130 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f106:	68db      	ldr	r3, [r3, #12]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fa ff1f 	bl	8009f4e <lwip_htonl>
 800f110:	4603      	mov	r3, r0
 800f112:	1ae3      	subs	r3, r4, r3
 800f114:	2b00      	cmp	r3, #0
 800f116:	dc0b      	bgt.n	800f130 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	8b5b      	ldrh	r3, [r3, #26]
 800f11c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f120:	b29a      	uxth	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f126:	e003      	b.n	800f130 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f002 fbcd 	bl	80118c8 <tcp_send_empty_ack>
 800f12e:	e000      	b.n	800f132 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f130:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f136:	2b00      	cmp	r3, #0
 800f138:	d05b      	beq.n	800f1f2 <tcp_receive+0x50a>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f13e:	4b60      	ldr	r3, [pc, #384]	; (800f2c0 <tcp_receive+0x5d8>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	1ad3      	subs	r3, r2, r3
 800f144:	2b00      	cmp	r3, #0
 800f146:	da54      	bge.n	800f1f2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f148:	4b5e      	ldr	r3, [pc, #376]	; (800f2c4 <tcp_receive+0x5dc>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f152:	b29b      	uxth	r3, r3
 800f154:	1ad3      	subs	r3, r2, r3
 800f156:	b29b      	uxth	r3, r3
 800f158:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f15c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f166:	10db      	asrs	r3, r3, #3
 800f168:	b21b      	sxth	r3, r3
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	1ad3      	subs	r3, r2, r3
 800f16e:	b29b      	uxth	r3, r3
 800f170:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f17a:	b29a      	uxth	r2, r3
 800f17c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f180:	4413      	add	r3, r2
 800f182:	b29b      	uxth	r3, r3
 800f184:	b21a      	sxth	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f18a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f18e:	2b00      	cmp	r3, #0
 800f190:	da05      	bge.n	800f19e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f192:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f196:	425b      	negs	r3, r3
 800f198:	b29b      	uxth	r3, r3
 800f19a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f19e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1a8:	109b      	asrs	r3, r3, #2
 800f1aa:	b21b      	sxth	r3, r3
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1bc:	b29a      	uxth	r2, r3
 800f1be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f1c2:	4413      	add	r3, r2
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	b21a      	sxth	r2, r3
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f1d2:	10db      	asrs	r3, r3, #3
 800f1d4:	b21b      	sxth	r3, r3
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	4413      	add	r3, r2
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	b21a      	sxth	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f1f2:	4b35      	ldr	r3, [pc, #212]	; (800f2c8 <tcp_receive+0x5e0>)
 800f1f4:	881b      	ldrh	r3, [r3, #0]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	f000 84e1 	beq.w	800fbbe <tcp_receive+0xed6>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	7d1b      	ldrb	r3, [r3, #20]
 800f200:	2b06      	cmp	r3, #6
 800f202:	f200 84dc 	bhi.w	800fbbe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f20a:	4b30      	ldr	r3, [pc, #192]	; (800f2cc <tcp_receive+0x5e4>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	1ad3      	subs	r3, r2, r3
 800f210:	3b01      	subs	r3, #1
 800f212:	2b00      	cmp	r3, #0
 800f214:	f2c0 808e 	blt.w	800f334 <tcp_receive+0x64c>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f21c:	4b2a      	ldr	r3, [pc, #168]	; (800f2c8 <tcp_receive+0x5e0>)
 800f21e:	881b      	ldrh	r3, [r3, #0]
 800f220:	4619      	mov	r1, r3
 800f222:	4b2a      	ldr	r3, [pc, #168]	; (800f2cc <tcp_receive+0x5e4>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	440b      	add	r3, r1
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	3301      	adds	r3, #1
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	f300 8081 	bgt.w	800f334 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f232:	4b27      	ldr	r3, [pc, #156]	; (800f2d0 <tcp_receive+0x5e8>)
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f23c:	4b23      	ldr	r3, [pc, #140]	; (800f2cc <tcp_receive+0x5e4>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	1ad3      	subs	r3, r2, r3
 800f242:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f244:	4b22      	ldr	r3, [pc, #136]	; (800f2d0 <tcp_receive+0x5e8>)
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d106      	bne.n	800f25a <tcp_receive+0x572>
 800f24c:	4b21      	ldr	r3, [pc, #132]	; (800f2d4 <tcp_receive+0x5ec>)
 800f24e:	f240 5294 	movw	r2, #1428	; 0x594
 800f252:	4921      	ldr	r1, [pc, #132]	; (800f2d8 <tcp_receive+0x5f0>)
 800f254:	4821      	ldr	r0, [pc, #132]	; (800f2dc <tcp_receive+0x5f4>)
 800f256:	f008 f9af 	bl	80175b8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f260:	4293      	cmp	r3, r2
 800f262:	d906      	bls.n	800f272 <tcp_receive+0x58a>
 800f264:	4b1b      	ldr	r3, [pc, #108]	; (800f2d4 <tcp_receive+0x5ec>)
 800f266:	f240 5295 	movw	r2, #1429	; 0x595
 800f26a:	491d      	ldr	r1, [pc, #116]	; (800f2e0 <tcp_receive+0x5f8>)
 800f26c:	481b      	ldr	r0, [pc, #108]	; (800f2dc <tcp_receive+0x5f4>)
 800f26e:	f008 f9a3 	bl	80175b8 <iprintf>
      off = (u16_t)off32;
 800f272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f274:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f278:	4b15      	ldr	r3, [pc, #84]	; (800f2d0 <tcp_receive+0x5e8>)
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	891b      	ldrh	r3, [r3, #8]
 800f27e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f282:	429a      	cmp	r2, r3
 800f284:	d906      	bls.n	800f294 <tcp_receive+0x5ac>
 800f286:	4b13      	ldr	r3, [pc, #76]	; (800f2d4 <tcp_receive+0x5ec>)
 800f288:	f240 5297 	movw	r2, #1431	; 0x597
 800f28c:	4915      	ldr	r1, [pc, #84]	; (800f2e4 <tcp_receive+0x5fc>)
 800f28e:	4813      	ldr	r0, [pc, #76]	; (800f2dc <tcp_receive+0x5f4>)
 800f290:	f008 f992 	bl	80175b8 <iprintf>
      inseg.len -= off;
 800f294:	4b0e      	ldr	r3, [pc, #56]	; (800f2d0 <tcp_receive+0x5e8>)
 800f296:	891a      	ldrh	r2, [r3, #8]
 800f298:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f29c:	1ad3      	subs	r3, r2, r3
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	4b0b      	ldr	r3, [pc, #44]	; (800f2d0 <tcp_receive+0x5e8>)
 800f2a2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f2a4:	4b0a      	ldr	r3, [pc, #40]	; (800f2d0 <tcp_receive+0x5e8>)
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	891a      	ldrh	r2, [r3, #8]
 800f2aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f2ae:	1ad3      	subs	r3, r2, r3
 800f2b0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f2b2:	e029      	b.n	800f308 <tcp_receive+0x620>
 800f2b4:	0801a850 	.word	0x0801a850
 800f2b8:	0801a858 	.word	0x0801a858
 800f2bc:	20000280 	.word	0x20000280
 800f2c0:	2000027c 	.word	0x2000027c
 800f2c4:	20006d10 	.word	0x20006d10
 800f2c8:	20000282 	.word	0x20000282
 800f2cc:	20000278 	.word	0x20000278
 800f2d0:	20000258 	.word	0x20000258
 800f2d4:	0801a4e8 	.word	0x0801a4e8
 800f2d8:	0801a860 	.word	0x0801a860
 800f2dc:	0801a534 	.word	0x0801a534
 800f2e0:	0801a870 	.word	0x0801a870
 800f2e4:	0801a880 	.word	0x0801a880
        off -= p->len;
 800f2e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2ea:	895b      	ldrh	r3, [r3, #10]
 800f2ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f2f0:	1ad3      	subs	r3, r2, r3
 800f2f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f2fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f2fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2fe:	2200      	movs	r2, #0
 800f300:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f30a:	895b      	ldrh	r3, [r3, #10]
 800f30c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f310:	429a      	cmp	r2, r3
 800f312:	d8e9      	bhi.n	800f2e8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f314:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f318:	4619      	mov	r1, r3
 800f31a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f31c:	f7fc f860 	bl	800b3e0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f324:	4a91      	ldr	r2, [pc, #580]	; (800f56c <tcp_receive+0x884>)
 800f326:	6013      	str	r3, [r2, #0]
 800f328:	4b91      	ldr	r3, [pc, #580]	; (800f570 <tcp_receive+0x888>)
 800f32a:	68db      	ldr	r3, [r3, #12]
 800f32c:	4a8f      	ldr	r2, [pc, #572]	; (800f56c <tcp_receive+0x884>)
 800f32e:	6812      	ldr	r2, [r2, #0]
 800f330:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f332:	e00d      	b.n	800f350 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f334:	4b8d      	ldr	r3, [pc, #564]	; (800f56c <tcp_receive+0x884>)
 800f336:	681a      	ldr	r2, [r3, #0]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f33c:	1ad3      	subs	r3, r2, r3
 800f33e:	2b00      	cmp	r3, #0
 800f340:	da06      	bge.n	800f350 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	8b5b      	ldrh	r3, [r3, #26]
 800f346:	f043 0302 	orr.w	r3, r3, #2
 800f34a:	b29a      	uxth	r2, r3
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f350:	4b86      	ldr	r3, [pc, #536]	; (800f56c <tcp_receive+0x884>)
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f358:	1ad3      	subs	r3, r2, r3
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	f2c0 842a 	blt.w	800fbb4 <tcp_receive+0xecc>
 800f360:	4b82      	ldr	r3, [pc, #520]	; (800f56c <tcp_receive+0x884>)
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f368:	6879      	ldr	r1, [r7, #4]
 800f36a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f36c:	440b      	add	r3, r1
 800f36e:	1ad3      	subs	r3, r2, r3
 800f370:	3301      	adds	r3, #1
 800f372:	2b00      	cmp	r3, #0
 800f374:	f300 841e 	bgt.w	800fbb4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f37c:	4b7b      	ldr	r3, [pc, #492]	; (800f56c <tcp_receive+0x884>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	429a      	cmp	r2, r3
 800f382:	f040 829a 	bne.w	800f8ba <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f386:	4b7a      	ldr	r3, [pc, #488]	; (800f570 <tcp_receive+0x888>)
 800f388:	891c      	ldrh	r4, [r3, #8]
 800f38a:	4b79      	ldr	r3, [pc, #484]	; (800f570 <tcp_receive+0x888>)
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	899b      	ldrh	r3, [r3, #12]
 800f390:	b29b      	uxth	r3, r3
 800f392:	4618      	mov	r0, r3
 800f394:	f7fa fdc6 	bl	8009f24 <lwip_htons>
 800f398:	4603      	mov	r3, r0
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	f003 0303 	and.w	r3, r3, #3
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <tcp_receive+0x6c0>
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e000      	b.n	800f3aa <tcp_receive+0x6c2>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	4423      	add	r3, r4
 800f3ac:	b29a      	uxth	r2, r3
 800f3ae:	4b71      	ldr	r3, [pc, #452]	; (800f574 <tcp_receive+0x88c>)
 800f3b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f3b6:	4b6f      	ldr	r3, [pc, #444]	; (800f574 <tcp_receive+0x88c>)
 800f3b8:	881b      	ldrh	r3, [r3, #0]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d275      	bcs.n	800f4aa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f3be:	4b6c      	ldr	r3, [pc, #432]	; (800f570 <tcp_receive+0x888>)
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	899b      	ldrh	r3, [r3, #12]
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fa fdac 	bl	8009f24 <lwip_htons>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	f003 0301 	and.w	r3, r3, #1
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d01f      	beq.n	800f418 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f3d8:	4b65      	ldr	r3, [pc, #404]	; (800f570 <tcp_receive+0x888>)
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	899b      	ldrh	r3, [r3, #12]
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	b21b      	sxth	r3, r3
 800f3e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f3e6:	b21c      	sxth	r4, r3
 800f3e8:	4b61      	ldr	r3, [pc, #388]	; (800f570 <tcp_receive+0x888>)
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	899b      	ldrh	r3, [r3, #12]
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7fa fd97 	bl	8009f24 <lwip_htons>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f400:	b29b      	uxth	r3, r3
 800f402:	4618      	mov	r0, r3
 800f404:	f7fa fd8e 	bl	8009f24 <lwip_htons>
 800f408:	4603      	mov	r3, r0
 800f40a:	b21b      	sxth	r3, r3
 800f40c:	4323      	orrs	r3, r4
 800f40e:	b21a      	sxth	r2, r3
 800f410:	4b57      	ldr	r3, [pc, #348]	; (800f570 <tcp_receive+0x888>)
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	b292      	uxth	r2, r2
 800f416:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f41c:	4b54      	ldr	r3, [pc, #336]	; (800f570 <tcp_receive+0x888>)
 800f41e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f420:	4b53      	ldr	r3, [pc, #332]	; (800f570 <tcp_receive+0x888>)
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	899b      	ldrh	r3, [r3, #12]
 800f426:	b29b      	uxth	r3, r3
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fa fd7b 	bl	8009f24 <lwip_htons>
 800f42e:	4603      	mov	r3, r0
 800f430:	b2db      	uxtb	r3, r3
 800f432:	f003 0302 	and.w	r3, r3, #2
 800f436:	2b00      	cmp	r3, #0
 800f438:	d005      	beq.n	800f446 <tcp_receive+0x75e>
            inseg.len -= 1;
 800f43a:	4b4d      	ldr	r3, [pc, #308]	; (800f570 <tcp_receive+0x888>)
 800f43c:	891b      	ldrh	r3, [r3, #8]
 800f43e:	3b01      	subs	r3, #1
 800f440:	b29a      	uxth	r2, r3
 800f442:	4b4b      	ldr	r3, [pc, #300]	; (800f570 <tcp_receive+0x888>)
 800f444:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f446:	4b4a      	ldr	r3, [pc, #296]	; (800f570 <tcp_receive+0x888>)
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	4a49      	ldr	r2, [pc, #292]	; (800f570 <tcp_receive+0x888>)
 800f44c:	8912      	ldrh	r2, [r2, #8]
 800f44e:	4611      	mov	r1, r2
 800f450:	4618      	mov	r0, r3
 800f452:	f7fb fec5 	bl	800b1e0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f456:	4b46      	ldr	r3, [pc, #280]	; (800f570 <tcp_receive+0x888>)
 800f458:	891c      	ldrh	r4, [r3, #8]
 800f45a:	4b45      	ldr	r3, [pc, #276]	; (800f570 <tcp_receive+0x888>)
 800f45c:	68db      	ldr	r3, [r3, #12]
 800f45e:	899b      	ldrh	r3, [r3, #12]
 800f460:	b29b      	uxth	r3, r3
 800f462:	4618      	mov	r0, r3
 800f464:	f7fa fd5e 	bl	8009f24 <lwip_htons>
 800f468:	4603      	mov	r3, r0
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	f003 0303 	and.w	r3, r3, #3
 800f470:	2b00      	cmp	r3, #0
 800f472:	d001      	beq.n	800f478 <tcp_receive+0x790>
 800f474:	2301      	movs	r3, #1
 800f476:	e000      	b.n	800f47a <tcp_receive+0x792>
 800f478:	2300      	movs	r3, #0
 800f47a:	4423      	add	r3, r4
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	4b3d      	ldr	r3, [pc, #244]	; (800f574 <tcp_receive+0x88c>)
 800f480:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f482:	4b3c      	ldr	r3, [pc, #240]	; (800f574 <tcp_receive+0x88c>)
 800f484:	881b      	ldrh	r3, [r3, #0]
 800f486:	461a      	mov	r2, r3
 800f488:	4b38      	ldr	r3, [pc, #224]	; (800f56c <tcp_receive+0x884>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	441a      	add	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f492:	6879      	ldr	r1, [r7, #4]
 800f494:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f496:	440b      	add	r3, r1
 800f498:	429a      	cmp	r2, r3
 800f49a:	d006      	beq.n	800f4aa <tcp_receive+0x7c2>
 800f49c:	4b36      	ldr	r3, [pc, #216]	; (800f578 <tcp_receive+0x890>)
 800f49e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f4a2:	4936      	ldr	r1, [pc, #216]	; (800f57c <tcp_receive+0x894>)
 800f4a4:	4836      	ldr	r0, [pc, #216]	; (800f580 <tcp_receive+0x898>)
 800f4a6:	f008 f887 	bl	80175b8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f000 80e7 	beq.w	800f682 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f4b4:	4b2e      	ldr	r3, [pc, #184]	; (800f570 <tcp_receive+0x888>)
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	899b      	ldrh	r3, [r3, #12]
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7fa fd31 	bl	8009f24 <lwip_htons>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	b2db      	uxtb	r3, r3
 800f4c6:	f003 0301 	and.w	r3, r3, #1
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d010      	beq.n	800f4f0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f4ce:	e00a      	b.n	800f4e6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4d4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f7fd fce0 	bl	800cea6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d1f0      	bne.n	800f4d0 <tcp_receive+0x7e8>
 800f4ee:	e0c8      	b.n	800f682 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f4f6:	e052      	b.n	800f59e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	899b      	ldrh	r3, [r3, #12]
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	4618      	mov	r0, r3
 800f502:	f7fa fd0f 	bl	8009f24 <lwip_htons>
 800f506:	4603      	mov	r3, r0
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	f003 0301 	and.w	r3, r3, #1
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d03d      	beq.n	800f58e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f512:	4b17      	ldr	r3, [pc, #92]	; (800f570 <tcp_receive+0x888>)
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	899b      	ldrh	r3, [r3, #12]
 800f518:	b29b      	uxth	r3, r3
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7fa fd02 	bl	8009f24 <lwip_htons>
 800f520:	4603      	mov	r3, r0
 800f522:	b2db      	uxtb	r3, r3
 800f524:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d130      	bne.n	800f58e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f52c:	4b10      	ldr	r3, [pc, #64]	; (800f570 <tcp_receive+0x888>)
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	899b      	ldrh	r3, [r3, #12]
 800f532:	b29c      	uxth	r4, r3
 800f534:	2001      	movs	r0, #1
 800f536:	f7fa fcf5 	bl	8009f24 <lwip_htons>
 800f53a:	4603      	mov	r3, r0
 800f53c:	461a      	mov	r2, r3
 800f53e:	4b0c      	ldr	r3, [pc, #48]	; (800f570 <tcp_receive+0x888>)
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	4322      	orrs	r2, r4
 800f544:	b292      	uxth	r2, r2
 800f546:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f548:	4b09      	ldr	r3, [pc, #36]	; (800f570 <tcp_receive+0x888>)
 800f54a:	891c      	ldrh	r4, [r3, #8]
 800f54c:	4b08      	ldr	r3, [pc, #32]	; (800f570 <tcp_receive+0x888>)
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	899b      	ldrh	r3, [r3, #12]
 800f552:	b29b      	uxth	r3, r3
 800f554:	4618      	mov	r0, r3
 800f556:	f7fa fce5 	bl	8009f24 <lwip_htons>
 800f55a:	4603      	mov	r3, r0
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	f003 0303 	and.w	r3, r3, #3
 800f562:	2b00      	cmp	r3, #0
 800f564:	d00e      	beq.n	800f584 <tcp_receive+0x89c>
 800f566:	2301      	movs	r3, #1
 800f568:	e00d      	b.n	800f586 <tcp_receive+0x89e>
 800f56a:	bf00      	nop
 800f56c:	20000278 	.word	0x20000278
 800f570:	20000258 	.word	0x20000258
 800f574:	20000282 	.word	0x20000282
 800f578:	0801a4e8 	.word	0x0801a4e8
 800f57c:	0801a890 	.word	0x0801a890
 800f580:	0801a534 	.word	0x0801a534
 800f584:	2300      	movs	r3, #0
 800f586:	4423      	add	r3, r4
 800f588:	b29a      	uxth	r2, r3
 800f58a:	4b98      	ldr	r3, [pc, #608]	; (800f7ec <tcp_receive+0xb04>)
 800f58c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f590:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f598:	6938      	ldr	r0, [r7, #16]
 800f59a:	f7fd fc84 	bl	800cea6 <tcp_seg_free>
            while (next &&
 800f59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d00e      	beq.n	800f5c2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f5a4:	4b91      	ldr	r3, [pc, #580]	; (800f7ec <tcp_receive+0xb04>)
 800f5a6:	881b      	ldrh	r3, [r3, #0]
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	4b91      	ldr	r3, [pc, #580]	; (800f7f0 <tcp_receive+0xb08>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	441a      	add	r2, r3
 800f5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5b2:	68db      	ldr	r3, [r3, #12]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5b8:	8909      	ldrh	r1, [r1, #8]
 800f5ba:	440b      	add	r3, r1
 800f5bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	da9a      	bge.n	800f4f8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d059      	beq.n	800f67c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f5c8:	4b88      	ldr	r3, [pc, #544]	; (800f7ec <tcp_receive+0xb04>)
 800f5ca:	881b      	ldrh	r3, [r3, #0]
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	4b88      	ldr	r3, [pc, #544]	; (800f7f0 <tcp_receive+0xb08>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	441a      	add	r2, r3
 800f5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	dd4d      	ble.n	800f67c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	4b81      	ldr	r3, [pc, #516]	; (800f7f0 <tcp_receive+0xb08>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	1ad3      	subs	r3, r2, r3
 800f5f0:	b29a      	uxth	r2, r3
 800f5f2:	4b80      	ldr	r3, [pc, #512]	; (800f7f4 <tcp_receive+0xb0c>)
 800f5f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f5f6:	4b7f      	ldr	r3, [pc, #508]	; (800f7f4 <tcp_receive+0xb0c>)
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	899b      	ldrh	r3, [r3, #12]
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7fa fc90 	bl	8009f24 <lwip_htons>
 800f604:	4603      	mov	r3, r0
 800f606:	b2db      	uxtb	r3, r3
 800f608:	f003 0302 	and.w	r3, r3, #2
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d005      	beq.n	800f61c <tcp_receive+0x934>
                inseg.len -= 1;
 800f610:	4b78      	ldr	r3, [pc, #480]	; (800f7f4 <tcp_receive+0xb0c>)
 800f612:	891b      	ldrh	r3, [r3, #8]
 800f614:	3b01      	subs	r3, #1
 800f616:	b29a      	uxth	r2, r3
 800f618:	4b76      	ldr	r3, [pc, #472]	; (800f7f4 <tcp_receive+0xb0c>)
 800f61a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f61c:	4b75      	ldr	r3, [pc, #468]	; (800f7f4 <tcp_receive+0xb0c>)
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	4a74      	ldr	r2, [pc, #464]	; (800f7f4 <tcp_receive+0xb0c>)
 800f622:	8912      	ldrh	r2, [r2, #8]
 800f624:	4611      	mov	r1, r2
 800f626:	4618      	mov	r0, r3
 800f628:	f7fb fdda 	bl	800b1e0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f62c:	4b71      	ldr	r3, [pc, #452]	; (800f7f4 <tcp_receive+0xb0c>)
 800f62e:	891c      	ldrh	r4, [r3, #8]
 800f630:	4b70      	ldr	r3, [pc, #448]	; (800f7f4 <tcp_receive+0xb0c>)
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	899b      	ldrh	r3, [r3, #12]
 800f636:	b29b      	uxth	r3, r3
 800f638:	4618      	mov	r0, r3
 800f63a:	f7fa fc73 	bl	8009f24 <lwip_htons>
 800f63e:	4603      	mov	r3, r0
 800f640:	b2db      	uxtb	r3, r3
 800f642:	f003 0303 	and.w	r3, r3, #3
 800f646:	2b00      	cmp	r3, #0
 800f648:	d001      	beq.n	800f64e <tcp_receive+0x966>
 800f64a:	2301      	movs	r3, #1
 800f64c:	e000      	b.n	800f650 <tcp_receive+0x968>
 800f64e:	2300      	movs	r3, #0
 800f650:	4423      	add	r3, r4
 800f652:	b29a      	uxth	r2, r3
 800f654:	4b65      	ldr	r3, [pc, #404]	; (800f7ec <tcp_receive+0xb04>)
 800f656:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f658:	4b64      	ldr	r3, [pc, #400]	; (800f7ec <tcp_receive+0xb04>)
 800f65a:	881b      	ldrh	r3, [r3, #0]
 800f65c:	461a      	mov	r2, r3
 800f65e:	4b64      	ldr	r3, [pc, #400]	; (800f7f0 <tcp_receive+0xb08>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	441a      	add	r2, r3
 800f664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f666:	68db      	ldr	r3, [r3, #12]
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d006      	beq.n	800f67c <tcp_receive+0x994>
 800f66e:	4b62      	ldr	r3, [pc, #392]	; (800f7f8 <tcp_receive+0xb10>)
 800f670:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f674:	4961      	ldr	r1, [pc, #388]	; (800f7fc <tcp_receive+0xb14>)
 800f676:	4862      	ldr	r0, [pc, #392]	; (800f800 <tcp_receive+0xb18>)
 800f678:	f007 ff9e 	bl	80175b8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f680:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f682:	4b5a      	ldr	r3, [pc, #360]	; (800f7ec <tcp_receive+0xb04>)
 800f684:	881b      	ldrh	r3, [r3, #0]
 800f686:	461a      	mov	r2, r3
 800f688:	4b59      	ldr	r3, [pc, #356]	; (800f7f0 <tcp_receive+0xb08>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	441a      	add	r2, r3
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f696:	4b55      	ldr	r3, [pc, #340]	; (800f7ec <tcp_receive+0xb04>)
 800f698:	881b      	ldrh	r3, [r3, #0]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d206      	bcs.n	800f6ac <tcp_receive+0x9c4>
 800f69e:	4b56      	ldr	r3, [pc, #344]	; (800f7f8 <tcp_receive+0xb10>)
 800f6a0:	f240 6207 	movw	r2, #1543	; 0x607
 800f6a4:	4957      	ldr	r1, [pc, #348]	; (800f804 <tcp_receive+0xb1c>)
 800f6a6:	4856      	ldr	r0, [pc, #344]	; (800f800 <tcp_receive+0xb18>)
 800f6a8:	f007 ff86 	bl	80175b8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6b0:	4b4e      	ldr	r3, [pc, #312]	; (800f7ec <tcp_receive+0xb04>)
 800f6b2:	881b      	ldrh	r3, [r3, #0]
 800f6b4:	1ad3      	subs	r3, r2, r3
 800f6b6:	b29a      	uxth	r2, r3
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7fc fdb5 	bl	800c22c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f6c2:	4b4c      	ldr	r3, [pc, #304]	; (800f7f4 <tcp_receive+0xb0c>)
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	891b      	ldrh	r3, [r3, #8]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d006      	beq.n	800f6da <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f6cc:	4b49      	ldr	r3, [pc, #292]	; (800f7f4 <tcp_receive+0xb0c>)
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	4a4d      	ldr	r2, [pc, #308]	; (800f808 <tcp_receive+0xb20>)
 800f6d2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f6d4:	4b47      	ldr	r3, [pc, #284]	; (800f7f4 <tcp_receive+0xb0c>)
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f6da:	4b46      	ldr	r3, [pc, #280]	; (800f7f4 <tcp_receive+0xb0c>)
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	899b      	ldrh	r3, [r3, #12]
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fa fc1e 	bl	8009f24 <lwip_htons>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	f003 0301 	and.w	r3, r3, #1
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f000 80b8 	beq.w	800f866 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f6f6:	4b45      	ldr	r3, [pc, #276]	; (800f80c <tcp_receive+0xb24>)
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	f043 0320 	orr.w	r3, r3, #32
 800f6fe:	b2da      	uxtb	r2, r3
 800f700:	4b42      	ldr	r3, [pc, #264]	; (800f80c <tcp_receive+0xb24>)
 800f702:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f704:	e0af      	b.n	800f866 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f70a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	4a36      	ldr	r2, [pc, #216]	; (800f7f0 <tcp_receive+0xb08>)
 800f716:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	891b      	ldrh	r3, [r3, #8]
 800f71c:	461c      	mov	r4, r3
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	899b      	ldrh	r3, [r3, #12]
 800f724:	b29b      	uxth	r3, r3
 800f726:	4618      	mov	r0, r3
 800f728:	f7fa fbfc 	bl	8009f24 <lwip_htons>
 800f72c:	4603      	mov	r3, r0
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	f003 0303 	and.w	r3, r3, #3
 800f734:	2b00      	cmp	r3, #0
 800f736:	d001      	beq.n	800f73c <tcp_receive+0xa54>
 800f738:	2301      	movs	r3, #1
 800f73a:	e000      	b.n	800f73e <tcp_receive+0xa56>
 800f73c:	2300      	movs	r3, #0
 800f73e:	191a      	adds	r2, r3, r4
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f744:	441a      	add	r2, r3
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f74e:	461c      	mov	r4, r3
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	891b      	ldrh	r3, [r3, #8]
 800f754:	461d      	mov	r5, r3
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	899b      	ldrh	r3, [r3, #12]
 800f75c:	b29b      	uxth	r3, r3
 800f75e:	4618      	mov	r0, r3
 800f760:	f7fa fbe0 	bl	8009f24 <lwip_htons>
 800f764:	4603      	mov	r3, r0
 800f766:	b2db      	uxtb	r3, r3
 800f768:	f003 0303 	and.w	r3, r3, #3
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d001      	beq.n	800f774 <tcp_receive+0xa8c>
 800f770:	2301      	movs	r3, #1
 800f772:	e000      	b.n	800f776 <tcp_receive+0xa8e>
 800f774:	2300      	movs	r3, #0
 800f776:	442b      	add	r3, r5
 800f778:	429c      	cmp	r4, r3
 800f77a:	d206      	bcs.n	800f78a <tcp_receive+0xaa2>
 800f77c:	4b1e      	ldr	r3, [pc, #120]	; (800f7f8 <tcp_receive+0xb10>)
 800f77e:	f240 622b 	movw	r2, #1579	; 0x62b
 800f782:	4923      	ldr	r1, [pc, #140]	; (800f810 <tcp_receive+0xb28>)
 800f784:	481e      	ldr	r0, [pc, #120]	; (800f800 <tcp_receive+0xb18>)
 800f786:	f007 ff17 	bl	80175b8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	891b      	ldrh	r3, [r3, #8]
 800f78e:	461c      	mov	r4, r3
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	68db      	ldr	r3, [r3, #12]
 800f794:	899b      	ldrh	r3, [r3, #12]
 800f796:	b29b      	uxth	r3, r3
 800f798:	4618      	mov	r0, r3
 800f79a:	f7fa fbc3 	bl	8009f24 <lwip_htons>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	f003 0303 	and.w	r3, r3, #3
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d001      	beq.n	800f7ae <tcp_receive+0xac6>
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	e000      	b.n	800f7b0 <tcp_receive+0xac8>
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	1919      	adds	r1, r3, r4
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f7b6:	b28b      	uxth	r3, r1
 800f7b8:	1ad3      	subs	r3, r2, r3
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f7fc fd33 	bl	800c22c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	891b      	ldrh	r3, [r3, #8]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d028      	beq.n	800f822 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f7d0:	4b0d      	ldr	r3, [pc, #52]	; (800f808 <tcp_receive+0xb20>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d01d      	beq.n	800f814 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f7d8:	4b0b      	ldr	r3, [pc, #44]	; (800f808 <tcp_receive+0xb20>)
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	4610      	mov	r0, r2
 800f7e4:	f7fb ff44 	bl	800b670 <pbuf_cat>
 800f7e8:	e018      	b.n	800f81c <tcp_receive+0xb34>
 800f7ea:	bf00      	nop
 800f7ec:	20000282 	.word	0x20000282
 800f7f0:	20000278 	.word	0x20000278
 800f7f4:	20000258 	.word	0x20000258
 800f7f8:	0801a4e8 	.word	0x0801a4e8
 800f7fc:	0801a8c8 	.word	0x0801a8c8
 800f800:	0801a534 	.word	0x0801a534
 800f804:	0801a904 	.word	0x0801a904
 800f808:	20000288 	.word	0x20000288
 800f80c:	20000285 	.word	0x20000285
 800f810:	0801a924 	.word	0x0801a924
            } else {
              recv_data = cseg->p;
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	4a70      	ldr	r2, [pc, #448]	; (800f9dc <tcp_receive+0xcf4>)
 800f81a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	2200      	movs	r2, #0
 800f820:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	899b      	ldrh	r3, [r3, #12]
 800f828:	b29b      	uxth	r3, r3
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7fa fb7a 	bl	8009f24 <lwip_htons>
 800f830:	4603      	mov	r3, r0
 800f832:	b2db      	uxtb	r3, r3
 800f834:	f003 0301 	and.w	r3, r3, #1
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d00d      	beq.n	800f858 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f83c:	4b68      	ldr	r3, [pc, #416]	; (800f9e0 <tcp_receive+0xcf8>)
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	f043 0320 	orr.w	r3, r3, #32
 800f844:	b2da      	uxtb	r2, r3
 800f846:	4b66      	ldr	r3, [pc, #408]	; (800f9e0 <tcp_receive+0xcf8>)
 800f848:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	7d1b      	ldrb	r3, [r3, #20]
 800f84e:	2b04      	cmp	r3, #4
 800f850:	d102      	bne.n	800f858 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2207      	movs	r2, #7
 800f856:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f860:	68b8      	ldr	r0, [r7, #8]
 800f862:	f7fd fb20 	bl	800cea6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d008      	beq.n	800f880 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	685a      	ldr	r2, [r3, #4]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f87a:	429a      	cmp	r2, r3
 800f87c:	f43f af43 	beq.w	800f706 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	8b5b      	ldrh	r3, [r3, #26]
 800f884:	f003 0301 	and.w	r3, r3, #1
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d00e      	beq.n	800f8aa <tcp_receive+0xbc2>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	8b5b      	ldrh	r3, [r3, #26]
 800f890:	f023 0301 	bic.w	r3, r3, #1
 800f894:	b29a      	uxth	r2, r3
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	835a      	strh	r2, [r3, #26]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	8b5b      	ldrh	r3, [r3, #26]
 800f89e:	f043 0302 	orr.w	r3, r3, #2
 800f8a2:	b29a      	uxth	r2, r3
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f8a8:	e188      	b.n	800fbbc <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	8b5b      	ldrh	r3, [r3, #26]
 800f8ae:	f043 0301 	orr.w	r3, r3, #1
 800f8b2:	b29a      	uxth	r2, r3
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f8b8:	e180      	b.n	800fbbc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d106      	bne.n	800f8d0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f8c2:	4848      	ldr	r0, [pc, #288]	; (800f9e4 <tcp_receive+0xcfc>)
 800f8c4:	f7fd fb08 	bl	800ced8 <tcp_seg_copy>
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	675a      	str	r2, [r3, #116]	; 0x74
 800f8ce:	e16d      	b.n	800fbac <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8da:	e157      	b.n	800fb8c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	685a      	ldr	r2, [r3, #4]
 800f8e2:	4b41      	ldr	r3, [pc, #260]	; (800f9e8 <tcp_receive+0xd00>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d11d      	bne.n	800f926 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f8ea:	4b3e      	ldr	r3, [pc, #248]	; (800f9e4 <tcp_receive+0xcfc>)
 800f8ec:	891a      	ldrh	r2, [r3, #8]
 800f8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f0:	891b      	ldrh	r3, [r3, #8]
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	f240 814f 	bls.w	800fb96 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f8f8:	483a      	ldr	r0, [pc, #232]	; (800f9e4 <tcp_receive+0xcfc>)
 800f8fa:	f7fd faed 	bl	800ced8 <tcp_seg_copy>
 800f8fe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	2b00      	cmp	r3, #0
 800f904:	f000 8149 	beq.w	800fb9a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d003      	beq.n	800f916 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f910:	697a      	ldr	r2, [r7, #20]
 800f912:	601a      	str	r2, [r3, #0]
 800f914:	e002      	b.n	800f91c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	697a      	ldr	r2, [r7, #20]
 800f91a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f91c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f91e:	6978      	ldr	r0, [r7, #20]
 800f920:	f7ff f8de 	bl	800eae0 <tcp_oos_insert_segment>
                }
                break;
 800f924:	e139      	b.n	800fb9a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d117      	bne.n	800f95c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f92c:	4b2e      	ldr	r3, [pc, #184]	; (800f9e8 <tcp_receive+0xd00>)
 800f92e:	681a      	ldr	r2, [r3, #0]
 800f930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	2b00      	cmp	r3, #0
 800f93a:	da57      	bge.n	800f9ec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f93c:	4829      	ldr	r0, [pc, #164]	; (800f9e4 <tcp_receive+0xcfc>)
 800f93e:	f7fd facb 	bl	800ced8 <tcp_seg_copy>
 800f942:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f944:	69bb      	ldr	r3, [r7, #24]
 800f946:	2b00      	cmp	r3, #0
 800f948:	f000 8129 	beq.w	800fb9e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	69ba      	ldr	r2, [r7, #24]
 800f950:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f954:	69b8      	ldr	r0, [r7, #24]
 800f956:	f7ff f8c3 	bl	800eae0 <tcp_oos_insert_segment>
                  }
                  break;
 800f95a:	e120      	b.n	800fb9e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f95c:	4b22      	ldr	r3, [pc, #136]	; (800f9e8 <tcp_receive+0xd00>)
 800f95e:	681a      	ldr	r2, [r3, #0]
 800f960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f962:	68db      	ldr	r3, [r3, #12]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	1ad3      	subs	r3, r2, r3
 800f968:	3b01      	subs	r3, #1
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	db3e      	blt.n	800f9ec <tcp_receive+0xd04>
 800f96e:	4b1e      	ldr	r3, [pc, #120]	; (800f9e8 <tcp_receive+0xd00>)
 800f970:	681a      	ldr	r2, [r3, #0]
 800f972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f974:	68db      	ldr	r3, [r3, #12]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	1ad3      	subs	r3, r2, r3
 800f97a:	3301      	adds	r3, #1
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	dc35      	bgt.n	800f9ec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f980:	4818      	ldr	r0, [pc, #96]	; (800f9e4 <tcp_receive+0xcfc>)
 800f982:	f7fd faa9 	bl	800ced8 <tcp_seg_copy>
 800f986:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	f000 8109 	beq.w	800fba2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f998:	8912      	ldrh	r2, [r2, #8]
 800f99a:	441a      	add	r2, r3
 800f99c:	4b12      	ldr	r3, [pc, #72]	; (800f9e8 <tcp_receive+0xd00>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	1ad3      	subs	r3, r2, r3
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	dd12      	ble.n	800f9cc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f9a6:	4b10      	ldr	r3, [pc, #64]	; (800f9e8 <tcp_receive+0xd00>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	b29a      	uxth	r2, r3
 800f9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	1ad3      	subs	r3, r2, r3
 800f9b6:	b29a      	uxth	r2, r3
 800f9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9be:	685a      	ldr	r2, [r3, #4]
 800f9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9c2:	891b      	ldrh	r3, [r3, #8]
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	4610      	mov	r0, r2
 800f9c8:	f7fb fc0a 	bl	800b1e0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ce:	69fa      	ldr	r2, [r7, #28]
 800f9d0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f9d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9d4:	69f8      	ldr	r0, [r7, #28]
 800f9d6:	f7ff f883 	bl	800eae0 <tcp_oos_insert_segment>
                  }
                  break;
 800f9da:	e0e2      	b.n	800fba2 <tcp_receive+0xeba>
 800f9dc:	20000288 	.word	0x20000288
 800f9e0:	20000285 	.word	0x20000285
 800f9e4:	20000258 	.word	0x20000258
 800f9e8:	20000278 	.word	0x20000278
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f040 80c6 	bne.w	800fb86 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f9fa:	4b80      	ldr	r3, [pc, #512]	; (800fbfc <tcp_receive+0xf14>)
 800f9fc:	681a      	ldr	r2, [r3, #0]
 800f9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa00:	68db      	ldr	r3, [r3, #12]
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	f340 80bd 	ble.w	800fb86 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	899b      	ldrh	r3, [r3, #12]
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fa fa85 	bl	8009f24 <lwip_htons>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	f003 0301 	and.w	r3, r3, #1
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	f040 80bf 	bne.w	800fba6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fa28:	4875      	ldr	r0, [pc, #468]	; (800fc00 <tcp_receive+0xf18>)
 800fa2a:	f7fd fa55 	bl	800ced8 <tcp_seg_copy>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa32:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	f000 80b6 	beq.w	800fbaa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa46:	8912      	ldrh	r2, [r2, #8]
 800fa48:	441a      	add	r2, r3
 800fa4a:	4b6c      	ldr	r3, [pc, #432]	; (800fbfc <tcp_receive+0xf14>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	1ad3      	subs	r3, r2, r3
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	dd12      	ble.n	800fa7a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fa54:	4b69      	ldr	r3, [pc, #420]	; (800fbfc <tcp_receive+0xf14>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	b29a      	uxth	r2, r3
 800fa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	1ad3      	subs	r3, r2, r3
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa68:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6c:	685a      	ldr	r2, [r3, #4]
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	891b      	ldrh	r3, [r3, #8]
 800fa72:	4619      	mov	r1, r3
 800fa74:	4610      	mov	r0, r2
 800fa76:	f7fb fbb3 	bl	800b1e0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fa7a:	4b62      	ldr	r3, [pc, #392]	; (800fc04 <tcp_receive+0xf1c>)
 800fa7c:	881b      	ldrh	r3, [r3, #0]
 800fa7e:	461a      	mov	r2, r3
 800fa80:	4b5e      	ldr	r3, [pc, #376]	; (800fbfc <tcp_receive+0xf14>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	441a      	add	r2, r3
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa8a:	6879      	ldr	r1, [r7, #4]
 800fa8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa8e:	440b      	add	r3, r1
 800fa90:	1ad3      	subs	r3, r2, r3
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	f340 8089 	ble.w	800fbaa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	899b      	ldrh	r3, [r3, #12]
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7fa fa3e 	bl	8009f24 <lwip_htons>
 800faa8:	4603      	mov	r3, r0
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	f003 0301 	and.w	r3, r3, #1
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d022      	beq.n	800fafa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	68db      	ldr	r3, [r3, #12]
 800faba:	899b      	ldrh	r3, [r3, #12]
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	b21b      	sxth	r3, r3
 800fac0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fac4:	b21c      	sxth	r4, r3
 800fac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	68db      	ldr	r3, [r3, #12]
 800facc:	899b      	ldrh	r3, [r3, #12]
 800face:	b29b      	uxth	r3, r3
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7fa fa27 	bl	8009f24 <lwip_htons>
 800fad6:	4603      	mov	r3, r0
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	b29b      	uxth	r3, r3
 800fadc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fa fa1e 	bl	8009f24 <lwip_htons>
 800fae8:	4603      	mov	r3, r0
 800faea:	b21b      	sxth	r3, r3
 800faec:	4323      	orrs	r3, r4
 800faee:	b21a      	sxth	r2, r3
 800faf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	68db      	ldr	r3, [r3, #12]
 800faf6:	b292      	uxth	r2, r2
 800faf8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fafe:	b29a      	uxth	r2, r3
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb04:	4413      	add	r3, r2
 800fb06:	b299      	uxth	r1, r3
 800fb08:	4b3c      	ldr	r3, [pc, #240]	; (800fbfc <tcp_receive+0xf14>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	b29a      	uxth	r2, r3
 800fb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	1a8a      	subs	r2, r1, r2
 800fb14:	b292      	uxth	r2, r2
 800fb16:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	685a      	ldr	r2, [r3, #4]
 800fb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	891b      	ldrh	r3, [r3, #8]
 800fb24:	4619      	mov	r1, r3
 800fb26:	4610      	mov	r0, r2
 800fb28:	f7fb fb5a 	bl	800b1e0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	891c      	ldrh	r4, [r3, #8]
 800fb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	899b      	ldrh	r3, [r3, #12]
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fa f9f1 	bl	8009f24 <lwip_htons>
 800fb42:	4603      	mov	r3, r0
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	f003 0303 	and.w	r3, r3, #3
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d001      	beq.n	800fb52 <tcp_receive+0xe6a>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	e000      	b.n	800fb54 <tcp_receive+0xe6c>
 800fb52:	2300      	movs	r3, #0
 800fb54:	4423      	add	r3, r4
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	4b2a      	ldr	r3, [pc, #168]	; (800fc04 <tcp_receive+0xf1c>)
 800fb5a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fb5c:	4b29      	ldr	r3, [pc, #164]	; (800fc04 <tcp_receive+0xf1c>)
 800fb5e:	881b      	ldrh	r3, [r3, #0]
 800fb60:	461a      	mov	r2, r3
 800fb62:	4b26      	ldr	r3, [pc, #152]	; (800fbfc <tcp_receive+0xf14>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	441a      	add	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6c:	6879      	ldr	r1, [r7, #4]
 800fb6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb70:	440b      	add	r3, r1
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d019      	beq.n	800fbaa <tcp_receive+0xec2>
 800fb76:	4b24      	ldr	r3, [pc, #144]	; (800fc08 <tcp_receive+0xf20>)
 800fb78:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fb7c:	4923      	ldr	r1, [pc, #140]	; (800fc0c <tcp_receive+0xf24>)
 800fb7e:	4824      	ldr	r0, [pc, #144]	; (800fc10 <tcp_receive+0xf28>)
 800fb80:	f007 fd1a 	bl	80175b8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fb84:	e011      	b.n	800fbaa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	f47f aea4 	bne.w	800f8dc <tcp_receive+0xbf4>
 800fb94:	e00a      	b.n	800fbac <tcp_receive+0xec4>
                break;
 800fb96:	bf00      	nop
 800fb98:	e008      	b.n	800fbac <tcp_receive+0xec4>
                break;
 800fb9a:	bf00      	nop
 800fb9c:	e006      	b.n	800fbac <tcp_receive+0xec4>
                  break;
 800fb9e:	bf00      	nop
 800fba0:	e004      	b.n	800fbac <tcp_receive+0xec4>
                  break;
 800fba2:	bf00      	nop
 800fba4:	e002      	b.n	800fbac <tcp_receive+0xec4>
                  break;
 800fba6:	bf00      	nop
 800fba8:	e000      	b.n	800fbac <tcp_receive+0xec4>
                break;
 800fbaa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f001 fe8b 	bl	80118c8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fbb2:	e003      	b.n	800fbbc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f001 fe87 	bl	80118c8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fbba:	e01a      	b.n	800fbf2 <tcp_receive+0xf0a>
 800fbbc:	e019      	b.n	800fbf2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fbbe:	4b0f      	ldr	r3, [pc, #60]	; (800fbfc <tcp_receive+0xf14>)
 800fbc0:	681a      	ldr	r2, [r3, #0]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	db0a      	blt.n	800fbe2 <tcp_receive+0xefa>
 800fbcc:	4b0b      	ldr	r3, [pc, #44]	; (800fbfc <tcp_receive+0xf14>)
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd4:	6879      	ldr	r1, [r7, #4]
 800fbd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fbd8:	440b      	add	r3, r1
 800fbda:	1ad3      	subs	r3, r2, r3
 800fbdc:	3301      	adds	r3, #1
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	dd07      	ble.n	800fbf2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	8b5b      	ldrh	r3, [r3, #26]
 800fbe6:	f043 0302 	orr.w	r3, r3, #2
 800fbea:	b29a      	uxth	r2, r3
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fbf0:	e7ff      	b.n	800fbf2 <tcp_receive+0xf0a>
 800fbf2:	bf00      	nop
 800fbf4:	3750      	adds	r7, #80	; 0x50
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bdb0      	pop	{r4, r5, r7, pc}
 800fbfa:	bf00      	nop
 800fbfc:	20000278 	.word	0x20000278
 800fc00:	20000258 	.word	0x20000258
 800fc04:	20000282 	.word	0x20000282
 800fc08:	0801a4e8 	.word	0x0801a4e8
 800fc0c:	0801a890 	.word	0x0801a890
 800fc10:	0801a534 	.word	0x0801a534

0800fc14 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fc1a:	4b15      	ldr	r3, [pc, #84]	; (800fc70 <tcp_get_next_optbyte+0x5c>)
 800fc1c:	881b      	ldrh	r3, [r3, #0]
 800fc1e:	1c5a      	adds	r2, r3, #1
 800fc20:	b291      	uxth	r1, r2
 800fc22:	4a13      	ldr	r2, [pc, #76]	; (800fc70 <tcp_get_next_optbyte+0x5c>)
 800fc24:	8011      	strh	r1, [r2, #0]
 800fc26:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fc28:	4b12      	ldr	r3, [pc, #72]	; (800fc74 <tcp_get_next_optbyte+0x60>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d004      	beq.n	800fc3a <tcp_get_next_optbyte+0x26>
 800fc30:	4b11      	ldr	r3, [pc, #68]	; (800fc78 <tcp_get_next_optbyte+0x64>)
 800fc32:	881b      	ldrh	r3, [r3, #0]
 800fc34:	88fa      	ldrh	r2, [r7, #6]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d208      	bcs.n	800fc4c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fc3a:	4b10      	ldr	r3, [pc, #64]	; (800fc7c <tcp_get_next_optbyte+0x68>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	3314      	adds	r3, #20
 800fc40:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fc42:	88fb      	ldrh	r3, [r7, #6]
 800fc44:	683a      	ldr	r2, [r7, #0]
 800fc46:	4413      	add	r3, r2
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	e00b      	b.n	800fc64 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fc4c:	88fb      	ldrh	r3, [r7, #6]
 800fc4e:	b2da      	uxtb	r2, r3
 800fc50:	4b09      	ldr	r3, [pc, #36]	; (800fc78 <tcp_get_next_optbyte+0x64>)
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	1ad3      	subs	r3, r2, r3
 800fc58:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fc5a:	4b06      	ldr	r3, [pc, #24]	; (800fc74 <tcp_get_next_optbyte+0x60>)
 800fc5c:	681a      	ldr	r2, [r3, #0]
 800fc5e:	797b      	ldrb	r3, [r7, #5]
 800fc60:	4413      	add	r3, r2
 800fc62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	370c      	adds	r7, #12
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr
 800fc70:	20000274 	.word	0x20000274
 800fc74:	20000270 	.word	0x20000270
 800fc78:	2000026e 	.word	0x2000026e
 800fc7c:	20000268 	.word	0x20000268

0800fc80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d106      	bne.n	800fc9c <tcp_parseopt+0x1c>
 800fc8e:	4b32      	ldr	r3, [pc, #200]	; (800fd58 <tcp_parseopt+0xd8>)
 800fc90:	f240 727d 	movw	r2, #1917	; 0x77d
 800fc94:	4931      	ldr	r1, [pc, #196]	; (800fd5c <tcp_parseopt+0xdc>)
 800fc96:	4832      	ldr	r0, [pc, #200]	; (800fd60 <tcp_parseopt+0xe0>)
 800fc98:	f007 fc8e 	bl	80175b8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fc9c:	4b31      	ldr	r3, [pc, #196]	; (800fd64 <tcp_parseopt+0xe4>)
 800fc9e:	881b      	ldrh	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d055      	beq.n	800fd50 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fca4:	4b30      	ldr	r3, [pc, #192]	; (800fd68 <tcp_parseopt+0xe8>)
 800fca6:	2200      	movs	r2, #0
 800fca8:	801a      	strh	r2, [r3, #0]
 800fcaa:	e045      	b.n	800fd38 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fcac:	f7ff ffb2 	bl	800fc14 <tcp_get_next_optbyte>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fcb4:	7bfb      	ldrb	r3, [r7, #15]
 800fcb6:	2b02      	cmp	r3, #2
 800fcb8:	d006      	beq.n	800fcc8 <tcp_parseopt+0x48>
 800fcba:	2b02      	cmp	r3, #2
 800fcbc:	dc2b      	bgt.n	800fd16 <tcp_parseopt+0x96>
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d041      	beq.n	800fd46 <tcp_parseopt+0xc6>
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d127      	bne.n	800fd16 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fcc6:	e037      	b.n	800fd38 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fcc8:	f7ff ffa4 	bl	800fc14 <tcp_get_next_optbyte>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b04      	cmp	r3, #4
 800fcd0:	d13b      	bne.n	800fd4a <tcp_parseopt+0xca>
 800fcd2:	4b25      	ldr	r3, [pc, #148]	; (800fd68 <tcp_parseopt+0xe8>)
 800fcd4:	881b      	ldrh	r3, [r3, #0]
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	4a22      	ldr	r2, [pc, #136]	; (800fd64 <tcp_parseopt+0xe4>)
 800fcda:	8812      	ldrh	r2, [r2, #0]
 800fcdc:	4293      	cmp	r3, r2
 800fcde:	da34      	bge.n	800fd4a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fce0:	f7ff ff98 	bl	800fc14 <tcp_get_next_optbyte>
 800fce4:	4603      	mov	r3, r0
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	021b      	lsls	r3, r3, #8
 800fcea:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fcec:	f7ff ff92 	bl	800fc14 <tcp_get_next_optbyte>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	b29a      	uxth	r2, r3
 800fcf4:	89bb      	ldrh	r3, [r7, #12]
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fcfa:	89bb      	ldrh	r3, [r7, #12]
 800fcfc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fd00:	d804      	bhi.n	800fd0c <tcp_parseopt+0x8c>
 800fd02:	89bb      	ldrh	r3, [r7, #12]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d001      	beq.n	800fd0c <tcp_parseopt+0x8c>
 800fd08:	89ba      	ldrh	r2, [r7, #12]
 800fd0a:	e001      	b.n	800fd10 <tcp_parseopt+0x90>
 800fd0c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fd14:	e010      	b.n	800fd38 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fd16:	f7ff ff7d 	bl	800fc14 <tcp_get_next_optbyte>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fd1e:	7afb      	ldrb	r3, [r7, #11]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d914      	bls.n	800fd4e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fd24:	7afb      	ldrb	r3, [r7, #11]
 800fd26:	b29a      	uxth	r2, r3
 800fd28:	4b0f      	ldr	r3, [pc, #60]	; (800fd68 <tcp_parseopt+0xe8>)
 800fd2a:	881b      	ldrh	r3, [r3, #0]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	3b02      	subs	r3, #2
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	4b0c      	ldr	r3, [pc, #48]	; (800fd68 <tcp_parseopt+0xe8>)
 800fd36:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fd38:	4b0b      	ldr	r3, [pc, #44]	; (800fd68 <tcp_parseopt+0xe8>)
 800fd3a:	881a      	ldrh	r2, [r3, #0]
 800fd3c:	4b09      	ldr	r3, [pc, #36]	; (800fd64 <tcp_parseopt+0xe4>)
 800fd3e:	881b      	ldrh	r3, [r3, #0]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d3b3      	bcc.n	800fcac <tcp_parseopt+0x2c>
 800fd44:	e004      	b.n	800fd50 <tcp_parseopt+0xd0>
          return;
 800fd46:	bf00      	nop
 800fd48:	e002      	b.n	800fd50 <tcp_parseopt+0xd0>
            return;
 800fd4a:	bf00      	nop
 800fd4c:	e000      	b.n	800fd50 <tcp_parseopt+0xd0>
            return;
 800fd4e:	bf00      	nop
      }
    }
  }
}
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	0801a4e8 	.word	0x0801a4e8
 800fd5c:	0801a94c 	.word	0x0801a94c
 800fd60:	0801a534 	.word	0x0801a534
 800fd64:	2000026c 	.word	0x2000026c
 800fd68:	20000274 	.word	0x20000274

0800fd6c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fd70:	4b05      	ldr	r3, [pc, #20]	; (800fd88 <tcp_trigger_input_pcb_close+0x1c>)
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	f043 0310 	orr.w	r3, r3, #16
 800fd78:	b2da      	uxtb	r2, r3
 800fd7a:	4b03      	ldr	r3, [pc, #12]	; (800fd88 <tcp_trigger_input_pcb_close+0x1c>)
 800fd7c:	701a      	strb	r2, [r3, #0]
}
 800fd7e:	bf00      	nop
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr
 800fd88:	20000285 	.word	0x20000285

0800fd8c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b084      	sub	sp, #16
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00a      	beq.n	800fdb4 <tcp_route+0x28>
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	7a1b      	ldrb	r3, [r3, #8]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d006      	beq.n	800fdb4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	7a1b      	ldrb	r3, [r3, #8]
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7fb f83e 	bl	800ae2c <netif_get_by_index>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	e003      	b.n	800fdbc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f005 fc6b 	bl	8015690 <ip4_route>
 800fdba:	4603      	mov	r3, r0
  }
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3710      	adds	r7, #16
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fdc4:	b590      	push	{r4, r7, lr}
 800fdc6:	b087      	sub	sp, #28
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	603b      	str	r3, [r7, #0]
 800fdd0:	4613      	mov	r3, r2
 800fdd2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d105      	bne.n	800fde6 <tcp_create_segment+0x22>
 800fdda:	4b44      	ldr	r3, [pc, #272]	; (800feec <tcp_create_segment+0x128>)
 800fddc:	22a3      	movs	r2, #163	; 0xa3
 800fdde:	4944      	ldr	r1, [pc, #272]	; (800fef0 <tcp_create_segment+0x12c>)
 800fde0:	4844      	ldr	r0, [pc, #272]	; (800fef4 <tcp_create_segment+0x130>)
 800fde2:	f007 fbe9 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d105      	bne.n	800fdf8 <tcp_create_segment+0x34>
 800fdec:	4b3f      	ldr	r3, [pc, #252]	; (800feec <tcp_create_segment+0x128>)
 800fdee:	22a4      	movs	r2, #164	; 0xa4
 800fdf0:	4941      	ldr	r1, [pc, #260]	; (800fef8 <tcp_create_segment+0x134>)
 800fdf2:	4840      	ldr	r0, [pc, #256]	; (800fef4 <tcp_create_segment+0x130>)
 800fdf4:	f007 fbe0 	bl	80175b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fdf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	f003 0304 	and.w	r3, r3, #4
 800fe04:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fe06:	2003      	movs	r0, #3
 800fe08:	f7fa fd0a 	bl	800a820 <memp_malloc>
 800fe0c:	6138      	str	r0, [r7, #16]
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d104      	bne.n	800fe1e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fe14:	68b8      	ldr	r0, [r7, #8]
 800fe16:	f7fb fb69 	bl	800b4ec <pbuf_free>
    return NULL;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	e061      	b.n	800fee2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fe24:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	68ba      	ldr	r2, [r7, #8]
 800fe30:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	891a      	ldrh	r2, [r3, #8]
 800fe36:	7dfb      	ldrb	r3, [r7, #23]
 800fe38:	b29b      	uxth	r3, r3
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d205      	bcs.n	800fe4a <tcp_create_segment+0x86>
 800fe3e:	4b2b      	ldr	r3, [pc, #172]	; (800feec <tcp_create_segment+0x128>)
 800fe40:	22b0      	movs	r2, #176	; 0xb0
 800fe42:	492e      	ldr	r1, [pc, #184]	; (800fefc <tcp_create_segment+0x138>)
 800fe44:	482b      	ldr	r0, [pc, #172]	; (800fef4 <tcp_create_segment+0x130>)
 800fe46:	f007 fbb7 	bl	80175b8 <iprintf>
  seg->len = p->tot_len - optlen;
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	891a      	ldrh	r2, [r3, #8]
 800fe4e:	7dfb      	ldrb	r3, [r7, #23]
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	1ad3      	subs	r3, r2, r3
 800fe54:	b29a      	uxth	r2, r3
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fe5a:	2114      	movs	r1, #20
 800fe5c:	68b8      	ldr	r0, [r7, #8]
 800fe5e:	f7fb faaf 	bl	800b3c0 <pbuf_add_header>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d004      	beq.n	800fe72 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fe68:	6938      	ldr	r0, [r7, #16]
 800fe6a:	f7fd f81c 	bl	800cea6 <tcp_seg_free>
    return NULL;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	e037      	b.n	800fee2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	685a      	ldr	r2, [r3, #4]
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	8ada      	ldrh	r2, [r3, #22]
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	68dc      	ldr	r4, [r3, #12]
 800fe84:	4610      	mov	r0, r2
 800fe86:	f7fa f84d 	bl	8009f24 <lwip_htons>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	8b1a      	ldrh	r2, [r3, #24]
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	68dc      	ldr	r4, [r3, #12]
 800fe96:	4610      	mov	r0, r2
 800fe98:	f7fa f844 	bl	8009f24 <lwip_htons>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	68dc      	ldr	r4, [r3, #12]
 800fea4:	6838      	ldr	r0, [r7, #0]
 800fea6:	f7fa f852 	bl	8009f4e <lwip_htonl>
 800feaa:	4603      	mov	r3, r0
 800feac:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800feae:	7dfb      	ldrb	r3, [r7, #23]
 800feb0:	089b      	lsrs	r3, r3, #2
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	3305      	adds	r3, #5
 800feb8:	b29b      	uxth	r3, r3
 800feba:	031b      	lsls	r3, r3, #12
 800febc:	b29a      	uxth	r2, r3
 800febe:	79fb      	ldrb	r3, [r7, #7]
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	4313      	orrs	r3, r2
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	68dc      	ldr	r4, [r3, #12]
 800feca:	4610      	mov	r0, r2
 800fecc:	f7fa f82a 	bl	8009f24 <lwip_htons>
 800fed0:	4603      	mov	r3, r0
 800fed2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	68db      	ldr	r3, [r3, #12]
 800fed8:	2200      	movs	r2, #0
 800feda:	749a      	strb	r2, [r3, #18]
 800fedc:	2200      	movs	r2, #0
 800fede:	74da      	strb	r2, [r3, #19]
  return seg;
 800fee0:	693b      	ldr	r3, [r7, #16]
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	371c      	adds	r7, #28
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd90      	pop	{r4, r7, pc}
 800feea:	bf00      	nop
 800feec:	0801a968 	.word	0x0801a968
 800fef0:	0801a99c 	.word	0x0801a99c
 800fef4:	0801a9bc 	.word	0x0801a9bc
 800fef8:	0801a9e4 	.word	0x0801a9e4
 800fefc:	0801aa08 	.word	0x0801aa08

0800ff00 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b086      	sub	sp, #24
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	607b      	str	r3, [r7, #4]
 800ff08:	4603      	mov	r3, r0
 800ff0a:	73fb      	strb	r3, [r7, #15]
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	81bb      	strh	r3, [r7, #12]
 800ff10:	4613      	mov	r3, r2
 800ff12:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800ff14:	89bb      	ldrh	r3, [r7, #12]
 800ff16:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d105      	bne.n	800ff2a <tcp_pbuf_prealloc+0x2a>
 800ff1e:	4b30      	ldr	r3, [pc, #192]	; (800ffe0 <tcp_pbuf_prealloc+0xe0>)
 800ff20:	22e8      	movs	r2, #232	; 0xe8
 800ff22:	4930      	ldr	r1, [pc, #192]	; (800ffe4 <tcp_pbuf_prealloc+0xe4>)
 800ff24:	4830      	ldr	r0, [pc, #192]	; (800ffe8 <tcp_pbuf_prealloc+0xe8>)
 800ff26:	f007 fb47 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ff2a:	6a3b      	ldr	r3, [r7, #32]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d105      	bne.n	800ff3c <tcp_pbuf_prealloc+0x3c>
 800ff30:	4b2b      	ldr	r3, [pc, #172]	; (800ffe0 <tcp_pbuf_prealloc+0xe0>)
 800ff32:	22e9      	movs	r2, #233	; 0xe9
 800ff34:	492d      	ldr	r1, [pc, #180]	; (800ffec <tcp_pbuf_prealloc+0xec>)
 800ff36:	482c      	ldr	r0, [pc, #176]	; (800ffe8 <tcp_pbuf_prealloc+0xe8>)
 800ff38:	f007 fb3e 	bl	80175b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ff3c:	89ba      	ldrh	r2, [r7, #12]
 800ff3e:	897b      	ldrh	r3, [r7, #10]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d221      	bcs.n	800ff88 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ff44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ff48:	f003 0302 	and.w	r3, r3, #2
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d111      	bne.n	800ff74 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ff50:	6a3b      	ldr	r3, [r7, #32]
 800ff52:	8b5b      	ldrh	r3, [r3, #26]
 800ff54:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d115      	bne.n	800ff88 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ff5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d007      	beq.n	800ff74 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ff64:	6a3b      	ldr	r3, [r7, #32]
 800ff66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d103      	bne.n	800ff74 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ff6c:	6a3b      	ldr	r3, [r7, #32]
 800ff6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d009      	beq.n	800ff88 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ff74:	89bb      	ldrh	r3, [r7, #12]
 800ff76:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ff7a:	f023 0203 	bic.w	r2, r3, #3
 800ff7e:	897b      	ldrh	r3, [r7, #10]
 800ff80:	4293      	cmp	r3, r2
 800ff82:	bf28      	it	cs
 800ff84:	4613      	movcs	r3, r2
 800ff86:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ff88:	8af9      	ldrh	r1, [r7, #22]
 800ff8a:	7bfb      	ldrb	r3, [r7, #15]
 800ff8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7fa ffc7 	bl	800af24 <pbuf_alloc>
 800ff96:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d101      	bne.n	800ffa2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	e019      	b.n	800ffd6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d006      	beq.n	800ffb8 <tcp_pbuf_prealloc+0xb8>
 800ffaa:	4b0d      	ldr	r3, [pc, #52]	; (800ffe0 <tcp_pbuf_prealloc+0xe0>)
 800ffac:	f240 120b 	movw	r2, #267	; 0x10b
 800ffb0:	490f      	ldr	r1, [pc, #60]	; (800fff0 <tcp_pbuf_prealloc+0xf0>)
 800ffb2:	480d      	ldr	r0, [pc, #52]	; (800ffe8 <tcp_pbuf_prealloc+0xe8>)
 800ffb4:	f007 fb00 	bl	80175b8 <iprintf>
  *oversize = p->len - length;
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	895a      	ldrh	r2, [r3, #10]
 800ffbc:	89bb      	ldrh	r3, [r7, #12]
 800ffbe:	1ad3      	subs	r3, r2, r3
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	89ba      	ldrh	r2, [r7, #12]
 800ffca:	811a      	strh	r2, [r3, #8]
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	891a      	ldrh	r2, [r3, #8]
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	815a      	strh	r2, [r3, #10]
  return p;
 800ffd4:	693b      	ldr	r3, [r7, #16]
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3718      	adds	r7, #24
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	0801a968 	.word	0x0801a968
 800ffe4:	0801aa20 	.word	0x0801aa20
 800ffe8:	0801a9bc 	.word	0x0801a9bc
 800ffec:	0801aa44 	.word	0x0801aa44
 800fff0:	0801aa64 	.word	0x0801aa64

0800fff4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	460b      	mov	r3, r1
 800fffe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d106      	bne.n	8010014 <tcp_write_checks+0x20>
 8010006:	4b33      	ldr	r3, [pc, #204]	; (80100d4 <tcp_write_checks+0xe0>)
 8010008:	f240 1233 	movw	r2, #307	; 0x133
 801000c:	4932      	ldr	r1, [pc, #200]	; (80100d8 <tcp_write_checks+0xe4>)
 801000e:	4833      	ldr	r0, [pc, #204]	; (80100dc <tcp_write_checks+0xe8>)
 8010010:	f007 fad2 	bl	80175b8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	7d1b      	ldrb	r3, [r3, #20]
 8010018:	2b04      	cmp	r3, #4
 801001a:	d00e      	beq.n	801003a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010020:	2b07      	cmp	r3, #7
 8010022:	d00a      	beq.n	801003a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010028:	2b02      	cmp	r3, #2
 801002a:	d006      	beq.n	801003a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010030:	2b03      	cmp	r3, #3
 8010032:	d002      	beq.n	801003a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010034:	f06f 030a 	mvn.w	r3, #10
 8010038:	e048      	b.n	80100cc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801003a:	887b      	ldrh	r3, [r7, #2]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d101      	bne.n	8010044 <tcp_write_checks+0x50>
    return ERR_OK;
 8010040:	2300      	movs	r3, #0
 8010042:	e043      	b.n	80100cc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801004a:	887a      	ldrh	r2, [r7, #2]
 801004c:	429a      	cmp	r2, r3
 801004e:	d909      	bls.n	8010064 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	8b5b      	ldrh	r3, [r3, #26]
 8010054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010058:	b29a      	uxth	r2, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801005e:	f04f 33ff 	mov.w	r3, #4294967295
 8010062:	e033      	b.n	80100cc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801006a:	2b08      	cmp	r3, #8
 801006c:	d909      	bls.n	8010082 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	8b5b      	ldrh	r3, [r3, #26]
 8010072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010076:	b29a      	uxth	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801007c:	f04f 33ff 	mov.w	r3, #4294967295
 8010080:	e024      	b.n	80100cc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010088:	2b00      	cmp	r3, #0
 801008a:	d00f      	beq.n	80100ac <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010090:	2b00      	cmp	r3, #0
 8010092:	d11a      	bne.n	80100ca <tcp_write_checks+0xd6>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010098:	2b00      	cmp	r3, #0
 801009a:	d116      	bne.n	80100ca <tcp_write_checks+0xd6>
 801009c:	4b0d      	ldr	r3, [pc, #52]	; (80100d4 <tcp_write_checks+0xe0>)
 801009e:	f240 1255 	movw	r2, #341	; 0x155
 80100a2:	490f      	ldr	r1, [pc, #60]	; (80100e0 <tcp_write_checks+0xec>)
 80100a4:	480d      	ldr	r0, [pc, #52]	; (80100dc <tcp_write_checks+0xe8>)
 80100a6:	f007 fa87 	bl	80175b8 <iprintf>
 80100aa:	e00e      	b.n	80100ca <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d103      	bne.n	80100bc <tcp_write_checks+0xc8>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d006      	beq.n	80100ca <tcp_write_checks+0xd6>
 80100bc:	4b05      	ldr	r3, [pc, #20]	; (80100d4 <tcp_write_checks+0xe0>)
 80100be:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80100c2:	4908      	ldr	r1, [pc, #32]	; (80100e4 <tcp_write_checks+0xf0>)
 80100c4:	4805      	ldr	r0, [pc, #20]	; (80100dc <tcp_write_checks+0xe8>)
 80100c6:	f007 fa77 	bl	80175b8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80100ca:	2300      	movs	r3, #0
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3708      	adds	r7, #8
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}
 80100d4:	0801a968 	.word	0x0801a968
 80100d8:	0801aa78 	.word	0x0801aa78
 80100dc:	0801a9bc 	.word	0x0801a9bc
 80100e0:	0801aa98 	.word	0x0801aa98
 80100e4:	0801aad4 	.word	0x0801aad4

080100e8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80100e8:	b590      	push	{r4, r7, lr}
 80100ea:	b09b      	sub	sp, #108	; 0x6c
 80100ec:	af04      	add	r7, sp, #16
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	60b9      	str	r1, [r7, #8]
 80100f2:	4611      	mov	r1, r2
 80100f4:	461a      	mov	r2, r3
 80100f6:	460b      	mov	r3, r1
 80100f8:	80fb      	strh	r3, [r7, #6]
 80100fa:	4613      	mov	r3, r2
 80100fc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80100fe:	2300      	movs	r3, #0
 8010100:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010102:	2300      	movs	r3, #0
 8010104:	653b      	str	r3, [r7, #80]	; 0x50
 8010106:	2300      	movs	r3, #0
 8010108:	64fb      	str	r3, [r7, #76]	; 0x4c
 801010a:	2300      	movs	r3, #0
 801010c:	64bb      	str	r3, [r7, #72]	; 0x48
 801010e:	2300      	movs	r3, #0
 8010110:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010112:	2300      	movs	r3, #0
 8010114:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010118:	2300      	movs	r3, #0
 801011a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801011e:	2300      	movs	r3, #0
 8010120:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010122:	2300      	movs	r3, #0
 8010124:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010126:	2300      	movs	r3, #0
 8010128:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d109      	bne.n	8010144 <tcp_write+0x5c>
 8010130:	4ba4      	ldr	r3, [pc, #656]	; (80103c4 <tcp_write+0x2dc>)
 8010132:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010136:	49a4      	ldr	r1, [pc, #656]	; (80103c8 <tcp_write+0x2e0>)
 8010138:	48a4      	ldr	r0, [pc, #656]	; (80103cc <tcp_write+0x2e4>)
 801013a:	f007 fa3d 	bl	80175b8 <iprintf>
 801013e:	f06f 030f 	mvn.w	r3, #15
 8010142:	e32a      	b.n	801079a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801014a:	085b      	lsrs	r3, r3, #1
 801014c:	b29a      	uxth	r2, r3
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010152:	4293      	cmp	r3, r2
 8010154:	bf28      	it	cs
 8010156:	4613      	movcs	r3, r2
 8010158:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801015a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801015c:	2b00      	cmp	r3, #0
 801015e:	d102      	bne.n	8010166 <tcp_write+0x7e>
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010164:	e000      	b.n	8010168 <tcp_write+0x80>
 8010166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010168:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d109      	bne.n	8010184 <tcp_write+0x9c>
 8010170:	4b94      	ldr	r3, [pc, #592]	; (80103c4 <tcp_write+0x2dc>)
 8010172:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010176:	4996      	ldr	r1, [pc, #600]	; (80103d0 <tcp_write+0x2e8>)
 8010178:	4894      	ldr	r0, [pc, #592]	; (80103cc <tcp_write+0x2e4>)
 801017a:	f007 fa1d 	bl	80175b8 <iprintf>
 801017e:	f06f 030f 	mvn.w	r3, #15
 8010182:	e30a      	b.n	801079a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010184:	88fb      	ldrh	r3, [r7, #6]
 8010186:	4619      	mov	r1, r3
 8010188:	68f8      	ldr	r0, [r7, #12]
 801018a:	f7ff ff33 	bl	800fff4 <tcp_write_checks>
 801018e:	4603      	mov	r3, r0
 8010190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010194:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010198:	2b00      	cmp	r3, #0
 801019a:	d002      	beq.n	80101a2 <tcp_write+0xba>
    return err;
 801019c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80101a0:	e2fb      	b.n	801079a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80101ac:	2300      	movs	r3, #0
 80101ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	f000 80f6 	beq.w	80103a8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101c0:	653b      	str	r3, [r7, #80]	; 0x50
 80101c2:	e002      	b.n	80101ca <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80101c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d1f8      	bne.n	80101c4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80101d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101d4:	7a9b      	ldrb	r3, [r3, #10]
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	b29b      	uxth	r3, r3
 80101da:	f003 0304 	and.w	r3, r3, #4
 80101de:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80101e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80101e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101e4:	891b      	ldrh	r3, [r3, #8]
 80101e6:	4619      	mov	r1, r3
 80101e8:	8c3b      	ldrh	r3, [r7, #32]
 80101ea:	440b      	add	r3, r1
 80101ec:	429a      	cmp	r2, r3
 80101ee:	da06      	bge.n	80101fe <tcp_write+0x116>
 80101f0:	4b74      	ldr	r3, [pc, #464]	; (80103c4 <tcp_write+0x2dc>)
 80101f2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80101f6:	4977      	ldr	r1, [pc, #476]	; (80103d4 <tcp_write+0x2ec>)
 80101f8:	4874      	ldr	r0, [pc, #464]	; (80103cc <tcp_write+0x2e4>)
 80101fa:	f007 f9dd 	bl	80175b8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80101fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010200:	891a      	ldrh	r2, [r3, #8]
 8010202:	8c3b      	ldrh	r3, [r7, #32]
 8010204:	4413      	add	r3, r2
 8010206:	b29b      	uxth	r3, r3
 8010208:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801020a:	1ad3      	subs	r3, r2, r3
 801020c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010214:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010216:	8a7b      	ldrh	r3, [r7, #18]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d026      	beq.n	801026a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801021c:	8a7b      	ldrh	r3, [r7, #18]
 801021e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010220:	429a      	cmp	r2, r3
 8010222:	d206      	bcs.n	8010232 <tcp_write+0x14a>
 8010224:	4b67      	ldr	r3, [pc, #412]	; (80103c4 <tcp_write+0x2dc>)
 8010226:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801022a:	496b      	ldr	r1, [pc, #428]	; (80103d8 <tcp_write+0x2f0>)
 801022c:	4867      	ldr	r0, [pc, #412]	; (80103cc <tcp_write+0x2e4>)
 801022e:	f007 f9c3 	bl	80175b8 <iprintf>
      seg = last_unsent;
 8010232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010234:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010236:	8a7b      	ldrh	r3, [r7, #18]
 8010238:	88fa      	ldrh	r2, [r7, #6]
 801023a:	4293      	cmp	r3, r2
 801023c:	bf28      	it	cs
 801023e:	4613      	movcs	r3, r2
 8010240:	b29b      	uxth	r3, r3
 8010242:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010244:	4293      	cmp	r3, r2
 8010246:	bf28      	it	cs
 8010248:	4613      	movcs	r3, r2
 801024a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801024c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010250:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010252:	4413      	add	r3, r2
 8010254:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010258:	8a7a      	ldrh	r2, [r7, #18]
 801025a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801025c:	1ad3      	subs	r3, r2, r3
 801025e:	b29b      	uxth	r3, r3
 8010260:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010262:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010264:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010266:	1ad3      	subs	r3, r2, r3
 8010268:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801026a:	8a7b      	ldrh	r3, [r7, #18]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d00b      	beq.n	8010288 <tcp_write+0x1a0>
 8010270:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010274:	88fb      	ldrh	r3, [r7, #6]
 8010276:	429a      	cmp	r2, r3
 8010278:	d006      	beq.n	8010288 <tcp_write+0x1a0>
 801027a:	4b52      	ldr	r3, [pc, #328]	; (80103c4 <tcp_write+0x2dc>)
 801027c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010280:	4956      	ldr	r1, [pc, #344]	; (80103dc <tcp_write+0x2f4>)
 8010282:	4852      	ldr	r0, [pc, #328]	; (80103cc <tcp_write+0x2e4>)
 8010284:	f007 f998 	bl	80175b8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010288:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801028c:	88fb      	ldrh	r3, [r7, #6]
 801028e:	429a      	cmp	r2, r3
 8010290:	f080 8167 	bcs.w	8010562 <tcp_write+0x47a>
 8010294:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010296:	2b00      	cmp	r3, #0
 8010298:	f000 8163 	beq.w	8010562 <tcp_write+0x47a>
 801029c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801029e:	891b      	ldrh	r3, [r3, #8]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f000 815e 	beq.w	8010562 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80102a6:	88fa      	ldrh	r2, [r7, #6]
 80102a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102ac:	1ad2      	subs	r2, r2, r3
 80102ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80102b0:	4293      	cmp	r3, r2
 80102b2:	bfa8      	it	ge
 80102b4:	4613      	movge	r3, r2
 80102b6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80102b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102ba:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80102bc:	797b      	ldrb	r3, [r7, #5]
 80102be:	f003 0301 	and.w	r3, r3, #1
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d027      	beq.n	8010316 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80102c6:	f107 0012 	add.w	r0, r7, #18
 80102ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80102cc:	8bf9      	ldrh	r1, [r7, #30]
 80102ce:	2301      	movs	r3, #1
 80102d0:	9302      	str	r3, [sp, #8]
 80102d2:	797b      	ldrb	r3, [r7, #5]
 80102d4:	9301      	str	r3, [sp, #4]
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	9300      	str	r3, [sp, #0]
 80102da:	4603      	mov	r3, r0
 80102dc:	2000      	movs	r0, #0
 80102de:	f7ff fe0f 	bl	800ff00 <tcp_pbuf_prealloc>
 80102e2:	6578      	str	r0, [r7, #84]	; 0x54
 80102e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	f000 8225 	beq.w	8010736 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80102ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102ee:	6858      	ldr	r0, [r3, #4]
 80102f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102f4:	68ba      	ldr	r2, [r7, #8]
 80102f6:	4413      	add	r3, r2
 80102f8:	8bfa      	ldrh	r2, [r7, #30]
 80102fa:	4619      	mov	r1, r3
 80102fc:	f007 f92c 	bl	8017558 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010300:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010302:	f7fb f97b 	bl	800b5fc <pbuf_clen>
 8010306:	4603      	mov	r3, r0
 8010308:	461a      	mov	r2, r3
 801030a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801030e:	4413      	add	r3, r2
 8010310:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010314:	e041      	b.n	801039a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	637b      	str	r3, [r7, #52]	; 0x34
 801031c:	e002      	b.n	8010324 <tcp_write+0x23c>
 801031e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	637b      	str	r3, [r7, #52]	; 0x34
 8010324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d1f8      	bne.n	801031e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801032c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801032e:	7b1b      	ldrb	r3, [r3, #12]
 8010330:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d115      	bne.n	8010364 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801033e:	8952      	ldrh	r2, [r2, #10]
 8010340:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010342:	68ba      	ldr	r2, [r7, #8]
 8010344:	429a      	cmp	r2, r3
 8010346:	d10d      	bne.n	8010364 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010348:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801034c:	2b00      	cmp	r3, #0
 801034e:	d006      	beq.n	801035e <tcp_write+0x276>
 8010350:	4b1c      	ldr	r3, [pc, #112]	; (80103c4 <tcp_write+0x2dc>)
 8010352:	f240 2231 	movw	r2, #561	; 0x231
 8010356:	4922      	ldr	r1, [pc, #136]	; (80103e0 <tcp_write+0x2f8>)
 8010358:	481c      	ldr	r0, [pc, #112]	; (80103cc <tcp_write+0x2e4>)
 801035a:	f007 f92d 	bl	80175b8 <iprintf>
          extendlen = seglen;
 801035e:	8bfb      	ldrh	r3, [r7, #30]
 8010360:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010362:	e01a      	b.n	801039a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010364:	8bfb      	ldrh	r3, [r7, #30]
 8010366:	2201      	movs	r2, #1
 8010368:	4619      	mov	r1, r3
 801036a:	2000      	movs	r0, #0
 801036c:	f7fa fdda 	bl	800af24 <pbuf_alloc>
 8010370:	6578      	str	r0, [r7, #84]	; 0x54
 8010372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010374:	2b00      	cmp	r3, #0
 8010376:	f000 81e0 	beq.w	801073a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801037a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801037e:	68ba      	ldr	r2, [r7, #8]
 8010380:	441a      	add	r2, r3
 8010382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010384:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010386:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010388:	f7fb f938 	bl	800b5fc <pbuf_clen>
 801038c:	4603      	mov	r3, r0
 801038e:	461a      	mov	r2, r3
 8010390:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010394:	4413      	add	r3, r2
 8010396:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801039a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801039e:	8bfb      	ldrh	r3, [r7, #30]
 80103a0:	4413      	add	r3, r2
 80103a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80103a6:	e0dc      	b.n	8010562 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	f000 80d7 	beq.w	8010562 <tcp_write+0x47a>
 80103b4:	4b03      	ldr	r3, [pc, #12]	; (80103c4 <tcp_write+0x2dc>)
 80103b6:	f240 224a 	movw	r2, #586	; 0x24a
 80103ba:	490a      	ldr	r1, [pc, #40]	; (80103e4 <tcp_write+0x2fc>)
 80103bc:	4803      	ldr	r0, [pc, #12]	; (80103cc <tcp_write+0x2e4>)
 80103be:	f007 f8fb 	bl	80175b8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80103c2:	e0ce      	b.n	8010562 <tcp_write+0x47a>
 80103c4:	0801a968 	.word	0x0801a968
 80103c8:	0801ab08 	.word	0x0801ab08
 80103cc:	0801a9bc 	.word	0x0801a9bc
 80103d0:	0801ab20 	.word	0x0801ab20
 80103d4:	0801ab54 	.word	0x0801ab54
 80103d8:	0801ab6c 	.word	0x0801ab6c
 80103dc:	0801ab8c 	.word	0x0801ab8c
 80103e0:	0801abac 	.word	0x0801abac
 80103e4:	0801abd8 	.word	0x0801abd8
    struct pbuf *p;
    u16_t left = len - pos;
 80103e8:	88fa      	ldrh	r2, [r7, #6]
 80103ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80103ee:	1ad3      	subs	r3, r2, r3
 80103f0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80103f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80103fa:	1ad3      	subs	r3, r2, r3
 80103fc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80103fe:	8b7a      	ldrh	r2, [r7, #26]
 8010400:	8bbb      	ldrh	r3, [r7, #28]
 8010402:	4293      	cmp	r3, r2
 8010404:	bf28      	it	cs
 8010406:	4613      	movcs	r3, r2
 8010408:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801040a:	797b      	ldrb	r3, [r7, #5]
 801040c:	f003 0301 	and.w	r3, r3, #1
 8010410:	2b00      	cmp	r3, #0
 8010412:	d036      	beq.n	8010482 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010414:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010418:	b29a      	uxth	r2, r3
 801041a:	8b3b      	ldrh	r3, [r7, #24]
 801041c:	4413      	add	r3, r2
 801041e:	b299      	uxth	r1, r3
 8010420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010422:	2b00      	cmp	r3, #0
 8010424:	bf0c      	ite	eq
 8010426:	2301      	moveq	r3, #1
 8010428:	2300      	movne	r3, #0
 801042a:	b2db      	uxtb	r3, r3
 801042c:	f107 0012 	add.w	r0, r7, #18
 8010430:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010432:	9302      	str	r3, [sp, #8]
 8010434:	797b      	ldrb	r3, [r7, #5]
 8010436:	9301      	str	r3, [sp, #4]
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	9300      	str	r3, [sp, #0]
 801043c:	4603      	mov	r3, r0
 801043e:	2036      	movs	r0, #54	; 0x36
 8010440:	f7ff fd5e 	bl	800ff00 <tcp_pbuf_prealloc>
 8010444:	6338      	str	r0, [r7, #48]	; 0x30
 8010446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010448:	2b00      	cmp	r3, #0
 801044a:	f000 8178 	beq.w	801073e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801044e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010450:	895b      	ldrh	r3, [r3, #10]
 8010452:	8b3a      	ldrh	r2, [r7, #24]
 8010454:	429a      	cmp	r2, r3
 8010456:	d906      	bls.n	8010466 <tcp_write+0x37e>
 8010458:	4b8c      	ldr	r3, [pc, #560]	; (801068c <tcp_write+0x5a4>)
 801045a:	f240 2266 	movw	r2, #614	; 0x266
 801045e:	498c      	ldr	r1, [pc, #560]	; (8010690 <tcp_write+0x5a8>)
 8010460:	488c      	ldr	r0, [pc, #560]	; (8010694 <tcp_write+0x5ac>)
 8010462:	f007 f8a9 	bl	80175b8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010468:	685a      	ldr	r2, [r3, #4]
 801046a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801046e:	18d0      	adds	r0, r2, r3
 8010470:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010474:	68ba      	ldr	r2, [r7, #8]
 8010476:	4413      	add	r3, r2
 8010478:	8b3a      	ldrh	r2, [r7, #24]
 801047a:	4619      	mov	r1, r3
 801047c:	f007 f86c 	bl	8017558 <memcpy>
 8010480:	e02f      	b.n	80104e2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010482:	8a7b      	ldrh	r3, [r7, #18]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d006      	beq.n	8010496 <tcp_write+0x3ae>
 8010488:	4b80      	ldr	r3, [pc, #512]	; (801068c <tcp_write+0x5a4>)
 801048a:	f240 2271 	movw	r2, #625	; 0x271
 801048e:	4982      	ldr	r1, [pc, #520]	; (8010698 <tcp_write+0x5b0>)
 8010490:	4880      	ldr	r0, [pc, #512]	; (8010694 <tcp_write+0x5ac>)
 8010492:	f007 f891 	bl	80175b8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010496:	8b3b      	ldrh	r3, [r7, #24]
 8010498:	2201      	movs	r2, #1
 801049a:	4619      	mov	r1, r3
 801049c:	2036      	movs	r0, #54	; 0x36
 801049e:	f7fa fd41 	bl	800af24 <pbuf_alloc>
 80104a2:	6178      	str	r0, [r7, #20]
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	f000 814b 	beq.w	8010742 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80104ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104b0:	68ba      	ldr	r2, [r7, #8]
 80104b2:	441a      	add	r2, r3
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80104b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80104bc:	b29b      	uxth	r3, r3
 80104be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80104c2:	4619      	mov	r1, r3
 80104c4:	2036      	movs	r0, #54	; 0x36
 80104c6:	f7fa fd2d 	bl	800af24 <pbuf_alloc>
 80104ca:	6338      	str	r0, [r7, #48]	; 0x30
 80104cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d103      	bne.n	80104da <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80104d2:	6978      	ldr	r0, [r7, #20]
 80104d4:	f7fb f80a 	bl	800b4ec <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80104d8:	e136      	b.n	8010748 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80104da:	6979      	ldr	r1, [r7, #20]
 80104dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104de:	f7fb f8c7 	bl	800b670 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80104e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104e4:	f7fb f88a 	bl	800b5fc <pbuf_clen>
 80104e8:	4603      	mov	r3, r0
 80104ea:	461a      	mov	r2, r3
 80104ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80104f0:	4413      	add	r3, r2
 80104f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80104f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80104fa:	2b09      	cmp	r3, #9
 80104fc:	d903      	bls.n	8010506 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80104fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010500:	f7fa fff4 	bl	800b4ec <pbuf_free>
      goto memerr;
 8010504:	e120      	b.n	8010748 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801050a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801050e:	441a      	add	r2, r3
 8010510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010514:	9300      	str	r3, [sp, #0]
 8010516:	4613      	mov	r3, r2
 8010518:	2200      	movs	r2, #0
 801051a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801051c:	68f8      	ldr	r0, [r7, #12]
 801051e:	f7ff fc51 	bl	800fdc4 <tcp_create_segment>
 8010522:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010526:	2b00      	cmp	r3, #0
 8010528:	f000 810d 	beq.w	8010746 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801052c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801052e:	2b00      	cmp	r3, #0
 8010530:	d102      	bne.n	8010538 <tcp_write+0x450>
      queue = seg;
 8010532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010534:	647b      	str	r3, [r7, #68]	; 0x44
 8010536:	e00c      	b.n	8010552 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801053a:	2b00      	cmp	r3, #0
 801053c:	d106      	bne.n	801054c <tcp_write+0x464>
 801053e:	4b53      	ldr	r3, [pc, #332]	; (801068c <tcp_write+0x5a4>)
 8010540:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010544:	4955      	ldr	r1, [pc, #340]	; (801069c <tcp_write+0x5b4>)
 8010546:	4853      	ldr	r0, [pc, #332]	; (8010694 <tcp_write+0x5ac>)
 8010548:	f007 f836 	bl	80175b8 <iprintf>
      prev_seg->next = seg;
 801054c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801054e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010550:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010554:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010556:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801055a:	8b3b      	ldrh	r3, [r7, #24]
 801055c:	4413      	add	r3, r2
 801055e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010562:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010566:	88fb      	ldrh	r3, [r7, #6]
 8010568:	429a      	cmp	r2, r3
 801056a:	f4ff af3d 	bcc.w	80103e8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801056e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010570:	2b00      	cmp	r3, #0
 8010572:	d02c      	beq.n	80105ce <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	62fb      	str	r3, [r7, #44]	; 0x2c
 801057a:	e01e      	b.n	80105ba <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801057c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057e:	891a      	ldrh	r2, [r3, #8]
 8010580:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010582:	4413      	add	r3, r2
 8010584:	b29a      	uxth	r2, r3
 8010586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010588:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801058a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d110      	bne.n	80105b4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010598:	8952      	ldrh	r2, [r2, #10]
 801059a:	4413      	add	r3, r2
 801059c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801059e:	68b9      	ldr	r1, [r7, #8]
 80105a0:	4618      	mov	r0, r3
 80105a2:	f006 ffd9 	bl	8017558 <memcpy>
        p->len += oversize_used;
 80105a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a8:	895a      	ldrh	r2, [r3, #10]
 80105aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80105ac:	4413      	add	r3, r2
 80105ae:	b29a      	uxth	r2, r3
 80105b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80105b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d1dd      	bne.n	801057c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80105c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105c2:	891a      	ldrh	r2, [r3, #8]
 80105c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80105c6:	4413      	add	r3, r2
 80105c8:	b29a      	uxth	r2, r3
 80105ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105cc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80105ce:	8a7a      	ldrh	r2, [r7, #18]
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80105d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d018      	beq.n	801060e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80105dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d106      	bne.n	80105f0 <tcp_write+0x508>
 80105e2:	4b2a      	ldr	r3, [pc, #168]	; (801068c <tcp_write+0x5a4>)
 80105e4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80105e8:	492d      	ldr	r1, [pc, #180]	; (80106a0 <tcp_write+0x5b8>)
 80105ea:	482a      	ldr	r0, [pc, #168]	; (8010694 <tcp_write+0x5ac>)
 80105ec:	f006 ffe4 	bl	80175b8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80105f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105f2:	685b      	ldr	r3, [r3, #4]
 80105f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7fb f83a 	bl	800b670 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80105fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105fe:	891a      	ldrh	r2, [r3, #8]
 8010600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010602:	891b      	ldrh	r3, [r3, #8]
 8010604:	4413      	add	r3, r2
 8010606:	b29a      	uxth	r2, r3
 8010608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801060a:	811a      	strh	r2, [r3, #8]
 801060c:	e037      	b.n	801067e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801060e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010610:	2b00      	cmp	r3, #0
 8010612:	d034      	beq.n	801067e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010616:	2b00      	cmp	r3, #0
 8010618:	d003      	beq.n	8010622 <tcp_write+0x53a>
 801061a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d106      	bne.n	8010630 <tcp_write+0x548>
 8010622:	4b1a      	ldr	r3, [pc, #104]	; (801068c <tcp_write+0x5a4>)
 8010624:	f240 22e6 	movw	r2, #742	; 0x2e6
 8010628:	491e      	ldr	r1, [pc, #120]	; (80106a4 <tcp_write+0x5bc>)
 801062a:	481a      	ldr	r0, [pc, #104]	; (8010694 <tcp_write+0x5ac>)
 801062c:	f006 ffc4 	bl	80175b8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	62bb      	str	r3, [r7, #40]	; 0x28
 8010636:	e009      	b.n	801064c <tcp_write+0x564>
      p->tot_len += extendlen;
 8010638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063a:	891a      	ldrh	r2, [r3, #8]
 801063c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801063e:	4413      	add	r3, r2
 8010640:	b29a      	uxth	r2, r3
 8010642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010644:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	62bb      	str	r3, [r7, #40]	; 0x28
 801064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d1f1      	bne.n	8010638 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010656:	891a      	ldrh	r2, [r3, #8]
 8010658:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801065a:	4413      	add	r3, r2
 801065c:	b29a      	uxth	r2, r3
 801065e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010660:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010664:	895a      	ldrh	r2, [r3, #10]
 8010666:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010668:	4413      	add	r3, r2
 801066a:	b29a      	uxth	r2, r3
 801066c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010672:	891a      	ldrh	r2, [r3, #8]
 8010674:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010676:	4413      	add	r3, r2
 8010678:	b29a      	uxth	r2, r3
 801067a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801067c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801067e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010680:	2b00      	cmp	r3, #0
 8010682:	d111      	bne.n	80106a8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010688:	66da      	str	r2, [r3, #108]	; 0x6c
 801068a:	e010      	b.n	80106ae <tcp_write+0x5c6>
 801068c:	0801a968 	.word	0x0801a968
 8010690:	0801ac08 	.word	0x0801ac08
 8010694:	0801a9bc 	.word	0x0801a9bc
 8010698:	0801ac48 	.word	0x0801ac48
 801069c:	0801ac58 	.word	0x0801ac58
 80106a0:	0801ac6c 	.word	0x0801ac6c
 80106a4:	0801aca4 	.word	0x0801aca4
  } else {
    last_unsent->next = queue;
 80106a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106ac:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80106b2:	88fb      	ldrh	r3, [r7, #6]
 80106b4:	441a      	add	r2, r3
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80106c0:	88fb      	ldrh	r3, [r7, #6]
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	b29a      	uxth	r2, r3
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80106d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d00e      	beq.n	80106fe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d10a      	bne.n	80106fe <tcp_write+0x616>
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d106      	bne.n	80106fe <tcp_write+0x616>
 80106f0:	4b2c      	ldr	r3, [pc, #176]	; (80107a4 <tcp_write+0x6bc>)
 80106f2:	f240 3212 	movw	r2, #786	; 0x312
 80106f6:	492c      	ldr	r1, [pc, #176]	; (80107a8 <tcp_write+0x6c0>)
 80106f8:	482c      	ldr	r0, [pc, #176]	; (80107ac <tcp_write+0x6c4>)
 80106fa:	f006 ff5d 	bl	80175b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80106fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010700:	2b00      	cmp	r3, #0
 8010702:	d016      	beq.n	8010732 <tcp_write+0x64a>
 8010704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010706:	68db      	ldr	r3, [r3, #12]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d012      	beq.n	8010732 <tcp_write+0x64a>
 801070c:	797b      	ldrb	r3, [r7, #5]
 801070e:	f003 0302 	and.w	r3, r3, #2
 8010712:	2b00      	cmp	r3, #0
 8010714:	d10d      	bne.n	8010732 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010718:	68db      	ldr	r3, [r3, #12]
 801071a:	899b      	ldrh	r3, [r3, #12]
 801071c:	b29c      	uxth	r4, r3
 801071e:	2008      	movs	r0, #8
 8010720:	f7f9 fc00 	bl	8009f24 <lwip_htons>
 8010724:	4603      	mov	r3, r0
 8010726:	461a      	mov	r2, r3
 8010728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801072a:	68db      	ldr	r3, [r3, #12]
 801072c:	4322      	orrs	r2, r4
 801072e:	b292      	uxth	r2, r2
 8010730:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010732:	2300      	movs	r3, #0
 8010734:	e031      	b.n	801079a <tcp_write+0x6b2>
          goto memerr;
 8010736:	bf00      	nop
 8010738:	e006      	b.n	8010748 <tcp_write+0x660>
            goto memerr;
 801073a:	bf00      	nop
 801073c:	e004      	b.n	8010748 <tcp_write+0x660>
        goto memerr;
 801073e:	bf00      	nop
 8010740:	e002      	b.n	8010748 <tcp_write+0x660>
        goto memerr;
 8010742:	bf00      	nop
 8010744:	e000      	b.n	8010748 <tcp_write+0x660>
      goto memerr;
 8010746:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	8b5b      	ldrh	r3, [r3, #26]
 801074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010750:	b29a      	uxth	r2, r3
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010758:	2b00      	cmp	r3, #0
 801075a:	d002      	beq.n	8010762 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801075c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801075e:	f7fa fec5 	bl	800b4ec <pbuf_free>
  }
  if (queue != NULL) {
 8010762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010764:	2b00      	cmp	r3, #0
 8010766:	d002      	beq.n	801076e <tcp_write+0x686>
    tcp_segs_free(queue);
 8010768:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801076a:	f7fc fb87 	bl	800ce7c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010774:	2b00      	cmp	r3, #0
 8010776:	d00e      	beq.n	8010796 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801077c:	2b00      	cmp	r3, #0
 801077e:	d10a      	bne.n	8010796 <tcp_write+0x6ae>
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010784:	2b00      	cmp	r3, #0
 8010786:	d106      	bne.n	8010796 <tcp_write+0x6ae>
 8010788:	4b06      	ldr	r3, [pc, #24]	; (80107a4 <tcp_write+0x6bc>)
 801078a:	f240 3227 	movw	r2, #807	; 0x327
 801078e:	4906      	ldr	r1, [pc, #24]	; (80107a8 <tcp_write+0x6c0>)
 8010790:	4806      	ldr	r0, [pc, #24]	; (80107ac <tcp_write+0x6c4>)
 8010792:	f006 ff11 	bl	80175b8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010796:	f04f 33ff 	mov.w	r3, #4294967295
}
 801079a:	4618      	mov	r0, r3
 801079c:	375c      	adds	r7, #92	; 0x5c
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd90      	pop	{r4, r7, pc}
 80107a2:	bf00      	nop
 80107a4:	0801a968 	.word	0x0801a968
 80107a8:	0801acdc 	.word	0x0801acdc
 80107ac:	0801a9bc 	.word	0x0801a9bc

080107b0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80107b0:	b590      	push	{r4, r7, lr}
 80107b2:	b08b      	sub	sp, #44	; 0x2c
 80107b4:	af02      	add	r7, sp, #8
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	460b      	mov	r3, r1
 80107ba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80107bc:	2300      	movs	r3, #0
 80107be:	61fb      	str	r3, [r7, #28]
 80107c0:	2300      	movs	r3, #0
 80107c2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80107c4:	2300      	movs	r3, #0
 80107c6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d106      	bne.n	80107dc <tcp_split_unsent_seg+0x2c>
 80107ce:	4b95      	ldr	r3, [pc, #596]	; (8010a24 <tcp_split_unsent_seg+0x274>)
 80107d0:	f240 324b 	movw	r2, #843	; 0x34b
 80107d4:	4994      	ldr	r1, [pc, #592]	; (8010a28 <tcp_split_unsent_seg+0x278>)
 80107d6:	4895      	ldr	r0, [pc, #596]	; (8010a2c <tcp_split_unsent_seg+0x27c>)
 80107d8:	f006 feee 	bl	80175b8 <iprintf>

  useg = pcb->unsent;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107e0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d102      	bne.n	80107ee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80107e8:	f04f 33ff 	mov.w	r3, #4294967295
 80107ec:	e116      	b.n	8010a1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80107ee:	887b      	ldrh	r3, [r7, #2]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d109      	bne.n	8010808 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80107f4:	4b8b      	ldr	r3, [pc, #556]	; (8010a24 <tcp_split_unsent_seg+0x274>)
 80107f6:	f240 3253 	movw	r2, #851	; 0x353
 80107fa:	498d      	ldr	r1, [pc, #564]	; (8010a30 <tcp_split_unsent_seg+0x280>)
 80107fc:	488b      	ldr	r0, [pc, #556]	; (8010a2c <tcp_split_unsent_seg+0x27c>)
 80107fe:	f006 fedb 	bl	80175b8 <iprintf>
    return ERR_VAL;
 8010802:	f06f 0305 	mvn.w	r3, #5
 8010806:	e109      	b.n	8010a1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	891b      	ldrh	r3, [r3, #8]
 801080c:	887a      	ldrh	r2, [r7, #2]
 801080e:	429a      	cmp	r2, r3
 8010810:	d301      	bcc.n	8010816 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010812:	2300      	movs	r3, #0
 8010814:	e102      	b.n	8010a1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801081a:	887a      	ldrh	r2, [r7, #2]
 801081c:	429a      	cmp	r2, r3
 801081e:	d906      	bls.n	801082e <tcp_split_unsent_seg+0x7e>
 8010820:	4b80      	ldr	r3, [pc, #512]	; (8010a24 <tcp_split_unsent_seg+0x274>)
 8010822:	f240 325b 	movw	r2, #859	; 0x35b
 8010826:	4983      	ldr	r1, [pc, #524]	; (8010a34 <tcp_split_unsent_seg+0x284>)
 8010828:	4880      	ldr	r0, [pc, #512]	; (8010a2c <tcp_split_unsent_seg+0x27c>)
 801082a:	f006 fec5 	bl	80175b8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	891b      	ldrh	r3, [r3, #8]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d106      	bne.n	8010844 <tcp_split_unsent_seg+0x94>
 8010836:	4b7b      	ldr	r3, [pc, #492]	; (8010a24 <tcp_split_unsent_seg+0x274>)
 8010838:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801083c:	497e      	ldr	r1, [pc, #504]	; (8010a38 <tcp_split_unsent_seg+0x288>)
 801083e:	487b      	ldr	r0, [pc, #492]	; (8010a2c <tcp_split_unsent_seg+0x27c>)
 8010840:	f006 feba 	bl	80175b8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	7a9b      	ldrb	r3, [r3, #10]
 8010848:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801084a:	7bfb      	ldrb	r3, [r7, #15]
 801084c:	009b      	lsls	r3, r3, #2
 801084e:	b2db      	uxtb	r3, r3
 8010850:	f003 0304 	and.w	r3, r3, #4
 8010854:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	891a      	ldrh	r2, [r3, #8]
 801085a:	887b      	ldrh	r3, [r7, #2]
 801085c:	1ad3      	subs	r3, r2, r3
 801085e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010860:	7bbb      	ldrb	r3, [r7, #14]
 8010862:	b29a      	uxth	r2, r3
 8010864:	89bb      	ldrh	r3, [r7, #12]
 8010866:	4413      	add	r3, r2
 8010868:	b29b      	uxth	r3, r3
 801086a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801086e:	4619      	mov	r1, r3
 8010870:	2036      	movs	r0, #54	; 0x36
 8010872:	f7fa fb57 	bl	800af24 <pbuf_alloc>
 8010876:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	2b00      	cmp	r3, #0
 801087c:	f000 80b7 	beq.w	80109ee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	891a      	ldrh	r2, [r3, #8]
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	891b      	ldrh	r3, [r3, #8]
 801088a:	1ad3      	subs	r3, r2, r3
 801088c:	b29a      	uxth	r2, r3
 801088e:	887b      	ldrh	r3, [r7, #2]
 8010890:	4413      	add	r3, r2
 8010892:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	6858      	ldr	r0, [r3, #4]
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	685a      	ldr	r2, [r3, #4]
 801089c:	7bbb      	ldrb	r3, [r7, #14]
 801089e:	18d1      	adds	r1, r2, r3
 80108a0:	897b      	ldrh	r3, [r7, #10]
 80108a2:	89ba      	ldrh	r2, [r7, #12]
 80108a4:	f7fb f81c 	bl	800b8e0 <pbuf_copy_partial>
 80108a8:	4603      	mov	r3, r0
 80108aa:	461a      	mov	r2, r3
 80108ac:	89bb      	ldrh	r3, [r7, #12]
 80108ae:	4293      	cmp	r3, r2
 80108b0:	f040 809f 	bne.w	80109f2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	899b      	ldrh	r3, [r3, #12]
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	4618      	mov	r0, r3
 80108be:	f7f9 fb31 	bl	8009f24 <lwip_htons>
 80108c2:	4603      	mov	r3, r0
 80108c4:	b2db      	uxtb	r3, r3
 80108c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108ca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80108cc:	2300      	movs	r3, #0
 80108ce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80108d0:	7efb      	ldrb	r3, [r7, #27]
 80108d2:	f003 0308 	and.w	r3, r3, #8
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d007      	beq.n	80108ea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80108da:	7efb      	ldrb	r3, [r7, #27]
 80108dc:	f023 0308 	bic.w	r3, r3, #8
 80108e0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80108e2:	7ebb      	ldrb	r3, [r7, #26]
 80108e4:	f043 0308 	orr.w	r3, r3, #8
 80108e8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80108ea:	7efb      	ldrb	r3, [r7, #27]
 80108ec:	f003 0301 	and.w	r3, r3, #1
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d007      	beq.n	8010904 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80108f4:	7efb      	ldrb	r3, [r7, #27]
 80108f6:	f023 0301 	bic.w	r3, r3, #1
 80108fa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80108fc:	7ebb      	ldrb	r3, [r7, #26]
 80108fe:	f043 0301 	orr.w	r3, r3, #1
 8010902:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	68db      	ldr	r3, [r3, #12]
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	4618      	mov	r0, r3
 801090c:	f7f9 fb1f 	bl	8009f4e <lwip_htonl>
 8010910:	4602      	mov	r2, r0
 8010912:	887b      	ldrh	r3, [r7, #2]
 8010914:	18d1      	adds	r1, r2, r3
 8010916:	7eba      	ldrb	r2, [r7, #26]
 8010918:	7bfb      	ldrb	r3, [r7, #15]
 801091a:	9300      	str	r3, [sp, #0]
 801091c:	460b      	mov	r3, r1
 801091e:	6939      	ldr	r1, [r7, #16]
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7ff fa4f 	bl	800fdc4 <tcp_create_segment>
 8010926:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d063      	beq.n	80109f6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	4618      	mov	r0, r3
 8010934:	f7fa fe62 	bl	800b5fc <pbuf_clen>
 8010938:	4603      	mov	r3, r0
 801093a:	461a      	mov	r2, r3
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010942:	1a9b      	subs	r3, r3, r2
 8010944:	b29a      	uxth	r2, r3
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	6858      	ldr	r0, [r3, #4]
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	891a      	ldrh	r2, [r3, #8]
 8010956:	89bb      	ldrh	r3, [r7, #12]
 8010958:	1ad3      	subs	r3, r2, r3
 801095a:	b29b      	uxth	r3, r3
 801095c:	4619      	mov	r1, r3
 801095e:	f7fa fc3f 	bl	800b1e0 <pbuf_realloc>
  useg->len -= remainder;
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	891a      	ldrh	r2, [r3, #8]
 8010966:	89bb      	ldrh	r3, [r7, #12]
 8010968:	1ad3      	subs	r3, r2, r3
 801096a:	b29a      	uxth	r2, r3
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	899b      	ldrh	r3, [r3, #12]
 8010976:	b29c      	uxth	r4, r3
 8010978:	7efb      	ldrb	r3, [r7, #27]
 801097a:	b29b      	uxth	r3, r3
 801097c:	4618      	mov	r0, r3
 801097e:	f7f9 fad1 	bl	8009f24 <lwip_htons>
 8010982:	4603      	mov	r3, r0
 8010984:	461a      	mov	r2, r3
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	68db      	ldr	r3, [r3, #12]
 801098a:	4322      	orrs	r2, r4
 801098c:	b292      	uxth	r2, r2
 801098e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	4618      	mov	r0, r3
 8010996:	f7fa fe31 	bl	800b5fc <pbuf_clen>
 801099a:	4603      	mov	r3, r0
 801099c:	461a      	mov	r2, r3
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109a4:	4413      	add	r3, r2
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80109ae:	69fb      	ldr	r3, [r7, #28]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fa fe22 	bl	800b5fc <pbuf_clen>
 80109b8:	4603      	mov	r3, r0
 80109ba:	461a      	mov	r2, r3
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109c2:	4413      	add	r3, r2
 80109c4:	b29a      	uxth	r2, r3
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	681a      	ldr	r2, [r3, #0]
 80109d0:	69fb      	ldr	r3, [r7, #28]
 80109d2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	69fa      	ldr	r2, [r7, #28]
 80109d8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80109da:	69fb      	ldr	r3, [r7, #28]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d103      	bne.n	80109ea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2200      	movs	r2, #0
 80109e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80109ea:	2300      	movs	r3, #0
 80109ec:	e016      	b.n	8010a1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80109ee:	bf00      	nop
 80109f0:	e002      	b.n	80109f8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80109f2:	bf00      	nop
 80109f4:	e000      	b.n	80109f8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80109f6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80109f8:	69fb      	ldr	r3, [r7, #28]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d006      	beq.n	8010a0c <tcp_split_unsent_seg+0x25c>
 80109fe:	4b09      	ldr	r3, [pc, #36]	; (8010a24 <tcp_split_unsent_seg+0x274>)
 8010a00:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010a04:	490d      	ldr	r1, [pc, #52]	; (8010a3c <tcp_split_unsent_seg+0x28c>)
 8010a06:	4809      	ldr	r0, [pc, #36]	; (8010a2c <tcp_split_unsent_seg+0x27c>)
 8010a08:	f006 fdd6 	bl	80175b8 <iprintf>
  if (p != NULL) {
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d002      	beq.n	8010a18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010a12:	6938      	ldr	r0, [r7, #16]
 8010a14:	f7fa fd6a 	bl	800b4ec <pbuf_free>
  }

  return ERR_MEM;
 8010a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3724      	adds	r7, #36	; 0x24
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd90      	pop	{r4, r7, pc}
 8010a24:	0801a968 	.word	0x0801a968
 8010a28:	0801acfc 	.word	0x0801acfc
 8010a2c:	0801a9bc 	.word	0x0801a9bc
 8010a30:	0801ad20 	.word	0x0801ad20
 8010a34:	0801ad44 	.word	0x0801ad44
 8010a38:	0801ad54 	.word	0x0801ad54
 8010a3c:	0801ad64 	.word	0x0801ad64

08010a40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010a40:	b590      	push	{r4, r7, lr}
 8010a42:	b085      	sub	sp, #20
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d106      	bne.n	8010a5c <tcp_send_fin+0x1c>
 8010a4e:	4b21      	ldr	r3, [pc, #132]	; (8010ad4 <tcp_send_fin+0x94>)
 8010a50:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010a54:	4920      	ldr	r1, [pc, #128]	; (8010ad8 <tcp_send_fin+0x98>)
 8010a56:	4821      	ldr	r0, [pc, #132]	; (8010adc <tcp_send_fin+0x9c>)
 8010a58:	f006 fdae 	bl	80175b8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d02e      	beq.n	8010ac2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a68:	60fb      	str	r3, [r7, #12]
 8010a6a:	e002      	b.n	8010a72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d1f8      	bne.n	8010a6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	68db      	ldr	r3, [r3, #12]
 8010a7e:	899b      	ldrh	r3, [r3, #12]
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7f9 fa4e 	bl	8009f24 <lwip_htons>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	b2db      	uxtb	r3, r3
 8010a8c:	f003 0307 	and.w	r3, r3, #7
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d116      	bne.n	8010ac2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	899b      	ldrh	r3, [r3, #12]
 8010a9a:	b29c      	uxth	r4, r3
 8010a9c:	2001      	movs	r0, #1
 8010a9e:	f7f9 fa41 	bl	8009f24 <lwip_htons>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	68db      	ldr	r3, [r3, #12]
 8010aaa:	4322      	orrs	r2, r4
 8010aac:	b292      	uxth	r2, r2
 8010aae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	8b5b      	ldrh	r3, [r3, #26]
 8010ab4:	f043 0320 	orr.w	r3, r3, #32
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	e004      	b.n	8010acc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010ac2:	2101      	movs	r1, #1
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f000 f80b 	bl	8010ae0 <tcp_enqueue_flags>
 8010aca:	4603      	mov	r3, r0
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3714      	adds	r7, #20
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd90      	pop	{r4, r7, pc}
 8010ad4:	0801a968 	.word	0x0801a968
 8010ad8:	0801ad70 	.word	0x0801ad70
 8010adc:	0801a9bc 	.word	0x0801a9bc

08010ae0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b08a      	sub	sp, #40	; 0x28
 8010ae4:	af02      	add	r7, sp, #8
 8010ae6:	6078      	str	r0, [r7, #4]
 8010ae8:	460b      	mov	r3, r1
 8010aea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010aec:	2300      	movs	r3, #0
 8010aee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010af0:	2300      	movs	r3, #0
 8010af2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010af4:	78fb      	ldrb	r3, [r7, #3]
 8010af6:	f003 0303 	and.w	r3, r3, #3
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d106      	bne.n	8010b0c <tcp_enqueue_flags+0x2c>
 8010afe:	4b67      	ldr	r3, [pc, #412]	; (8010c9c <tcp_enqueue_flags+0x1bc>)
 8010b00:	f240 4211 	movw	r2, #1041	; 0x411
 8010b04:	4966      	ldr	r1, [pc, #408]	; (8010ca0 <tcp_enqueue_flags+0x1c0>)
 8010b06:	4867      	ldr	r0, [pc, #412]	; (8010ca4 <tcp_enqueue_flags+0x1c4>)
 8010b08:	f006 fd56 	bl	80175b8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d106      	bne.n	8010b20 <tcp_enqueue_flags+0x40>
 8010b12:	4b62      	ldr	r3, [pc, #392]	; (8010c9c <tcp_enqueue_flags+0x1bc>)
 8010b14:	f240 4213 	movw	r2, #1043	; 0x413
 8010b18:	4963      	ldr	r1, [pc, #396]	; (8010ca8 <tcp_enqueue_flags+0x1c8>)
 8010b1a:	4862      	ldr	r0, [pc, #392]	; (8010ca4 <tcp_enqueue_flags+0x1c4>)
 8010b1c:	f006 fd4c 	bl	80175b8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010b20:	78fb      	ldrb	r3, [r7, #3]
 8010b22:	f003 0302 	and.w	r3, r3, #2
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d001      	beq.n	8010b2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010b2e:	7ffb      	ldrb	r3, [r7, #31]
 8010b30:	009b      	lsls	r3, r3, #2
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	f003 0304 	and.w	r3, r3, #4
 8010b38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010b3a:	7dfb      	ldrb	r3, [r7, #23]
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b42:	4619      	mov	r1, r3
 8010b44:	2036      	movs	r0, #54	; 0x36
 8010b46:	f7fa f9ed 	bl	800af24 <pbuf_alloc>
 8010b4a:	6138      	str	r0, [r7, #16]
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d109      	bne.n	8010b66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	8b5b      	ldrh	r3, [r3, #26]
 8010b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b5a:	b29a      	uxth	r2, r3
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010b60:	f04f 33ff 	mov.w	r3, #4294967295
 8010b64:	e095      	b.n	8010c92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	895a      	ldrh	r2, [r3, #10]
 8010b6a:	7dfb      	ldrb	r3, [r7, #23]
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d206      	bcs.n	8010b80 <tcp_enqueue_flags+0xa0>
 8010b72:	4b4a      	ldr	r3, [pc, #296]	; (8010c9c <tcp_enqueue_flags+0x1bc>)
 8010b74:	f240 4239 	movw	r2, #1081	; 0x439
 8010b78:	494c      	ldr	r1, [pc, #304]	; (8010cac <tcp_enqueue_flags+0x1cc>)
 8010b7a:	484a      	ldr	r0, [pc, #296]	; (8010ca4 <tcp_enqueue_flags+0x1c4>)
 8010b7c:	f006 fd1c 	bl	80175b8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010b84:	78fa      	ldrb	r2, [r7, #3]
 8010b86:	7ffb      	ldrb	r3, [r7, #31]
 8010b88:	9300      	str	r3, [sp, #0]
 8010b8a:	460b      	mov	r3, r1
 8010b8c:	6939      	ldr	r1, [r7, #16]
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f7ff f918 	bl	800fdc4 <tcp_create_segment>
 8010b94:	60f8      	str	r0, [r7, #12]
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d109      	bne.n	8010bb0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	8b5b      	ldrh	r3, [r3, #26]
 8010ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ba4:	b29a      	uxth	r2, r3
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010baa:	f04f 33ff 	mov.w	r3, #4294967295
 8010bae:	e070      	b.n	8010c92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	f003 0303 	and.w	r3, r3, #3
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d006      	beq.n	8010bca <tcp_enqueue_flags+0xea>
 8010bbc:	4b37      	ldr	r3, [pc, #220]	; (8010c9c <tcp_enqueue_flags+0x1bc>)
 8010bbe:	f240 4242 	movw	r2, #1090	; 0x442
 8010bc2:	493b      	ldr	r1, [pc, #236]	; (8010cb0 <tcp_enqueue_flags+0x1d0>)
 8010bc4:	4837      	ldr	r0, [pc, #220]	; (8010ca4 <tcp_enqueue_flags+0x1c4>)
 8010bc6:	f006 fcf7 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	891b      	ldrh	r3, [r3, #8]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d006      	beq.n	8010be0 <tcp_enqueue_flags+0x100>
 8010bd2:	4b32      	ldr	r3, [pc, #200]	; (8010c9c <tcp_enqueue_flags+0x1bc>)
 8010bd4:	f240 4243 	movw	r2, #1091	; 0x443
 8010bd8:	4936      	ldr	r1, [pc, #216]	; (8010cb4 <tcp_enqueue_flags+0x1d4>)
 8010bda:	4832      	ldr	r0, [pc, #200]	; (8010ca4 <tcp_enqueue_flags+0x1c4>)
 8010bdc:	f006 fcec 	bl	80175b8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d103      	bne.n	8010bf0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	68fa      	ldr	r2, [r7, #12]
 8010bec:	66da      	str	r2, [r3, #108]	; 0x6c
 8010bee:	e00d      	b.n	8010c0c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bf4:	61bb      	str	r3, [r7, #24]
 8010bf6:	e002      	b.n	8010bfe <tcp_enqueue_flags+0x11e>
 8010bf8:	69bb      	ldr	r3, [r7, #24]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	61bb      	str	r3, [r7, #24]
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d1f8      	bne.n	8010bf8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010c06:	69bb      	ldr	r3, [r7, #24]
 8010c08:	68fa      	ldr	r2, [r7, #12]
 8010c0a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010c14:	78fb      	ldrb	r3, [r7, #3]
 8010c16:	f003 0302 	and.w	r3, r3, #2
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d104      	bne.n	8010c28 <tcp_enqueue_flags+0x148>
 8010c1e:	78fb      	ldrb	r3, [r7, #3]
 8010c20:	f003 0301 	and.w	r3, r3, #1
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d004      	beq.n	8010c32 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c2c:	1c5a      	adds	r2, r3, #1
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010c32:	78fb      	ldrb	r3, [r7, #3]
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d006      	beq.n	8010c4a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	8b5b      	ldrh	r3, [r3, #26]
 8010c40:	f043 0320 	orr.w	r3, r3, #32
 8010c44:	b29a      	uxth	r2, r3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7fa fcd4 	bl	800b5fc <pbuf_clen>
 8010c54:	4603      	mov	r3, r0
 8010c56:	461a      	mov	r2, r3
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c5e:	4413      	add	r3, r2
 8010c60:	b29a      	uxth	r2, r3
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d00e      	beq.n	8010c90 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d10a      	bne.n	8010c90 <tcp_enqueue_flags+0x1b0>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d106      	bne.n	8010c90 <tcp_enqueue_flags+0x1b0>
 8010c82:	4b06      	ldr	r3, [pc, #24]	; (8010c9c <tcp_enqueue_flags+0x1bc>)
 8010c84:	f240 4265 	movw	r2, #1125	; 0x465
 8010c88:	490b      	ldr	r1, [pc, #44]	; (8010cb8 <tcp_enqueue_flags+0x1d8>)
 8010c8a:	4806      	ldr	r0, [pc, #24]	; (8010ca4 <tcp_enqueue_flags+0x1c4>)
 8010c8c:	f006 fc94 	bl	80175b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010c90:	2300      	movs	r3, #0
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3720      	adds	r7, #32
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	0801a968 	.word	0x0801a968
 8010ca0:	0801ad8c 	.word	0x0801ad8c
 8010ca4:	0801a9bc 	.word	0x0801a9bc
 8010ca8:	0801ade4 	.word	0x0801ade4
 8010cac:	0801ae04 	.word	0x0801ae04
 8010cb0:	0801ae40 	.word	0x0801ae40
 8010cb4:	0801ae58 	.word	0x0801ae58
 8010cb8:	0801ae84 	.word	0x0801ae84

08010cbc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010cbc:	b5b0      	push	{r4, r5, r7, lr}
 8010cbe:	b08a      	sub	sp, #40	; 0x28
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d106      	bne.n	8010cd8 <tcp_output+0x1c>
 8010cca:	4b9e      	ldr	r3, [pc, #632]	; (8010f44 <tcp_output+0x288>)
 8010ccc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010cd0:	499d      	ldr	r1, [pc, #628]	; (8010f48 <tcp_output+0x28c>)
 8010cd2:	489e      	ldr	r0, [pc, #632]	; (8010f4c <tcp_output+0x290>)
 8010cd4:	f006 fc70 	bl	80175b8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	7d1b      	ldrb	r3, [r3, #20]
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d106      	bne.n	8010cee <tcp_output+0x32>
 8010ce0:	4b98      	ldr	r3, [pc, #608]	; (8010f44 <tcp_output+0x288>)
 8010ce2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010ce6:	499a      	ldr	r1, [pc, #616]	; (8010f50 <tcp_output+0x294>)
 8010ce8:	4898      	ldr	r0, [pc, #608]	; (8010f4c <tcp_output+0x290>)
 8010cea:	f006 fc65 	bl	80175b8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010cee:	4b99      	ldr	r3, [pc, #612]	; (8010f54 <tcp_output+0x298>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d101      	bne.n	8010cfc <tcp_output+0x40>
    return ERR_OK;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	e1ce      	b.n	801109a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	bf28      	it	cs
 8010d0c:	4613      	movcs	r3, r2
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d16:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d10b      	bne.n	8010d36 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	8b5b      	ldrh	r3, [r3, #26]
 8010d22:	f003 0302 	and.w	r3, r3, #2
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	f000 81aa 	beq.w	8011080 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 fdcb 	bl	80118c8 <tcp_send_empty_ack>
 8010d32:	4603      	mov	r3, r0
 8010d34:	e1b1      	b.n	801109a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010d36:	6879      	ldr	r1, [r7, #4]
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	3304      	adds	r3, #4
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f7ff f824 	bl	800fd8c <tcp_route>
 8010d44:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d102      	bne.n	8010d52 <tcp_output+0x96>
    return ERR_RTE;
 8010d4c:	f06f 0303 	mvn.w	r3, #3
 8010d50:	e1a3      	b.n	801109a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d003      	beq.n	8010d60 <tcp_output+0xa4>
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d111      	bne.n	8010d84 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d002      	beq.n	8010d6c <tcp_output+0xb0>
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	3304      	adds	r3, #4
 8010d6a:	e000      	b.n	8010d6e <tcp_output+0xb2>
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010d70:	693b      	ldr	r3, [r7, #16]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d102      	bne.n	8010d7c <tcp_output+0xc0>
      return ERR_RTE;
 8010d76:	f06f 0303 	mvn.w	r3, #3
 8010d7a:	e18e      	b.n	801109a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	681a      	ldr	r2, [r3, #0]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d86:	68db      	ldr	r3, [r3, #12]
 8010d88:	685b      	ldr	r3, [r3, #4]
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7f9 f8df 	bl	8009f4e <lwip_htonl>
 8010d90:	4602      	mov	r2, r0
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d96:	1ad3      	subs	r3, r2, r3
 8010d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d9a:	8912      	ldrh	r2, [r2, #8]
 8010d9c:	4413      	add	r3, r2
 8010d9e:	69ba      	ldr	r2, [r7, #24]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d227      	bcs.n	8010df4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010daa:	461a      	mov	r2, r3
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d114      	bne.n	8010ddc <tcp_output+0x120>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d110      	bne.n	8010ddc <tcp_output+0x120>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d10b      	bne.n	8010ddc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2201      	movs	r2, #1
 8010dd0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	8b5b      	ldrh	r3, [r3, #26]
 8010de0:	f003 0302 	and.w	r3, r3, #2
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	f000 814d 	beq.w	8011084 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f000 fd6c 	bl	80118c8 <tcp_send_empty_ack>
 8010df0:	4603      	mov	r3, r0
 8010df2:	e152      	b.n	801109a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2200      	movs	r2, #0
 8010df8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e00:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010e02:	6a3b      	ldr	r3, [r7, #32]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f000 811c 	beq.w	8011042 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010e0a:	e002      	b.n	8010e12 <tcp_output+0x156>
 8010e0c:	6a3b      	ldr	r3, [r7, #32]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	623b      	str	r3, [r7, #32]
 8010e12:	6a3b      	ldr	r3, [r7, #32]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d1f8      	bne.n	8010e0c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010e1a:	e112      	b.n	8011042 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	899b      	ldrh	r3, [r3, #12]
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7f9 f87d 	bl	8009f24 <lwip_htons>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	b2db      	uxtb	r3, r3
 8010e2e:	f003 0304 	and.w	r3, r3, #4
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d006      	beq.n	8010e44 <tcp_output+0x188>
 8010e36:	4b43      	ldr	r3, [pc, #268]	; (8010f44 <tcp_output+0x288>)
 8010e38:	f240 5236 	movw	r2, #1334	; 0x536
 8010e3c:	4946      	ldr	r1, [pc, #280]	; (8010f58 <tcp_output+0x29c>)
 8010e3e:	4843      	ldr	r0, [pc, #268]	; (8010f4c <tcp_output+0x290>)
 8010e40:	f006 fbba 	bl	80175b8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d01f      	beq.n	8010e8c <tcp_output+0x1d0>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	8b5b      	ldrh	r3, [r3, #26]
 8010e50:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d119      	bne.n	8010e8c <tcp_output+0x1d0>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d00b      	beq.n	8010e78 <tcp_output+0x1bc>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d110      	bne.n	8010e8c <tcp_output+0x1d0>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e6e:	891a      	ldrh	r2, [r3, #8]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d209      	bcs.n	8010e8c <tcp_output+0x1d0>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d004      	beq.n	8010e8c <tcp_output+0x1d0>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e88:	2b08      	cmp	r3, #8
 8010e8a:	d901      	bls.n	8010e90 <tcp_output+0x1d4>
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	e000      	b.n	8010e92 <tcp_output+0x1d6>
 8010e90:	2300      	movs	r3, #0
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d106      	bne.n	8010ea4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	8b5b      	ldrh	r3, [r3, #26]
 8010e9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	f000 80e4 	beq.w	801106c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	7d1b      	ldrb	r3, [r3, #20]
 8010ea8:	2b02      	cmp	r3, #2
 8010eaa:	d00d      	beq.n	8010ec8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	899b      	ldrh	r3, [r3, #12]
 8010eb2:	b29c      	uxth	r4, r3
 8010eb4:	2010      	movs	r0, #16
 8010eb6:	f7f9 f835 	bl	8009f24 <lwip_htons>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec0:	68db      	ldr	r3, [r3, #12]
 8010ec2:	4322      	orrs	r2, r4
 8010ec4:	b292      	uxth	r2, r2
 8010ec6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010ec8:	697a      	ldr	r2, [r7, #20]
 8010eca:	6879      	ldr	r1, [r7, #4]
 8010ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ece:	f000 f909 	bl	80110e4 <tcp_output_segment>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d009      	beq.n	8010ef2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	8b5b      	ldrh	r3, [r3, #26]
 8010ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ee6:	b29a      	uxth	r2, r3
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	835a      	strh	r2, [r3, #26]
      return err;
 8010eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ef0:	e0d3      	b.n	801109a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	7d1b      	ldrb	r3, [r3, #20]
 8010efe:	2b02      	cmp	r3, #2
 8010f00:	d006      	beq.n	8010f10 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	8b5b      	ldrh	r3, [r3, #26]
 8010f06:	f023 0303 	bic.w	r3, r3, #3
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f12:	68db      	ldr	r3, [r3, #12]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7f9 f819 	bl	8009f4e <lwip_htonl>
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f20:	891b      	ldrh	r3, [r3, #8]
 8010f22:	461d      	mov	r5, r3
 8010f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f26:	68db      	ldr	r3, [r3, #12]
 8010f28:	899b      	ldrh	r3, [r3, #12]
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7f8 fff9 	bl	8009f24 <lwip_htons>
 8010f32:	4603      	mov	r3, r0
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	f003 0303 	and.w	r3, r3, #3
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d00e      	beq.n	8010f5c <tcp_output+0x2a0>
 8010f3e:	2301      	movs	r3, #1
 8010f40:	e00d      	b.n	8010f5e <tcp_output+0x2a2>
 8010f42:	bf00      	nop
 8010f44:	0801a968 	.word	0x0801a968
 8010f48:	0801aeac 	.word	0x0801aeac
 8010f4c:	0801a9bc 	.word	0x0801a9bc
 8010f50:	0801aec4 	.word	0x0801aec4
 8010f54:	20006d20 	.word	0x20006d20
 8010f58:	0801aeec 	.word	0x0801aeec
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	442b      	add	r3, r5
 8010f60:	4423      	add	r3, r4
 8010f62:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	1ad3      	subs	r3, r2, r3
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	da02      	bge.n	8010f76 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	68ba      	ldr	r2, [r7, #8]
 8010f74:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f78:	891b      	ldrh	r3, [r3, #8]
 8010f7a:	461c      	mov	r4, r3
 8010f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7e:	68db      	ldr	r3, [r3, #12]
 8010f80:	899b      	ldrh	r3, [r3, #12]
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7f8 ffcd 	bl	8009f24 <lwip_htons>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	b2db      	uxtb	r3, r3
 8010f8e:	f003 0303 	and.w	r3, r3, #3
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d001      	beq.n	8010f9a <tcp_output+0x2de>
 8010f96:	2301      	movs	r3, #1
 8010f98:	e000      	b.n	8010f9c <tcp_output+0x2e0>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	4423      	add	r3, r4
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d049      	beq.n	8011036 <tcp_output+0x37a>
      seg->next = NULL;
 8010fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d105      	bne.n	8010fbc <tcp_output+0x300>
        pcb->unacked = seg;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fb4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb8:	623b      	str	r3, [r7, #32]
 8010fba:	e03f      	b.n	801103c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fbe:	68db      	ldr	r3, [r3, #12]
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7f8 ffc3 	bl	8009f4e <lwip_htonl>
 8010fc8:	4604      	mov	r4, r0
 8010fca:	6a3b      	ldr	r3, [r7, #32]
 8010fcc:	68db      	ldr	r3, [r3, #12]
 8010fce:	685b      	ldr	r3, [r3, #4]
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7f8 ffbc 	bl	8009f4e <lwip_htonl>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	1ae3      	subs	r3, r4, r3
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	da24      	bge.n	8011028 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	3370      	adds	r3, #112	; 0x70
 8010fe2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010fe4:	e002      	b.n	8010fec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010fec:	69fb      	ldr	r3, [r7, #28]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d011      	beq.n	8011018 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	68db      	ldr	r3, [r3, #12]
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7f8 ffa6 	bl	8009f4e <lwip_htonl>
 8011002:	4604      	mov	r4, r0
 8011004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	685b      	ldr	r3, [r3, #4]
 801100a:	4618      	mov	r0, r3
 801100c:	f7f8 ff9f 	bl	8009f4e <lwip_htonl>
 8011010:	4603      	mov	r3, r0
 8011012:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011014:	2b00      	cmp	r3, #0
 8011016:	dbe6      	blt.n	8010fe6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	681a      	ldr	r2, [r3, #0]
 801101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011024:	601a      	str	r2, [r3, #0]
 8011026:	e009      	b.n	801103c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011028:	6a3b      	ldr	r3, [r7, #32]
 801102a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801102c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801102e:	6a3b      	ldr	r3, [r7, #32]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	623b      	str	r3, [r7, #32]
 8011034:	e002      	b.n	801103c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011038:	f7fb ff35 	bl	800cea6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011040:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011044:	2b00      	cmp	r3, #0
 8011046:	d012      	beq.n	801106e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	4618      	mov	r0, r3
 8011050:	f7f8 ff7d 	bl	8009f4e <lwip_htonl>
 8011054:	4602      	mov	r2, r0
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801105a:	1ad3      	subs	r3, r2, r3
 801105c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801105e:	8912      	ldrh	r2, [r2, #8]
 8011060:	4413      	add	r3, r2
  while (seg != NULL &&
 8011062:	69ba      	ldr	r2, [r7, #24]
 8011064:	429a      	cmp	r2, r3
 8011066:	f4bf aed9 	bcs.w	8010e1c <tcp_output+0x160>
 801106a:	e000      	b.n	801106e <tcp_output+0x3b2>
      break;
 801106c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011072:	2b00      	cmp	r3, #0
 8011074:	d108      	bne.n	8011088 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2200      	movs	r2, #0
 801107a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801107e:	e004      	b.n	801108a <tcp_output+0x3ce>
    goto output_done;
 8011080:	bf00      	nop
 8011082:	e002      	b.n	801108a <tcp_output+0x3ce>
    goto output_done;
 8011084:	bf00      	nop
 8011086:	e000      	b.n	801108a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011088:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	8b5b      	ldrh	r3, [r3, #26]
 801108e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011092:	b29a      	uxth	r2, r3
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011098:	2300      	movs	r3, #0
}
 801109a:	4618      	mov	r0, r3
 801109c:	3728      	adds	r7, #40	; 0x28
 801109e:	46bd      	mov	sp, r7
 80110a0:	bdb0      	pop	{r4, r5, r7, pc}
 80110a2:	bf00      	nop

080110a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d106      	bne.n	80110c0 <tcp_output_segment_busy+0x1c>
 80110b2:	4b09      	ldr	r3, [pc, #36]	; (80110d8 <tcp_output_segment_busy+0x34>)
 80110b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80110b8:	4908      	ldr	r1, [pc, #32]	; (80110dc <tcp_output_segment_busy+0x38>)
 80110ba:	4809      	ldr	r0, [pc, #36]	; (80110e0 <tcp_output_segment_busy+0x3c>)
 80110bc:	f006 fa7c 	bl	80175b8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	7b9b      	ldrb	r3, [r3, #14]
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d001      	beq.n	80110ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80110ca:	2301      	movs	r3, #1
 80110cc:	e000      	b.n	80110d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80110ce:	2300      	movs	r3, #0
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3708      	adds	r7, #8
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	0801a968 	.word	0x0801a968
 80110dc:	0801af04 	.word	0x0801af04
 80110e0:	0801a9bc 	.word	0x0801a9bc

080110e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80110e4:	b5b0      	push	{r4, r5, r7, lr}
 80110e6:	b08c      	sub	sp, #48	; 0x30
 80110e8:	af04      	add	r7, sp, #16
 80110ea:	60f8      	str	r0, [r7, #12]
 80110ec:	60b9      	str	r1, [r7, #8]
 80110ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d106      	bne.n	8011104 <tcp_output_segment+0x20>
 80110f6:	4b63      	ldr	r3, [pc, #396]	; (8011284 <tcp_output_segment+0x1a0>)
 80110f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80110fc:	4962      	ldr	r1, [pc, #392]	; (8011288 <tcp_output_segment+0x1a4>)
 80110fe:	4863      	ldr	r0, [pc, #396]	; (801128c <tcp_output_segment+0x1a8>)
 8011100:	f006 fa5a 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d106      	bne.n	8011118 <tcp_output_segment+0x34>
 801110a:	4b5e      	ldr	r3, [pc, #376]	; (8011284 <tcp_output_segment+0x1a0>)
 801110c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011110:	495f      	ldr	r1, [pc, #380]	; (8011290 <tcp_output_segment+0x1ac>)
 8011112:	485e      	ldr	r0, [pc, #376]	; (801128c <tcp_output_segment+0x1a8>)
 8011114:	f006 fa50 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d106      	bne.n	801112c <tcp_output_segment+0x48>
 801111e:	4b59      	ldr	r3, [pc, #356]	; (8011284 <tcp_output_segment+0x1a0>)
 8011120:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011124:	495b      	ldr	r1, [pc, #364]	; (8011294 <tcp_output_segment+0x1b0>)
 8011126:	4859      	ldr	r0, [pc, #356]	; (801128c <tcp_output_segment+0x1a8>)
 8011128:	f006 fa46 	bl	80175b8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801112c:	68f8      	ldr	r0, [r7, #12]
 801112e:	f7ff ffb9 	bl	80110a4 <tcp_output_segment_busy>
 8011132:	4603      	mov	r3, r0
 8011134:	2b00      	cmp	r3, #0
 8011136:	d001      	beq.n	801113c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011138:	2300      	movs	r3, #0
 801113a:	e09f      	b.n	801127c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	68dc      	ldr	r4, [r3, #12]
 8011144:	4610      	mov	r0, r2
 8011146:	f7f8 ff02 	bl	8009f4e <lwip_htonl>
 801114a:	4603      	mov	r3, r0
 801114c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	68dc      	ldr	r4, [r3, #12]
 8011156:	4610      	mov	r0, r2
 8011158:	f7f8 fee4 	bl	8009f24 <lwip_htons>
 801115c:	4603      	mov	r3, r0
 801115e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011164:	68ba      	ldr	r2, [r7, #8]
 8011166:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011168:	441a      	add	r2, r3
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	68db      	ldr	r3, [r3, #12]
 8011172:	3314      	adds	r3, #20
 8011174:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	7a9b      	ldrb	r3, [r3, #10]
 801117a:	f003 0301 	and.w	r3, r3, #1
 801117e:	2b00      	cmp	r3, #0
 8011180:	d015      	beq.n	80111ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	3304      	adds	r3, #4
 8011186:	461a      	mov	r2, r3
 8011188:	6879      	ldr	r1, [r7, #4]
 801118a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801118e:	f7fc fa37 	bl	800d600 <tcp_eff_send_mss_netif>
 8011192:	4603      	mov	r3, r0
 8011194:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011196:	8b7b      	ldrh	r3, [r7, #26]
 8011198:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801119c:	4618      	mov	r0, r3
 801119e:	f7f8 fed6 	bl	8009f4e <lwip_htonl>
 80111a2:	4602      	mov	r2, r0
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	3304      	adds	r3, #4
 80111ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	da02      	bge.n	80111be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	2200      	movs	r2, #0
 80111bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d10c      	bne.n	80111e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80111c6:	4b34      	ldr	r3, [pc, #208]	; (8011298 <tcp_output_segment+0x1b4>)
 80111c8:	681a      	ldr	r2, [r3, #0]
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	68db      	ldr	r3, [r3, #12]
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7f8 feba 	bl	8009f4e <lwip_htonl>
 80111da:	4602      	mov	r2, r0
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	68da      	ldr	r2, [r3, #12]
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	1ad3      	subs	r3, r2, r3
 80111ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	8959      	ldrh	r1, [r3, #10]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	8b3a      	ldrh	r2, [r7, #24]
 80111fa:	1a8a      	subs	r2, r1, r2
 80111fc:	b292      	uxth	r2, r2
 80111fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	8919      	ldrh	r1, [r3, #8]
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	8b3a      	ldrh	r2, [r7, #24]
 801120c:	1a8a      	subs	r2, r1, r2
 801120e:	b292      	uxth	r2, r2
 8011210:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	68fa      	ldr	r2, [r7, #12]
 8011218:	68d2      	ldr	r2, [r2, #12]
 801121a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	68db      	ldr	r3, [r3, #12]
 8011220:	2200      	movs	r2, #0
 8011222:	741a      	strb	r2, [r3, #16]
 8011224:	2200      	movs	r2, #0
 8011226:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	f103 0214 	add.w	r2, r3, #20
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	7a9b      	ldrb	r3, [r3, #10]
 8011234:	009b      	lsls	r3, r3, #2
 8011236:	f003 0304 	and.w	r3, r3, #4
 801123a:	4413      	add	r3, r2
 801123c:	69fa      	ldr	r2, [r7, #28]
 801123e:	429a      	cmp	r2, r3
 8011240:	d006      	beq.n	8011250 <tcp_output_segment+0x16c>
 8011242:	4b10      	ldr	r3, [pc, #64]	; (8011284 <tcp_output_segment+0x1a0>)
 8011244:	f240 621c 	movw	r2, #1564	; 0x61c
 8011248:	4914      	ldr	r1, [pc, #80]	; (801129c <tcp_output_segment+0x1b8>)
 801124a:	4810      	ldr	r0, [pc, #64]	; (801128c <tcp_output_segment+0x1a8>)
 801124c:	f006 f9b4 	bl	80175b8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	6858      	ldr	r0, [r3, #4]
 8011254:	68b9      	ldr	r1, [r7, #8]
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	1d1c      	adds	r4, r3, #4
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	7add      	ldrb	r5, [r3, #11]
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	7a9b      	ldrb	r3, [r3, #10]
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	9202      	str	r2, [sp, #8]
 8011266:	2206      	movs	r2, #6
 8011268:	9201      	str	r2, [sp, #4]
 801126a:	9300      	str	r3, [sp, #0]
 801126c:	462b      	mov	r3, r5
 801126e:	4622      	mov	r2, r4
 8011270:	f004 fbea 	bl	8015a48 <ip4_output_if>
 8011274:	4603      	mov	r3, r0
 8011276:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011278:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801127c:	4618      	mov	r0, r3
 801127e:	3720      	adds	r7, #32
 8011280:	46bd      	mov	sp, r7
 8011282:	bdb0      	pop	{r4, r5, r7, pc}
 8011284:	0801a968 	.word	0x0801a968
 8011288:	0801af2c 	.word	0x0801af2c
 801128c:	0801a9bc 	.word	0x0801a9bc
 8011290:	0801af4c 	.word	0x0801af4c
 8011294:	0801af6c 	.word	0x0801af6c
 8011298:	20006d10 	.word	0x20006d10
 801129c:	0801af90 	.word	0x0801af90

080112a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80112a0:	b5b0      	push	{r4, r5, r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d106      	bne.n	80112bc <tcp_rexmit_rto_prepare+0x1c>
 80112ae:	4b31      	ldr	r3, [pc, #196]	; (8011374 <tcp_rexmit_rto_prepare+0xd4>)
 80112b0:	f240 6263 	movw	r2, #1635	; 0x663
 80112b4:	4930      	ldr	r1, [pc, #192]	; (8011378 <tcp_rexmit_rto_prepare+0xd8>)
 80112b6:	4831      	ldr	r0, [pc, #196]	; (801137c <tcp_rexmit_rto_prepare+0xdc>)
 80112b8:	f006 f97e 	bl	80175b8 <iprintf>

  if (pcb->unacked == NULL) {
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d102      	bne.n	80112ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80112c4:	f06f 0305 	mvn.w	r3, #5
 80112c8:	e050      	b.n	801136c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112ce:	60fb      	str	r3, [r7, #12]
 80112d0:	e00b      	b.n	80112ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80112d2:	68f8      	ldr	r0, [r7, #12]
 80112d4:	f7ff fee6 	bl	80110a4 <tcp_output_segment_busy>
 80112d8:	4603      	mov	r3, r0
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d002      	beq.n	80112e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80112de:	f06f 0305 	mvn.w	r3, #5
 80112e2:	e043      	b.n	801136c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	60fb      	str	r3, [r7, #12]
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d1ef      	bne.n	80112d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80112f2:	68f8      	ldr	r0, [r7, #12]
 80112f4:	f7ff fed6 	bl	80110a4 <tcp_output_segment_busy>
 80112f8:	4603      	mov	r3, r0
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d002      	beq.n	8011304 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80112fe:	f06f 0305 	mvn.w	r3, #5
 8011302:	e033      	b.n	801136c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2200      	movs	r2, #0
 8011318:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	8b5b      	ldrh	r3, [r3, #26]
 801131e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011322:	b29a      	uxth	r2, r3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	4618      	mov	r0, r3
 8011330:	f7f8 fe0d 	bl	8009f4e <lwip_htonl>
 8011334:	4604      	mov	r4, r0
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	891b      	ldrh	r3, [r3, #8]
 801133a:	461d      	mov	r5, r3
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	899b      	ldrh	r3, [r3, #12]
 8011342:	b29b      	uxth	r3, r3
 8011344:	4618      	mov	r0, r3
 8011346:	f7f8 fded 	bl	8009f24 <lwip_htons>
 801134a:	4603      	mov	r3, r0
 801134c:	b2db      	uxtb	r3, r3
 801134e:	f003 0303 	and.w	r3, r3, #3
 8011352:	2b00      	cmp	r3, #0
 8011354:	d001      	beq.n	801135a <tcp_rexmit_rto_prepare+0xba>
 8011356:	2301      	movs	r3, #1
 8011358:	e000      	b.n	801135c <tcp_rexmit_rto_prepare+0xbc>
 801135a:	2300      	movs	r3, #0
 801135c:	442b      	add	r3, r5
 801135e:	18e2      	adds	r2, r4, r3
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2200      	movs	r2, #0
 8011368:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801136a:	2300      	movs	r3, #0
}
 801136c:	4618      	mov	r0, r3
 801136e:	3710      	adds	r7, #16
 8011370:	46bd      	mov	sp, r7
 8011372:	bdb0      	pop	{r4, r5, r7, pc}
 8011374:	0801a968 	.word	0x0801a968
 8011378:	0801afa4 	.word	0x0801afa4
 801137c:	0801a9bc 	.word	0x0801a9bc

08011380 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d106      	bne.n	801139c <tcp_rexmit_rto_commit+0x1c>
 801138e:	4b0d      	ldr	r3, [pc, #52]	; (80113c4 <tcp_rexmit_rto_commit+0x44>)
 8011390:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011394:	490c      	ldr	r1, [pc, #48]	; (80113c8 <tcp_rexmit_rto_commit+0x48>)
 8011396:	480d      	ldr	r0, [pc, #52]	; (80113cc <tcp_rexmit_rto_commit+0x4c>)
 8011398:	f006 f90e 	bl	80175b8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80113a2:	2bff      	cmp	r3, #255	; 0xff
 80113a4:	d007      	beq.n	80113b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80113ac:	3301      	adds	r3, #1
 80113ae:	b2da      	uxtb	r2, r3
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f7ff fc80 	bl	8010cbc <tcp_output>
}
 80113bc:	bf00      	nop
 80113be:	3708      	adds	r7, #8
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	0801a968 	.word	0x0801a968
 80113c8:	0801afc8 	.word	0x0801afc8
 80113cc:	0801a9bc 	.word	0x0801a9bc

080113d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d106      	bne.n	80113ec <tcp_rexmit_rto+0x1c>
 80113de:	4b0a      	ldr	r3, [pc, #40]	; (8011408 <tcp_rexmit_rto+0x38>)
 80113e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80113e4:	4909      	ldr	r1, [pc, #36]	; (801140c <tcp_rexmit_rto+0x3c>)
 80113e6:	480a      	ldr	r0, [pc, #40]	; (8011410 <tcp_rexmit_rto+0x40>)
 80113e8:	f006 f8e6 	bl	80175b8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f7ff ff57 	bl	80112a0 <tcp_rexmit_rto_prepare>
 80113f2:	4603      	mov	r3, r0
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d102      	bne.n	80113fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f7ff ffc1 	bl	8011380 <tcp_rexmit_rto_commit>
  }
}
 80113fe:	bf00      	nop
 8011400:	3708      	adds	r7, #8
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
 8011406:	bf00      	nop
 8011408:	0801a968 	.word	0x0801a968
 801140c:	0801afec 	.word	0x0801afec
 8011410:	0801a9bc 	.word	0x0801a9bc

08011414 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011414:	b590      	push	{r4, r7, lr}
 8011416:	b085      	sub	sp, #20
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d106      	bne.n	8011430 <tcp_rexmit+0x1c>
 8011422:	4b2f      	ldr	r3, [pc, #188]	; (80114e0 <tcp_rexmit+0xcc>)
 8011424:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011428:	492e      	ldr	r1, [pc, #184]	; (80114e4 <tcp_rexmit+0xd0>)
 801142a:	482f      	ldr	r0, [pc, #188]	; (80114e8 <tcp_rexmit+0xd4>)
 801142c:	f006 f8c4 	bl	80175b8 <iprintf>

  if (pcb->unacked == NULL) {
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011434:	2b00      	cmp	r3, #0
 8011436:	d102      	bne.n	801143e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011438:	f06f 0305 	mvn.w	r3, #5
 801143c:	e04c      	b.n	80114d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011442:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011444:	68b8      	ldr	r0, [r7, #8]
 8011446:	f7ff fe2d 	bl	80110a4 <tcp_output_segment_busy>
 801144a:	4603      	mov	r3, r0
 801144c:	2b00      	cmp	r3, #0
 801144e:	d002      	beq.n	8011456 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011450:	f06f 0305 	mvn.w	r3, #5
 8011454:	e040      	b.n	80114d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	336c      	adds	r3, #108	; 0x6c
 8011462:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011464:	e002      	b.n	801146c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d011      	beq.n	8011498 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	4618      	mov	r0, r3
 801147e:	f7f8 fd66 	bl	8009f4e <lwip_htonl>
 8011482:	4604      	mov	r4, r0
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	68db      	ldr	r3, [r3, #12]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	4618      	mov	r0, r3
 801148c:	f7f8 fd5f 	bl	8009f4e <lwip_htonl>
 8011490:	4603      	mov	r3, r0
 8011492:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011494:	2b00      	cmp	r3, #0
 8011496:	dbe6      	blt.n	8011466 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	681a      	ldr	r2, [r3, #0]
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	68ba      	ldr	r2, [r7, #8]
 80114a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d103      	bne.n	80114b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2200      	movs	r2, #0
 80114b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114bc:	2bff      	cmp	r3, #255	; 0xff
 80114be:	d007      	beq.n	80114d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114c6:	3301      	adds	r3, #1
 80114c8:	b2da      	uxtb	r2, r3
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2200      	movs	r2, #0
 80114d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80114d6:	2300      	movs	r3, #0
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3714      	adds	r7, #20
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd90      	pop	{r4, r7, pc}
 80114e0:	0801a968 	.word	0x0801a968
 80114e4:	0801b008 	.word	0x0801b008
 80114e8:	0801a9bc 	.word	0x0801a9bc

080114ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b082      	sub	sp, #8
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d106      	bne.n	8011508 <tcp_rexmit_fast+0x1c>
 80114fa:	4b2a      	ldr	r3, [pc, #168]	; (80115a4 <tcp_rexmit_fast+0xb8>)
 80114fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011500:	4929      	ldr	r1, [pc, #164]	; (80115a8 <tcp_rexmit_fast+0xbc>)
 8011502:	482a      	ldr	r0, [pc, #168]	; (80115ac <tcp_rexmit_fast+0xc0>)
 8011504:	f006 f858 	bl	80175b8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801150c:	2b00      	cmp	r3, #0
 801150e:	d044      	beq.n	801159a <tcp_rexmit_fast+0xae>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	8b5b      	ldrh	r3, [r3, #26]
 8011514:	f003 0304 	and.w	r3, r3, #4
 8011518:	2b00      	cmp	r3, #0
 801151a:	d13e      	bne.n	801159a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f7ff ff79 	bl	8011414 <tcp_rexmit>
 8011522:	4603      	mov	r3, r0
 8011524:	2b00      	cmp	r3, #0
 8011526:	d138      	bne.n	801159a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011534:	4293      	cmp	r3, r2
 8011536:	bf28      	it	cs
 8011538:	4613      	movcs	r3, r2
 801153a:	b29b      	uxth	r3, r3
 801153c:	0fda      	lsrs	r2, r3, #31
 801153e:	4413      	add	r3, r2
 8011540:	105b      	asrs	r3, r3, #1
 8011542:	b29a      	uxth	r2, r3
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011550:	461a      	mov	r2, r3
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011556:	005b      	lsls	r3, r3, #1
 8011558:	429a      	cmp	r2, r3
 801155a:	d206      	bcs.n	801156a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011560:	005b      	lsls	r3, r3, #1
 8011562:	b29a      	uxth	r2, r3
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011574:	4619      	mov	r1, r3
 8011576:	0049      	lsls	r1, r1, #1
 8011578:	440b      	add	r3, r1
 801157a:	b29b      	uxth	r3, r3
 801157c:	4413      	add	r3, r2
 801157e:	b29a      	uxth	r2, r3
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	8b5b      	ldrh	r3, [r3, #26]
 801158a:	f043 0304 	orr.w	r3, r3, #4
 801158e:	b29a      	uxth	r2, r3
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2200      	movs	r2, #0
 8011598:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801159a:	bf00      	nop
 801159c:	3708      	adds	r7, #8
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	0801a968 	.word	0x0801a968
 80115a8:	0801b020 	.word	0x0801b020
 80115ac:	0801a9bc 	.word	0x0801a9bc

080115b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b086      	sub	sp, #24
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	60f8      	str	r0, [r7, #12]
 80115b8:	607b      	str	r3, [r7, #4]
 80115ba:	460b      	mov	r3, r1
 80115bc:	817b      	strh	r3, [r7, #10]
 80115be:	4613      	mov	r3, r2
 80115c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80115c2:	897a      	ldrh	r2, [r7, #10]
 80115c4:	893b      	ldrh	r3, [r7, #8]
 80115c6:	4413      	add	r3, r2
 80115c8:	b29b      	uxth	r3, r3
 80115ca:	3314      	adds	r3, #20
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80115d2:	4619      	mov	r1, r3
 80115d4:	2022      	movs	r0, #34	; 0x22
 80115d6:	f7f9 fca5 	bl	800af24 <pbuf_alloc>
 80115da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d04d      	beq.n	801167e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80115e2:	897b      	ldrh	r3, [r7, #10]
 80115e4:	3313      	adds	r3, #19
 80115e6:	697a      	ldr	r2, [r7, #20]
 80115e8:	8952      	ldrh	r2, [r2, #10]
 80115ea:	4293      	cmp	r3, r2
 80115ec:	db06      	blt.n	80115fc <tcp_output_alloc_header_common+0x4c>
 80115ee:	4b26      	ldr	r3, [pc, #152]	; (8011688 <tcp_output_alloc_header_common+0xd8>)
 80115f0:	f240 7223 	movw	r2, #1827	; 0x723
 80115f4:	4925      	ldr	r1, [pc, #148]	; (801168c <tcp_output_alloc_header_common+0xdc>)
 80115f6:	4826      	ldr	r0, [pc, #152]	; (8011690 <tcp_output_alloc_header_common+0xe0>)
 80115f8:	f005 ffde 	bl	80175b8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011602:	8c3b      	ldrh	r3, [r7, #32]
 8011604:	4618      	mov	r0, r3
 8011606:	f7f8 fc8d 	bl	8009f24 <lwip_htons>
 801160a:	4603      	mov	r3, r0
 801160c:	461a      	mov	r2, r3
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011614:	4618      	mov	r0, r3
 8011616:	f7f8 fc85 	bl	8009f24 <lwip_htons>
 801161a:	4603      	mov	r3, r0
 801161c:	461a      	mov	r2, r3
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011628:	68f8      	ldr	r0, [r7, #12]
 801162a:	f7f8 fc90 	bl	8009f4e <lwip_htonl>
 801162e:	4602      	mov	r2, r0
 8011630:	693b      	ldr	r3, [r7, #16]
 8011632:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011634:	897b      	ldrh	r3, [r7, #10]
 8011636:	089b      	lsrs	r3, r3, #2
 8011638:	b29b      	uxth	r3, r3
 801163a:	3305      	adds	r3, #5
 801163c:	b29b      	uxth	r3, r3
 801163e:	031b      	lsls	r3, r3, #12
 8011640:	b29a      	uxth	r2, r3
 8011642:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011646:	b29b      	uxth	r3, r3
 8011648:	4313      	orrs	r3, r2
 801164a:	b29b      	uxth	r3, r3
 801164c:	4618      	mov	r0, r3
 801164e:	f7f8 fc69 	bl	8009f24 <lwip_htons>
 8011652:	4603      	mov	r3, r0
 8011654:	461a      	mov	r2, r3
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801165a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801165c:	4618      	mov	r0, r3
 801165e:	f7f8 fc61 	bl	8009f24 <lwip_htons>
 8011662:	4603      	mov	r3, r0
 8011664:	461a      	mov	r2, r3
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	2200      	movs	r2, #0
 801166e:	741a      	strb	r2, [r3, #16]
 8011670:	2200      	movs	r2, #0
 8011672:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011674:	693b      	ldr	r3, [r7, #16]
 8011676:	2200      	movs	r2, #0
 8011678:	749a      	strb	r2, [r3, #18]
 801167a:	2200      	movs	r2, #0
 801167c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801167e:	697b      	ldr	r3, [r7, #20]
}
 8011680:	4618      	mov	r0, r3
 8011682:	3718      	adds	r7, #24
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	0801a968 	.word	0x0801a968
 801168c:	0801b040 	.word	0x0801b040
 8011690:	0801a9bc 	.word	0x0801a9bc

08011694 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011694:	b5b0      	push	{r4, r5, r7, lr}
 8011696:	b08a      	sub	sp, #40	; 0x28
 8011698:	af04      	add	r7, sp, #16
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	607b      	str	r3, [r7, #4]
 801169e:	460b      	mov	r3, r1
 80116a0:	817b      	strh	r3, [r7, #10]
 80116a2:	4613      	mov	r3, r2
 80116a4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d106      	bne.n	80116ba <tcp_output_alloc_header+0x26>
 80116ac:	4b15      	ldr	r3, [pc, #84]	; (8011704 <tcp_output_alloc_header+0x70>)
 80116ae:	f240 7242 	movw	r2, #1858	; 0x742
 80116b2:	4915      	ldr	r1, [pc, #84]	; (8011708 <tcp_output_alloc_header+0x74>)
 80116b4:	4815      	ldr	r0, [pc, #84]	; (801170c <tcp_output_alloc_header+0x78>)
 80116b6:	f005 ff7f 	bl	80175b8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	8adb      	ldrh	r3, [r3, #22]
 80116c2:	68fa      	ldr	r2, [r7, #12]
 80116c4:	8b12      	ldrh	r2, [r2, #24]
 80116c6:	68f9      	ldr	r1, [r7, #12]
 80116c8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80116ca:	893d      	ldrh	r5, [r7, #8]
 80116cc:	897c      	ldrh	r4, [r7, #10]
 80116ce:	9103      	str	r1, [sp, #12]
 80116d0:	2110      	movs	r1, #16
 80116d2:	9102      	str	r1, [sp, #8]
 80116d4:	9201      	str	r2, [sp, #4]
 80116d6:	9300      	str	r3, [sp, #0]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	462a      	mov	r2, r5
 80116dc:	4621      	mov	r1, r4
 80116de:	f7ff ff67 	bl	80115b0 <tcp_output_alloc_header_common>
 80116e2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d006      	beq.n	80116f8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ee:	68fa      	ldr	r2, [r7, #12]
 80116f0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80116f2:	441a      	add	r2, r3
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80116f8:	697b      	ldr	r3, [r7, #20]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3718      	adds	r7, #24
 80116fe:	46bd      	mov	sp, r7
 8011700:	bdb0      	pop	{r4, r5, r7, pc}
 8011702:	bf00      	nop
 8011704:	0801a968 	.word	0x0801a968
 8011708:	0801b070 	.word	0x0801b070
 801170c:	0801a9bc 	.word	0x0801a9bc

08011710 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b088      	sub	sp, #32
 8011714:	af00      	add	r7, sp, #0
 8011716:	60f8      	str	r0, [r7, #12]
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	4611      	mov	r1, r2
 801171c:	461a      	mov	r2, r3
 801171e:	460b      	mov	r3, r1
 8011720:	71fb      	strb	r3, [r7, #7]
 8011722:	4613      	mov	r3, r2
 8011724:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011726:	2300      	movs	r3, #0
 8011728:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d106      	bne.n	801173e <tcp_output_fill_options+0x2e>
 8011730:	4b13      	ldr	r3, [pc, #76]	; (8011780 <tcp_output_fill_options+0x70>)
 8011732:	f240 7256 	movw	r2, #1878	; 0x756
 8011736:	4913      	ldr	r1, [pc, #76]	; (8011784 <tcp_output_fill_options+0x74>)
 8011738:	4813      	ldr	r0, [pc, #76]	; (8011788 <tcp_output_fill_options+0x78>)
 801173a:	f005 ff3d 	bl	80175b8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	3314      	adds	r3, #20
 8011748:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801174a:	69bb      	ldr	r3, [r7, #24]
 801174c:	f103 0214 	add.w	r2, r3, #20
 8011750:	8bfb      	ldrh	r3, [r7, #30]
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	4619      	mov	r1, r3
 8011756:	79fb      	ldrb	r3, [r7, #7]
 8011758:	009b      	lsls	r3, r3, #2
 801175a:	f003 0304 	and.w	r3, r3, #4
 801175e:	440b      	add	r3, r1
 8011760:	4413      	add	r3, r2
 8011762:	697a      	ldr	r2, [r7, #20]
 8011764:	429a      	cmp	r2, r3
 8011766:	d006      	beq.n	8011776 <tcp_output_fill_options+0x66>
 8011768:	4b05      	ldr	r3, [pc, #20]	; (8011780 <tcp_output_fill_options+0x70>)
 801176a:	f240 7275 	movw	r2, #1909	; 0x775
 801176e:	4907      	ldr	r1, [pc, #28]	; (801178c <tcp_output_fill_options+0x7c>)
 8011770:	4805      	ldr	r0, [pc, #20]	; (8011788 <tcp_output_fill_options+0x78>)
 8011772:	f005 ff21 	bl	80175b8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011776:	bf00      	nop
 8011778:	3720      	adds	r7, #32
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
 801177e:	bf00      	nop
 8011780:	0801a968 	.word	0x0801a968
 8011784:	0801b098 	.word	0x0801b098
 8011788:	0801a9bc 	.word	0x0801a9bc
 801178c:	0801af90 	.word	0x0801af90

08011790 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b08a      	sub	sp, #40	; 0x28
 8011794:	af04      	add	r7, sp, #16
 8011796:	60f8      	str	r0, [r7, #12]
 8011798:	60b9      	str	r1, [r7, #8]
 801179a:	607a      	str	r2, [r7, #4]
 801179c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d106      	bne.n	80117b2 <tcp_output_control_segment+0x22>
 80117a4:	4b1c      	ldr	r3, [pc, #112]	; (8011818 <tcp_output_control_segment+0x88>)
 80117a6:	f240 7287 	movw	r2, #1927	; 0x787
 80117aa:	491c      	ldr	r1, [pc, #112]	; (801181c <tcp_output_control_segment+0x8c>)
 80117ac:	481c      	ldr	r0, [pc, #112]	; (8011820 <tcp_output_control_segment+0x90>)
 80117ae:	f005 ff03 	bl	80175b8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80117b2:	683a      	ldr	r2, [r7, #0]
 80117b4:	6879      	ldr	r1, [r7, #4]
 80117b6:	68f8      	ldr	r0, [r7, #12]
 80117b8:	f7fe fae8 	bl	800fd8c <tcp_route>
 80117bc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d102      	bne.n	80117ca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80117c4:	23fc      	movs	r3, #252	; 0xfc
 80117c6:	75fb      	strb	r3, [r7, #23]
 80117c8:	e01c      	b.n	8011804 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d006      	beq.n	80117de <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	7adb      	ldrb	r3, [r3, #11]
 80117d4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	7a9b      	ldrb	r3, [r3, #10]
 80117da:	757b      	strb	r3, [r7, #21]
 80117dc:	e003      	b.n	80117e6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80117de:	23ff      	movs	r3, #255	; 0xff
 80117e0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80117e2:	2300      	movs	r3, #0
 80117e4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80117e6:	7dba      	ldrb	r2, [r7, #22]
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	9302      	str	r3, [sp, #8]
 80117ec:	2306      	movs	r3, #6
 80117ee:	9301      	str	r3, [sp, #4]
 80117f0:	7d7b      	ldrb	r3, [r7, #21]
 80117f2:	9300      	str	r3, [sp, #0]
 80117f4:	4613      	mov	r3, r2
 80117f6:	683a      	ldr	r2, [r7, #0]
 80117f8:	6879      	ldr	r1, [r7, #4]
 80117fa:	68b8      	ldr	r0, [r7, #8]
 80117fc:	f004 f924 	bl	8015a48 <ip4_output_if>
 8011800:	4603      	mov	r3, r0
 8011802:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011804:	68b8      	ldr	r0, [r7, #8]
 8011806:	f7f9 fe71 	bl	800b4ec <pbuf_free>
  return err;
 801180a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801180e:	4618      	mov	r0, r3
 8011810:	3718      	adds	r7, #24
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	0801a968 	.word	0x0801a968
 801181c:	0801b0c0 	.word	0x0801b0c0
 8011820:	0801a9bc 	.word	0x0801a9bc

08011824 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011824:	b590      	push	{r4, r7, lr}
 8011826:	b08b      	sub	sp, #44	; 0x2c
 8011828:	af04      	add	r7, sp, #16
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	60b9      	str	r1, [r7, #8]
 801182e:	607a      	str	r2, [r7, #4]
 8011830:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d106      	bne.n	8011846 <tcp_rst+0x22>
 8011838:	4b1f      	ldr	r3, [pc, #124]	; (80118b8 <tcp_rst+0x94>)
 801183a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801183e:	491f      	ldr	r1, [pc, #124]	; (80118bc <tcp_rst+0x98>)
 8011840:	481f      	ldr	r0, [pc, #124]	; (80118c0 <tcp_rst+0x9c>)
 8011842:	f005 feb9 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011848:	2b00      	cmp	r3, #0
 801184a:	d106      	bne.n	801185a <tcp_rst+0x36>
 801184c:	4b1a      	ldr	r3, [pc, #104]	; (80118b8 <tcp_rst+0x94>)
 801184e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011852:	491c      	ldr	r1, [pc, #112]	; (80118c4 <tcp_rst+0xa0>)
 8011854:	481a      	ldr	r0, [pc, #104]	; (80118c0 <tcp_rst+0x9c>)
 8011856:	f005 feaf 	bl	80175b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801185a:	2300      	movs	r3, #0
 801185c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801185e:	f246 0308 	movw	r3, #24584	; 0x6008
 8011862:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011864:	7dfb      	ldrb	r3, [r7, #23]
 8011866:	b29c      	uxth	r4, r3
 8011868:	68b8      	ldr	r0, [r7, #8]
 801186a:	f7f8 fb70 	bl	8009f4e <lwip_htonl>
 801186e:	4602      	mov	r2, r0
 8011870:	8abb      	ldrh	r3, [r7, #20]
 8011872:	9303      	str	r3, [sp, #12]
 8011874:	2314      	movs	r3, #20
 8011876:	9302      	str	r3, [sp, #8]
 8011878:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801187a:	9301      	str	r3, [sp, #4]
 801187c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801187e:	9300      	str	r3, [sp, #0]
 8011880:	4613      	mov	r3, r2
 8011882:	2200      	movs	r2, #0
 8011884:	4621      	mov	r1, r4
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f7ff fe92 	bl	80115b0 <tcp_output_alloc_header_common>
 801188c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d00c      	beq.n	80118ae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011894:	7dfb      	ldrb	r3, [r7, #23]
 8011896:	2200      	movs	r2, #0
 8011898:	6939      	ldr	r1, [r7, #16]
 801189a:	68f8      	ldr	r0, [r7, #12]
 801189c:	f7ff ff38 	bl	8011710 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80118a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a2:	683a      	ldr	r2, [r7, #0]
 80118a4:	6939      	ldr	r1, [r7, #16]
 80118a6:	68f8      	ldr	r0, [r7, #12]
 80118a8:	f7ff ff72 	bl	8011790 <tcp_output_control_segment>
 80118ac:	e000      	b.n	80118b0 <tcp_rst+0x8c>
    return;
 80118ae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80118b0:	371c      	adds	r7, #28
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd90      	pop	{r4, r7, pc}
 80118b6:	bf00      	nop
 80118b8:	0801a968 	.word	0x0801a968
 80118bc:	0801b0ec 	.word	0x0801b0ec
 80118c0:	0801a9bc 	.word	0x0801a9bc
 80118c4:	0801b108 	.word	0x0801b108

080118c8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80118c8:	b590      	push	{r4, r7, lr}
 80118ca:	b087      	sub	sp, #28
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80118d0:	2300      	movs	r3, #0
 80118d2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80118d4:	2300      	movs	r3, #0
 80118d6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d106      	bne.n	80118ec <tcp_send_empty_ack+0x24>
 80118de:	4b28      	ldr	r3, [pc, #160]	; (8011980 <tcp_send_empty_ack+0xb8>)
 80118e0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80118e4:	4927      	ldr	r1, [pc, #156]	; (8011984 <tcp_send_empty_ack+0xbc>)
 80118e6:	4828      	ldr	r0, [pc, #160]	; (8011988 <tcp_send_empty_ack+0xc0>)
 80118e8:	f005 fe66 	bl	80175b8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80118ec:	7dfb      	ldrb	r3, [r7, #23]
 80118ee:	009b      	lsls	r3, r3, #2
 80118f0:	b2db      	uxtb	r3, r3
 80118f2:	f003 0304 	and.w	r3, r3, #4
 80118f6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80118f8:	7d7b      	ldrb	r3, [r7, #21]
 80118fa:	b29c      	uxth	r4, r3
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011900:	4618      	mov	r0, r3
 8011902:	f7f8 fb24 	bl	8009f4e <lwip_htonl>
 8011906:	4603      	mov	r3, r0
 8011908:	2200      	movs	r2, #0
 801190a:	4621      	mov	r1, r4
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f7ff fec1 	bl	8011694 <tcp_output_alloc_header>
 8011912:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d109      	bne.n	801192e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	8b5b      	ldrh	r3, [r3, #26]
 801191e:	f043 0303 	orr.w	r3, r3, #3
 8011922:	b29a      	uxth	r2, r3
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011928:	f06f 0301 	mvn.w	r3, #1
 801192c:	e023      	b.n	8011976 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801192e:	7dbb      	ldrb	r3, [r7, #22]
 8011930:	7dfa      	ldrb	r2, [r7, #23]
 8011932:	6939      	ldr	r1, [r7, #16]
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f7ff feeb 	bl	8011710 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	3304      	adds	r3, #4
 8011940:	6939      	ldr	r1, [r7, #16]
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7ff ff24 	bl	8011790 <tcp_output_control_segment>
 8011948:	4603      	mov	r3, r0
 801194a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801194c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d007      	beq.n	8011964 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	8b5b      	ldrh	r3, [r3, #26]
 8011958:	f043 0303 	orr.w	r3, r3, #3
 801195c:	b29a      	uxth	r2, r3
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	835a      	strh	r2, [r3, #26]
 8011962:	e006      	b.n	8011972 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	8b5b      	ldrh	r3, [r3, #26]
 8011968:	f023 0303 	bic.w	r3, r3, #3
 801196c:	b29a      	uxth	r2, r3
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011976:	4618      	mov	r0, r3
 8011978:	371c      	adds	r7, #28
 801197a:	46bd      	mov	sp, r7
 801197c:	bd90      	pop	{r4, r7, pc}
 801197e:	bf00      	nop
 8011980:	0801a968 	.word	0x0801a968
 8011984:	0801b124 	.word	0x0801b124
 8011988:	0801a9bc 	.word	0x0801a9bc

0801198c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801198c:	b590      	push	{r4, r7, lr}
 801198e:	b087      	sub	sp, #28
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011994:	2300      	movs	r3, #0
 8011996:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d106      	bne.n	80119ac <tcp_keepalive+0x20>
 801199e:	4b18      	ldr	r3, [pc, #96]	; (8011a00 <tcp_keepalive+0x74>)
 80119a0:	f640 0224 	movw	r2, #2084	; 0x824
 80119a4:	4917      	ldr	r1, [pc, #92]	; (8011a04 <tcp_keepalive+0x78>)
 80119a6:	4818      	ldr	r0, [pc, #96]	; (8011a08 <tcp_keepalive+0x7c>)
 80119a8:	f005 fe06 	bl	80175b8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80119ac:	7dfb      	ldrb	r3, [r7, #23]
 80119ae:	b29c      	uxth	r4, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119b4:	3b01      	subs	r3, #1
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7f8 fac9 	bl	8009f4e <lwip_htonl>
 80119bc:	4603      	mov	r3, r0
 80119be:	2200      	movs	r2, #0
 80119c0:	4621      	mov	r1, r4
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f7ff fe66 	bl	8011694 <tcp_output_alloc_header>
 80119c8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d102      	bne.n	80119d6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80119d0:	f04f 33ff 	mov.w	r3, #4294967295
 80119d4:	e010      	b.n	80119f8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80119d6:	7dfb      	ldrb	r3, [r7, #23]
 80119d8:	2200      	movs	r2, #0
 80119da:	6939      	ldr	r1, [r7, #16]
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7ff fe97 	bl	8011710 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	3304      	adds	r3, #4
 80119e8:	6939      	ldr	r1, [r7, #16]
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f7ff fed0 	bl	8011790 <tcp_output_control_segment>
 80119f0:	4603      	mov	r3, r0
 80119f2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80119f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	371c      	adds	r7, #28
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd90      	pop	{r4, r7, pc}
 8011a00:	0801a968 	.word	0x0801a968
 8011a04:	0801b144 	.word	0x0801b144
 8011a08:	0801a9bc 	.word	0x0801a9bc

08011a0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011a0c:	b590      	push	{r4, r7, lr}
 8011a0e:	b08b      	sub	sp, #44	; 0x2c
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011a14:	2300      	movs	r3, #0
 8011a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d106      	bne.n	8011a2e <tcp_zero_window_probe+0x22>
 8011a20:	4b4c      	ldr	r3, [pc, #304]	; (8011b54 <tcp_zero_window_probe+0x148>)
 8011a22:	f640 024f 	movw	r2, #2127	; 0x84f
 8011a26:	494c      	ldr	r1, [pc, #304]	; (8011b58 <tcp_zero_window_probe+0x14c>)
 8011a28:	484c      	ldr	r0, [pc, #304]	; (8011b5c <tcp_zero_window_probe+0x150>)
 8011a2a:	f005 fdc5 	bl	80175b8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011a34:	6a3b      	ldr	r3, [r7, #32]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d101      	bne.n	8011a3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	e086      	b.n	8011b4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011a44:	2bff      	cmp	r3, #255	; 0xff
 8011a46:	d007      	beq.n	8011a58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011a4e:	3301      	adds	r3, #1
 8011a50:	b2da      	uxtb	r2, r3
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011a58:	6a3b      	ldr	r3, [r7, #32]
 8011a5a:	68db      	ldr	r3, [r3, #12]
 8011a5c:	899b      	ldrh	r3, [r3, #12]
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7f8 fa5f 	bl	8009f24 <lwip_htons>
 8011a66:	4603      	mov	r3, r0
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	f003 0301 	and.w	r3, r3, #1
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d005      	beq.n	8011a7e <tcp_zero_window_probe+0x72>
 8011a72:	6a3b      	ldr	r3, [r7, #32]
 8011a74:	891b      	ldrh	r3, [r3, #8]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d101      	bne.n	8011a7e <tcp_zero_window_probe+0x72>
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	e000      	b.n	8011a80 <tcp_zero_window_probe+0x74>
 8011a7e:	2300      	movs	r3, #0
 8011a80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011a82:	7ffb      	ldrb	r3, [r7, #31]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	bf0c      	ite	eq
 8011a88:	2301      	moveq	r3, #1
 8011a8a:	2300      	movne	r3, #0
 8011a8c:	b2db      	uxtb	r3, r3
 8011a8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a94:	b299      	uxth	r1, r3
 8011a96:	6a3b      	ldr	r3, [r7, #32]
 8011a98:	68db      	ldr	r3, [r3, #12]
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	8bba      	ldrh	r2, [r7, #28]
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f7ff fdf8 	bl	8011694 <tcp_output_alloc_header>
 8011aa4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d102      	bne.n	8011ab2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011aac:	f04f 33ff 	mov.w	r3, #4294967295
 8011ab0:	e04c      	b.n	8011b4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011ab2:	69bb      	ldr	r3, [r7, #24]
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011ab8:	7ffb      	ldrb	r3, [r7, #31]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d011      	beq.n	8011ae2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	899b      	ldrh	r3, [r3, #12]
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	b21b      	sxth	r3, r3
 8011ac6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011aca:	b21c      	sxth	r4, r3
 8011acc:	2011      	movs	r0, #17
 8011ace:	f7f8 fa29 	bl	8009f24 <lwip_htons>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	b21b      	sxth	r3, r3
 8011ad6:	4323      	orrs	r3, r4
 8011ad8:	b21b      	sxth	r3, r3
 8011ada:	b29a      	uxth	r2, r3
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	819a      	strh	r2, [r3, #12]
 8011ae0:	e010      	b.n	8011b04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011ae2:	69bb      	ldr	r3, [r7, #24]
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	3314      	adds	r3, #20
 8011ae8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011aea:	6a3b      	ldr	r3, [r7, #32]
 8011aec:	6858      	ldr	r0, [r3, #4]
 8011aee:	6a3b      	ldr	r3, [r7, #32]
 8011af0:	685b      	ldr	r3, [r3, #4]
 8011af2:	891a      	ldrh	r2, [r3, #8]
 8011af4:	6a3b      	ldr	r3, [r7, #32]
 8011af6:	891b      	ldrh	r3, [r3, #8]
 8011af8:	1ad3      	subs	r3, r2, r3
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	2201      	movs	r2, #1
 8011afe:	6939      	ldr	r1, [r7, #16]
 8011b00:	f7f9 feee 	bl	800b8e0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011b04:	6a3b      	ldr	r3, [r7, #32]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7f8 fa1f 	bl	8009f4e <lwip_htonl>
 8011b10:	4603      	mov	r3, r0
 8011b12:	3301      	adds	r3, #1
 8011b14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	1ad3      	subs	r3, r2, r3
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	da02      	bge.n	8011b28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	68fa      	ldr	r2, [r7, #12]
 8011b26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	69b9      	ldr	r1, [r7, #24]
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f7ff fded 	bl	8011710 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	3304      	adds	r3, #4
 8011b3c:	69b9      	ldr	r1, [r7, #24]
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f7ff fe26 	bl	8011790 <tcp_output_control_segment>
 8011b44:	4603      	mov	r3, r0
 8011b46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011b48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	372c      	adds	r7, #44	; 0x2c
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd90      	pop	{r4, r7, pc}
 8011b54:	0801a968 	.word	0x0801a968
 8011b58:	0801b160 	.word	0x0801b160
 8011b5c:	0801a9bc 	.word	0x0801a9bc

08011b60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b082      	sub	sp, #8
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011b68:	f7fa f80c 	bl	800bb84 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011b6c:	4b0a      	ldr	r3, [pc, #40]	; (8011b98 <tcpip_tcp_timer+0x38>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d103      	bne.n	8011b7c <tcpip_tcp_timer+0x1c>
 8011b74:	4b09      	ldr	r3, [pc, #36]	; (8011b9c <tcpip_tcp_timer+0x3c>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d005      	beq.n	8011b88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	4908      	ldr	r1, [pc, #32]	; (8011ba0 <tcpip_tcp_timer+0x40>)
 8011b80:	20fa      	movs	r0, #250	; 0xfa
 8011b82:	f000 f8f3 	bl	8011d6c <sys_timeout>
 8011b86:	e003      	b.n	8011b90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011b88:	4b06      	ldr	r3, [pc, #24]	; (8011ba4 <tcpip_tcp_timer+0x44>)
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	601a      	str	r2, [r3, #0]
  }
}
 8011b8e:	bf00      	nop
 8011b90:	bf00      	nop
 8011b92:	3708      	adds	r7, #8
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}
 8011b98:	20006d0c 	.word	0x20006d0c
 8011b9c:	20006d1c 	.word	0x20006d1c
 8011ba0:	08011b61 	.word	0x08011b61
 8011ba4:	20000294 	.word	0x20000294

08011ba8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011bac:	4b0a      	ldr	r3, [pc, #40]	; (8011bd8 <tcp_timer_needed+0x30>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d10f      	bne.n	8011bd4 <tcp_timer_needed+0x2c>
 8011bb4:	4b09      	ldr	r3, [pc, #36]	; (8011bdc <tcp_timer_needed+0x34>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d103      	bne.n	8011bc4 <tcp_timer_needed+0x1c>
 8011bbc:	4b08      	ldr	r3, [pc, #32]	; (8011be0 <tcp_timer_needed+0x38>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d007      	beq.n	8011bd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011bc4:	4b04      	ldr	r3, [pc, #16]	; (8011bd8 <tcp_timer_needed+0x30>)
 8011bc6:	2201      	movs	r2, #1
 8011bc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011bca:	2200      	movs	r2, #0
 8011bcc:	4905      	ldr	r1, [pc, #20]	; (8011be4 <tcp_timer_needed+0x3c>)
 8011bce:	20fa      	movs	r0, #250	; 0xfa
 8011bd0:	f000 f8cc 	bl	8011d6c <sys_timeout>
  }
}
 8011bd4:	bf00      	nop
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	20000294 	.word	0x20000294
 8011bdc:	20006d0c 	.word	0x20006d0c
 8011be0:	20006d1c 	.word	0x20006d1c
 8011be4:	08011b61 	.word	0x08011b61

08011be8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b086      	sub	sp, #24
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	60f8      	str	r0, [r7, #12]
 8011bf0:	60b9      	str	r1, [r7, #8]
 8011bf2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011bf4:	2006      	movs	r0, #6
 8011bf6:	f7f8 fe13 	bl	800a820 <memp_malloc>
 8011bfa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d109      	bne.n	8011c16 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011c02:	693b      	ldr	r3, [r7, #16]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d151      	bne.n	8011cac <sys_timeout_abs+0xc4>
 8011c08:	4b2a      	ldr	r3, [pc, #168]	; (8011cb4 <sys_timeout_abs+0xcc>)
 8011c0a:	22be      	movs	r2, #190	; 0xbe
 8011c0c:	492a      	ldr	r1, [pc, #168]	; (8011cb8 <sys_timeout_abs+0xd0>)
 8011c0e:	482b      	ldr	r0, [pc, #172]	; (8011cbc <sys_timeout_abs+0xd4>)
 8011c10:	f005 fcd2 	bl	80175b8 <iprintf>
    return;
 8011c14:	e04a      	b.n	8011cac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	68ba      	ldr	r2, [r7, #8]
 8011c20:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	68fa      	ldr	r2, [r7, #12]
 8011c2c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011c2e:	4b24      	ldr	r3, [pc, #144]	; (8011cc0 <sys_timeout_abs+0xd8>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d103      	bne.n	8011c3e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011c36:	4a22      	ldr	r2, [pc, #136]	; (8011cc0 <sys_timeout_abs+0xd8>)
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	6013      	str	r3, [r2, #0]
    return;
 8011c3c:	e037      	b.n	8011cae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	685a      	ldr	r2, [r3, #4]
 8011c42:	4b1f      	ldr	r3, [pc, #124]	; (8011cc0 <sys_timeout_abs+0xd8>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	685b      	ldr	r3, [r3, #4]
 8011c48:	1ad3      	subs	r3, r2, r3
 8011c4a:	0fdb      	lsrs	r3, r3, #31
 8011c4c:	f003 0301 	and.w	r3, r3, #1
 8011c50:	b2db      	uxtb	r3, r3
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d007      	beq.n	8011c66 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011c56:	4b1a      	ldr	r3, [pc, #104]	; (8011cc0 <sys_timeout_abs+0xd8>)
 8011c58:	681a      	ldr	r2, [r3, #0]
 8011c5a:	693b      	ldr	r3, [r7, #16]
 8011c5c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011c5e:	4a18      	ldr	r2, [pc, #96]	; (8011cc0 <sys_timeout_abs+0xd8>)
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	6013      	str	r3, [r2, #0]
 8011c64:	e023      	b.n	8011cae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011c66:	4b16      	ldr	r3, [pc, #88]	; (8011cc0 <sys_timeout_abs+0xd8>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	617b      	str	r3, [r7, #20]
 8011c6c:	e01a      	b.n	8011ca4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d00b      	beq.n	8011c8e <sys_timeout_abs+0xa6>
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	685a      	ldr	r2, [r3, #4]
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	1ad3      	subs	r3, r2, r3
 8011c82:	0fdb      	lsrs	r3, r3, #31
 8011c84:	f003 0301 	and.w	r3, r3, #1
 8011c88:	b2db      	uxtb	r3, r3
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d007      	beq.n	8011c9e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	693a      	ldr	r2, [r7, #16]
 8011c9a:	601a      	str	r2, [r3, #0]
        break;
 8011c9c:	e007      	b.n	8011cae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	617b      	str	r3, [r7, #20]
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d1e1      	bne.n	8011c6e <sys_timeout_abs+0x86>
 8011caa:	e000      	b.n	8011cae <sys_timeout_abs+0xc6>
    return;
 8011cac:	bf00      	nop
      }
    }
  }
}
 8011cae:	3718      	adds	r7, #24
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}
 8011cb4:	0801b184 	.word	0x0801b184
 8011cb8:	0801b1b8 	.word	0x0801b1b8
 8011cbc:	0801b1f8 	.word	0x0801b1f8
 8011cc0:	2000028c 	.word	0x2000028c

08011cc4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b086      	sub	sp, #24
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	4798      	blx	r3

  now = sys_now();
 8011cd6:	f7f4 feef 	bl	8006ab8 <sys_now>
 8011cda:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	681a      	ldr	r2, [r3, #0]
 8011ce0:	4b0f      	ldr	r3, [pc, #60]	; (8011d20 <lwip_cyclic_timer+0x5c>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	1ad3      	subs	r3, r2, r3
 8011cee:	0fdb      	lsrs	r3, r3, #31
 8011cf0:	f003 0301 	and.w	r3, r3, #1
 8011cf4:	b2db      	uxtb	r3, r3
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d009      	beq.n	8011d0e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	4413      	add	r3, r2
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	4907      	ldr	r1, [pc, #28]	; (8011d24 <lwip_cyclic_timer+0x60>)
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7ff ff6e 	bl	8011be8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011d0c:	e004      	b.n	8011d18 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011d0e:	687a      	ldr	r2, [r7, #4]
 8011d10:	4904      	ldr	r1, [pc, #16]	; (8011d24 <lwip_cyclic_timer+0x60>)
 8011d12:	68f8      	ldr	r0, [r7, #12]
 8011d14:	f7ff ff68 	bl	8011be8 <sys_timeout_abs>
}
 8011d18:	bf00      	nop
 8011d1a:	3718      	adds	r7, #24
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	20000290 	.word	0x20000290
 8011d24:	08011cc5 	.word	0x08011cc5

08011d28 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011d2e:	2301      	movs	r3, #1
 8011d30:	607b      	str	r3, [r7, #4]
 8011d32:	e00e      	b.n	8011d52 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011d34:	4a0b      	ldr	r2, [pc, #44]	; (8011d64 <sys_timeouts_init+0x3c>)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	00db      	lsls	r3, r3, #3
 8011d40:	4a08      	ldr	r2, [pc, #32]	; (8011d64 <sys_timeouts_init+0x3c>)
 8011d42:	4413      	add	r3, r2
 8011d44:	461a      	mov	r2, r3
 8011d46:	4908      	ldr	r1, [pc, #32]	; (8011d68 <sys_timeouts_init+0x40>)
 8011d48:	f000 f810 	bl	8011d6c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	3301      	adds	r3, #1
 8011d50:	607b      	str	r3, [r7, #4]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2b04      	cmp	r3, #4
 8011d56:	d9ed      	bls.n	8011d34 <sys_timeouts_init+0xc>
  }
}
 8011d58:	bf00      	nop
 8011d5a:	bf00      	nop
 8011d5c:	3708      	adds	r7, #8
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	bf00      	nop
 8011d64:	0801c144 	.word	0x0801c144
 8011d68:	08011cc5 	.word	0x08011cc5

08011d6c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b086      	sub	sp, #24
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	60f8      	str	r0, [r7, #12]
 8011d74:	60b9      	str	r1, [r7, #8]
 8011d76:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d7e:	d306      	bcc.n	8011d8e <sys_timeout+0x22>
 8011d80:	4b0a      	ldr	r3, [pc, #40]	; (8011dac <sys_timeout+0x40>)
 8011d82:	f240 1229 	movw	r2, #297	; 0x129
 8011d86:	490a      	ldr	r1, [pc, #40]	; (8011db0 <sys_timeout+0x44>)
 8011d88:	480a      	ldr	r0, [pc, #40]	; (8011db4 <sys_timeout+0x48>)
 8011d8a:	f005 fc15 	bl	80175b8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011d8e:	f7f4 fe93 	bl	8006ab8 <sys_now>
 8011d92:	4602      	mov	r2, r0
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	4413      	add	r3, r2
 8011d98:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	68b9      	ldr	r1, [r7, #8]
 8011d9e:	6978      	ldr	r0, [r7, #20]
 8011da0:	f7ff ff22 	bl	8011be8 <sys_timeout_abs>
#endif
}
 8011da4:	bf00      	nop
 8011da6:	3718      	adds	r7, #24
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}
 8011dac:	0801b184 	.word	0x0801b184
 8011db0:	0801b220 	.word	0x0801b220
 8011db4:	0801b1f8 	.word	0x0801b1f8

08011db8 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011dc2:	4b19      	ldr	r3, [pc, #100]	; (8011e28 <sys_untimeout+0x70>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d029      	beq.n	8011e1e <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8011dca:	4b17      	ldr	r3, [pc, #92]	; (8011e28 <sys_untimeout+0x70>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	60bb      	str	r3, [r7, #8]
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	60fb      	str	r3, [r7, #12]
 8011dd4:	e01f      	b.n	8011e16 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	689b      	ldr	r3, [r3, #8]
 8011dda:	687a      	ldr	r2, [r7, #4]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d115      	bne.n	8011e0c <sys_untimeout+0x54>
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	683a      	ldr	r2, [r7, #0]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d110      	bne.n	8011e0c <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d104      	bne.n	8011dfa <sys_untimeout+0x42>
        next_timeout = t->next;
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	4a0c      	ldr	r2, [pc, #48]	; (8011e28 <sys_untimeout+0x70>)
 8011df6:	6013      	str	r3, [r2, #0]
 8011df8:	e003      	b.n	8011e02 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	681a      	ldr	r2, [r3, #0]
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8011e02:	68b9      	ldr	r1, [r7, #8]
 8011e04:	2006      	movs	r0, #6
 8011e06:	f7f8 fd57 	bl	800a8b8 <memp_free>
      return;
 8011e0a:	e009      	b.n	8011e20 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	60fb      	str	r3, [r7, #12]
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	60bb      	str	r3, [r7, #8]
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d1dc      	bne.n	8011dd6 <sys_untimeout+0x1e>
    }
  }
  return;
 8011e1c:	e000      	b.n	8011e20 <sys_untimeout+0x68>
    return;
 8011e1e:	bf00      	nop
}
 8011e20:	3710      	adds	r7, #16
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	2000028c 	.word	0x2000028c

08011e2c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b084      	sub	sp, #16
 8011e30:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011e32:	f7f4 fe41 	bl	8006ab8 <sys_now>
 8011e36:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011e38:	4b1a      	ldr	r3, [pc, #104]	; (8011ea4 <sys_check_timeouts+0x78>)
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d001      	beq.n	8011e46 <sys_check_timeouts+0x1a>
 8011e42:	f7f9 f819 	bl	800ae78 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011e46:	4b18      	ldr	r3, [pc, #96]	; (8011ea8 <sys_check_timeouts+0x7c>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d022      	beq.n	8011e98 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	68fa      	ldr	r2, [r7, #12]
 8011e58:	1ad3      	subs	r3, r2, r3
 8011e5a:	0fdb      	lsrs	r3, r3, #31
 8011e5c:	f003 0301 	and.w	r3, r3, #1
 8011e60:	b2db      	uxtb	r3, r3
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d11a      	bne.n	8011e9c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	4a0f      	ldr	r2, [pc, #60]	; (8011ea8 <sys_check_timeouts+0x7c>)
 8011e6c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	689b      	ldr	r3, [r3, #8]
 8011e72:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	68db      	ldr	r3, [r3, #12]
 8011e78:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	4a0b      	ldr	r2, [pc, #44]	; (8011eac <sys_check_timeouts+0x80>)
 8011e80:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011e82:	68b9      	ldr	r1, [r7, #8]
 8011e84:	2006      	movs	r0, #6
 8011e86:	f7f8 fd17 	bl	800a8b8 <memp_free>
    if (handler != NULL) {
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d0d3      	beq.n	8011e38 <sys_check_timeouts+0xc>
      handler(arg);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6838      	ldr	r0, [r7, #0]
 8011e94:	4798      	blx	r3
  do {
 8011e96:	e7cf      	b.n	8011e38 <sys_check_timeouts+0xc>
      return;
 8011e98:	bf00      	nop
 8011e9a:	e000      	b.n	8011e9e <sys_check_timeouts+0x72>
      return;
 8011e9c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011e9e:	3710      	adds	r7, #16
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	20006d04 	.word	0x20006d04
 8011ea8:	2000028c 	.word	0x2000028c
 8011eac:	20000290 	.word	0x20000290

08011eb0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011eb4:	f005 fb98 	bl	80175e8 <rand>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011ec6:	b29a      	uxth	r2, r3
 8011ec8:	4b01      	ldr	r3, [pc, #4]	; (8011ed0 <udp_init+0x20>)
 8011eca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011ecc:	bf00      	nop
 8011ece:	bd80      	pop	{r7, pc}
 8011ed0:	20000124 	.word	0x20000124

08011ed4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011eda:	2300      	movs	r3, #0
 8011edc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011ede:	4b17      	ldr	r3, [pc, #92]	; (8011f3c <udp_new_port+0x68>)
 8011ee0:	881b      	ldrh	r3, [r3, #0]
 8011ee2:	1c5a      	adds	r2, r3, #1
 8011ee4:	b291      	uxth	r1, r2
 8011ee6:	4a15      	ldr	r2, [pc, #84]	; (8011f3c <udp_new_port+0x68>)
 8011ee8:	8011      	strh	r1, [r2, #0]
 8011eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d103      	bne.n	8011efa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011ef2:	4b12      	ldr	r3, [pc, #72]	; (8011f3c <udp_new_port+0x68>)
 8011ef4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011ef8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011efa:	4b11      	ldr	r3, [pc, #68]	; (8011f40 <udp_new_port+0x6c>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	603b      	str	r3, [r7, #0]
 8011f00:	e011      	b.n	8011f26 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	8a5a      	ldrh	r2, [r3, #18]
 8011f06:	4b0d      	ldr	r3, [pc, #52]	; (8011f3c <udp_new_port+0x68>)
 8011f08:	881b      	ldrh	r3, [r3, #0]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d108      	bne.n	8011f20 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011f0e:	88fb      	ldrh	r3, [r7, #6]
 8011f10:	3301      	adds	r3, #1
 8011f12:	80fb      	strh	r3, [r7, #6]
 8011f14:	88fb      	ldrh	r3, [r7, #6]
 8011f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f1a:	d3e0      	bcc.n	8011ede <udp_new_port+0xa>
        return 0;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	e007      	b.n	8011f30 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	68db      	ldr	r3, [r3, #12]
 8011f24:	603b      	str	r3, [r7, #0]
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d1ea      	bne.n	8011f02 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011f2c:	4b03      	ldr	r3, [pc, #12]	; (8011f3c <udp_new_port+0x68>)
 8011f2e:	881b      	ldrh	r3, [r3, #0]
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	370c      	adds	r7, #12
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	4770      	bx	lr
 8011f3c:	20000124 	.word	0x20000124
 8011f40:	20006d24 	.word	0x20006d24

08011f44 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b084      	sub	sp, #16
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	60b9      	str	r1, [r7, #8]
 8011f4e:	4613      	mov	r3, r2
 8011f50:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d105      	bne.n	8011f64 <udp_input_local_match+0x20>
 8011f58:	4b27      	ldr	r3, [pc, #156]	; (8011ff8 <udp_input_local_match+0xb4>)
 8011f5a:	2287      	movs	r2, #135	; 0x87
 8011f5c:	4927      	ldr	r1, [pc, #156]	; (8011ffc <udp_input_local_match+0xb8>)
 8011f5e:	4828      	ldr	r0, [pc, #160]	; (8012000 <udp_input_local_match+0xbc>)
 8011f60:	f005 fb2a 	bl	80175b8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d105      	bne.n	8011f76 <udp_input_local_match+0x32>
 8011f6a:	4b23      	ldr	r3, [pc, #140]	; (8011ff8 <udp_input_local_match+0xb4>)
 8011f6c:	2288      	movs	r2, #136	; 0x88
 8011f6e:	4925      	ldr	r1, [pc, #148]	; (8012004 <udp_input_local_match+0xc0>)
 8011f70:	4823      	ldr	r0, [pc, #140]	; (8012000 <udp_input_local_match+0xbc>)
 8011f72:	f005 fb21 	bl	80175b8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	7a1b      	ldrb	r3, [r3, #8]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d00b      	beq.n	8011f96 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	7a1a      	ldrb	r2, [r3, #8]
 8011f82:	4b21      	ldr	r3, [pc, #132]	; (8012008 <udp_input_local_match+0xc4>)
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	d001      	beq.n	8011f96 <udp_input_local_match+0x52>
    return 0;
 8011f92:	2300      	movs	r3, #0
 8011f94:	e02b      	b.n	8011fee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011f96:	79fb      	ldrb	r3, [r7, #7]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d018      	beq.n	8011fce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d013      	beq.n	8011fca <udp_input_local_match+0x86>
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d00f      	beq.n	8011fca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011faa:	4b17      	ldr	r3, [pc, #92]	; (8012008 <udp_input_local_match+0xc4>)
 8011fac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fb2:	d00a      	beq.n	8011fca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681a      	ldr	r2, [r3, #0]
 8011fb8:	4b13      	ldr	r3, [pc, #76]	; (8012008 <udp_input_local_match+0xc4>)
 8011fba:	695b      	ldr	r3, [r3, #20]
 8011fbc:	405a      	eors	r2, r3
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	3308      	adds	r3, #8
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d110      	bne.n	8011fec <udp_input_local_match+0xa8>
          return 1;
 8011fca:	2301      	movs	r3, #1
 8011fcc:	e00f      	b.n	8011fee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d009      	beq.n	8011fe8 <udp_input_local_match+0xa4>
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d005      	beq.n	8011fe8 <udp_input_local_match+0xa4>
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	4b09      	ldr	r3, [pc, #36]	; (8012008 <udp_input_local_match+0xc4>)
 8011fe2:	695b      	ldr	r3, [r3, #20]
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d101      	bne.n	8011fec <udp_input_local_match+0xa8>
        return 1;
 8011fe8:	2301      	movs	r3, #1
 8011fea:	e000      	b.n	8011fee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011fec:	2300      	movs	r3, #0
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	3710      	adds	r7, #16
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}
 8011ff6:	bf00      	nop
 8011ff8:	0801b26c 	.word	0x0801b26c
 8011ffc:	0801b29c 	.word	0x0801b29c
 8012000:	0801b2c0 	.word	0x0801b2c0
 8012004:	0801b2e8 	.word	0x0801b2e8
 8012008:	200037a8 	.word	0x200037a8

0801200c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801200c:	b590      	push	{r4, r7, lr}
 801200e:	b08d      	sub	sp, #52	; 0x34
 8012010:	af02      	add	r7, sp, #8
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012016:	2300      	movs	r3, #0
 8012018:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d105      	bne.n	801202c <udp_input+0x20>
 8012020:	4b7c      	ldr	r3, [pc, #496]	; (8012214 <udp_input+0x208>)
 8012022:	22cf      	movs	r2, #207	; 0xcf
 8012024:	497c      	ldr	r1, [pc, #496]	; (8012218 <udp_input+0x20c>)
 8012026:	487d      	ldr	r0, [pc, #500]	; (801221c <udp_input+0x210>)
 8012028:	f005 fac6 	bl	80175b8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d105      	bne.n	801203e <udp_input+0x32>
 8012032:	4b78      	ldr	r3, [pc, #480]	; (8012214 <udp_input+0x208>)
 8012034:	22d0      	movs	r2, #208	; 0xd0
 8012036:	497a      	ldr	r1, [pc, #488]	; (8012220 <udp_input+0x214>)
 8012038:	4878      	ldr	r0, [pc, #480]	; (801221c <udp_input+0x210>)
 801203a:	f005 fabd 	bl	80175b8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	895b      	ldrh	r3, [r3, #10]
 8012042:	2b07      	cmp	r3, #7
 8012044:	d803      	bhi.n	801204e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f7f9 fa50 	bl	800b4ec <pbuf_free>
    goto end;
 801204c:	e0de      	b.n	801220c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012054:	4b73      	ldr	r3, [pc, #460]	; (8012224 <udp_input+0x218>)
 8012056:	695b      	ldr	r3, [r3, #20]
 8012058:	4a72      	ldr	r2, [pc, #456]	; (8012224 <udp_input+0x218>)
 801205a:	6812      	ldr	r2, [r2, #0]
 801205c:	4611      	mov	r1, r2
 801205e:	4618      	mov	r0, r3
 8012060:	f003 fdca 	bl	8015bf8 <ip4_addr_isbroadcast_u32>
 8012064:	4603      	mov	r3, r0
 8012066:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	881b      	ldrh	r3, [r3, #0]
 801206c:	b29b      	uxth	r3, r3
 801206e:	4618      	mov	r0, r3
 8012070:	f7f7 ff58 	bl	8009f24 <lwip_htons>
 8012074:	4603      	mov	r3, r0
 8012076:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	885b      	ldrh	r3, [r3, #2]
 801207c:	b29b      	uxth	r3, r3
 801207e:	4618      	mov	r0, r3
 8012080:	f7f7 ff50 	bl	8009f24 <lwip_htons>
 8012084:	4603      	mov	r3, r0
 8012086:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012088:	2300      	movs	r3, #0
 801208a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801208c:	2300      	movs	r3, #0
 801208e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012090:	2300      	movs	r3, #0
 8012092:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012094:	4b64      	ldr	r3, [pc, #400]	; (8012228 <udp_input+0x21c>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	627b      	str	r3, [r7, #36]	; 0x24
 801209a:	e054      	b.n	8012146 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209e:	8a5b      	ldrh	r3, [r3, #18]
 80120a0:	89fa      	ldrh	r2, [r7, #14]
 80120a2:	429a      	cmp	r2, r3
 80120a4:	d14a      	bne.n	801213c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80120a6:	7cfb      	ldrb	r3, [r7, #19]
 80120a8:	461a      	mov	r2, r3
 80120aa:	6839      	ldr	r1, [r7, #0]
 80120ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120ae:	f7ff ff49 	bl	8011f44 <udp_input_local_match>
 80120b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d041      	beq.n	801213c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	7c1b      	ldrb	r3, [r3, #16]
 80120bc:	f003 0304 	and.w	r3, r3, #4
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d11d      	bne.n	8012100 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80120c4:	69fb      	ldr	r3, [r7, #28]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d102      	bne.n	80120d0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80120ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120cc:	61fb      	str	r3, [r7, #28]
 80120ce:	e017      	b.n	8012100 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80120d0:	7cfb      	ldrb	r3, [r7, #19]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d014      	beq.n	8012100 <udp_input+0xf4>
 80120d6:	4b53      	ldr	r3, [pc, #332]	; (8012224 <udp_input+0x218>)
 80120d8:	695b      	ldr	r3, [r3, #20]
 80120da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120de:	d10f      	bne.n	8012100 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80120e0:	69fb      	ldr	r3, [r7, #28]
 80120e2:	681a      	ldr	r2, [r3, #0]
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	3304      	adds	r3, #4
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d008      	beq.n	8012100 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80120ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f0:	681a      	ldr	r2, [r3, #0]
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	3304      	adds	r3, #4
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	429a      	cmp	r2, r3
 80120fa:	d101      	bne.n	8012100 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80120fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012102:	8a9b      	ldrh	r3, [r3, #20]
 8012104:	8a3a      	ldrh	r2, [r7, #16]
 8012106:	429a      	cmp	r2, r3
 8012108:	d118      	bne.n	801213c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801210e:	2b00      	cmp	r3, #0
 8012110:	d005      	beq.n	801211e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012114:	685a      	ldr	r2, [r3, #4]
 8012116:	4b43      	ldr	r3, [pc, #268]	; (8012224 <udp_input+0x218>)
 8012118:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801211a:	429a      	cmp	r2, r3
 801211c:	d10e      	bne.n	801213c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801211e:	6a3b      	ldr	r3, [r7, #32]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d014      	beq.n	801214e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012126:	68da      	ldr	r2, [r3, #12]
 8012128:	6a3b      	ldr	r3, [r7, #32]
 801212a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801212c:	4b3e      	ldr	r3, [pc, #248]	; (8012228 <udp_input+0x21c>)
 801212e:	681a      	ldr	r2, [r3, #0]
 8012130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012132:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012134:	4a3c      	ldr	r2, [pc, #240]	; (8012228 <udp_input+0x21c>)
 8012136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012138:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801213a:	e008      	b.n	801214e <udp_input+0x142>
      }
    }

    prev = pcb;
 801213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012142:	68db      	ldr	r3, [r3, #12]
 8012144:	627b      	str	r3, [r7, #36]	; 0x24
 8012146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012148:	2b00      	cmp	r3, #0
 801214a:	d1a7      	bne.n	801209c <udp_input+0x90>
 801214c:	e000      	b.n	8012150 <udp_input+0x144>
        break;
 801214e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012152:	2b00      	cmp	r3, #0
 8012154:	d101      	bne.n	801215a <udp_input+0x14e>
    pcb = uncon_pcb;
 8012156:	69fb      	ldr	r3, [r7, #28]
 8012158:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215c:	2b00      	cmp	r3, #0
 801215e:	d002      	beq.n	8012166 <udp_input+0x15a>
    for_us = 1;
 8012160:	2301      	movs	r3, #1
 8012162:	76fb      	strb	r3, [r7, #27]
 8012164:	e00a      	b.n	801217c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	3304      	adds	r3, #4
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	4b2d      	ldr	r3, [pc, #180]	; (8012224 <udp_input+0x218>)
 801216e:	695b      	ldr	r3, [r3, #20]
 8012170:	429a      	cmp	r2, r3
 8012172:	bf0c      	ite	eq
 8012174:	2301      	moveq	r3, #1
 8012176:	2300      	movne	r3, #0
 8012178:	b2db      	uxtb	r3, r3
 801217a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801217c:	7efb      	ldrb	r3, [r7, #27]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d041      	beq.n	8012206 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012182:	2108      	movs	r1, #8
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f7f9 f92b 	bl	800b3e0 <pbuf_remove_header>
 801218a:	4603      	mov	r3, r0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d00a      	beq.n	80121a6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012190:	4b20      	ldr	r3, [pc, #128]	; (8012214 <udp_input+0x208>)
 8012192:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012196:	4925      	ldr	r1, [pc, #148]	; (801222c <udp_input+0x220>)
 8012198:	4820      	ldr	r0, [pc, #128]	; (801221c <udp_input+0x210>)
 801219a:	f005 fa0d 	bl	80175b8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7f9 f9a4 	bl	800b4ec <pbuf_free>
      goto end;
 80121a4:	e032      	b.n	801220c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80121a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d012      	beq.n	80121d2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80121ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ae:	699b      	ldr	r3, [r3, #24]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d00a      	beq.n	80121ca <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80121b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b6:	699c      	ldr	r4, [r3, #24]
 80121b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ba:	69d8      	ldr	r0, [r3, #28]
 80121bc:	8a3b      	ldrh	r3, [r7, #16]
 80121be:	9300      	str	r3, [sp, #0]
 80121c0:	4b1b      	ldr	r3, [pc, #108]	; (8012230 <udp_input+0x224>)
 80121c2:	687a      	ldr	r2, [r7, #4]
 80121c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80121c6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80121c8:	e021      	b.n	801220e <udp_input+0x202>
        pbuf_free(p);
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f7f9 f98e 	bl	800b4ec <pbuf_free>
        goto end;
 80121d0:	e01c      	b.n	801220c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80121d2:	7cfb      	ldrb	r3, [r7, #19]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d112      	bne.n	80121fe <udp_input+0x1f2>
 80121d8:	4b12      	ldr	r3, [pc, #72]	; (8012224 <udp_input+0x218>)
 80121da:	695b      	ldr	r3, [r3, #20]
 80121dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80121e0:	2be0      	cmp	r3, #224	; 0xe0
 80121e2:	d00c      	beq.n	80121fe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80121e4:	4b0f      	ldr	r3, [pc, #60]	; (8012224 <udp_input+0x218>)
 80121e6:	899b      	ldrh	r3, [r3, #12]
 80121e8:	3308      	adds	r3, #8
 80121ea:	b29b      	uxth	r3, r3
 80121ec:	b21b      	sxth	r3, r3
 80121ee:	4619      	mov	r1, r3
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f7f9 f968 	bl	800b4c6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80121f6:	2103      	movs	r1, #3
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f003 f9bf 	bl	801557c <icmp_dest_unreach>
      pbuf_free(p);
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f7f9 f974 	bl	800b4ec <pbuf_free>
  return;
 8012204:	e003      	b.n	801220e <udp_input+0x202>
    pbuf_free(p);
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f7f9 f970 	bl	800b4ec <pbuf_free>
  return;
 801220c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801220e:	372c      	adds	r7, #44	; 0x2c
 8012210:	46bd      	mov	sp, r7
 8012212:	bd90      	pop	{r4, r7, pc}
 8012214:	0801b26c 	.word	0x0801b26c
 8012218:	0801b310 	.word	0x0801b310
 801221c:	0801b2c0 	.word	0x0801b2c0
 8012220:	0801b328 	.word	0x0801b328
 8012224:	200037a8 	.word	0x200037a8
 8012228:	20006d24 	.word	0x20006d24
 801222c:	0801b344 	.word	0x0801b344
 8012230:	200037b8 	.word	0x200037b8

08012234 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b088      	sub	sp, #32
 8012238:	af02      	add	r7, sp, #8
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	607a      	str	r2, [r7, #4]
 8012240:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d109      	bne.n	801225c <udp_sendto_if+0x28>
 8012248:	4b2e      	ldr	r3, [pc, #184]	; (8012304 <udp_sendto_if+0xd0>)
 801224a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801224e:	492e      	ldr	r1, [pc, #184]	; (8012308 <udp_sendto_if+0xd4>)
 8012250:	482e      	ldr	r0, [pc, #184]	; (801230c <udp_sendto_if+0xd8>)
 8012252:	f005 f9b1 	bl	80175b8 <iprintf>
 8012256:	f06f 030f 	mvn.w	r3, #15
 801225a:	e04f      	b.n	80122fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d109      	bne.n	8012276 <udp_sendto_if+0x42>
 8012262:	4b28      	ldr	r3, [pc, #160]	; (8012304 <udp_sendto_if+0xd0>)
 8012264:	f240 2281 	movw	r2, #641	; 0x281
 8012268:	4929      	ldr	r1, [pc, #164]	; (8012310 <udp_sendto_if+0xdc>)
 801226a:	4828      	ldr	r0, [pc, #160]	; (801230c <udp_sendto_if+0xd8>)
 801226c:	f005 f9a4 	bl	80175b8 <iprintf>
 8012270:	f06f 030f 	mvn.w	r3, #15
 8012274:	e042      	b.n	80122fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d109      	bne.n	8012290 <udp_sendto_if+0x5c>
 801227c:	4b21      	ldr	r3, [pc, #132]	; (8012304 <udp_sendto_if+0xd0>)
 801227e:	f240 2282 	movw	r2, #642	; 0x282
 8012282:	4924      	ldr	r1, [pc, #144]	; (8012314 <udp_sendto_if+0xe0>)
 8012284:	4821      	ldr	r0, [pc, #132]	; (801230c <udp_sendto_if+0xd8>)
 8012286:	f005 f997 	bl	80175b8 <iprintf>
 801228a:	f06f 030f 	mvn.w	r3, #15
 801228e:	e035      	b.n	80122fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012290:	6a3b      	ldr	r3, [r7, #32]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d109      	bne.n	80122aa <udp_sendto_if+0x76>
 8012296:	4b1b      	ldr	r3, [pc, #108]	; (8012304 <udp_sendto_if+0xd0>)
 8012298:	f240 2283 	movw	r2, #643	; 0x283
 801229c:	491e      	ldr	r1, [pc, #120]	; (8012318 <udp_sendto_if+0xe4>)
 801229e:	481b      	ldr	r0, [pc, #108]	; (801230c <udp_sendto_if+0xd8>)
 80122a0:	f005 f98a 	bl	80175b8 <iprintf>
 80122a4:	f06f 030f 	mvn.w	r3, #15
 80122a8:	e028      	b.n	80122fc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d009      	beq.n	80122c4 <udp_sendto_if+0x90>
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d005      	beq.n	80122c4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122c0:	2be0      	cmp	r3, #224	; 0xe0
 80122c2:	d103      	bne.n	80122cc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80122c4:	6a3b      	ldr	r3, [r7, #32]
 80122c6:	3304      	adds	r3, #4
 80122c8:	617b      	str	r3, [r7, #20]
 80122ca:	e00b      	b.n	80122e4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	6a3b      	ldr	r3, [r7, #32]
 80122d2:	3304      	adds	r3, #4
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d002      	beq.n	80122e0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80122da:	f06f 0303 	mvn.w	r3, #3
 80122de:	e00d      	b.n	80122fc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80122e4:	887a      	ldrh	r2, [r7, #2]
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	9301      	str	r3, [sp, #4]
 80122ea:	6a3b      	ldr	r3, [r7, #32]
 80122ec:	9300      	str	r3, [sp, #0]
 80122ee:	4613      	mov	r3, r2
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	68b9      	ldr	r1, [r7, #8]
 80122f4:	68f8      	ldr	r0, [r7, #12]
 80122f6:	f000 f811 	bl	801231c <udp_sendto_if_src>
 80122fa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3718      	adds	r7, #24
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	0801b26c 	.word	0x0801b26c
 8012308:	0801b3e0 	.word	0x0801b3e0
 801230c:	0801b2c0 	.word	0x0801b2c0
 8012310:	0801b3fc 	.word	0x0801b3fc
 8012314:	0801b418 	.word	0x0801b418
 8012318:	0801b438 	.word	0x0801b438

0801231c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b08c      	sub	sp, #48	; 0x30
 8012320:	af04      	add	r7, sp, #16
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	607a      	str	r2, [r7, #4]
 8012328:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d109      	bne.n	8012344 <udp_sendto_if_src+0x28>
 8012330:	4b65      	ldr	r3, [pc, #404]	; (80124c8 <udp_sendto_if_src+0x1ac>)
 8012332:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012336:	4965      	ldr	r1, [pc, #404]	; (80124cc <udp_sendto_if_src+0x1b0>)
 8012338:	4865      	ldr	r0, [pc, #404]	; (80124d0 <udp_sendto_if_src+0x1b4>)
 801233a:	f005 f93d 	bl	80175b8 <iprintf>
 801233e:	f06f 030f 	mvn.w	r3, #15
 8012342:	e0bc      	b.n	80124be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d109      	bne.n	801235e <udp_sendto_if_src+0x42>
 801234a:	4b5f      	ldr	r3, [pc, #380]	; (80124c8 <udp_sendto_if_src+0x1ac>)
 801234c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012350:	4960      	ldr	r1, [pc, #384]	; (80124d4 <udp_sendto_if_src+0x1b8>)
 8012352:	485f      	ldr	r0, [pc, #380]	; (80124d0 <udp_sendto_if_src+0x1b4>)
 8012354:	f005 f930 	bl	80175b8 <iprintf>
 8012358:	f06f 030f 	mvn.w	r3, #15
 801235c:	e0af      	b.n	80124be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d109      	bne.n	8012378 <udp_sendto_if_src+0x5c>
 8012364:	4b58      	ldr	r3, [pc, #352]	; (80124c8 <udp_sendto_if_src+0x1ac>)
 8012366:	f240 22d3 	movw	r2, #723	; 0x2d3
 801236a:	495b      	ldr	r1, [pc, #364]	; (80124d8 <udp_sendto_if_src+0x1bc>)
 801236c:	4858      	ldr	r0, [pc, #352]	; (80124d0 <udp_sendto_if_src+0x1b4>)
 801236e:	f005 f923 	bl	80175b8 <iprintf>
 8012372:	f06f 030f 	mvn.w	r3, #15
 8012376:	e0a2      	b.n	80124be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237a:	2b00      	cmp	r3, #0
 801237c:	d109      	bne.n	8012392 <udp_sendto_if_src+0x76>
 801237e:	4b52      	ldr	r3, [pc, #328]	; (80124c8 <udp_sendto_if_src+0x1ac>)
 8012380:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012384:	4955      	ldr	r1, [pc, #340]	; (80124dc <udp_sendto_if_src+0x1c0>)
 8012386:	4852      	ldr	r0, [pc, #328]	; (80124d0 <udp_sendto_if_src+0x1b4>)
 8012388:	f005 f916 	bl	80175b8 <iprintf>
 801238c:	f06f 030f 	mvn.w	r3, #15
 8012390:	e095      	b.n	80124be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012394:	2b00      	cmp	r3, #0
 8012396:	d109      	bne.n	80123ac <udp_sendto_if_src+0x90>
 8012398:	4b4b      	ldr	r3, [pc, #300]	; (80124c8 <udp_sendto_if_src+0x1ac>)
 801239a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801239e:	4950      	ldr	r1, [pc, #320]	; (80124e0 <udp_sendto_if_src+0x1c4>)
 80123a0:	484b      	ldr	r0, [pc, #300]	; (80124d0 <udp_sendto_if_src+0x1b4>)
 80123a2:	f005 f909 	bl	80175b8 <iprintf>
 80123a6:	f06f 030f 	mvn.w	r3, #15
 80123aa:	e088      	b.n	80124be <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	8a5b      	ldrh	r3, [r3, #18]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d10f      	bne.n	80123d4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80123b4:	68f9      	ldr	r1, [r7, #12]
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	8a5b      	ldrh	r3, [r3, #18]
 80123ba:	461a      	mov	r2, r3
 80123bc:	68f8      	ldr	r0, [r7, #12]
 80123be:	f000 f893 	bl	80124e8 <udp_bind>
 80123c2:	4603      	mov	r3, r0
 80123c4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80123c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d002      	beq.n	80123d4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80123ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80123d2:	e074      	b.n	80124be <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	891b      	ldrh	r3, [r3, #8]
 80123d8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80123dc:	4293      	cmp	r3, r2
 80123de:	d902      	bls.n	80123e6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80123e0:	f04f 33ff 	mov.w	r3, #4294967295
 80123e4:	e06b      	b.n	80124be <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80123e6:	2108      	movs	r1, #8
 80123e8:	68b8      	ldr	r0, [r7, #8]
 80123ea:	f7f8 ffe9 	bl	800b3c0 <pbuf_add_header>
 80123ee:	4603      	mov	r3, r0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d015      	beq.n	8012420 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80123f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80123f8:	2108      	movs	r1, #8
 80123fa:	2022      	movs	r0, #34	; 0x22
 80123fc:	f7f8 fd92 	bl	800af24 <pbuf_alloc>
 8012400:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012402:	69fb      	ldr	r3, [r7, #28]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d102      	bne.n	801240e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012408:	f04f 33ff 	mov.w	r3, #4294967295
 801240c:	e057      	b.n	80124be <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	891b      	ldrh	r3, [r3, #8]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d006      	beq.n	8012424 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012416:	68b9      	ldr	r1, [r7, #8]
 8012418:	69f8      	ldr	r0, [r7, #28]
 801241a:	f7f9 f97f 	bl	800b71c <pbuf_chain>
 801241e:	e001      	b.n	8012424 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	895b      	ldrh	r3, [r3, #10]
 8012428:	2b07      	cmp	r3, #7
 801242a:	d806      	bhi.n	801243a <udp_sendto_if_src+0x11e>
 801242c:	4b26      	ldr	r3, [pc, #152]	; (80124c8 <udp_sendto_if_src+0x1ac>)
 801242e:	f240 320d 	movw	r2, #781	; 0x30d
 8012432:	492c      	ldr	r1, [pc, #176]	; (80124e4 <udp_sendto_if_src+0x1c8>)
 8012434:	4826      	ldr	r0, [pc, #152]	; (80124d0 <udp_sendto_if_src+0x1b4>)
 8012436:	f005 f8bf 	bl	80175b8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	8a5b      	ldrh	r3, [r3, #18]
 8012444:	4618      	mov	r0, r3
 8012446:	f7f7 fd6d 	bl	8009f24 <lwip_htons>
 801244a:	4603      	mov	r3, r0
 801244c:	461a      	mov	r2, r3
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012452:	887b      	ldrh	r3, [r7, #2]
 8012454:	4618      	mov	r0, r3
 8012456:	f7f7 fd65 	bl	8009f24 <lwip_htons>
 801245a:	4603      	mov	r3, r0
 801245c:	461a      	mov	r2, r3
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	2200      	movs	r2, #0
 8012466:	719a      	strb	r2, [r3, #6]
 8012468:	2200      	movs	r2, #0
 801246a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	891b      	ldrh	r3, [r3, #8]
 8012470:	4618      	mov	r0, r3
 8012472:	f7f7 fd57 	bl	8009f24 <lwip_htons>
 8012476:	4603      	mov	r3, r0
 8012478:	461a      	mov	r2, r3
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801247e:	2311      	movs	r3, #17
 8012480:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	7adb      	ldrb	r3, [r3, #11]
 8012486:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	7a9b      	ldrb	r3, [r3, #10]
 801248c:	7cb9      	ldrb	r1, [r7, #18]
 801248e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012490:	9202      	str	r2, [sp, #8]
 8012492:	7cfa      	ldrb	r2, [r7, #19]
 8012494:	9201      	str	r2, [sp, #4]
 8012496:	9300      	str	r3, [sp, #0]
 8012498:	460b      	mov	r3, r1
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801249e:	69f8      	ldr	r0, [r7, #28]
 80124a0:	f003 fafc 	bl	8015a9c <ip4_output_if_src>
 80124a4:	4603      	mov	r3, r0
 80124a6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80124a8:	69fa      	ldr	r2, [r7, #28]
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d004      	beq.n	80124ba <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80124b0:	69f8      	ldr	r0, [r7, #28]
 80124b2:	f7f9 f81b 	bl	800b4ec <pbuf_free>
    q = NULL;
 80124b6:	2300      	movs	r3, #0
 80124b8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80124ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3720      	adds	r7, #32
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	0801b26c 	.word	0x0801b26c
 80124cc:	0801b458 	.word	0x0801b458
 80124d0:	0801b2c0 	.word	0x0801b2c0
 80124d4:	0801b478 	.word	0x0801b478
 80124d8:	0801b498 	.word	0x0801b498
 80124dc:	0801b4bc 	.word	0x0801b4bc
 80124e0:	0801b4e0 	.word	0x0801b4e0
 80124e4:	0801b504 	.word	0x0801b504

080124e8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b086      	sub	sp, #24
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	4613      	mov	r3, r2
 80124f4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d101      	bne.n	8012500 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80124fc:	4b39      	ldr	r3, [pc, #228]	; (80125e4 <udp_bind+0xfc>)
 80124fe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d109      	bne.n	801251a <udp_bind+0x32>
 8012506:	4b38      	ldr	r3, [pc, #224]	; (80125e8 <udp_bind+0x100>)
 8012508:	f240 32b7 	movw	r2, #951	; 0x3b7
 801250c:	4937      	ldr	r1, [pc, #220]	; (80125ec <udp_bind+0x104>)
 801250e:	4838      	ldr	r0, [pc, #224]	; (80125f0 <udp_bind+0x108>)
 8012510:	f005 f852 	bl	80175b8 <iprintf>
 8012514:	f06f 030f 	mvn.w	r3, #15
 8012518:	e060      	b.n	80125dc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801251a:	2300      	movs	r3, #0
 801251c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801251e:	4b35      	ldr	r3, [pc, #212]	; (80125f4 <udp_bind+0x10c>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	617b      	str	r3, [r7, #20]
 8012524:	e009      	b.n	801253a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012526:	68fa      	ldr	r2, [r7, #12]
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	429a      	cmp	r2, r3
 801252c:	d102      	bne.n	8012534 <udp_bind+0x4c>
      rebind = 1;
 801252e:	2301      	movs	r3, #1
 8012530:	74fb      	strb	r3, [r7, #19]
      break;
 8012532:	e005      	b.n	8012540 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	617b      	str	r3, [r7, #20]
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d1f2      	bne.n	8012526 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012540:	88fb      	ldrh	r3, [r7, #6]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d109      	bne.n	801255a <udp_bind+0x72>
    port = udp_new_port();
 8012546:	f7ff fcc5 	bl	8011ed4 <udp_new_port>
 801254a:	4603      	mov	r3, r0
 801254c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801254e:	88fb      	ldrh	r3, [r7, #6]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d12c      	bne.n	80125ae <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012554:	f06f 0307 	mvn.w	r3, #7
 8012558:	e040      	b.n	80125dc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801255a:	4b26      	ldr	r3, [pc, #152]	; (80125f4 <udp_bind+0x10c>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	617b      	str	r3, [r7, #20]
 8012560:	e022      	b.n	80125a8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012562:	68fa      	ldr	r2, [r7, #12]
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	429a      	cmp	r2, r3
 8012568:	d01b      	beq.n	80125a2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	8a5b      	ldrh	r3, [r3, #18]
 801256e:	88fa      	ldrh	r2, [r7, #6]
 8012570:	429a      	cmp	r2, r3
 8012572:	d116      	bne.n	80125a2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	681a      	ldr	r2, [r3, #0]
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801257c:	429a      	cmp	r2, r3
 801257e:	d00d      	beq.n	801259c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d00a      	beq.n	801259c <udp_bind+0xb4>
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d006      	beq.n	801259c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801258e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012590:	2b00      	cmp	r3, #0
 8012592:	d003      	beq.n	801259c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d102      	bne.n	80125a2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801259c:	f06f 0307 	mvn.w	r3, #7
 80125a0:	e01c      	b.n	80125dc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	68db      	ldr	r3, [r3, #12]
 80125a6:	617b      	str	r3, [r7, #20]
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d1d9      	bne.n	8012562 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d002      	beq.n	80125ba <udp_bind+0xd2>
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	e000      	b.n	80125bc <udp_bind+0xd4>
 80125ba:	2300      	movs	r3, #0
 80125bc:	68fa      	ldr	r2, [r7, #12]
 80125be:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	88fa      	ldrh	r2, [r7, #6]
 80125c4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80125c6:	7cfb      	ldrb	r3, [r7, #19]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d106      	bne.n	80125da <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80125cc:	4b09      	ldr	r3, [pc, #36]	; (80125f4 <udp_bind+0x10c>)
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80125d4:	4a07      	ldr	r2, [pc, #28]	; (80125f4 <udp_bind+0x10c>)
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80125da:	2300      	movs	r3, #0
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3718      	adds	r7, #24
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	0801c16c 	.word	0x0801c16c
 80125e8:	0801b26c 	.word	0x0801b26c
 80125ec:	0801b534 	.word	0x0801b534
 80125f0:	0801b2c0 	.word	0x0801b2c0
 80125f4:	20006d24 	.word	0x20006d24

080125f8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b086      	sub	sp, #24
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	60b9      	str	r1, [r7, #8]
 8012602:	4613      	mov	r3, r2
 8012604:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d109      	bne.n	8012620 <udp_connect+0x28>
 801260c:	4b2c      	ldr	r3, [pc, #176]	; (80126c0 <udp_connect+0xc8>)
 801260e:	f240 4235 	movw	r2, #1077	; 0x435
 8012612:	492c      	ldr	r1, [pc, #176]	; (80126c4 <udp_connect+0xcc>)
 8012614:	482c      	ldr	r0, [pc, #176]	; (80126c8 <udp_connect+0xd0>)
 8012616:	f004 ffcf 	bl	80175b8 <iprintf>
 801261a:	f06f 030f 	mvn.w	r3, #15
 801261e:	e04b      	b.n	80126b8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d109      	bne.n	801263a <udp_connect+0x42>
 8012626:	4b26      	ldr	r3, [pc, #152]	; (80126c0 <udp_connect+0xc8>)
 8012628:	f240 4236 	movw	r2, #1078	; 0x436
 801262c:	4927      	ldr	r1, [pc, #156]	; (80126cc <udp_connect+0xd4>)
 801262e:	4826      	ldr	r0, [pc, #152]	; (80126c8 <udp_connect+0xd0>)
 8012630:	f004 ffc2 	bl	80175b8 <iprintf>
 8012634:	f06f 030f 	mvn.w	r3, #15
 8012638:	e03e      	b.n	80126b8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	8a5b      	ldrh	r3, [r3, #18]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d10f      	bne.n	8012662 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012642:	68f9      	ldr	r1, [r7, #12]
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	8a5b      	ldrh	r3, [r3, #18]
 8012648:	461a      	mov	r2, r3
 801264a:	68f8      	ldr	r0, [r7, #12]
 801264c:	f7ff ff4c 	bl	80124e8 <udp_bind>
 8012650:	4603      	mov	r3, r0
 8012652:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012654:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d002      	beq.n	8012662 <udp_connect+0x6a>
      return err;
 801265c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012660:	e02a      	b.n	80126b8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d002      	beq.n	801266e <udp_connect+0x76>
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	e000      	b.n	8012670 <udp_connect+0x78>
 801266e:	2300      	movs	r3, #0
 8012670:	68fa      	ldr	r2, [r7, #12]
 8012672:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	88fa      	ldrh	r2, [r7, #6]
 8012678:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	7c1b      	ldrb	r3, [r3, #16]
 801267e:	f043 0304 	orr.w	r3, r3, #4
 8012682:	b2da      	uxtb	r2, r3
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012688:	4b11      	ldr	r3, [pc, #68]	; (80126d0 <udp_connect+0xd8>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	617b      	str	r3, [r7, #20]
 801268e:	e008      	b.n	80126a2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	429a      	cmp	r2, r3
 8012696:	d101      	bne.n	801269c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012698:	2300      	movs	r3, #0
 801269a:	e00d      	b.n	80126b8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	68db      	ldr	r3, [r3, #12]
 80126a0:	617b      	str	r3, [r7, #20]
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d1f3      	bne.n	8012690 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80126a8:	4b09      	ldr	r3, [pc, #36]	; (80126d0 <udp_connect+0xd8>)
 80126aa:	681a      	ldr	r2, [r3, #0]
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80126b0:	4a07      	ldr	r2, [pc, #28]	; (80126d0 <udp_connect+0xd8>)
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80126b6:	2300      	movs	r3, #0
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	3718      	adds	r7, #24
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}
 80126c0:	0801b26c 	.word	0x0801b26c
 80126c4:	0801b54c 	.word	0x0801b54c
 80126c8:	0801b2c0 	.word	0x0801b2c0
 80126cc:	0801b568 	.word	0x0801b568
 80126d0:	20006d24 	.word	0x20006d24

080126d4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b084      	sub	sp, #16
 80126d8:	af00      	add	r7, sp, #0
 80126da:	60f8      	str	r0, [r7, #12]
 80126dc:	60b9      	str	r1, [r7, #8]
 80126de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d107      	bne.n	80126f6 <udp_recv+0x22>
 80126e6:	4b08      	ldr	r3, [pc, #32]	; (8012708 <udp_recv+0x34>)
 80126e8:	f240 428a 	movw	r2, #1162	; 0x48a
 80126ec:	4907      	ldr	r1, [pc, #28]	; (801270c <udp_recv+0x38>)
 80126ee:	4808      	ldr	r0, [pc, #32]	; (8012710 <udp_recv+0x3c>)
 80126f0:	f004 ff62 	bl	80175b8 <iprintf>
 80126f4:	e005      	b.n	8012702 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	68ba      	ldr	r2, [r7, #8]
 80126fa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	687a      	ldr	r2, [r7, #4]
 8012700:	61da      	str	r2, [r3, #28]
}
 8012702:	3710      	adds	r7, #16
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}
 8012708:	0801b26c 	.word	0x0801b26c
 801270c:	0801b5a0 	.word	0x0801b5a0
 8012710:	0801b2c0 	.word	0x0801b2c0

08012714 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b084      	sub	sp, #16
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d107      	bne.n	8012732 <udp_remove+0x1e>
 8012722:	4b19      	ldr	r3, [pc, #100]	; (8012788 <udp_remove+0x74>)
 8012724:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012728:	4918      	ldr	r1, [pc, #96]	; (801278c <udp_remove+0x78>)
 801272a:	4819      	ldr	r0, [pc, #100]	; (8012790 <udp_remove+0x7c>)
 801272c:	f004 ff44 	bl	80175b8 <iprintf>
 8012730:	e026      	b.n	8012780 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012732:	4b18      	ldr	r3, [pc, #96]	; (8012794 <udp_remove+0x80>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	429a      	cmp	r2, r3
 801273a:	d105      	bne.n	8012748 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801273c:	4b15      	ldr	r3, [pc, #84]	; (8012794 <udp_remove+0x80>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	68db      	ldr	r3, [r3, #12]
 8012742:	4a14      	ldr	r2, [pc, #80]	; (8012794 <udp_remove+0x80>)
 8012744:	6013      	str	r3, [r2, #0]
 8012746:	e017      	b.n	8012778 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012748:	4b12      	ldr	r3, [pc, #72]	; (8012794 <udp_remove+0x80>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	60fb      	str	r3, [r7, #12]
 801274e:	e010      	b.n	8012772 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	68db      	ldr	r3, [r3, #12]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d009      	beq.n	801276c <udp_remove+0x58>
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	68db      	ldr	r3, [r3, #12]
 801275c:	687a      	ldr	r2, [r7, #4]
 801275e:	429a      	cmp	r2, r3
 8012760:	d104      	bne.n	801276c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	68da      	ldr	r2, [r3, #12]
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	60da      	str	r2, [r3, #12]
        break;
 801276a:	e005      	b.n	8012778 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	60fb      	str	r3, [r7, #12]
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d1eb      	bne.n	8012750 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012778:	6879      	ldr	r1, [r7, #4]
 801277a:	2000      	movs	r0, #0
 801277c:	f7f8 f89c 	bl	800a8b8 <memp_free>
}
 8012780:	3710      	adds	r7, #16
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	0801b26c 	.word	0x0801b26c
 801278c:	0801b5b8 	.word	0x0801b5b8
 8012790:	0801b2c0 	.word	0x0801b2c0
 8012794:	20006d24 	.word	0x20006d24

08012798 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801279e:	2000      	movs	r0, #0
 80127a0:	f7f8 f83e 	bl	800a820 <memp_malloc>
 80127a4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d007      	beq.n	80127bc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80127ac:	2220      	movs	r2, #32
 80127ae:	2100      	movs	r1, #0
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f004 fef9 	bl	80175a8 <memset>
    pcb->ttl = UDP_TTL;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	22ff      	movs	r2, #255	; 0xff
 80127ba:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80127bc:	687b      	ldr	r3, [r7, #4]
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3708      	adds	r7, #8
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}
	...

080127c8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80127c8:	b480      	push	{r7}
 80127ca:	b085      	sub	sp, #20
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d01e      	beq.n	8012816 <udp_netif_ip_addr_changed+0x4e>
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d01a      	beq.n	8012816 <udp_netif_ip_addr_changed+0x4e>
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d017      	beq.n	8012816 <udp_netif_ip_addr_changed+0x4e>
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d013      	beq.n	8012816 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80127ee:	4b0d      	ldr	r3, [pc, #52]	; (8012824 <udp_netif_ip_addr_changed+0x5c>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	60fb      	str	r3, [r7, #12]
 80127f4:	e00c      	b.n	8012810 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	681a      	ldr	r2, [r3, #0]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	429a      	cmp	r2, r3
 8012800:	d103      	bne.n	801280a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	681a      	ldr	r2, [r3, #0]
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	60fb      	str	r3, [r7, #12]
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d1ef      	bne.n	80127f6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012816:	bf00      	nop
 8012818:	3714      	adds	r7, #20
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr
 8012822:	bf00      	nop
 8012824:	20006d24 	.word	0x20006d24

08012828 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801282c:	4b20      	ldr	r3, [pc, #128]	; (80128b0 <dhcp_inc_pcb_refcount+0x88>)
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d133      	bne.n	801289c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012834:	4b1f      	ldr	r3, [pc, #124]	; (80128b4 <dhcp_inc_pcb_refcount+0x8c>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d005      	beq.n	8012848 <dhcp_inc_pcb_refcount+0x20>
 801283c:	4b1e      	ldr	r3, [pc, #120]	; (80128b8 <dhcp_inc_pcb_refcount+0x90>)
 801283e:	22e5      	movs	r2, #229	; 0xe5
 8012840:	491e      	ldr	r1, [pc, #120]	; (80128bc <dhcp_inc_pcb_refcount+0x94>)
 8012842:	481f      	ldr	r0, [pc, #124]	; (80128c0 <dhcp_inc_pcb_refcount+0x98>)
 8012844:	f004 feb8 	bl	80175b8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012848:	f7ff ffa6 	bl	8012798 <udp_new>
 801284c:	4603      	mov	r3, r0
 801284e:	4a19      	ldr	r2, [pc, #100]	; (80128b4 <dhcp_inc_pcb_refcount+0x8c>)
 8012850:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8012852:	4b18      	ldr	r3, [pc, #96]	; (80128b4 <dhcp_inc_pcb_refcount+0x8c>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d102      	bne.n	8012860 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801285a:	f04f 33ff 	mov.w	r3, #4294967295
 801285e:	e024      	b.n	80128aa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012860:	4b14      	ldr	r3, [pc, #80]	; (80128b4 <dhcp_inc_pcb_refcount+0x8c>)
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	7a5a      	ldrb	r2, [r3, #9]
 8012866:	4b13      	ldr	r3, [pc, #76]	; (80128b4 <dhcp_inc_pcb_refcount+0x8c>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	f042 0220 	orr.w	r2, r2, #32
 801286e:	b2d2      	uxtb	r2, r2
 8012870:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8012872:	4b10      	ldr	r3, [pc, #64]	; (80128b4 <dhcp_inc_pcb_refcount+0x8c>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	2244      	movs	r2, #68	; 0x44
 8012878:	4912      	ldr	r1, [pc, #72]	; (80128c4 <dhcp_inc_pcb_refcount+0x9c>)
 801287a:	4618      	mov	r0, r3
 801287c:	f7ff fe34 	bl	80124e8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012880:	4b0c      	ldr	r3, [pc, #48]	; (80128b4 <dhcp_inc_pcb_refcount+0x8c>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	2243      	movs	r2, #67	; 0x43
 8012886:	490f      	ldr	r1, [pc, #60]	; (80128c4 <dhcp_inc_pcb_refcount+0x9c>)
 8012888:	4618      	mov	r0, r3
 801288a:	f7ff feb5 	bl	80125f8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801288e:	4b09      	ldr	r3, [pc, #36]	; (80128b4 <dhcp_inc_pcb_refcount+0x8c>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2200      	movs	r2, #0
 8012894:	490c      	ldr	r1, [pc, #48]	; (80128c8 <dhcp_inc_pcb_refcount+0xa0>)
 8012896:	4618      	mov	r0, r3
 8012898:	f7ff ff1c 	bl	80126d4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801289c:	4b04      	ldr	r3, [pc, #16]	; (80128b0 <dhcp_inc_pcb_refcount+0x88>)
 801289e:	781b      	ldrb	r3, [r3, #0]
 80128a0:	3301      	adds	r3, #1
 80128a2:	b2da      	uxtb	r2, r3
 80128a4:	4b02      	ldr	r3, [pc, #8]	; (80128b0 <dhcp_inc_pcb_refcount+0x88>)
 80128a6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80128a8:	2300      	movs	r3, #0
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	bd80      	pop	{r7, pc}
 80128ae:	bf00      	nop
 80128b0:	2000029c 	.word	0x2000029c
 80128b4:	20000298 	.word	0x20000298
 80128b8:	0801b5d0 	.word	0x0801b5d0
 80128bc:	0801b608 	.word	0x0801b608
 80128c0:	0801b630 	.word	0x0801b630
 80128c4:	0801c16c 	.word	0x0801c16c
 80128c8:	080140e5 	.word	0x080140e5

080128cc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80128d0:	4b0e      	ldr	r3, [pc, #56]	; (801290c <dhcp_dec_pcb_refcount+0x40>)
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d105      	bne.n	80128e4 <dhcp_dec_pcb_refcount+0x18>
 80128d8:	4b0d      	ldr	r3, [pc, #52]	; (8012910 <dhcp_dec_pcb_refcount+0x44>)
 80128da:	22ff      	movs	r2, #255	; 0xff
 80128dc:	490d      	ldr	r1, [pc, #52]	; (8012914 <dhcp_dec_pcb_refcount+0x48>)
 80128de:	480e      	ldr	r0, [pc, #56]	; (8012918 <dhcp_dec_pcb_refcount+0x4c>)
 80128e0:	f004 fe6a 	bl	80175b8 <iprintf>
  dhcp_pcb_refcount--;
 80128e4:	4b09      	ldr	r3, [pc, #36]	; (801290c <dhcp_dec_pcb_refcount+0x40>)
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	3b01      	subs	r3, #1
 80128ea:	b2da      	uxtb	r2, r3
 80128ec:	4b07      	ldr	r3, [pc, #28]	; (801290c <dhcp_dec_pcb_refcount+0x40>)
 80128ee:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80128f0:	4b06      	ldr	r3, [pc, #24]	; (801290c <dhcp_dec_pcb_refcount+0x40>)
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d107      	bne.n	8012908 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80128f8:	4b08      	ldr	r3, [pc, #32]	; (801291c <dhcp_dec_pcb_refcount+0x50>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7ff ff09 	bl	8012714 <udp_remove>
    dhcp_pcb = NULL;
 8012902:	4b06      	ldr	r3, [pc, #24]	; (801291c <dhcp_dec_pcb_refcount+0x50>)
 8012904:	2200      	movs	r2, #0
 8012906:	601a      	str	r2, [r3, #0]
  }
}
 8012908:	bf00      	nop
 801290a:	bd80      	pop	{r7, pc}
 801290c:	2000029c 	.word	0x2000029c
 8012910:	0801b5d0 	.word	0x0801b5d0
 8012914:	0801b658 	.word	0x0801b658
 8012918:	0801b630 	.word	0x0801b630
 801291c:	20000298 	.word	0x20000298

08012920 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801292c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801292e:	210c      	movs	r1, #12
 8012930:	68f8      	ldr	r0, [r7, #12]
 8012932:	f001 f819 	bl	8013968 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012936:	4b06      	ldr	r3, [pc, #24]	; (8012950 <dhcp_handle_nak+0x30>)
 8012938:	4a05      	ldr	r2, [pc, #20]	; (8012950 <dhcp_handle_nak+0x30>)
 801293a:	4905      	ldr	r1, [pc, #20]	; (8012950 <dhcp_handle_nak+0x30>)
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f7f8 f95d 	bl	800abfc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f000 fc0c 	bl	8013160 <dhcp_discover>
}
 8012948:	bf00      	nop
 801294a:	3710      	adds	r7, #16
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}
 8012950:	0801c16c 	.word	0x0801c16c

08012954 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b084      	sub	sp, #16
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012960:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012962:	2108      	movs	r1, #8
 8012964:	68f8      	ldr	r0, [r7, #12]
 8012966:	f000 ffff 	bl	8013968 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	331c      	adds	r3, #28
 801296e:	2200      	movs	r2, #0
 8012970:	4619      	mov	r1, r3
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f002 fb00 	bl	8014f78 <etharp_query>
 8012978:	4603      	mov	r3, r0
 801297a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	799b      	ldrb	r3, [r3, #6]
 8012980:	2bff      	cmp	r3, #255	; 0xff
 8012982:	d005      	beq.n	8012990 <dhcp_check+0x3c>
    dhcp->tries++;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	799b      	ldrb	r3, [r3, #6]
 8012988:	3301      	adds	r3, #1
 801298a:	b2da      	uxtb	r2, r3
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012990:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012994:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012996:	893b      	ldrh	r3, [r7, #8]
 8012998:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801299c:	4a06      	ldr	r2, [pc, #24]	; (80129b8 <dhcp_check+0x64>)
 801299e:	fb82 1203 	smull	r1, r2, r2, r3
 80129a2:	1152      	asrs	r2, r2, #5
 80129a4:	17db      	asrs	r3, r3, #31
 80129a6:	1ad3      	subs	r3, r2, r3
 80129a8:	b29a      	uxth	r2, r3
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80129ae:	bf00      	nop
 80129b0:	3710      	adds	r7, #16
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}
 80129b6:	bf00      	nop
 80129b8:	10624dd3 	.word	0x10624dd3

080129bc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b084      	sub	sp, #16
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
 80129c4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80129cc:	4b0c      	ldr	r3, [pc, #48]	; (8012a00 <dhcp_handle_offer+0x44>)
 80129ce:	789b      	ldrb	r3, [r3, #2]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d011      	beq.n	80129f8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2200      	movs	r2, #0
 80129d8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80129da:	4b0a      	ldr	r3, [pc, #40]	; (8012a04 <dhcp_handle_offer+0x48>)
 80129dc:	689b      	ldr	r3, [r3, #8]
 80129de:	4618      	mov	r0, r3
 80129e0:	f7f7 fab5 	bl	8009f4e <lwip_htonl>
 80129e4:	4602      	mov	r2, r0
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	691a      	ldr	r2, [r3, #16]
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80129f2:	6878      	ldr	r0, [r7, #4]
 80129f4:	f000 f808 	bl	8012a08 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80129f8:	bf00      	nop
 80129fa:	3710      	adds	r7, #16
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	20006d28 	.word	0x20006d28
 8012a04:	20006d30 	.word	0x20006d30

08012a08 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012a08:	b5b0      	push	{r4, r5, r7, lr}
 8012a0a:	b08a      	sub	sp, #40	; 0x28
 8012a0c:	af02      	add	r7, sp, #8
 8012a0e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d109      	bne.n	8012a2a <dhcp_select+0x22>
 8012a16:	4b71      	ldr	r3, [pc, #452]	; (8012bdc <dhcp_select+0x1d4>)
 8012a18:	f240 1277 	movw	r2, #375	; 0x177
 8012a1c:	4970      	ldr	r1, [pc, #448]	; (8012be0 <dhcp_select+0x1d8>)
 8012a1e:	4871      	ldr	r0, [pc, #452]	; (8012be4 <dhcp_select+0x1dc>)
 8012a20:	f004 fdca 	bl	80175b8 <iprintf>
 8012a24:	f06f 030f 	mvn.w	r3, #15
 8012a28:	e0d3      	b.n	8012bd2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a2e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012a30:	69bb      	ldr	r3, [r7, #24]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d109      	bne.n	8012a4a <dhcp_select+0x42>
 8012a36:	4b69      	ldr	r3, [pc, #420]	; (8012bdc <dhcp_select+0x1d4>)
 8012a38:	f240 1279 	movw	r2, #377	; 0x179
 8012a3c:	496a      	ldr	r1, [pc, #424]	; (8012be8 <dhcp_select+0x1e0>)
 8012a3e:	4869      	ldr	r0, [pc, #420]	; (8012be4 <dhcp_select+0x1dc>)
 8012a40:	f004 fdba 	bl	80175b8 <iprintf>
 8012a44:	f06f 0305 	mvn.w	r3, #5
 8012a48:	e0c3      	b.n	8012bd2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012a4a:	2101      	movs	r1, #1
 8012a4c:	69b8      	ldr	r0, [r7, #24]
 8012a4e:	f000 ff8b 	bl	8013968 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012a52:	f107 030c 	add.w	r3, r7, #12
 8012a56:	2203      	movs	r2, #3
 8012a58:	69b9      	ldr	r1, [r7, #24]
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f001 fc10 	bl	8014280 <dhcp_create_msg>
 8012a60:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	f000 8085 	beq.w	8012b74 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012a70:	89b8      	ldrh	r0, [r7, #12]
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a78:	2302      	movs	r3, #2
 8012a7a:	2239      	movs	r2, #57	; 0x39
 8012a7c:	f000 ff8e 	bl	801399c <dhcp_option>
 8012a80:	4603      	mov	r3, r0
 8012a82:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012a84:	89b8      	ldrh	r0, [r7, #12]
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a90:	461a      	mov	r2, r3
 8012a92:	f000 ffdd 	bl	8013a50 <dhcp_option_short>
 8012a96:	4603      	mov	r3, r0
 8012a98:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012a9a:	89b8      	ldrh	r0, [r7, #12]
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012aa2:	2304      	movs	r3, #4
 8012aa4:	2232      	movs	r2, #50	; 0x32
 8012aa6:	f000 ff79 	bl	801399c <dhcp_option>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012aae:	89bc      	ldrh	r4, [r7, #12]
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012ab6:	69bb      	ldr	r3, [r7, #24]
 8012ab8:	69db      	ldr	r3, [r3, #28]
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7f7 fa47 	bl	8009f4e <lwip_htonl>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	4629      	mov	r1, r5
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	f000 fff4 	bl	8013ab4 <dhcp_option_long>
 8012acc:	4603      	mov	r3, r0
 8012ace:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012ad0:	89b8      	ldrh	r0, [r7, #12]
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012ad8:	2304      	movs	r3, #4
 8012ada:	2236      	movs	r2, #54	; 0x36
 8012adc:	f000 ff5e 	bl	801399c <dhcp_option>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012ae4:	89bc      	ldrh	r4, [r7, #12]
 8012ae6:	693b      	ldr	r3, [r7, #16]
 8012ae8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012aec:	69bb      	ldr	r3, [r7, #24]
 8012aee:	699b      	ldr	r3, [r3, #24]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7f7 fa2c 	bl	8009f4e <lwip_htonl>
 8012af6:	4603      	mov	r3, r0
 8012af8:	461a      	mov	r2, r3
 8012afa:	4629      	mov	r1, r5
 8012afc:	4620      	mov	r0, r4
 8012afe:	f000 ffd9 	bl	8013ab4 <dhcp_option_long>
 8012b02:	4603      	mov	r3, r0
 8012b04:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012b06:	89b8      	ldrh	r0, [r7, #12]
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b0e:	2303      	movs	r3, #3
 8012b10:	2237      	movs	r2, #55	; 0x37
 8012b12:	f000 ff43 	bl	801399c <dhcp_option>
 8012b16:	4603      	mov	r3, r0
 8012b18:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	77bb      	strb	r3, [r7, #30]
 8012b1e:	e00e      	b.n	8012b3e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012b20:	89b8      	ldrh	r0, [r7, #12]
 8012b22:	693b      	ldr	r3, [r7, #16]
 8012b24:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b28:	7fbb      	ldrb	r3, [r7, #30]
 8012b2a:	4a30      	ldr	r2, [pc, #192]	; (8012bec <dhcp_select+0x1e4>)
 8012b2c:	5cd3      	ldrb	r3, [r2, r3]
 8012b2e:	461a      	mov	r2, r3
 8012b30:	f000 ff68 	bl	8013a04 <dhcp_option_byte>
 8012b34:	4603      	mov	r3, r0
 8012b36:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b38:	7fbb      	ldrb	r3, [r7, #30]
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	77bb      	strb	r3, [r7, #30]
 8012b3e:	7fbb      	ldrb	r3, [r7, #30]
 8012b40:	2b02      	cmp	r3, #2
 8012b42:	d9ed      	bls.n	8012b20 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012b44:	89b8      	ldrh	r0, [r7, #12]
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	33f0      	adds	r3, #240	; 0xf0
 8012b4a:	697a      	ldr	r2, [r7, #20]
 8012b4c:	4619      	mov	r1, r3
 8012b4e:	f001 fc6d 	bl	801442c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012b52:	4b27      	ldr	r3, [pc, #156]	; (8012bf0 <dhcp_select+0x1e8>)
 8012b54:	6818      	ldr	r0, [r3, #0]
 8012b56:	4b27      	ldr	r3, [pc, #156]	; (8012bf4 <dhcp_select+0x1ec>)
 8012b58:	9301      	str	r3, [sp, #4]
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	9300      	str	r3, [sp, #0]
 8012b5e:	2343      	movs	r3, #67	; 0x43
 8012b60:	4a25      	ldr	r2, [pc, #148]	; (8012bf8 <dhcp_select+0x1f0>)
 8012b62:	6979      	ldr	r1, [r7, #20]
 8012b64:	f7ff fbda 	bl	801231c <udp_sendto_if_src>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012b6c:	6978      	ldr	r0, [r7, #20]
 8012b6e:	f7f8 fcbd 	bl	800b4ec <pbuf_free>
 8012b72:	e001      	b.n	8012b78 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012b74:	23ff      	movs	r3, #255	; 0xff
 8012b76:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012b78:	69bb      	ldr	r3, [r7, #24]
 8012b7a:	799b      	ldrb	r3, [r3, #6]
 8012b7c:	2bff      	cmp	r3, #255	; 0xff
 8012b7e:	d005      	beq.n	8012b8c <dhcp_select+0x184>
    dhcp->tries++;
 8012b80:	69bb      	ldr	r3, [r7, #24]
 8012b82:	799b      	ldrb	r3, [r3, #6]
 8012b84:	3301      	adds	r3, #1
 8012b86:	b2da      	uxtb	r2, r3
 8012b88:	69bb      	ldr	r3, [r7, #24]
 8012b8a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012b8c:	69bb      	ldr	r3, [r7, #24]
 8012b8e:	799b      	ldrb	r3, [r3, #6]
 8012b90:	2b05      	cmp	r3, #5
 8012b92:	d80d      	bhi.n	8012bb0 <dhcp_select+0x1a8>
 8012b94:	69bb      	ldr	r3, [r7, #24]
 8012b96:	799b      	ldrb	r3, [r3, #6]
 8012b98:	461a      	mov	r2, r3
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	4093      	lsls	r3, r2
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	461a      	mov	r2, r3
 8012ba2:	0152      	lsls	r2, r2, #5
 8012ba4:	1ad2      	subs	r2, r2, r3
 8012ba6:	0092      	lsls	r2, r2, #2
 8012ba8:	4413      	add	r3, r2
 8012baa:	00db      	lsls	r3, r3, #3
 8012bac:	b29b      	uxth	r3, r3
 8012bae:	e001      	b.n	8012bb4 <dhcp_select+0x1ac>
 8012bb0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012bb4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012bb6:	89fb      	ldrh	r3, [r7, #14]
 8012bb8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012bbc:	4a0f      	ldr	r2, [pc, #60]	; (8012bfc <dhcp_select+0x1f4>)
 8012bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8012bc2:	1152      	asrs	r2, r2, #5
 8012bc4:	17db      	asrs	r3, r3, #31
 8012bc6:	1ad3      	subs	r3, r2, r3
 8012bc8:	b29a      	uxth	r2, r3
 8012bca:	69bb      	ldr	r3, [r7, #24]
 8012bcc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012bce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3720      	adds	r7, #32
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	0801b5d0 	.word	0x0801b5d0
 8012be0:	0801b67c 	.word	0x0801b67c
 8012be4:	0801b630 	.word	0x0801b630
 8012be8:	0801b698 	.word	0x0801b698
 8012bec:	20000128 	.word	0x20000128
 8012bf0:	20000298 	.word	0x20000298
 8012bf4:	0801c16c 	.word	0x0801c16c
 8012bf8:	0801c170 	.word	0x0801c170
 8012bfc:	10624dd3 	.word	0x10624dd3

08012c00 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b082      	sub	sp, #8
 8012c04:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012c06:	4b27      	ldr	r3, [pc, #156]	; (8012ca4 <dhcp_coarse_tmr+0xa4>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	607b      	str	r3, [r7, #4]
 8012c0c:	e042      	b.n	8012c94 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c12:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d039      	beq.n	8012c8e <dhcp_coarse_tmr+0x8e>
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	795b      	ldrb	r3, [r3, #5]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d035      	beq.n	8012c8e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	8a9b      	ldrh	r3, [r3, #20]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d012      	beq.n	8012c50 <dhcp_coarse_tmr+0x50>
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	8a5b      	ldrh	r3, [r3, #18]
 8012c2e:	3301      	adds	r3, #1
 8012c30:	b29a      	uxth	r2, r3
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	825a      	strh	r2, [r3, #18]
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	8a5a      	ldrh	r2, [r3, #18]
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	8a9b      	ldrh	r3, [r3, #20]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d106      	bne.n	8012c50 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012c42:	6878      	ldr	r0, [r7, #4]
 8012c44:	f000 fdf6 	bl	8013834 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f000 f969 	bl	8012f20 <dhcp_start>
 8012c4e:	e01e      	b.n	8012c8e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	8a1b      	ldrh	r3, [r3, #16]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d00b      	beq.n	8012c70 <dhcp_coarse_tmr+0x70>
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	8a1b      	ldrh	r3, [r3, #16]
 8012c5c:	1e5a      	subs	r2, r3, #1
 8012c5e:	b291      	uxth	r1, r2
 8012c60:	683a      	ldr	r2, [r7, #0]
 8012c62:	8211      	strh	r1, [r2, #16]
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d103      	bne.n	8012c70 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f000 f8c6 	bl	8012dfa <dhcp_t2_timeout>
 8012c6e:	e00e      	b.n	8012c8e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	89db      	ldrh	r3, [r3, #14]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d00a      	beq.n	8012c8e <dhcp_coarse_tmr+0x8e>
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	89db      	ldrh	r3, [r3, #14]
 8012c7c:	1e5a      	subs	r2, r3, #1
 8012c7e:	b291      	uxth	r1, r2
 8012c80:	683a      	ldr	r2, [r7, #0]
 8012c82:	81d1      	strh	r1, [r2, #14]
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d102      	bne.n	8012c8e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f000 f888 	bl	8012d9e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	607b      	str	r3, [r7, #4]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d1b9      	bne.n	8012c0e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012c9a:	bf00      	nop
 8012c9c:	bf00      	nop
 8012c9e:	3708      	adds	r7, #8
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}
 8012ca4:	20006cfc 	.word	0x20006cfc

08012ca8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012cae:	4b16      	ldr	r3, [pc, #88]	; (8012d08 <dhcp_fine_tmr+0x60>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	607b      	str	r3, [r7, #4]
 8012cb4:	e020      	b.n	8012cf8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cba:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d017      	beq.n	8012cf2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	891b      	ldrh	r3, [r3, #8]
 8012cc6:	2b01      	cmp	r3, #1
 8012cc8:	d906      	bls.n	8012cd8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	891b      	ldrh	r3, [r3, #8]
 8012cce:	3b01      	subs	r3, #1
 8012cd0:	b29a      	uxth	r2, r3
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	811a      	strh	r2, [r3, #8]
 8012cd6:	e00c      	b.n	8012cf2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	891b      	ldrh	r3, [r3, #8]
 8012cdc:	2b01      	cmp	r3, #1
 8012cde:	d108      	bne.n	8012cf2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	891b      	ldrh	r3, [r3, #8]
 8012ce4:	3b01      	subs	r3, #1
 8012ce6:	b29a      	uxth	r2, r3
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f000 f80d 	bl	8012d0c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	607b      	str	r3, [r7, #4]
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d1db      	bne.n	8012cb6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012cfe:	bf00      	nop
 8012d00:	bf00      	nop
 8012d02:	3708      	adds	r7, #8
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}
 8012d08:	20006cfc 	.word	0x20006cfc

08012d0c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b084      	sub	sp, #16
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d18:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	795b      	ldrb	r3, [r3, #5]
 8012d1e:	2b0c      	cmp	r3, #12
 8012d20:	d003      	beq.n	8012d2a <dhcp_timeout+0x1e>
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	795b      	ldrb	r3, [r3, #5]
 8012d26:	2b06      	cmp	r3, #6
 8012d28:	d103      	bne.n	8012d32 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f000 fa18 	bl	8013160 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012d30:	e031      	b.n	8012d96 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	795b      	ldrb	r3, [r3, #5]
 8012d36:	2b01      	cmp	r3, #1
 8012d38:	d10e      	bne.n	8012d58 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	799b      	ldrb	r3, [r3, #6]
 8012d3e:	2b05      	cmp	r3, #5
 8012d40:	d803      	bhi.n	8012d4a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f7ff fe60 	bl	8012a08 <dhcp_select>
}
 8012d48:	e025      	b.n	8012d96 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f000 fd72 	bl	8013834 <dhcp_release_and_stop>
      dhcp_start(netif);
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f000 f8e5 	bl	8012f20 <dhcp_start>
}
 8012d56:	e01e      	b.n	8012d96 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	795b      	ldrb	r3, [r3, #5]
 8012d5c:	2b08      	cmp	r3, #8
 8012d5e:	d10b      	bne.n	8012d78 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	799b      	ldrb	r3, [r3, #6]
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	d803      	bhi.n	8012d70 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7ff fdf3 	bl	8012954 <dhcp_check>
}
 8012d6e:	e012      	b.n	8012d96 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f000 fa97 	bl	80132a4 <dhcp_bind>
}
 8012d76:	e00e      	b.n	8012d96 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	795b      	ldrb	r3, [r3, #5]
 8012d7c:	2b03      	cmp	r3, #3
 8012d7e:	d10a      	bne.n	8012d96 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	799b      	ldrb	r3, [r3, #6]
 8012d84:	2b01      	cmp	r3, #1
 8012d86:	d803      	bhi.n	8012d90 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f000 fc9d 	bl	80136c8 <dhcp_reboot>
}
 8012d8e:	e002      	b.n	8012d96 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f000 f9e5 	bl	8013160 <dhcp_discover>
}
 8012d96:	bf00      	nop
 8012d98:	3710      	adds	r7, #16
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}

08012d9e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012d9e:	b580      	push	{r7, lr}
 8012da0:	b084      	sub	sp, #16
 8012da2:	af00      	add	r7, sp, #0
 8012da4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012daa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	795b      	ldrb	r3, [r3, #5]
 8012db0:	2b01      	cmp	r3, #1
 8012db2:	d007      	beq.n	8012dc4 <dhcp_t1_timeout+0x26>
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	795b      	ldrb	r3, [r3, #5]
 8012db8:	2b0a      	cmp	r3, #10
 8012dba:	d003      	beq.n	8012dc4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012dc0:	2b05      	cmp	r3, #5
 8012dc2:	d116      	bne.n	8012df2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f000 fb47 	bl	8013458 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	899b      	ldrh	r3, [r3, #12]
 8012dce:	461a      	mov	r2, r3
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	8a5b      	ldrh	r3, [r3, #18]
 8012dd4:	1ad3      	subs	r3, r2, r3
 8012dd6:	2b01      	cmp	r3, #1
 8012dd8:	dd0b      	ble.n	8012df2 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	899b      	ldrh	r3, [r3, #12]
 8012dde:	461a      	mov	r2, r3
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	8a5b      	ldrh	r3, [r3, #18]
 8012de4:	1ad3      	subs	r3, r2, r3
 8012de6:	0fda      	lsrs	r2, r3, #31
 8012de8:	4413      	add	r3, r2
 8012dea:	105b      	asrs	r3, r3, #1
 8012dec:	b29a      	uxth	r2, r3
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012df2:	bf00      	nop
 8012df4:	3710      	adds	r7, #16
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}

08012dfa <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012dfa:	b580      	push	{r7, lr}
 8012dfc:	b084      	sub	sp, #16
 8012dfe:	af00      	add	r7, sp, #0
 8012e00:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e06:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	795b      	ldrb	r3, [r3, #5]
 8012e0c:	2b01      	cmp	r3, #1
 8012e0e:	d00b      	beq.n	8012e28 <dhcp_t2_timeout+0x2e>
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	795b      	ldrb	r3, [r3, #5]
 8012e14:	2b0a      	cmp	r3, #10
 8012e16:	d007      	beq.n	8012e28 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012e1c:	2b05      	cmp	r3, #5
 8012e1e:	d003      	beq.n	8012e28 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	795b      	ldrb	r3, [r3, #5]
 8012e24:	2b04      	cmp	r3, #4
 8012e26:	d116      	bne.n	8012e56 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f000 fbb1 	bl	8013590 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	8a9b      	ldrh	r3, [r3, #20]
 8012e32:	461a      	mov	r2, r3
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	8a5b      	ldrh	r3, [r3, #18]
 8012e38:	1ad3      	subs	r3, r2, r3
 8012e3a:	2b01      	cmp	r3, #1
 8012e3c:	dd0b      	ble.n	8012e56 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	8a9b      	ldrh	r3, [r3, #20]
 8012e42:	461a      	mov	r2, r3
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	8a5b      	ldrh	r3, [r3, #18]
 8012e48:	1ad3      	subs	r3, r2, r3
 8012e4a:	0fda      	lsrs	r2, r3, #31
 8012e4c:	4413      	add	r3, r2
 8012e4e:	105b      	asrs	r3, r3, #1
 8012e50:	b29a      	uxth	r2, r3
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8012e56:	bf00      	nop
 8012e58:	3710      	adds	r7, #16
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
	...

08012e60 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b084      	sub	sp, #16
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e6e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	2200      	movs	r2, #0
 8012e74:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012e7c:	4b26      	ldr	r3, [pc, #152]	; (8012f18 <dhcp_handle_ack+0xb8>)
 8012e7e:	78db      	ldrb	r3, [r3, #3]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d003      	beq.n	8012e8c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012e84:	4b25      	ldr	r3, [pc, #148]	; (8012f1c <dhcp_handle_ack+0xbc>)
 8012e86:	68da      	ldr	r2, [r3, #12]
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012e8c:	4b22      	ldr	r3, [pc, #136]	; (8012f18 <dhcp_handle_ack+0xb8>)
 8012e8e:	791b      	ldrb	r3, [r3, #4]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d004      	beq.n	8012e9e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012e94:	4b21      	ldr	r3, [pc, #132]	; (8012f1c <dhcp_handle_ack+0xbc>)
 8012e96:	691a      	ldr	r2, [r3, #16]
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8012e9c:	e004      	b.n	8012ea8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ea2:	085a      	lsrs	r2, r3, #1
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012ea8:	4b1b      	ldr	r3, [pc, #108]	; (8012f18 <dhcp_handle_ack+0xb8>)
 8012eaa:	795b      	ldrb	r3, [r3, #5]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d004      	beq.n	8012eba <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012eb0:	4b1a      	ldr	r3, [pc, #104]	; (8012f1c <dhcp_handle_ack+0xbc>)
 8012eb2:	695a      	ldr	r2, [r3, #20]
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8012eb8:	e007      	b.n	8012eca <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ebe:	4613      	mov	r3, r2
 8012ec0:	00db      	lsls	r3, r3, #3
 8012ec2:	1a9b      	subs	r3, r3, r2
 8012ec4:	08da      	lsrs	r2, r3, #3
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	691a      	ldr	r2, [r3, #16]
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8012ed2:	4b11      	ldr	r3, [pc, #68]	; (8012f18 <dhcp_handle_ack+0xb8>)
 8012ed4:	799b      	ldrb	r3, [r3, #6]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d00b      	beq.n	8012ef2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012eda:	4b10      	ldr	r3, [pc, #64]	; (8012f1c <dhcp_handle_ack+0xbc>)
 8012edc:	699b      	ldr	r3, [r3, #24]
 8012ede:	4618      	mov	r0, r3
 8012ee0:	f7f7 f835 	bl	8009f4e <lwip_htonl>
 8012ee4:	4602      	mov	r2, r0
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2201      	movs	r2, #1
 8012eee:	71da      	strb	r2, [r3, #7]
 8012ef0:	e002      	b.n	8012ef8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012ef8:	4b07      	ldr	r3, [pc, #28]	; (8012f18 <dhcp_handle_ack+0xb8>)
 8012efa:	79db      	ldrb	r3, [r3, #7]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d007      	beq.n	8012f10 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012f00:	4b06      	ldr	r3, [pc, #24]	; (8012f1c <dhcp_handle_ack+0xbc>)
 8012f02:	69db      	ldr	r3, [r3, #28]
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7f7 f822 	bl	8009f4e <lwip_htonl>
 8012f0a:	4602      	mov	r2, r0
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012f10:	bf00      	nop
 8012f12:	3710      	adds	r7, #16
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	20006d28 	.word	0x20006d28
 8012f1c:	20006d30 	.word	0x20006d30

08012f20 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b084      	sub	sp, #16
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d109      	bne.n	8012f42 <dhcp_start+0x22>
 8012f2e:	4b37      	ldr	r3, [pc, #220]	; (801300c <dhcp_start+0xec>)
 8012f30:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012f34:	4936      	ldr	r1, [pc, #216]	; (8013010 <dhcp_start+0xf0>)
 8012f36:	4837      	ldr	r0, [pc, #220]	; (8013014 <dhcp_start+0xf4>)
 8012f38:	f004 fb3e 	bl	80175b8 <iprintf>
 8012f3c:	f06f 030f 	mvn.w	r3, #15
 8012f40:	e060      	b.n	8013004 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012f48:	f003 0301 	and.w	r3, r3, #1
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d109      	bne.n	8012f64 <dhcp_start+0x44>
 8012f50:	4b2e      	ldr	r3, [pc, #184]	; (801300c <dhcp_start+0xec>)
 8012f52:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8012f56:	4930      	ldr	r1, [pc, #192]	; (8013018 <dhcp_start+0xf8>)
 8012f58:	482e      	ldr	r0, [pc, #184]	; (8013014 <dhcp_start+0xf4>)
 8012f5a:	f004 fb2d 	bl	80175b8 <iprintf>
 8012f5e:	f06f 030f 	mvn.w	r3, #15
 8012f62:	e04f      	b.n	8013004 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f68:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f6e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012f72:	d202      	bcs.n	8012f7a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8012f74:	f04f 33ff 	mov.w	r3, #4294967295
 8012f78:	e044      	b.n	8013004 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d10d      	bne.n	8012f9c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012f80:	2034      	movs	r0, #52	; 0x34
 8012f82:	f7f7 fab7 	bl	800a4f4 <mem_malloc>
 8012f86:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d102      	bne.n	8012f94 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8012f92:	e037      	b.n	8013004 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	68fa      	ldr	r2, [r7, #12]
 8012f98:	625a      	str	r2, [r3, #36]	; 0x24
 8012f9a:	e005      	b.n	8012fa8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	791b      	ldrb	r3, [r3, #4]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d001      	beq.n	8012fa8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012fa4:	f7ff fc92 	bl	80128cc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012fa8:	2234      	movs	r2, #52	; 0x34
 8012faa:	2100      	movs	r1, #0
 8012fac:	68f8      	ldr	r0, [r7, #12]
 8012fae:	f004 fafb 	bl	80175a8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012fb2:	f7ff fc39 	bl	8012828 <dhcp_inc_pcb_refcount>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d002      	beq.n	8012fc2 <dhcp_start+0xa2>
    return ERR_MEM;
 8012fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8012fc0:	e020      	b.n	8013004 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	2201      	movs	r2, #1
 8012fc6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012fce:	f003 0304 	and.w	r3, r3, #4
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d105      	bne.n	8012fe2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8012fd6:	2102      	movs	r1, #2
 8012fd8:	68f8      	ldr	r0, [r7, #12]
 8012fda:	f000 fcc5 	bl	8013968 <dhcp_set_state>
    return ERR_OK;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	e010      	b.n	8013004 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	f000 f8bc 	bl	8013160 <dhcp_discover>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012fec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d005      	beq.n	8013000 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f000 fc1d 	bl	8013834 <dhcp_release_and_stop>
    return ERR_MEM;
 8012ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8012ffe:	e001      	b.n	8013004 <dhcp_start+0xe4>
  }
  return result;
 8013000:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013004:	4618      	mov	r0, r3
 8013006:	3710      	adds	r7, #16
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	0801b5d0 	.word	0x0801b5d0
 8013010:	0801b6b4 	.word	0x0801b6b4
 8013014:	0801b630 	.word	0x0801b630
 8013018:	0801b6f8 	.word	0x0801b6f8

0801301c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b084      	sub	sp, #16
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d107      	bne.n	801303c <dhcp_arp_reply+0x20>
 801302c:	4b0e      	ldr	r3, [pc, #56]	; (8013068 <dhcp_arp_reply+0x4c>)
 801302e:	f240 328b 	movw	r2, #907	; 0x38b
 8013032:	490e      	ldr	r1, [pc, #56]	; (801306c <dhcp_arp_reply+0x50>)
 8013034:	480e      	ldr	r0, [pc, #56]	; (8013070 <dhcp_arp_reply+0x54>)
 8013036:	f004 fabf 	bl	80175b8 <iprintf>
 801303a:	e012      	b.n	8013062 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013040:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d00c      	beq.n	8013062 <dhcp_arp_reply+0x46>
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	795b      	ldrb	r3, [r3, #5]
 801304c:	2b08      	cmp	r3, #8
 801304e:	d108      	bne.n	8013062 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	681a      	ldr	r2, [r3, #0]
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	69db      	ldr	r3, [r3, #28]
 8013058:	429a      	cmp	r2, r3
 801305a:	d102      	bne.n	8013062 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f000 f809 	bl	8013074 <dhcp_decline>
    }
  }
}
 8013062:	3710      	adds	r7, #16
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	0801b5d0 	.word	0x0801b5d0
 801306c:	0801b6b4 	.word	0x0801b6b4
 8013070:	0801b630 	.word	0x0801b630

08013074 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013074:	b5b0      	push	{r4, r5, r7, lr}
 8013076:	b08a      	sub	sp, #40	; 0x28
 8013078:	af02      	add	r7, sp, #8
 801307a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013080:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013082:	210c      	movs	r1, #12
 8013084:	69b8      	ldr	r0, [r7, #24]
 8013086:	f000 fc6f 	bl	8013968 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801308a:	f107 030c 	add.w	r3, r7, #12
 801308e:	2204      	movs	r2, #4
 8013090:	69b9      	ldr	r1, [r7, #24]
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f001 f8f4 	bl	8014280 <dhcp_create_msg>
 8013098:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801309a:	697b      	ldr	r3, [r7, #20]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d035      	beq.n	801310c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80130a6:	89b8      	ldrh	r0, [r7, #12]
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80130ae:	2304      	movs	r3, #4
 80130b0:	2232      	movs	r2, #50	; 0x32
 80130b2:	f000 fc73 	bl	801399c <dhcp_option>
 80130b6:	4603      	mov	r3, r0
 80130b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80130ba:	89bc      	ldrh	r4, [r7, #12]
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80130c2:	69bb      	ldr	r3, [r7, #24]
 80130c4:	69db      	ldr	r3, [r3, #28]
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7f6 ff41 	bl	8009f4e <lwip_htonl>
 80130cc:	4603      	mov	r3, r0
 80130ce:	461a      	mov	r2, r3
 80130d0:	4629      	mov	r1, r5
 80130d2:	4620      	mov	r0, r4
 80130d4:	f000 fcee 	bl	8013ab4 <dhcp_option_long>
 80130d8:	4603      	mov	r3, r0
 80130da:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80130dc:	89b8      	ldrh	r0, [r7, #12]
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	33f0      	adds	r3, #240	; 0xf0
 80130e2:	697a      	ldr	r2, [r7, #20]
 80130e4:	4619      	mov	r1, r3
 80130e6:	f001 f9a1 	bl	801442c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80130ea:	4b19      	ldr	r3, [pc, #100]	; (8013150 <dhcp_decline+0xdc>)
 80130ec:	6818      	ldr	r0, [r3, #0]
 80130ee:	4b19      	ldr	r3, [pc, #100]	; (8013154 <dhcp_decline+0xe0>)
 80130f0:	9301      	str	r3, [sp, #4]
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	9300      	str	r3, [sp, #0]
 80130f6:	2343      	movs	r3, #67	; 0x43
 80130f8:	4a17      	ldr	r2, [pc, #92]	; (8013158 <dhcp_decline+0xe4>)
 80130fa:	6979      	ldr	r1, [r7, #20]
 80130fc:	f7ff f90e 	bl	801231c <udp_sendto_if_src>
 8013100:	4603      	mov	r3, r0
 8013102:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013104:	6978      	ldr	r0, [r7, #20]
 8013106:	f7f8 f9f1 	bl	800b4ec <pbuf_free>
 801310a:	e001      	b.n	8013110 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801310c:	23ff      	movs	r3, #255	; 0xff
 801310e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013110:	69bb      	ldr	r3, [r7, #24]
 8013112:	799b      	ldrb	r3, [r3, #6]
 8013114:	2bff      	cmp	r3, #255	; 0xff
 8013116:	d005      	beq.n	8013124 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013118:	69bb      	ldr	r3, [r7, #24]
 801311a:	799b      	ldrb	r3, [r3, #6]
 801311c:	3301      	adds	r3, #1
 801311e:	b2da      	uxtb	r2, r3
 8013120:	69bb      	ldr	r3, [r7, #24]
 8013122:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013124:	f242 7310 	movw	r3, #10000	; 0x2710
 8013128:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801312a:	89fb      	ldrh	r3, [r7, #14]
 801312c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013130:	4a0a      	ldr	r2, [pc, #40]	; (801315c <dhcp_decline+0xe8>)
 8013132:	fb82 1203 	smull	r1, r2, r2, r3
 8013136:	1152      	asrs	r2, r2, #5
 8013138:	17db      	asrs	r3, r3, #31
 801313a:	1ad3      	subs	r3, r2, r3
 801313c:	b29a      	uxth	r2, r3
 801313e:	69bb      	ldr	r3, [r7, #24]
 8013140:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013142:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013146:	4618      	mov	r0, r3
 8013148:	3720      	adds	r7, #32
 801314a:	46bd      	mov	sp, r7
 801314c:	bdb0      	pop	{r4, r5, r7, pc}
 801314e:	bf00      	nop
 8013150:	20000298 	.word	0x20000298
 8013154:	0801c16c 	.word	0x0801c16c
 8013158:	0801c170 	.word	0x0801c170
 801315c:	10624dd3 	.word	0x10624dd3

08013160 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b08a      	sub	sp, #40	; 0x28
 8013164:	af02      	add	r7, sp, #8
 8013166:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801316c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801316e:	2300      	movs	r3, #0
 8013170:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013172:	69bb      	ldr	r3, [r7, #24]
 8013174:	2200      	movs	r2, #0
 8013176:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013178:	2106      	movs	r1, #6
 801317a:	69b8      	ldr	r0, [r7, #24]
 801317c:	f000 fbf4 	bl	8013968 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013180:	f107 0308 	add.w	r3, r7, #8
 8013184:	2201      	movs	r2, #1
 8013186:	69b9      	ldr	r1, [r7, #24]
 8013188:	6878      	ldr	r0, [r7, #4]
 801318a:	f001 f879 	bl	8014280 <dhcp_create_msg>
 801318e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d04b      	beq.n	801322e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801319c:	8938      	ldrh	r0, [r7, #8]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131a4:	2302      	movs	r3, #2
 80131a6:	2239      	movs	r2, #57	; 0x39
 80131a8:	f000 fbf8 	bl	801399c <dhcp_option>
 80131ac:	4603      	mov	r3, r0
 80131ae:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80131b0:	8938      	ldrh	r0, [r7, #8]
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131bc:	461a      	mov	r2, r3
 80131be:	f000 fc47 	bl	8013a50 <dhcp_option_short>
 80131c2:	4603      	mov	r3, r0
 80131c4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80131c6:	8938      	ldrh	r0, [r7, #8]
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131ce:	2303      	movs	r3, #3
 80131d0:	2237      	movs	r2, #55	; 0x37
 80131d2:	f000 fbe3 	bl	801399c <dhcp_option>
 80131d6:	4603      	mov	r3, r0
 80131d8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80131da:	2300      	movs	r3, #0
 80131dc:	77fb      	strb	r3, [r7, #31]
 80131de:	e00e      	b.n	80131fe <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80131e0:	8938      	ldrh	r0, [r7, #8]
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131e8:	7ffb      	ldrb	r3, [r7, #31]
 80131ea:	4a29      	ldr	r2, [pc, #164]	; (8013290 <dhcp_discover+0x130>)
 80131ec:	5cd3      	ldrb	r3, [r2, r3]
 80131ee:	461a      	mov	r2, r3
 80131f0:	f000 fc08 	bl	8013a04 <dhcp_option_byte>
 80131f4:	4603      	mov	r3, r0
 80131f6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80131f8:	7ffb      	ldrb	r3, [r7, #31]
 80131fa:	3301      	adds	r3, #1
 80131fc:	77fb      	strb	r3, [r7, #31]
 80131fe:	7ffb      	ldrb	r3, [r7, #31]
 8013200:	2b02      	cmp	r3, #2
 8013202:	d9ed      	bls.n	80131e0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013204:	8938      	ldrh	r0, [r7, #8]
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	33f0      	adds	r3, #240	; 0xf0
 801320a:	693a      	ldr	r2, [r7, #16]
 801320c:	4619      	mov	r1, r3
 801320e:	f001 f90d 	bl	801442c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013212:	4b20      	ldr	r3, [pc, #128]	; (8013294 <dhcp_discover+0x134>)
 8013214:	6818      	ldr	r0, [r3, #0]
 8013216:	4b20      	ldr	r3, [pc, #128]	; (8013298 <dhcp_discover+0x138>)
 8013218:	9301      	str	r3, [sp, #4]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	9300      	str	r3, [sp, #0]
 801321e:	2343      	movs	r3, #67	; 0x43
 8013220:	4a1e      	ldr	r2, [pc, #120]	; (801329c <dhcp_discover+0x13c>)
 8013222:	6939      	ldr	r1, [r7, #16]
 8013224:	f7ff f87a 	bl	801231c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013228:	6938      	ldr	r0, [r7, #16]
 801322a:	f7f8 f95f 	bl	800b4ec <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	799b      	ldrb	r3, [r3, #6]
 8013232:	2bff      	cmp	r3, #255	; 0xff
 8013234:	d005      	beq.n	8013242 <dhcp_discover+0xe2>
    dhcp->tries++;
 8013236:	69bb      	ldr	r3, [r7, #24]
 8013238:	799b      	ldrb	r3, [r3, #6]
 801323a:	3301      	adds	r3, #1
 801323c:	b2da      	uxtb	r2, r3
 801323e:	69bb      	ldr	r3, [r7, #24]
 8013240:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013242:	69bb      	ldr	r3, [r7, #24]
 8013244:	799b      	ldrb	r3, [r3, #6]
 8013246:	2b05      	cmp	r3, #5
 8013248:	d80d      	bhi.n	8013266 <dhcp_discover+0x106>
 801324a:	69bb      	ldr	r3, [r7, #24]
 801324c:	799b      	ldrb	r3, [r3, #6]
 801324e:	461a      	mov	r2, r3
 8013250:	2301      	movs	r3, #1
 8013252:	4093      	lsls	r3, r2
 8013254:	b29b      	uxth	r3, r3
 8013256:	461a      	mov	r2, r3
 8013258:	0152      	lsls	r2, r2, #5
 801325a:	1ad2      	subs	r2, r2, r3
 801325c:	0092      	lsls	r2, r2, #2
 801325e:	4413      	add	r3, r2
 8013260:	00db      	lsls	r3, r3, #3
 8013262:	b29b      	uxth	r3, r3
 8013264:	e001      	b.n	801326a <dhcp_discover+0x10a>
 8013266:	f64e 2360 	movw	r3, #60000	; 0xea60
 801326a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801326c:	897b      	ldrh	r3, [r7, #10]
 801326e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013272:	4a0b      	ldr	r2, [pc, #44]	; (80132a0 <dhcp_discover+0x140>)
 8013274:	fb82 1203 	smull	r1, r2, r2, r3
 8013278:	1152      	asrs	r2, r2, #5
 801327a:	17db      	asrs	r3, r3, #31
 801327c:	1ad3      	subs	r3, r2, r3
 801327e:	b29a      	uxth	r2, r3
 8013280:	69bb      	ldr	r3, [r7, #24]
 8013282:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013284:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013288:	4618      	mov	r0, r3
 801328a:	3720      	adds	r7, #32
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}
 8013290:	20000128 	.word	0x20000128
 8013294:	20000298 	.word	0x20000298
 8013298:	0801c16c 	.word	0x0801c16c
 801329c:	0801c170 	.word	0x0801c170
 80132a0:	10624dd3 	.word	0x10624dd3

080132a4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b088      	sub	sp, #32
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d107      	bne.n	80132c2 <dhcp_bind+0x1e>
 80132b2:	4b64      	ldr	r3, [pc, #400]	; (8013444 <dhcp_bind+0x1a0>)
 80132b4:	f240 4215 	movw	r2, #1045	; 0x415
 80132b8:	4963      	ldr	r1, [pc, #396]	; (8013448 <dhcp_bind+0x1a4>)
 80132ba:	4864      	ldr	r0, [pc, #400]	; (801344c <dhcp_bind+0x1a8>)
 80132bc:	f004 f97c 	bl	80175b8 <iprintf>
 80132c0:	e0bc      	b.n	801343c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132c6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80132c8:	69bb      	ldr	r3, [r7, #24]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d107      	bne.n	80132de <dhcp_bind+0x3a>
 80132ce:	4b5d      	ldr	r3, [pc, #372]	; (8013444 <dhcp_bind+0x1a0>)
 80132d0:	f240 4217 	movw	r2, #1047	; 0x417
 80132d4:	495e      	ldr	r1, [pc, #376]	; (8013450 <dhcp_bind+0x1ac>)
 80132d6:	485d      	ldr	r0, [pc, #372]	; (801344c <dhcp_bind+0x1a8>)
 80132d8:	f004 f96e 	bl	80175b8 <iprintf>
 80132dc:	e0ae      	b.n	801343c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80132de:	69bb      	ldr	r3, [r7, #24]
 80132e0:	2200      	movs	r2, #0
 80132e2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80132e4:	69bb      	ldr	r3, [r7, #24]
 80132e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ec:	d019      	beq.n	8013322 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80132ee:	69bb      	ldr	r3, [r7, #24]
 80132f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132f2:	331e      	adds	r3, #30
 80132f4:	4a57      	ldr	r2, [pc, #348]	; (8013454 <dhcp_bind+0x1b0>)
 80132f6:	fba2 2303 	umull	r2, r3, r2, r3
 80132fa:	095b      	lsrs	r3, r3, #5
 80132fc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80132fe:	69fb      	ldr	r3, [r7, #28]
 8013300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013304:	d302      	bcc.n	801330c <dhcp_bind+0x68>
      timeout = 0xffff;
 8013306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801330a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	b29a      	uxth	r2, r3
 8013310:	69bb      	ldr	r3, [r7, #24]
 8013312:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8013314:	69bb      	ldr	r3, [r7, #24]
 8013316:	8a9b      	ldrh	r3, [r3, #20]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d102      	bne.n	8013322 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801331c:	69bb      	ldr	r3, [r7, #24]
 801331e:	2201      	movs	r2, #1
 8013320:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801332a:	d01d      	beq.n	8013368 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801332c:	69bb      	ldr	r3, [r7, #24]
 801332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013330:	331e      	adds	r3, #30
 8013332:	4a48      	ldr	r2, [pc, #288]	; (8013454 <dhcp_bind+0x1b0>)
 8013334:	fba2 2303 	umull	r2, r3, r2, r3
 8013338:	095b      	lsrs	r3, r3, #5
 801333a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801333c:	69fb      	ldr	r3, [r7, #28]
 801333e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013342:	d302      	bcc.n	801334a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013348:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801334a:	69fb      	ldr	r3, [r7, #28]
 801334c:	b29a      	uxth	r2, r3
 801334e:	69bb      	ldr	r3, [r7, #24]
 8013350:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8013352:	69bb      	ldr	r3, [r7, #24]
 8013354:	895b      	ldrh	r3, [r3, #10]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d102      	bne.n	8013360 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801335a:	69bb      	ldr	r3, [r7, #24]
 801335c:	2201      	movs	r2, #1
 801335e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013360:	69bb      	ldr	r3, [r7, #24]
 8013362:	895a      	ldrh	r2, [r3, #10]
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013368:	69bb      	ldr	r3, [r7, #24]
 801336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013370:	d01d      	beq.n	80133ae <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013372:	69bb      	ldr	r3, [r7, #24]
 8013374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013376:	331e      	adds	r3, #30
 8013378:	4a36      	ldr	r2, [pc, #216]	; (8013454 <dhcp_bind+0x1b0>)
 801337a:	fba2 2303 	umull	r2, r3, r2, r3
 801337e:	095b      	lsrs	r3, r3, #5
 8013380:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013388:	d302      	bcc.n	8013390 <dhcp_bind+0xec>
      timeout = 0xffff;
 801338a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801338e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8013390:	69fb      	ldr	r3, [r7, #28]
 8013392:	b29a      	uxth	r2, r3
 8013394:	69bb      	ldr	r3, [r7, #24]
 8013396:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	899b      	ldrh	r3, [r3, #12]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d102      	bne.n	80133a6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80133a0:	69bb      	ldr	r3, [r7, #24]
 80133a2:	2201      	movs	r2, #1
 80133a4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	899a      	ldrh	r2, [r3, #12]
 80133aa:	69bb      	ldr	r3, [r7, #24]
 80133ac:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80133ae:	69bb      	ldr	r3, [r7, #24]
 80133b0:	895a      	ldrh	r2, [r3, #10]
 80133b2:	69bb      	ldr	r3, [r7, #24]
 80133b4:	899b      	ldrh	r3, [r3, #12]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d306      	bcc.n	80133c8 <dhcp_bind+0x124>
 80133ba:	69bb      	ldr	r3, [r7, #24]
 80133bc:	899b      	ldrh	r3, [r3, #12]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d002      	beq.n	80133c8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	2200      	movs	r2, #0
 80133c6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80133c8:	69bb      	ldr	r3, [r7, #24]
 80133ca:	79db      	ldrb	r3, [r3, #7]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d003      	beq.n	80133d8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	6a1b      	ldr	r3, [r3, #32]
 80133d4:	613b      	str	r3, [r7, #16]
 80133d6:	e014      	b.n	8013402 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80133d8:	69bb      	ldr	r3, [r7, #24]
 80133da:	331c      	adds	r3, #28
 80133dc:	781b      	ldrb	r3, [r3, #0]
 80133de:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80133e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	db02      	blt.n	80133ee <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80133e8:	23ff      	movs	r3, #255	; 0xff
 80133ea:	613b      	str	r3, [r7, #16]
 80133ec:	e009      	b.n	8013402 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80133ee:	7dfb      	ldrb	r3, [r7, #23]
 80133f0:	2bbf      	cmp	r3, #191	; 0xbf
 80133f2:	d903      	bls.n	80133fc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80133f4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80133f8:	613b      	str	r3, [r7, #16]
 80133fa:	e002      	b.n	8013402 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80133fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013400:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013406:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d108      	bne.n	8013420 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801340e:	69bb      	ldr	r3, [r7, #24]
 8013410:	69da      	ldr	r2, [r3, #28]
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	4013      	ands	r3, r2
 8013416:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801341e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8013420:	210a      	movs	r1, #10
 8013422:	69b8      	ldr	r0, [r7, #24]
 8013424:	f000 faa0 	bl	8013968 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013428:	69bb      	ldr	r3, [r7, #24]
 801342a:	f103 011c 	add.w	r1, r3, #28
 801342e:	f107 030c 	add.w	r3, r7, #12
 8013432:	f107 0210 	add.w	r2, r7, #16
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f7f7 fbe0 	bl	800abfc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801343c:	3720      	adds	r7, #32
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	bf00      	nop
 8013444:	0801b5d0 	.word	0x0801b5d0
 8013448:	0801b730 	.word	0x0801b730
 801344c:	0801b630 	.word	0x0801b630
 8013450:	0801b74c 	.word	0x0801b74c
 8013454:	88888889 	.word	0x88888889

08013458 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b08a      	sub	sp, #40	; 0x28
 801345c:	af02      	add	r7, sp, #8
 801345e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013464:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8013466:	2105      	movs	r1, #5
 8013468:	69b8      	ldr	r0, [r7, #24]
 801346a:	f000 fa7d 	bl	8013968 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801346e:	f107 030c 	add.w	r3, r7, #12
 8013472:	2203      	movs	r2, #3
 8013474:	69b9      	ldr	r1, [r7, #24]
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f000 ff02 	bl	8014280 <dhcp_create_msg>
 801347c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801347e:	697b      	ldr	r3, [r7, #20]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d04e      	beq.n	8013522 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801348a:	89b8      	ldrh	r0, [r7, #12]
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013492:	2302      	movs	r3, #2
 8013494:	2239      	movs	r2, #57	; 0x39
 8013496:	f000 fa81 	bl	801399c <dhcp_option>
 801349a:	4603      	mov	r3, r0
 801349c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801349e:	89b8      	ldrh	r0, [r7, #12]
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134aa:	461a      	mov	r2, r3
 80134ac:	f000 fad0 	bl	8013a50 <dhcp_option_short>
 80134b0:	4603      	mov	r3, r0
 80134b2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80134b4:	89b8      	ldrh	r0, [r7, #12]
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134bc:	2303      	movs	r3, #3
 80134be:	2237      	movs	r2, #55	; 0x37
 80134c0:	f000 fa6c 	bl	801399c <dhcp_option>
 80134c4:	4603      	mov	r3, r0
 80134c6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134c8:	2300      	movs	r3, #0
 80134ca:	77bb      	strb	r3, [r7, #30]
 80134cc:	e00e      	b.n	80134ec <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80134ce:	89b8      	ldrh	r0, [r7, #12]
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134d6:	7fbb      	ldrb	r3, [r7, #30]
 80134d8:	4a2a      	ldr	r2, [pc, #168]	; (8013584 <dhcp_renew+0x12c>)
 80134da:	5cd3      	ldrb	r3, [r2, r3]
 80134dc:	461a      	mov	r2, r3
 80134de:	f000 fa91 	bl	8013a04 <dhcp_option_byte>
 80134e2:	4603      	mov	r3, r0
 80134e4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134e6:	7fbb      	ldrb	r3, [r7, #30]
 80134e8:	3301      	adds	r3, #1
 80134ea:	77bb      	strb	r3, [r7, #30]
 80134ec:	7fbb      	ldrb	r3, [r7, #30]
 80134ee:	2b02      	cmp	r3, #2
 80134f0:	d9ed      	bls.n	80134ce <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80134f2:	89b8      	ldrh	r0, [r7, #12]
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	33f0      	adds	r3, #240	; 0xf0
 80134f8:	697a      	ldr	r2, [r7, #20]
 80134fa:	4619      	mov	r1, r3
 80134fc:	f000 ff96 	bl	801442c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013500:	4b21      	ldr	r3, [pc, #132]	; (8013588 <dhcp_renew+0x130>)
 8013502:	6818      	ldr	r0, [r3, #0]
 8013504:	69bb      	ldr	r3, [r7, #24]
 8013506:	f103 0218 	add.w	r2, r3, #24
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	9300      	str	r3, [sp, #0]
 801350e:	2343      	movs	r3, #67	; 0x43
 8013510:	6979      	ldr	r1, [r7, #20]
 8013512:	f7fe fe8f 	bl	8012234 <udp_sendto_if>
 8013516:	4603      	mov	r3, r0
 8013518:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801351a:	6978      	ldr	r0, [r7, #20]
 801351c:	f7f7 ffe6 	bl	800b4ec <pbuf_free>
 8013520:	e001      	b.n	8013526 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013522:	23ff      	movs	r3, #255	; 0xff
 8013524:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013526:	69bb      	ldr	r3, [r7, #24]
 8013528:	799b      	ldrb	r3, [r3, #6]
 801352a:	2bff      	cmp	r3, #255	; 0xff
 801352c:	d005      	beq.n	801353a <dhcp_renew+0xe2>
    dhcp->tries++;
 801352e:	69bb      	ldr	r3, [r7, #24]
 8013530:	799b      	ldrb	r3, [r3, #6]
 8013532:	3301      	adds	r3, #1
 8013534:	b2da      	uxtb	r2, r3
 8013536:	69bb      	ldr	r3, [r7, #24]
 8013538:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801353a:	69bb      	ldr	r3, [r7, #24]
 801353c:	799b      	ldrb	r3, [r3, #6]
 801353e:	2b09      	cmp	r3, #9
 8013540:	d80a      	bhi.n	8013558 <dhcp_renew+0x100>
 8013542:	69bb      	ldr	r3, [r7, #24]
 8013544:	799b      	ldrb	r3, [r3, #6]
 8013546:	b29b      	uxth	r3, r3
 8013548:	461a      	mov	r2, r3
 801354a:	0152      	lsls	r2, r2, #5
 801354c:	1ad2      	subs	r2, r2, r3
 801354e:	0092      	lsls	r2, r2, #2
 8013550:	4413      	add	r3, r2
 8013552:	011b      	lsls	r3, r3, #4
 8013554:	b29b      	uxth	r3, r3
 8013556:	e001      	b.n	801355c <dhcp_renew+0x104>
 8013558:	f644 6320 	movw	r3, #20000	; 0x4e20
 801355c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801355e:	89fb      	ldrh	r3, [r7, #14]
 8013560:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013564:	4a09      	ldr	r2, [pc, #36]	; (801358c <dhcp_renew+0x134>)
 8013566:	fb82 1203 	smull	r1, r2, r2, r3
 801356a:	1152      	asrs	r2, r2, #5
 801356c:	17db      	asrs	r3, r3, #31
 801356e:	1ad3      	subs	r3, r2, r3
 8013570:	b29a      	uxth	r2, r3
 8013572:	69bb      	ldr	r3, [r7, #24]
 8013574:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013576:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801357a:	4618      	mov	r0, r3
 801357c:	3720      	adds	r7, #32
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
 8013582:	bf00      	nop
 8013584:	20000128 	.word	0x20000128
 8013588:	20000298 	.word	0x20000298
 801358c:	10624dd3 	.word	0x10624dd3

08013590 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b08a      	sub	sp, #40	; 0x28
 8013594:	af02      	add	r7, sp, #8
 8013596:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801359c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801359e:	2104      	movs	r1, #4
 80135a0:	69b8      	ldr	r0, [r7, #24]
 80135a2:	f000 f9e1 	bl	8013968 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80135a6:	f107 030c 	add.w	r3, r7, #12
 80135aa:	2203      	movs	r2, #3
 80135ac:	69b9      	ldr	r1, [r7, #24]
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f000 fe66 	bl	8014280 <dhcp_create_msg>
 80135b4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d04c      	beq.n	8013656 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80135c2:	89b8      	ldrh	r0, [r7, #12]
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135ca:	2302      	movs	r3, #2
 80135cc:	2239      	movs	r2, #57	; 0x39
 80135ce:	f000 f9e5 	bl	801399c <dhcp_option>
 80135d2:	4603      	mov	r3, r0
 80135d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80135d6:	89b8      	ldrh	r0, [r7, #12]
 80135d8:	693b      	ldr	r3, [r7, #16]
 80135da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135e2:	461a      	mov	r2, r3
 80135e4:	f000 fa34 	bl	8013a50 <dhcp_option_short>
 80135e8:	4603      	mov	r3, r0
 80135ea:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80135ec:	89b8      	ldrh	r0, [r7, #12]
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135f4:	2303      	movs	r3, #3
 80135f6:	2237      	movs	r2, #55	; 0x37
 80135f8:	f000 f9d0 	bl	801399c <dhcp_option>
 80135fc:	4603      	mov	r3, r0
 80135fe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013600:	2300      	movs	r3, #0
 8013602:	77bb      	strb	r3, [r7, #30]
 8013604:	e00e      	b.n	8013624 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013606:	89b8      	ldrh	r0, [r7, #12]
 8013608:	693b      	ldr	r3, [r7, #16]
 801360a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801360e:	7fbb      	ldrb	r3, [r7, #30]
 8013610:	4a29      	ldr	r2, [pc, #164]	; (80136b8 <dhcp_rebind+0x128>)
 8013612:	5cd3      	ldrb	r3, [r2, r3]
 8013614:	461a      	mov	r2, r3
 8013616:	f000 f9f5 	bl	8013a04 <dhcp_option_byte>
 801361a:	4603      	mov	r3, r0
 801361c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801361e:	7fbb      	ldrb	r3, [r7, #30]
 8013620:	3301      	adds	r3, #1
 8013622:	77bb      	strb	r3, [r7, #30]
 8013624:	7fbb      	ldrb	r3, [r7, #30]
 8013626:	2b02      	cmp	r3, #2
 8013628:	d9ed      	bls.n	8013606 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801362a:	89b8      	ldrh	r0, [r7, #12]
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	33f0      	adds	r3, #240	; 0xf0
 8013630:	697a      	ldr	r2, [r7, #20]
 8013632:	4619      	mov	r1, r3
 8013634:	f000 fefa 	bl	801442c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013638:	4b20      	ldr	r3, [pc, #128]	; (80136bc <dhcp_rebind+0x12c>)
 801363a:	6818      	ldr	r0, [r3, #0]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	9300      	str	r3, [sp, #0]
 8013640:	2343      	movs	r3, #67	; 0x43
 8013642:	4a1f      	ldr	r2, [pc, #124]	; (80136c0 <dhcp_rebind+0x130>)
 8013644:	6979      	ldr	r1, [r7, #20]
 8013646:	f7fe fdf5 	bl	8012234 <udp_sendto_if>
 801364a:	4603      	mov	r3, r0
 801364c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801364e:	6978      	ldr	r0, [r7, #20]
 8013650:	f7f7 ff4c 	bl	800b4ec <pbuf_free>
 8013654:	e001      	b.n	801365a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013656:	23ff      	movs	r3, #255	; 0xff
 8013658:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801365a:	69bb      	ldr	r3, [r7, #24]
 801365c:	799b      	ldrb	r3, [r3, #6]
 801365e:	2bff      	cmp	r3, #255	; 0xff
 8013660:	d005      	beq.n	801366e <dhcp_rebind+0xde>
    dhcp->tries++;
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	799b      	ldrb	r3, [r3, #6]
 8013666:	3301      	adds	r3, #1
 8013668:	b2da      	uxtb	r2, r3
 801366a:	69bb      	ldr	r3, [r7, #24]
 801366c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801366e:	69bb      	ldr	r3, [r7, #24]
 8013670:	799b      	ldrb	r3, [r3, #6]
 8013672:	2b09      	cmp	r3, #9
 8013674:	d80a      	bhi.n	801368c <dhcp_rebind+0xfc>
 8013676:	69bb      	ldr	r3, [r7, #24]
 8013678:	799b      	ldrb	r3, [r3, #6]
 801367a:	b29b      	uxth	r3, r3
 801367c:	461a      	mov	r2, r3
 801367e:	0152      	lsls	r2, r2, #5
 8013680:	1ad2      	subs	r2, r2, r3
 8013682:	0092      	lsls	r2, r2, #2
 8013684:	4413      	add	r3, r2
 8013686:	00db      	lsls	r3, r3, #3
 8013688:	b29b      	uxth	r3, r3
 801368a:	e001      	b.n	8013690 <dhcp_rebind+0x100>
 801368c:	f242 7310 	movw	r3, #10000	; 0x2710
 8013690:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013692:	89fb      	ldrh	r3, [r7, #14]
 8013694:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013698:	4a0a      	ldr	r2, [pc, #40]	; (80136c4 <dhcp_rebind+0x134>)
 801369a:	fb82 1203 	smull	r1, r2, r2, r3
 801369e:	1152      	asrs	r2, r2, #5
 80136a0:	17db      	asrs	r3, r3, #31
 80136a2:	1ad3      	subs	r3, r2, r3
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	69bb      	ldr	r3, [r7, #24]
 80136a8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80136aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3720      	adds	r7, #32
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	20000128 	.word	0x20000128
 80136bc:	20000298 	.word	0x20000298
 80136c0:	0801c170 	.word	0x0801c170
 80136c4:	10624dd3 	.word	0x10624dd3

080136c8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80136c8:	b5b0      	push	{r4, r5, r7, lr}
 80136ca:	b08a      	sub	sp, #40	; 0x28
 80136cc:	af02      	add	r7, sp, #8
 80136ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136d4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80136d6:	2103      	movs	r1, #3
 80136d8:	69b8      	ldr	r0, [r7, #24]
 80136da:	f000 f945 	bl	8013968 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80136de:	f107 030c 	add.w	r3, r7, #12
 80136e2:	2203      	movs	r2, #3
 80136e4:	69b9      	ldr	r1, [r7, #24]
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f000 fdca 	bl	8014280 <dhcp_create_msg>
 80136ec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d066      	beq.n	80137c2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	685b      	ldr	r3, [r3, #4]
 80136f8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80136fa:	89b8      	ldrh	r0, [r7, #12]
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013702:	2302      	movs	r3, #2
 8013704:	2239      	movs	r2, #57	; 0x39
 8013706:	f000 f949 	bl	801399c <dhcp_option>
 801370a:	4603      	mov	r3, r0
 801370c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801370e:	89b8      	ldrh	r0, [r7, #12]
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	33f0      	adds	r3, #240	; 0xf0
 8013714:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013718:	4619      	mov	r1, r3
 801371a:	f000 f999 	bl	8013a50 <dhcp_option_short>
 801371e:	4603      	mov	r3, r0
 8013720:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013722:	89b8      	ldrh	r0, [r7, #12]
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801372a:	2304      	movs	r3, #4
 801372c:	2232      	movs	r2, #50	; 0x32
 801372e:	f000 f935 	bl	801399c <dhcp_option>
 8013732:	4603      	mov	r3, r0
 8013734:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013736:	89bc      	ldrh	r4, [r7, #12]
 8013738:	693b      	ldr	r3, [r7, #16]
 801373a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	69db      	ldr	r3, [r3, #28]
 8013742:	4618      	mov	r0, r3
 8013744:	f7f6 fc03 	bl	8009f4e <lwip_htonl>
 8013748:	4603      	mov	r3, r0
 801374a:	461a      	mov	r2, r3
 801374c:	4629      	mov	r1, r5
 801374e:	4620      	mov	r0, r4
 8013750:	f000 f9b0 	bl	8013ab4 <dhcp_option_long>
 8013754:	4603      	mov	r3, r0
 8013756:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013758:	89b8      	ldrh	r0, [r7, #12]
 801375a:	693b      	ldr	r3, [r7, #16]
 801375c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013760:	2303      	movs	r3, #3
 8013762:	2237      	movs	r2, #55	; 0x37
 8013764:	f000 f91a 	bl	801399c <dhcp_option>
 8013768:	4603      	mov	r3, r0
 801376a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801376c:	2300      	movs	r3, #0
 801376e:	77bb      	strb	r3, [r7, #30]
 8013770:	e00e      	b.n	8013790 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013772:	89b8      	ldrh	r0, [r7, #12]
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801377a:	7fbb      	ldrb	r3, [r7, #30]
 801377c:	4a29      	ldr	r2, [pc, #164]	; (8013824 <dhcp_reboot+0x15c>)
 801377e:	5cd3      	ldrb	r3, [r2, r3]
 8013780:	461a      	mov	r2, r3
 8013782:	f000 f93f 	bl	8013a04 <dhcp_option_byte>
 8013786:	4603      	mov	r3, r0
 8013788:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801378a:	7fbb      	ldrb	r3, [r7, #30]
 801378c:	3301      	adds	r3, #1
 801378e:	77bb      	strb	r3, [r7, #30]
 8013790:	7fbb      	ldrb	r3, [r7, #30]
 8013792:	2b02      	cmp	r3, #2
 8013794:	d9ed      	bls.n	8013772 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013796:	89b8      	ldrh	r0, [r7, #12]
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	33f0      	adds	r3, #240	; 0xf0
 801379c:	697a      	ldr	r2, [r7, #20]
 801379e:	4619      	mov	r1, r3
 80137a0:	f000 fe44 	bl	801442c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80137a4:	4b20      	ldr	r3, [pc, #128]	; (8013828 <dhcp_reboot+0x160>)
 80137a6:	6818      	ldr	r0, [r3, #0]
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	9300      	str	r3, [sp, #0]
 80137ac:	2343      	movs	r3, #67	; 0x43
 80137ae:	4a1f      	ldr	r2, [pc, #124]	; (801382c <dhcp_reboot+0x164>)
 80137b0:	6979      	ldr	r1, [r7, #20]
 80137b2:	f7fe fd3f 	bl	8012234 <udp_sendto_if>
 80137b6:	4603      	mov	r3, r0
 80137b8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80137ba:	6978      	ldr	r0, [r7, #20]
 80137bc:	f7f7 fe96 	bl	800b4ec <pbuf_free>
 80137c0:	e001      	b.n	80137c6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80137c2:	23ff      	movs	r3, #255	; 0xff
 80137c4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80137c6:	69bb      	ldr	r3, [r7, #24]
 80137c8:	799b      	ldrb	r3, [r3, #6]
 80137ca:	2bff      	cmp	r3, #255	; 0xff
 80137cc:	d005      	beq.n	80137da <dhcp_reboot+0x112>
    dhcp->tries++;
 80137ce:	69bb      	ldr	r3, [r7, #24]
 80137d0:	799b      	ldrb	r3, [r3, #6]
 80137d2:	3301      	adds	r3, #1
 80137d4:	b2da      	uxtb	r2, r3
 80137d6:	69bb      	ldr	r3, [r7, #24]
 80137d8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80137da:	69bb      	ldr	r3, [r7, #24]
 80137dc:	799b      	ldrb	r3, [r3, #6]
 80137de:	2b09      	cmp	r3, #9
 80137e0:	d80a      	bhi.n	80137f8 <dhcp_reboot+0x130>
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	799b      	ldrb	r3, [r3, #6]
 80137e6:	b29b      	uxth	r3, r3
 80137e8:	461a      	mov	r2, r3
 80137ea:	0152      	lsls	r2, r2, #5
 80137ec:	1ad2      	subs	r2, r2, r3
 80137ee:	0092      	lsls	r2, r2, #2
 80137f0:	4413      	add	r3, r2
 80137f2:	00db      	lsls	r3, r3, #3
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	e001      	b.n	80137fc <dhcp_reboot+0x134>
 80137f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80137fc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80137fe:	89fb      	ldrh	r3, [r7, #14]
 8013800:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013804:	4a0a      	ldr	r2, [pc, #40]	; (8013830 <dhcp_reboot+0x168>)
 8013806:	fb82 1203 	smull	r1, r2, r2, r3
 801380a:	1152      	asrs	r2, r2, #5
 801380c:	17db      	asrs	r3, r3, #31
 801380e:	1ad3      	subs	r3, r2, r3
 8013810:	b29a      	uxth	r2, r3
 8013812:	69bb      	ldr	r3, [r7, #24]
 8013814:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013816:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801381a:	4618      	mov	r0, r3
 801381c:	3720      	adds	r7, #32
 801381e:	46bd      	mov	sp, r7
 8013820:	bdb0      	pop	{r4, r5, r7, pc}
 8013822:	bf00      	nop
 8013824:	20000128 	.word	0x20000128
 8013828:	20000298 	.word	0x20000298
 801382c:	0801c170 	.word	0x0801c170
 8013830:	10624dd3 	.word	0x10624dd3

08013834 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013834:	b5b0      	push	{r4, r5, r7, lr}
 8013836:	b08a      	sub	sp, #40	; 0x28
 8013838:	af02      	add	r7, sp, #8
 801383a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013840:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013842:	69fb      	ldr	r3, [r7, #28]
 8013844:	2b00      	cmp	r3, #0
 8013846:	f000 8084 	beq.w	8013952 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	795b      	ldrb	r3, [r3, #5]
 801384e:	2b00      	cmp	r3, #0
 8013850:	f000 8081 	beq.w	8013956 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013854:	69fb      	ldr	r3, [r7, #28]
 8013856:	699b      	ldr	r3, [r3, #24]
 8013858:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801385a:	69fb      	ldr	r3, [r7, #28]
 801385c:	2200      	movs	r2, #0
 801385e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	2200      	movs	r2, #0
 8013864:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013866:	69fb      	ldr	r3, [r7, #28]
 8013868:	2200      	movs	r2, #0
 801386a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801386c:	69fb      	ldr	r3, [r7, #28]
 801386e:	2200      	movs	r2, #0
 8013870:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013872:	69fb      	ldr	r3, [r7, #28]
 8013874:	2200      	movs	r2, #0
 8013876:	631a      	str	r2, [r3, #48]	; 0x30
 8013878:	69fb      	ldr	r3, [r7, #28]
 801387a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013880:	69fb      	ldr	r3, [r7, #28]
 8013882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013888:	69fb      	ldr	r3, [r7, #28]
 801388a:	2200      	movs	r2, #0
 801388c:	829a      	strh	r2, [r3, #20]
 801388e:	69fb      	ldr	r3, [r7, #28]
 8013890:	8a9a      	ldrh	r2, [r3, #20]
 8013892:	69fb      	ldr	r3, [r7, #28]
 8013894:	825a      	strh	r2, [r3, #18]
 8013896:	69fb      	ldr	r3, [r7, #28]
 8013898:	8a5a      	ldrh	r2, [r3, #18]
 801389a:	69fb      	ldr	r3, [r7, #28]
 801389c:	821a      	strh	r2, [r3, #16]
 801389e:	69fb      	ldr	r3, [r7, #28]
 80138a0:	8a1a      	ldrh	r2, [r3, #16]
 80138a2:	69fb      	ldr	r3, [r7, #28]
 80138a4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80138a6:	6878      	ldr	r0, [r7, #4]
 80138a8:	f000 fdee 	bl	8014488 <dhcp_supplied_address>
 80138ac:	4603      	mov	r3, r0
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d03b      	beq.n	801392a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80138b2:	f107 030e 	add.w	r3, r7, #14
 80138b6:	2207      	movs	r2, #7
 80138b8:	69f9      	ldr	r1, [r7, #28]
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f000 fce0 	bl	8014280 <dhcp_create_msg>
 80138c0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80138c2:	69bb      	ldr	r3, [r7, #24]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d030      	beq.n	801392a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80138ce:	89f8      	ldrh	r0, [r7, #14]
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138d6:	2304      	movs	r3, #4
 80138d8:	2236      	movs	r2, #54	; 0x36
 80138da:	f000 f85f 	bl	801399c <dhcp_option>
 80138de:	4603      	mov	r3, r0
 80138e0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80138e2:	89fc      	ldrh	r4, [r7, #14]
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80138ea:	693b      	ldr	r3, [r7, #16]
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7f6 fb2e 	bl	8009f4e <lwip_htonl>
 80138f2:	4603      	mov	r3, r0
 80138f4:	461a      	mov	r2, r3
 80138f6:	4629      	mov	r1, r5
 80138f8:	4620      	mov	r0, r4
 80138fa:	f000 f8db 	bl	8013ab4 <dhcp_option_long>
 80138fe:	4603      	mov	r3, r0
 8013900:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013902:	89f8      	ldrh	r0, [r7, #14]
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	33f0      	adds	r3, #240	; 0xf0
 8013908:	69ba      	ldr	r2, [r7, #24]
 801390a:	4619      	mov	r1, r3
 801390c:	f000 fd8e 	bl	801442c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013910:	4b13      	ldr	r3, [pc, #76]	; (8013960 <dhcp_release_and_stop+0x12c>)
 8013912:	6818      	ldr	r0, [r3, #0]
 8013914:	f107 0210 	add.w	r2, r7, #16
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	9300      	str	r3, [sp, #0]
 801391c:	2343      	movs	r3, #67	; 0x43
 801391e:	69b9      	ldr	r1, [r7, #24]
 8013920:	f7fe fc88 	bl	8012234 <udp_sendto_if>
      pbuf_free(p_out);
 8013924:	69b8      	ldr	r0, [r7, #24]
 8013926:	f7f7 fde1 	bl	800b4ec <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801392a:	4b0e      	ldr	r3, [pc, #56]	; (8013964 <dhcp_release_and_stop+0x130>)
 801392c:	4a0d      	ldr	r2, [pc, #52]	; (8013964 <dhcp_release_and_stop+0x130>)
 801392e:	490d      	ldr	r1, [pc, #52]	; (8013964 <dhcp_release_and_stop+0x130>)
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f7f7 f963 	bl	800abfc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013936:	2100      	movs	r1, #0
 8013938:	69f8      	ldr	r0, [r7, #28]
 801393a:	f000 f815 	bl	8013968 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801393e:	69fb      	ldr	r3, [r7, #28]
 8013940:	791b      	ldrb	r3, [r3, #4]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d008      	beq.n	8013958 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013946:	f7fe ffc1 	bl	80128cc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801394a:	69fb      	ldr	r3, [r7, #28]
 801394c:	2200      	movs	r2, #0
 801394e:	711a      	strb	r2, [r3, #4]
 8013950:	e002      	b.n	8013958 <dhcp_release_and_stop+0x124>
    return;
 8013952:	bf00      	nop
 8013954:	e000      	b.n	8013958 <dhcp_release_and_stop+0x124>
    return;
 8013956:	bf00      	nop
  }
}
 8013958:	3720      	adds	r7, #32
 801395a:	46bd      	mov	sp, r7
 801395c:	bdb0      	pop	{r4, r5, r7, pc}
 801395e:	bf00      	nop
 8013960:	20000298 	.word	0x20000298
 8013964:	0801c16c 	.word	0x0801c16c

08013968 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013968:	b480      	push	{r7}
 801396a:	b083      	sub	sp, #12
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
 8013970:	460b      	mov	r3, r1
 8013972:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	795b      	ldrb	r3, [r3, #5]
 8013978:	78fa      	ldrb	r2, [r7, #3]
 801397a:	429a      	cmp	r2, r3
 801397c:	d008      	beq.n	8013990 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	78fa      	ldrb	r2, [r7, #3]
 8013982:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2200      	movs	r2, #0
 8013988:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2200      	movs	r2, #0
 801398e:	811a      	strh	r2, [r3, #8]
  }
}
 8013990:	bf00      	nop
 8013992:	370c      	adds	r7, #12
 8013994:	46bd      	mov	sp, r7
 8013996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399a:	4770      	bx	lr

0801399c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6039      	str	r1, [r7, #0]
 80139a4:	4611      	mov	r1, r2
 80139a6:	461a      	mov	r2, r3
 80139a8:	4603      	mov	r3, r0
 80139aa:	80fb      	strh	r3, [r7, #6]
 80139ac:	460b      	mov	r3, r1
 80139ae:	717b      	strb	r3, [r7, #5]
 80139b0:	4613      	mov	r3, r2
 80139b2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80139b4:	88fa      	ldrh	r2, [r7, #6]
 80139b6:	793b      	ldrb	r3, [r7, #4]
 80139b8:	4413      	add	r3, r2
 80139ba:	3302      	adds	r3, #2
 80139bc:	2b44      	cmp	r3, #68	; 0x44
 80139be:	d906      	bls.n	80139ce <dhcp_option+0x32>
 80139c0:	4b0d      	ldr	r3, [pc, #52]	; (80139f8 <dhcp_option+0x5c>)
 80139c2:	f240 529a 	movw	r2, #1434	; 0x59a
 80139c6:	490d      	ldr	r1, [pc, #52]	; (80139fc <dhcp_option+0x60>)
 80139c8:	480d      	ldr	r0, [pc, #52]	; (8013a00 <dhcp_option+0x64>)
 80139ca:	f003 fdf5 	bl	80175b8 <iprintf>
  options[options_out_len++] = option_type;
 80139ce:	88fb      	ldrh	r3, [r7, #6]
 80139d0:	1c5a      	adds	r2, r3, #1
 80139d2:	80fa      	strh	r2, [r7, #6]
 80139d4:	461a      	mov	r2, r3
 80139d6:	683b      	ldr	r3, [r7, #0]
 80139d8:	4413      	add	r3, r2
 80139da:	797a      	ldrb	r2, [r7, #5]
 80139dc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80139de:	88fb      	ldrh	r3, [r7, #6]
 80139e0:	1c5a      	adds	r2, r3, #1
 80139e2:	80fa      	strh	r2, [r7, #6]
 80139e4:	461a      	mov	r2, r3
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	4413      	add	r3, r2
 80139ea:	793a      	ldrb	r2, [r7, #4]
 80139ec:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80139ee:	88fb      	ldrh	r3, [r7, #6]
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	3708      	adds	r7, #8
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}
 80139f8:	0801b5d0 	.word	0x0801b5d0
 80139fc:	0801b764 	.word	0x0801b764
 8013a00:	0801b630 	.word	0x0801b630

08013a04 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b082      	sub	sp, #8
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	6039      	str	r1, [r7, #0]
 8013a0e:	80fb      	strh	r3, [r7, #6]
 8013a10:	4613      	mov	r3, r2
 8013a12:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013a14:	88fb      	ldrh	r3, [r7, #6]
 8013a16:	2b43      	cmp	r3, #67	; 0x43
 8013a18:	d906      	bls.n	8013a28 <dhcp_option_byte+0x24>
 8013a1a:	4b0a      	ldr	r3, [pc, #40]	; (8013a44 <dhcp_option_byte+0x40>)
 8013a1c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013a20:	4909      	ldr	r1, [pc, #36]	; (8013a48 <dhcp_option_byte+0x44>)
 8013a22:	480a      	ldr	r0, [pc, #40]	; (8013a4c <dhcp_option_byte+0x48>)
 8013a24:	f003 fdc8 	bl	80175b8 <iprintf>
  options[options_out_len++] = value;
 8013a28:	88fb      	ldrh	r3, [r7, #6]
 8013a2a:	1c5a      	adds	r2, r3, #1
 8013a2c:	80fa      	strh	r2, [r7, #6]
 8013a2e:	461a      	mov	r2, r3
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	4413      	add	r3, r2
 8013a34:	797a      	ldrb	r2, [r7, #5]
 8013a36:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013a38:	88fb      	ldrh	r3, [r7, #6]
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3708      	adds	r7, #8
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
 8013a42:	bf00      	nop
 8013a44:	0801b5d0 	.word	0x0801b5d0
 8013a48:	0801b7a8 	.word	0x0801b7a8
 8013a4c:	0801b630 	.word	0x0801b630

08013a50 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	4603      	mov	r3, r0
 8013a58:	6039      	str	r1, [r7, #0]
 8013a5a:	80fb      	strh	r3, [r7, #6]
 8013a5c:	4613      	mov	r3, r2
 8013a5e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013a60:	88fb      	ldrh	r3, [r7, #6]
 8013a62:	3302      	adds	r3, #2
 8013a64:	2b44      	cmp	r3, #68	; 0x44
 8013a66:	d906      	bls.n	8013a76 <dhcp_option_short+0x26>
 8013a68:	4b0f      	ldr	r3, [pc, #60]	; (8013aa8 <dhcp_option_short+0x58>)
 8013a6a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013a6e:	490f      	ldr	r1, [pc, #60]	; (8013aac <dhcp_option_short+0x5c>)
 8013a70:	480f      	ldr	r0, [pc, #60]	; (8013ab0 <dhcp_option_short+0x60>)
 8013a72:	f003 fda1 	bl	80175b8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013a76:	88bb      	ldrh	r3, [r7, #4]
 8013a78:	0a1b      	lsrs	r3, r3, #8
 8013a7a:	b29a      	uxth	r2, r3
 8013a7c:	88fb      	ldrh	r3, [r7, #6]
 8013a7e:	1c59      	adds	r1, r3, #1
 8013a80:	80f9      	strh	r1, [r7, #6]
 8013a82:	4619      	mov	r1, r3
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	440b      	add	r3, r1
 8013a88:	b2d2      	uxtb	r2, r2
 8013a8a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013a8c:	88fb      	ldrh	r3, [r7, #6]
 8013a8e:	1c5a      	adds	r2, r3, #1
 8013a90:	80fa      	strh	r2, [r7, #6]
 8013a92:	461a      	mov	r2, r3
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	4413      	add	r3, r2
 8013a98:	88ba      	ldrh	r2, [r7, #4]
 8013a9a:	b2d2      	uxtb	r2, r2
 8013a9c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013a9e:	88fb      	ldrh	r3, [r7, #6]
}
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	3708      	adds	r7, #8
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	0801b5d0 	.word	0x0801b5d0
 8013aac:	0801b7e0 	.word	0x0801b7e0
 8013ab0:	0801b630 	.word	0x0801b630

08013ab4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b084      	sub	sp, #16
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	4603      	mov	r3, r0
 8013abc:	60b9      	str	r1, [r7, #8]
 8013abe:	607a      	str	r2, [r7, #4]
 8013ac0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013ac2:	89fb      	ldrh	r3, [r7, #14]
 8013ac4:	3304      	adds	r3, #4
 8013ac6:	2b44      	cmp	r3, #68	; 0x44
 8013ac8:	d906      	bls.n	8013ad8 <dhcp_option_long+0x24>
 8013aca:	4b19      	ldr	r3, [pc, #100]	; (8013b30 <dhcp_option_long+0x7c>)
 8013acc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013ad0:	4918      	ldr	r1, [pc, #96]	; (8013b34 <dhcp_option_long+0x80>)
 8013ad2:	4819      	ldr	r0, [pc, #100]	; (8013b38 <dhcp_option_long+0x84>)
 8013ad4:	f003 fd70 	bl	80175b8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	0e1a      	lsrs	r2, r3, #24
 8013adc:	89fb      	ldrh	r3, [r7, #14]
 8013ade:	1c59      	adds	r1, r3, #1
 8013ae0:	81f9      	strh	r1, [r7, #14]
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	440b      	add	r3, r1
 8013ae8:	b2d2      	uxtb	r2, r2
 8013aea:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	0c1a      	lsrs	r2, r3, #16
 8013af0:	89fb      	ldrh	r3, [r7, #14]
 8013af2:	1c59      	adds	r1, r3, #1
 8013af4:	81f9      	strh	r1, [r7, #14]
 8013af6:	4619      	mov	r1, r3
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	440b      	add	r3, r1
 8013afc:	b2d2      	uxtb	r2, r2
 8013afe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	0a1a      	lsrs	r2, r3, #8
 8013b04:	89fb      	ldrh	r3, [r7, #14]
 8013b06:	1c59      	adds	r1, r3, #1
 8013b08:	81f9      	strh	r1, [r7, #14]
 8013b0a:	4619      	mov	r1, r3
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	440b      	add	r3, r1
 8013b10:	b2d2      	uxtb	r2, r2
 8013b12:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013b14:	89fb      	ldrh	r3, [r7, #14]
 8013b16:	1c5a      	adds	r2, r3, #1
 8013b18:	81fa      	strh	r2, [r7, #14]
 8013b1a:	461a      	mov	r2, r3
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	4413      	add	r3, r2
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	b2d2      	uxtb	r2, r2
 8013b24:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013b26:	89fb      	ldrh	r3, [r7, #14]
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}
 8013b30:	0801b5d0 	.word	0x0801b5d0
 8013b34:	0801b81c 	.word	0x0801b81c
 8013b38:	0801b630 	.word	0x0801b630

08013b3c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b090      	sub	sp, #64	; 0x40
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013b46:	2300      	movs	r3, #0
 8013b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013b4e:	2208      	movs	r2, #8
 8013b50:	2100      	movs	r1, #0
 8013b52:	48be      	ldr	r0, [pc, #760]	; (8013e4c <dhcp_parse_reply+0x310>)
 8013b54:	f003 fd28 	bl	80175a8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	895b      	ldrh	r3, [r3, #10]
 8013b5c:	2b2b      	cmp	r3, #43	; 0x2b
 8013b5e:	d802      	bhi.n	8013b66 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013b60:	f06f 0301 	mvn.w	r3, #1
 8013b64:	e2a8      	b.n	80140b8 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	685b      	ldr	r3, [r3, #4]
 8013b6a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013b6c:	23f0      	movs	r3, #240	; 0xf0
 8013b6e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	891b      	ldrh	r3, [r3, #8]
 8013b74:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013b7a:	e00c      	b.n	8013b96 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b7e:	895b      	ldrh	r3, [r3, #10]
 8013b80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013b82:	1ad3      	subs	r3, r2, r3
 8013b84:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b88:	895b      	ldrh	r3, [r3, #10]
 8013b8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013b8c:	1ad3      	subs	r3, r2, r3
 8013b8e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d004      	beq.n	8013ba6 <dhcp_parse_reply+0x6a>
 8013b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b9e:	895b      	ldrh	r3, [r3, #10]
 8013ba0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d2ea      	bcs.n	8013b7c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d102      	bne.n	8013bb2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013bac:	f06f 0301 	mvn.w	r3, #1
 8013bb0:	e282      	b.n	80140b8 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8013bb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013bb4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013bb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013bb8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bbc:	685b      	ldr	r3, [r3, #4]
 8013bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013bc0:	e23a      	b.n	8014038 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8013bc2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013bc6:	4413      	add	r3, r2
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8013bd6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013bd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bda:	3302      	adds	r3, #2
 8013bdc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013bde:	8bfa      	ldrh	r2, [r7, #30]
 8013be0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013be2:	429a      	cmp	r2, r3
 8013be4:	d202      	bcs.n	8013bec <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013be6:	f06f 0301 	mvn.w	r3, #1
 8013bea:	e265      	b.n	80140b8 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013bec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bee:	3301      	adds	r3, #1
 8013bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bf2:	8952      	ldrh	r2, [r2, #10]
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	da07      	bge.n	8013c08 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013bf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bfa:	3301      	adds	r3, #1
 8013bfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013bfe:	4413      	add	r3, r2
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013c06:	e00b      	b.n	8013c20 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d004      	beq.n	8013c1a <dhcp_parse_reply+0xde>
 8013c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	685b      	ldr	r3, [r3, #4]
 8013c16:	781b      	ldrb	r3, [r3, #0]
 8013c18:	e000      	b.n	8013c1c <dhcp_parse_reply+0xe0>
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013c28:	7dfb      	ldrb	r3, [r7, #23]
 8013c2a:	2b3b      	cmp	r3, #59	; 0x3b
 8013c2c:	f200 812d 	bhi.w	8013e8a <dhcp_parse_reply+0x34e>
 8013c30:	a201      	add	r2, pc, #4	; (adr r2, 8013c38 <dhcp_parse_reply+0xfc>)
 8013c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c36:	bf00      	nop
 8013c38:	08013d29 	.word	0x08013d29
 8013c3c:	08013d39 	.word	0x08013d39
 8013c40:	08013e8b 	.word	0x08013e8b
 8013c44:	08013d5b 	.word	0x08013d5b
 8013c48:	08013e8b 	.word	0x08013e8b
 8013c4c:	08013e8b 	.word	0x08013e8b
 8013c50:	08013e8b 	.word	0x08013e8b
 8013c54:	08013e8b 	.word	0x08013e8b
 8013c58:	08013e8b 	.word	0x08013e8b
 8013c5c:	08013e8b 	.word	0x08013e8b
 8013c60:	08013e8b 	.word	0x08013e8b
 8013c64:	08013e8b 	.word	0x08013e8b
 8013c68:	08013e8b 	.word	0x08013e8b
 8013c6c:	08013e8b 	.word	0x08013e8b
 8013c70:	08013e8b 	.word	0x08013e8b
 8013c74:	08013e8b 	.word	0x08013e8b
 8013c78:	08013e8b 	.word	0x08013e8b
 8013c7c:	08013e8b 	.word	0x08013e8b
 8013c80:	08013e8b 	.word	0x08013e8b
 8013c84:	08013e8b 	.word	0x08013e8b
 8013c88:	08013e8b 	.word	0x08013e8b
 8013c8c:	08013e8b 	.word	0x08013e8b
 8013c90:	08013e8b 	.word	0x08013e8b
 8013c94:	08013e8b 	.word	0x08013e8b
 8013c98:	08013e8b 	.word	0x08013e8b
 8013c9c:	08013e8b 	.word	0x08013e8b
 8013ca0:	08013e8b 	.word	0x08013e8b
 8013ca4:	08013e8b 	.word	0x08013e8b
 8013ca8:	08013e8b 	.word	0x08013e8b
 8013cac:	08013e8b 	.word	0x08013e8b
 8013cb0:	08013e8b 	.word	0x08013e8b
 8013cb4:	08013e8b 	.word	0x08013e8b
 8013cb8:	08013e8b 	.word	0x08013e8b
 8013cbc:	08013e8b 	.word	0x08013e8b
 8013cc0:	08013e8b 	.word	0x08013e8b
 8013cc4:	08013e8b 	.word	0x08013e8b
 8013cc8:	08013e8b 	.word	0x08013e8b
 8013ccc:	08013e8b 	.word	0x08013e8b
 8013cd0:	08013e8b 	.word	0x08013e8b
 8013cd4:	08013e8b 	.word	0x08013e8b
 8013cd8:	08013e8b 	.word	0x08013e8b
 8013cdc:	08013e8b 	.word	0x08013e8b
 8013ce0:	08013e8b 	.word	0x08013e8b
 8013ce4:	08013e8b 	.word	0x08013e8b
 8013ce8:	08013e8b 	.word	0x08013e8b
 8013cec:	08013e8b 	.word	0x08013e8b
 8013cf0:	08013e8b 	.word	0x08013e8b
 8013cf4:	08013e8b 	.word	0x08013e8b
 8013cf8:	08013e8b 	.word	0x08013e8b
 8013cfc:	08013e8b 	.word	0x08013e8b
 8013d00:	08013e8b 	.word	0x08013e8b
 8013d04:	08013d87 	.word	0x08013d87
 8013d08:	08013da9 	.word	0x08013da9
 8013d0c:	08013de5 	.word	0x08013de5
 8013d10:	08013e07 	.word	0x08013e07
 8013d14:	08013e8b 	.word	0x08013e8b
 8013d18:	08013e8b 	.word	0x08013e8b
 8013d1c:	08013e8b 	.word	0x08013e8b
 8013d20:	08013e29 	.word	0x08013e29
 8013d24:	08013e69 	.word	0x08013e69
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013d28:	2300      	movs	r3, #0
 8013d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8013d36:	e0ac      	b.n	8013e92 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d3c:	2b04      	cmp	r3, #4
 8013d3e:	d009      	beq.n	8013d54 <dhcp_parse_reply+0x218>
 8013d40:	4b43      	ldr	r3, [pc, #268]	; (8013e50 <dhcp_parse_reply+0x314>)
 8013d42:	f240 622e 	movw	r2, #1582	; 0x62e
 8013d46:	4943      	ldr	r1, [pc, #268]	; (8013e54 <dhcp_parse_reply+0x318>)
 8013d48:	4843      	ldr	r0, [pc, #268]	; (8013e58 <dhcp_parse_reply+0x31c>)
 8013d4a:	f003 fc35 	bl	80175b8 <iprintf>
 8013d4e:	f06f 0305 	mvn.w	r3, #5
 8013d52:	e1b1      	b.n	80140b8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8013d54:	2306      	movs	r3, #6
 8013d56:	623b      	str	r3, [r7, #32]
        break;
 8013d58:	e09b      	b.n	8013e92 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013d5a:	2304      	movs	r3, #4
 8013d5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013d60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013d64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d209      	bcs.n	8013d80 <dhcp_parse_reply+0x244>
 8013d6c:	4b38      	ldr	r3, [pc, #224]	; (8013e50 <dhcp_parse_reply+0x314>)
 8013d6e:	f240 6233 	movw	r2, #1587	; 0x633
 8013d72:	493a      	ldr	r1, [pc, #232]	; (8013e5c <dhcp_parse_reply+0x320>)
 8013d74:	4838      	ldr	r0, [pc, #224]	; (8013e58 <dhcp_parse_reply+0x31c>)
 8013d76:	f003 fc1f 	bl	80175b8 <iprintf>
 8013d7a:	f06f 0305 	mvn.w	r3, #5
 8013d7e:	e19b      	b.n	80140b8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013d80:	2307      	movs	r3, #7
 8013d82:	623b      	str	r3, [r7, #32]
        break;
 8013d84:	e085      	b.n	8013e92 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d8a:	2b04      	cmp	r3, #4
 8013d8c:	d009      	beq.n	8013da2 <dhcp_parse_reply+0x266>
 8013d8e:	4b30      	ldr	r3, [pc, #192]	; (8013e50 <dhcp_parse_reply+0x314>)
 8013d90:	f240 6241 	movw	r2, #1601	; 0x641
 8013d94:	492f      	ldr	r1, [pc, #188]	; (8013e54 <dhcp_parse_reply+0x318>)
 8013d96:	4830      	ldr	r0, [pc, #192]	; (8013e58 <dhcp_parse_reply+0x31c>)
 8013d98:	f003 fc0e 	bl	80175b8 <iprintf>
 8013d9c:	f06f 0305 	mvn.w	r3, #5
 8013da0:	e18a      	b.n	80140b8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013da2:	2303      	movs	r3, #3
 8013da4:	623b      	str	r3, [r7, #32]
        break;
 8013da6:	e074      	b.n	8013e92 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dac:	2b01      	cmp	r3, #1
 8013dae:	d009      	beq.n	8013dc4 <dhcp_parse_reply+0x288>
 8013db0:	4b27      	ldr	r3, [pc, #156]	; (8013e50 <dhcp_parse_reply+0x314>)
 8013db2:	f240 624f 	movw	r2, #1615	; 0x64f
 8013db6:	492a      	ldr	r1, [pc, #168]	; (8013e60 <dhcp_parse_reply+0x324>)
 8013db8:	4827      	ldr	r0, [pc, #156]	; (8013e58 <dhcp_parse_reply+0x31c>)
 8013dba:	f003 fbfd 	bl	80175b8 <iprintf>
 8013dbe:	f06f 0305 	mvn.w	r3, #5
 8013dc2:	e179      	b.n	80140b8 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013dc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013dc6:	2bf0      	cmp	r3, #240	; 0xf0
 8013dc8:	d009      	beq.n	8013dde <dhcp_parse_reply+0x2a2>
 8013dca:	4b21      	ldr	r3, [pc, #132]	; (8013e50 <dhcp_parse_reply+0x314>)
 8013dcc:	f240 6251 	movw	r2, #1617	; 0x651
 8013dd0:	4924      	ldr	r1, [pc, #144]	; (8013e64 <dhcp_parse_reply+0x328>)
 8013dd2:	4821      	ldr	r0, [pc, #132]	; (8013e58 <dhcp_parse_reply+0x31c>)
 8013dd4:	f003 fbf0 	bl	80175b8 <iprintf>
 8013dd8:	f06f 0305 	mvn.w	r3, #5
 8013ddc:	e16c      	b.n	80140b8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013dde:	2300      	movs	r3, #0
 8013de0:	623b      	str	r3, [r7, #32]
        break;
 8013de2:	e056      	b.n	8013e92 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013de8:	2b01      	cmp	r3, #1
 8013dea:	d009      	beq.n	8013e00 <dhcp_parse_reply+0x2c4>
 8013dec:	4b18      	ldr	r3, [pc, #96]	; (8013e50 <dhcp_parse_reply+0x314>)
 8013dee:	f240 6255 	movw	r2, #1621	; 0x655
 8013df2:	491b      	ldr	r1, [pc, #108]	; (8013e60 <dhcp_parse_reply+0x324>)
 8013df4:	4818      	ldr	r0, [pc, #96]	; (8013e58 <dhcp_parse_reply+0x31c>)
 8013df6:	f003 fbdf 	bl	80175b8 <iprintf>
 8013dfa:	f06f 0305 	mvn.w	r3, #5
 8013dfe:	e15b      	b.n	80140b8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013e00:	2301      	movs	r3, #1
 8013e02:	623b      	str	r3, [r7, #32]
        break;
 8013e04:	e045      	b.n	8013e92 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e0a:	2b04      	cmp	r3, #4
 8013e0c:	d009      	beq.n	8013e22 <dhcp_parse_reply+0x2e6>
 8013e0e:	4b10      	ldr	r3, [pc, #64]	; (8013e50 <dhcp_parse_reply+0x314>)
 8013e10:	f240 6259 	movw	r2, #1625	; 0x659
 8013e14:	490f      	ldr	r1, [pc, #60]	; (8013e54 <dhcp_parse_reply+0x318>)
 8013e16:	4810      	ldr	r0, [pc, #64]	; (8013e58 <dhcp_parse_reply+0x31c>)
 8013e18:	f003 fbce 	bl	80175b8 <iprintf>
 8013e1c:	f06f 0305 	mvn.w	r3, #5
 8013e20:	e14a      	b.n	80140b8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8013e22:	2302      	movs	r3, #2
 8013e24:	623b      	str	r3, [r7, #32]
        break;
 8013e26:	e034      	b.n	8013e92 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e2c:	2b04      	cmp	r3, #4
 8013e2e:	d009      	beq.n	8013e44 <dhcp_parse_reply+0x308>
 8013e30:	4b07      	ldr	r3, [pc, #28]	; (8013e50 <dhcp_parse_reply+0x314>)
 8013e32:	f240 625d 	movw	r2, #1629	; 0x65d
 8013e36:	4907      	ldr	r1, [pc, #28]	; (8013e54 <dhcp_parse_reply+0x318>)
 8013e38:	4807      	ldr	r0, [pc, #28]	; (8013e58 <dhcp_parse_reply+0x31c>)
 8013e3a:	f003 fbbd 	bl	80175b8 <iprintf>
 8013e3e:	f06f 0305 	mvn.w	r3, #5
 8013e42:	e139      	b.n	80140b8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013e44:	2304      	movs	r3, #4
 8013e46:	623b      	str	r3, [r7, #32]
        break;
 8013e48:	e023      	b.n	8013e92 <dhcp_parse_reply+0x356>
 8013e4a:	bf00      	nop
 8013e4c:	20006d28 	.word	0x20006d28
 8013e50:	0801b5d0 	.word	0x0801b5d0
 8013e54:	0801b858 	.word	0x0801b858
 8013e58:	0801b630 	.word	0x0801b630
 8013e5c:	0801b864 	.word	0x0801b864
 8013e60:	0801b878 	.word	0x0801b878
 8013e64:	0801b884 	.word	0x0801b884
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e6c:	2b04      	cmp	r3, #4
 8013e6e:	d009      	beq.n	8013e84 <dhcp_parse_reply+0x348>
 8013e70:	4b93      	ldr	r3, [pc, #588]	; (80140c0 <dhcp_parse_reply+0x584>)
 8013e72:	f240 6261 	movw	r2, #1633	; 0x661
 8013e76:	4993      	ldr	r1, [pc, #588]	; (80140c4 <dhcp_parse_reply+0x588>)
 8013e78:	4893      	ldr	r0, [pc, #588]	; (80140c8 <dhcp_parse_reply+0x58c>)
 8013e7a:	f003 fb9d 	bl	80175b8 <iprintf>
 8013e7e:	f06f 0305 	mvn.w	r3, #5
 8013e82:	e119      	b.n	80140b8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8013e84:	2305      	movs	r3, #5
 8013e86:	623b      	str	r3, [r7, #32]
        break;
 8013e88:	e003      	b.n	8013e92 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013e90:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013e92:	7dfb      	ldrb	r3, [r7, #23]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d103      	bne.n	8013ea0 <dhcp_parse_reply+0x364>
      offset++;
 8013e98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8013e9e:	e0a1      	b.n	8013fe4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8013ea0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ea6:	4413      	add	r3, r2
 8013ea8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8013eac:	4293      	cmp	r3, r2
 8013eae:	dd02      	ble.n	8013eb6 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8013eb0:	f06f 0301 	mvn.w	r3, #1
 8013eb4:	e100      	b.n	80140b8 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8013eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013eba:	b29a      	uxth	r2, r3
 8013ebc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ebe:	4413      	add	r3, r2
 8013ec0:	b29b      	uxth	r3, r3
 8013ec2:	3302      	adds	r3, #2
 8013ec4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8013ec6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	f000 808a 	beq.w	8013fe4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013ed4:	6a3b      	ldr	r3, [r7, #32]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	db02      	blt.n	8013ee0 <dhcp_parse_reply+0x3a4>
 8013eda:	6a3b      	ldr	r3, [r7, #32]
 8013edc:	2b07      	cmp	r3, #7
 8013ede:	dd06      	ble.n	8013eee <dhcp_parse_reply+0x3b2>
 8013ee0:	4b77      	ldr	r3, [pc, #476]	; (80140c0 <dhcp_parse_reply+0x584>)
 8013ee2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8013ee6:	4979      	ldr	r1, [pc, #484]	; (80140cc <dhcp_parse_reply+0x590>)
 8013ee8:	4877      	ldr	r0, [pc, #476]	; (80140c8 <dhcp_parse_reply+0x58c>)
 8013eea:	f003 fb65 	bl	80175b8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8013eee:	4a78      	ldr	r2, [pc, #480]	; (80140d0 <dhcp_parse_reply+0x594>)
 8013ef0:	6a3b      	ldr	r3, [r7, #32]
 8013ef2:	4413      	add	r3, r2
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d174      	bne.n	8013fe4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8013efa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013efe:	2b04      	cmp	r3, #4
 8013f00:	bf28      	it	cs
 8013f02:	2304      	movcs	r3, #4
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013f08:	8bfb      	ldrh	r3, [r7, #30]
 8013f0a:	8aba      	ldrh	r2, [r7, #20]
 8013f0c:	f107 0108 	add.w	r1, r7, #8
 8013f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f12:	f7f7 fce5 	bl	800b8e0 <pbuf_copy_partial>
 8013f16:	4603      	mov	r3, r0
 8013f18:	461a      	mov	r2, r3
 8013f1a:	8abb      	ldrh	r3, [r7, #20]
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	d002      	beq.n	8013f26 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8013f20:	f06f 0301 	mvn.w	r3, #1
 8013f24:	e0c8      	b.n	80140b8 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8013f26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f2a:	2b04      	cmp	r3, #4
 8013f2c:	d933      	bls.n	8013f96 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013f2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f32:	f003 0303 	and.w	r3, r3, #3
 8013f36:	b2db      	uxtb	r3, r3
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d009      	beq.n	8013f50 <dhcp_parse_reply+0x414>
 8013f3c:	4b60      	ldr	r3, [pc, #384]	; (80140c0 <dhcp_parse_reply+0x584>)
 8013f3e:	f240 6281 	movw	r2, #1665	; 0x681
 8013f42:	4964      	ldr	r1, [pc, #400]	; (80140d4 <dhcp_parse_reply+0x598>)
 8013f44:	4860      	ldr	r0, [pc, #384]	; (80140c8 <dhcp_parse_reply+0x58c>)
 8013f46:	f003 fb37 	bl	80175b8 <iprintf>
 8013f4a:	f06f 0305 	mvn.w	r3, #5
 8013f4e:	e0b3      	b.n	80140b8 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8013f50:	4a5f      	ldr	r2, [pc, #380]	; (80140d0 <dhcp_parse_reply+0x594>)
 8013f52:	6a3b      	ldr	r3, [r7, #32]
 8013f54:	4413      	add	r3, r2
 8013f56:	2201      	movs	r2, #1
 8013f58:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7f5 fff6 	bl	8009f4e <lwip_htonl>
 8013f62:	4602      	mov	r2, r0
 8013f64:	495c      	ldr	r1, [pc, #368]	; (80140d8 <dhcp_parse_reply+0x59c>)
 8013f66:	6a3b      	ldr	r3, [r7, #32]
 8013f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8013f6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f70:	3b04      	subs	r3, #4
 8013f72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8013f76:	8bfb      	ldrh	r3, [r7, #30]
 8013f78:	3304      	adds	r3, #4
 8013f7a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8013f7c:	8a7a      	ldrh	r2, [r7, #18]
 8013f7e:	8bfb      	ldrh	r3, [r7, #30]
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d202      	bcs.n	8013f8a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8013f84:	f06f 0301 	mvn.w	r3, #1
 8013f88:	e096      	b.n	80140b8 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8013f8a:	8a7b      	ldrh	r3, [r7, #18]
 8013f8c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8013f8e:	6a3b      	ldr	r3, [r7, #32]
 8013f90:	3301      	adds	r3, #1
 8013f92:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8013f94:	e79e      	b.n	8013ed4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8013f96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f9a:	2b04      	cmp	r3, #4
 8013f9c:	d106      	bne.n	8013fac <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f7f5 ffd4 	bl	8009f4e <lwip_htonl>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	60bb      	str	r3, [r7, #8]
 8013faa:	e011      	b.n	8013fd0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013fac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013fb0:	2b01      	cmp	r3, #1
 8013fb2:	d009      	beq.n	8013fc8 <dhcp_parse_reply+0x48c>
 8013fb4:	4b42      	ldr	r3, [pc, #264]	; (80140c0 <dhcp_parse_reply+0x584>)
 8013fb6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8013fba:	4948      	ldr	r1, [pc, #288]	; (80140dc <dhcp_parse_reply+0x5a0>)
 8013fbc:	4842      	ldr	r0, [pc, #264]	; (80140c8 <dhcp_parse_reply+0x58c>)
 8013fbe:	f003 fafb 	bl	80175b8 <iprintf>
 8013fc2:	f06f 0305 	mvn.w	r3, #5
 8013fc6:	e077      	b.n	80140b8 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8013fc8:	f107 0308 	add.w	r3, r7, #8
 8013fcc:	781b      	ldrb	r3, [r3, #0]
 8013fce:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013fd0:	4a3f      	ldr	r2, [pc, #252]	; (80140d0 <dhcp_parse_reply+0x594>)
 8013fd2:	6a3b      	ldr	r3, [r7, #32]
 8013fd4:	4413      	add	r3, r2
 8013fd6:	2201      	movs	r2, #1
 8013fd8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013fda:	68ba      	ldr	r2, [r7, #8]
 8013fdc:	493e      	ldr	r1, [pc, #248]	; (80140d8 <dhcp_parse_reply+0x59c>)
 8013fde:	6a3b      	ldr	r3, [r7, #32]
 8013fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8013fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe6:	895b      	ldrh	r3, [r3, #10]
 8013fe8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013fea:	429a      	cmp	r2, r3
 8013fec:	d324      	bcc.n	8014038 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8013fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff0:	895b      	ldrh	r3, [r3, #10]
 8013ff2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013ff4:	1ad3      	subs	r3, r2, r3
 8013ff6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8013ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffa:	895b      	ldrh	r3, [r3, #10]
 8013ffc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013ffe:	1ad3      	subs	r3, r2, r3
 8014000:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8014002:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014004:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014006:	429a      	cmp	r2, r3
 8014008:	d213      	bcs.n	8014032 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014012:	2b00      	cmp	r3, #0
 8014014:	d109      	bne.n	801402a <dhcp_parse_reply+0x4ee>
 8014016:	4b2a      	ldr	r3, [pc, #168]	; (80140c0 <dhcp_parse_reply+0x584>)
 8014018:	f240 629d 	movw	r2, #1693	; 0x69d
 801401c:	4930      	ldr	r1, [pc, #192]	; (80140e0 <dhcp_parse_reply+0x5a4>)
 801401e:	482a      	ldr	r0, [pc, #168]	; (80140c8 <dhcp_parse_reply+0x58c>)
 8014020:	f003 faca 	bl	80175b8 <iprintf>
 8014024:	f06f 0305 	mvn.w	r3, #5
 8014028:	e046      	b.n	80140b8 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014030:	e002      	b.n	8014038 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014032:	f06f 0301 	mvn.w	r3, #1
 8014036:	e03f      	b.n	80140b8 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801403a:	2b00      	cmp	r3, #0
 801403c:	d00a      	beq.n	8014054 <dhcp_parse_reply+0x518>
 801403e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014040:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014042:	429a      	cmp	r2, r3
 8014044:	d206      	bcs.n	8014054 <dhcp_parse_reply+0x518>
 8014046:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801404a:	4413      	add	r3, r2
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	2bff      	cmp	r3, #255	; 0xff
 8014050:	f47f adb7 	bne.w	8013bc2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014054:	4b1e      	ldr	r3, [pc, #120]	; (80140d0 <dhcp_parse_reply+0x594>)
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d018      	beq.n	801408e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801405c:	4b1e      	ldr	r3, [pc, #120]	; (80140d8 <dhcp_parse_reply+0x59c>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014062:	4b1b      	ldr	r3, [pc, #108]	; (80140d0 <dhcp_parse_reply+0x594>)
 8014064:	2200      	movs	r2, #0
 8014066:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	2b01      	cmp	r3, #1
 801406c:	d102      	bne.n	8014074 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801406e:	2301      	movs	r3, #1
 8014070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014072:	e00c      	b.n	801408e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2b02      	cmp	r3, #2
 8014078:	d102      	bne.n	8014080 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801407a:	2301      	movs	r3, #1
 801407c:	62bb      	str	r3, [r7, #40]	; 0x28
 801407e:	e006      	b.n	801408e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	2b03      	cmp	r3, #3
 8014084:	d103      	bne.n	801408e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014086:	2301      	movs	r3, #1
 8014088:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801408a:	2301      	movs	r3, #1
 801408c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014090:	2b00      	cmp	r3, #0
 8014092:	d006      	beq.n	80140a2 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014094:	2300      	movs	r3, #0
 8014096:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014098:	236c      	movs	r3, #108	; 0x6c
 801409a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801409c:	23ec      	movs	r3, #236	; 0xec
 801409e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80140a0:	e569      	b.n	8013b76 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80140a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d006      	beq.n	80140b6 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80140a8:	2300      	movs	r3, #0
 80140aa:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80140ac:	232c      	movs	r3, #44	; 0x2c
 80140ae:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80140b0:	236c      	movs	r3, #108	; 0x6c
 80140b2:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80140b4:	e55f      	b.n	8013b76 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80140b6:	2300      	movs	r3, #0
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	3740      	adds	r7, #64	; 0x40
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}
 80140c0:	0801b5d0 	.word	0x0801b5d0
 80140c4:	0801b858 	.word	0x0801b858
 80140c8:	0801b630 	.word	0x0801b630
 80140cc:	0801b89c 	.word	0x0801b89c
 80140d0:	20006d28 	.word	0x20006d28
 80140d4:	0801b8b0 	.word	0x0801b8b0
 80140d8:	20006d30 	.word	0x20006d30
 80140dc:	0801b8c8 	.word	0x0801b8c8
 80140e0:	0801b8dc 	.word	0x0801b8dc

080140e4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b08a      	sub	sp, #40	; 0x28
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	60f8      	str	r0, [r7, #12]
 80140ec:	60b9      	str	r1, [r7, #8]
 80140ee:	607a      	str	r2, [r7, #4]
 80140f0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80140f2:	4b60      	ldr	r3, [pc, #384]	; (8014274 <dhcp_recv+0x190>)
 80140f4:	685b      	ldr	r3, [r3, #4]
 80140f6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80140f8:	6a3b      	ldr	r3, [r7, #32]
 80140fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140fc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	685b      	ldr	r3, [r3, #4]
 8014102:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014104:	69fb      	ldr	r3, [r7, #28]
 8014106:	2b00      	cmp	r3, #0
 8014108:	f000 809d 	beq.w	8014246 <dhcp_recv+0x162>
 801410c:	69fb      	ldr	r3, [r7, #28]
 801410e:	791b      	ldrb	r3, [r3, #4]
 8014110:	2b00      	cmp	r3, #0
 8014112:	f000 8098 	beq.w	8014246 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	895b      	ldrh	r3, [r3, #10]
 801411a:	2b2b      	cmp	r3, #43	; 0x2b
 801411c:	f240 8095 	bls.w	801424a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014120:	69bb      	ldr	r3, [r7, #24]
 8014122:	781b      	ldrb	r3, [r3, #0]
 8014124:	2b02      	cmp	r3, #2
 8014126:	f040 8092 	bne.w	801424e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801412a:	2300      	movs	r3, #0
 801412c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014130:	e012      	b.n	8014158 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014136:	6a3a      	ldr	r2, [r7, #32]
 8014138:	4413      	add	r3, r2
 801413a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801413e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014142:	69b9      	ldr	r1, [r7, #24]
 8014144:	440b      	add	r3, r1
 8014146:	7f1b      	ldrb	r3, [r3, #28]
 8014148:	429a      	cmp	r2, r3
 801414a:	f040 8082 	bne.w	8014252 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801414e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014152:	3301      	adds	r3, #1
 8014154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014158:	6a3b      	ldr	r3, [r7, #32]
 801415a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801415e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014162:	429a      	cmp	r2, r3
 8014164:	d203      	bcs.n	801416e <dhcp_recv+0x8a>
 8014166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801416a:	2b05      	cmp	r3, #5
 801416c:	d9e1      	bls.n	8014132 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801416e:	69bb      	ldr	r3, [r7, #24]
 8014170:	685b      	ldr	r3, [r3, #4]
 8014172:	4618      	mov	r0, r3
 8014174:	f7f5 feeb 	bl	8009f4e <lwip_htonl>
 8014178:	4602      	mov	r2, r0
 801417a:	69fb      	ldr	r3, [r7, #28]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	429a      	cmp	r2, r3
 8014180:	d169      	bne.n	8014256 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8014182:	69f9      	ldr	r1, [r7, #28]
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f7ff fcd9 	bl	8013b3c <dhcp_parse_reply>
 801418a:	4603      	mov	r3, r0
 801418c:	2b00      	cmp	r3, #0
 801418e:	d164      	bne.n	801425a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014190:	4b39      	ldr	r3, [pc, #228]	; (8014278 <dhcp_recv+0x194>)
 8014192:	785b      	ldrb	r3, [r3, #1]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d062      	beq.n	801425e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	685b      	ldr	r3, [r3, #4]
 801419c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801419e:	4b37      	ldr	r3, [pc, #220]	; (801427c <dhcp_recv+0x198>)
 80141a0:	685b      	ldr	r3, [r3, #4]
 80141a2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80141a4:	7cfb      	ldrb	r3, [r7, #19]
 80141a6:	2b05      	cmp	r3, #5
 80141a8:	d12a      	bne.n	8014200 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80141aa:	69fb      	ldr	r3, [r7, #28]
 80141ac:	795b      	ldrb	r3, [r3, #5]
 80141ae:	2b01      	cmp	r3, #1
 80141b0:	d112      	bne.n	80141d8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80141b2:	6979      	ldr	r1, [r7, #20]
 80141b4:	6a38      	ldr	r0, [r7, #32]
 80141b6:	f7fe fe53 	bl	8012e60 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80141ba:	6a3b      	ldr	r3, [r7, #32]
 80141bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141c0:	f003 0308 	and.w	r3, r3, #8
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d003      	beq.n	80141d0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80141c8:	6a38      	ldr	r0, [r7, #32]
 80141ca:	f7fe fbc3 	bl	8012954 <dhcp_check>
 80141ce:	e049      	b.n	8014264 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80141d0:	6a38      	ldr	r0, [r7, #32]
 80141d2:	f7ff f867 	bl	80132a4 <dhcp_bind>
 80141d6:	e045      	b.n	8014264 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80141d8:	69fb      	ldr	r3, [r7, #28]
 80141da:	795b      	ldrb	r3, [r3, #5]
 80141dc:	2b03      	cmp	r3, #3
 80141de:	d007      	beq.n	80141f0 <dhcp_recv+0x10c>
 80141e0:	69fb      	ldr	r3, [r7, #28]
 80141e2:	795b      	ldrb	r3, [r3, #5]
 80141e4:	2b04      	cmp	r3, #4
 80141e6:	d003      	beq.n	80141f0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80141e8:	69fb      	ldr	r3, [r7, #28]
 80141ea:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80141ec:	2b05      	cmp	r3, #5
 80141ee:	d139      	bne.n	8014264 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80141f0:	6979      	ldr	r1, [r7, #20]
 80141f2:	6a38      	ldr	r0, [r7, #32]
 80141f4:	f7fe fe34 	bl	8012e60 <dhcp_handle_ack>
      dhcp_bind(netif);
 80141f8:	6a38      	ldr	r0, [r7, #32]
 80141fa:	f7ff f853 	bl	80132a4 <dhcp_bind>
 80141fe:	e031      	b.n	8014264 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014200:	7cfb      	ldrb	r3, [r7, #19]
 8014202:	2b06      	cmp	r3, #6
 8014204:	d113      	bne.n	801422e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014206:	69fb      	ldr	r3, [r7, #28]
 8014208:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801420a:	2b03      	cmp	r3, #3
 801420c:	d00b      	beq.n	8014226 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801420e:	69fb      	ldr	r3, [r7, #28]
 8014210:	795b      	ldrb	r3, [r3, #5]
 8014212:	2b01      	cmp	r3, #1
 8014214:	d007      	beq.n	8014226 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014216:	69fb      	ldr	r3, [r7, #28]
 8014218:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801421a:	2b04      	cmp	r3, #4
 801421c:	d003      	beq.n	8014226 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	795b      	ldrb	r3, [r3, #5]
 8014222:	2b05      	cmp	r3, #5
 8014224:	d103      	bne.n	801422e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014226:	6a38      	ldr	r0, [r7, #32]
 8014228:	f7fe fb7a 	bl	8012920 <dhcp_handle_nak>
 801422c:	e01a      	b.n	8014264 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801422e:	7cfb      	ldrb	r3, [r7, #19]
 8014230:	2b02      	cmp	r3, #2
 8014232:	d116      	bne.n	8014262 <dhcp_recv+0x17e>
 8014234:	69fb      	ldr	r3, [r7, #28]
 8014236:	795b      	ldrb	r3, [r3, #5]
 8014238:	2b06      	cmp	r3, #6
 801423a:	d112      	bne.n	8014262 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801423c:	6979      	ldr	r1, [r7, #20]
 801423e:	6a38      	ldr	r0, [r7, #32]
 8014240:	f7fe fbbc 	bl	80129bc <dhcp_handle_offer>
 8014244:	e00e      	b.n	8014264 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014246:	bf00      	nop
 8014248:	e00c      	b.n	8014264 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801424a:	bf00      	nop
 801424c:	e00a      	b.n	8014264 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801424e:	bf00      	nop
 8014250:	e008      	b.n	8014264 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8014252:	bf00      	nop
 8014254:	e006      	b.n	8014264 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014256:	bf00      	nop
 8014258:	e004      	b.n	8014264 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801425a:	bf00      	nop
 801425c:	e002      	b.n	8014264 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801425e:	bf00      	nop
 8014260:	e000      	b.n	8014264 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8014262:	bf00      	nop
  pbuf_free(p);
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f7f7 f941 	bl	800b4ec <pbuf_free>
}
 801426a:	bf00      	nop
 801426c:	3728      	adds	r7, #40	; 0x28
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}
 8014272:	bf00      	nop
 8014274:	200037a8 	.word	0x200037a8
 8014278:	20006d28 	.word	0x20006d28
 801427c:	20006d30 	.word	0x20006d30

08014280 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b088      	sub	sp, #32
 8014284:	af00      	add	r7, sp, #0
 8014286:	60f8      	str	r0, [r7, #12]
 8014288:	60b9      	str	r1, [r7, #8]
 801428a:	603b      	str	r3, [r7, #0]
 801428c:	4613      	mov	r3, r2
 801428e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d108      	bne.n	80142a8 <dhcp_create_msg+0x28>
 8014296:	4b5f      	ldr	r3, [pc, #380]	; (8014414 <dhcp_create_msg+0x194>)
 8014298:	f240 7269 	movw	r2, #1897	; 0x769
 801429c:	495e      	ldr	r1, [pc, #376]	; (8014418 <dhcp_create_msg+0x198>)
 801429e:	485f      	ldr	r0, [pc, #380]	; (801441c <dhcp_create_msg+0x19c>)
 80142a0:	f003 f98a 	bl	80175b8 <iprintf>
 80142a4:	2300      	movs	r3, #0
 80142a6:	e0b1      	b.n	801440c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d108      	bne.n	80142c0 <dhcp_create_msg+0x40>
 80142ae:	4b59      	ldr	r3, [pc, #356]	; (8014414 <dhcp_create_msg+0x194>)
 80142b0:	f240 726a 	movw	r2, #1898	; 0x76a
 80142b4:	495a      	ldr	r1, [pc, #360]	; (8014420 <dhcp_create_msg+0x1a0>)
 80142b6:	4859      	ldr	r0, [pc, #356]	; (801441c <dhcp_create_msg+0x19c>)
 80142b8:	f003 f97e 	bl	80175b8 <iprintf>
 80142bc:	2300      	movs	r3, #0
 80142be:	e0a5      	b.n	801440c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80142c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80142c4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80142c8:	2036      	movs	r0, #54	; 0x36
 80142ca:	f7f6 fe2b 	bl	800af24 <pbuf_alloc>
 80142ce:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80142d0:	69bb      	ldr	r3, [r7, #24]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d101      	bne.n	80142da <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80142d6:	2300      	movs	r3, #0
 80142d8:	e098      	b.n	801440c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	895b      	ldrh	r3, [r3, #10]
 80142de:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80142e2:	d206      	bcs.n	80142f2 <dhcp_create_msg+0x72>
 80142e4:	4b4b      	ldr	r3, [pc, #300]	; (8014414 <dhcp_create_msg+0x194>)
 80142e6:	f240 7271 	movw	r2, #1905	; 0x771
 80142ea:	494e      	ldr	r1, [pc, #312]	; (8014424 <dhcp_create_msg+0x1a4>)
 80142ec:	484b      	ldr	r0, [pc, #300]	; (801441c <dhcp_create_msg+0x19c>)
 80142ee:	f003 f963 	bl	80175b8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80142f2:	79fb      	ldrb	r3, [r7, #7]
 80142f4:	2b03      	cmp	r3, #3
 80142f6:	d103      	bne.n	8014300 <dhcp_create_msg+0x80>
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	795b      	ldrb	r3, [r3, #5]
 80142fc:	2b03      	cmp	r3, #3
 80142fe:	d10d      	bne.n	801431c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	799b      	ldrb	r3, [r3, #6]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d105      	bne.n	8014314 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014308:	f003 f96e 	bl	80175e8 <rand>
 801430c:	4603      	mov	r3, r0
 801430e:	461a      	mov	r2, r3
 8014310:	4b45      	ldr	r3, [pc, #276]	; (8014428 <dhcp_create_msg+0x1a8>)
 8014312:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014314:	4b44      	ldr	r3, [pc, #272]	; (8014428 <dhcp_create_msg+0x1a8>)
 8014316:	681a      	ldr	r2, [r3, #0]
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801431c:	69bb      	ldr	r3, [r7, #24]
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8014322:	f44f 729a 	mov.w	r2, #308	; 0x134
 8014326:	2100      	movs	r1, #0
 8014328:	6978      	ldr	r0, [r7, #20]
 801432a:	f003 f93d 	bl	80175a8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801432e:	697b      	ldr	r3, [r7, #20]
 8014330:	2201      	movs	r2, #1
 8014332:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	2201      	movs	r2, #1
 8014338:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	4618      	mov	r0, r3
 801434a:	f7f5 fe00 	bl	8009f4e <lwip_htonl>
 801434e:	4602      	mov	r2, r0
 8014350:	697b      	ldr	r3, [r7, #20]
 8014352:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014354:	79fb      	ldrb	r3, [r7, #7]
 8014356:	2b08      	cmp	r3, #8
 8014358:	d010      	beq.n	801437c <dhcp_create_msg+0xfc>
 801435a:	79fb      	ldrb	r3, [r7, #7]
 801435c:	2b04      	cmp	r3, #4
 801435e:	d00d      	beq.n	801437c <dhcp_create_msg+0xfc>
 8014360:	79fb      	ldrb	r3, [r7, #7]
 8014362:	2b07      	cmp	r3, #7
 8014364:	d00a      	beq.n	801437c <dhcp_create_msg+0xfc>
 8014366:	79fb      	ldrb	r3, [r7, #7]
 8014368:	2b03      	cmp	r3, #3
 801436a:	d10c      	bne.n	8014386 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8014370:	2b05      	cmp	r3, #5
 8014372:	d003      	beq.n	801437c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	795b      	ldrb	r3, [r3, #5]
 8014378:	2b04      	cmp	r3, #4
 801437a:	d104      	bne.n	8014386 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	3304      	adds	r3, #4
 8014380:	681a      	ldr	r2, [r3, #0]
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014386:	2300      	movs	r3, #0
 8014388:	83fb      	strh	r3, [r7, #30]
 801438a:	e00c      	b.n	80143a6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801438c:	8bfa      	ldrh	r2, [r7, #30]
 801438e:	8bfb      	ldrh	r3, [r7, #30]
 8014390:	68f9      	ldr	r1, [r7, #12]
 8014392:	440a      	add	r2, r1
 8014394:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8014398:	697a      	ldr	r2, [r7, #20]
 801439a:	4413      	add	r3, r2
 801439c:	460a      	mov	r2, r1
 801439e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80143a0:	8bfb      	ldrh	r3, [r7, #30]
 80143a2:	3301      	adds	r3, #1
 80143a4:	83fb      	strh	r3, [r7, #30]
 80143a6:	8bfb      	ldrh	r3, [r7, #30]
 80143a8:	2b05      	cmp	r3, #5
 80143aa:	d9ef      	bls.n	801438c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	2200      	movs	r2, #0
 80143b0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80143b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80143b8:	2200      	movs	r2, #0
 80143ba:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80143be:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80143c2:	2200      	movs	r2, #0
 80143c4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80143c8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80143cc:	2200      	movs	r2, #0
 80143ce:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80143d2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143dc:	2301      	movs	r3, #1
 80143de:	2235      	movs	r2, #53	; 0x35
 80143e0:	2000      	movs	r0, #0
 80143e2:	f7ff fadb 	bl	801399c <dhcp_option>
 80143e6:	4603      	mov	r3, r0
 80143e8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143f0:	79fa      	ldrb	r2, [r7, #7]
 80143f2:	8a7b      	ldrh	r3, [r7, #18]
 80143f4:	4618      	mov	r0, r3
 80143f6:	f7ff fb05 	bl	8013a04 <dhcp_option_byte>
 80143fa:	4603      	mov	r3, r0
 80143fc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d002      	beq.n	801440a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8014404:	683b      	ldr	r3, [r7, #0]
 8014406:	8a7a      	ldrh	r2, [r7, #18]
 8014408:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801440a:	69bb      	ldr	r3, [r7, #24]
}
 801440c:	4618      	mov	r0, r3
 801440e:	3720      	adds	r7, #32
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}
 8014414:	0801b5d0 	.word	0x0801b5d0
 8014418:	0801b8f0 	.word	0x0801b8f0
 801441c:	0801b630 	.word	0x0801b630
 8014420:	0801b910 	.word	0x0801b910
 8014424:	0801b930 	.word	0x0801b930
 8014428:	200002a0 	.word	0x200002a0

0801442c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b084      	sub	sp, #16
 8014430:	af00      	add	r7, sp, #0
 8014432:	4603      	mov	r3, r0
 8014434:	60b9      	str	r1, [r7, #8]
 8014436:	607a      	str	r2, [r7, #4]
 8014438:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801443a:	89fb      	ldrh	r3, [r7, #14]
 801443c:	1c5a      	adds	r2, r3, #1
 801443e:	81fa      	strh	r2, [r7, #14]
 8014440:	461a      	mov	r2, r3
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	4413      	add	r3, r2
 8014446:	22ff      	movs	r2, #255	; 0xff
 8014448:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801444a:	e007      	b.n	801445c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801444c:	89fb      	ldrh	r3, [r7, #14]
 801444e:	1c5a      	adds	r2, r3, #1
 8014450:	81fa      	strh	r2, [r7, #14]
 8014452:	461a      	mov	r2, r3
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	4413      	add	r3, r2
 8014458:	2200      	movs	r2, #0
 801445a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801445c:	89fb      	ldrh	r3, [r7, #14]
 801445e:	2b43      	cmp	r3, #67	; 0x43
 8014460:	d904      	bls.n	801446c <dhcp_option_trailer+0x40>
 8014462:	89fb      	ldrh	r3, [r7, #14]
 8014464:	f003 0303 	and.w	r3, r3, #3
 8014468:	2b00      	cmp	r3, #0
 801446a:	d002      	beq.n	8014472 <dhcp_option_trailer+0x46>
 801446c:	89fb      	ldrh	r3, [r7, #14]
 801446e:	2b43      	cmp	r3, #67	; 0x43
 8014470:	d9ec      	bls.n	801444c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8014472:	89fb      	ldrh	r3, [r7, #14]
 8014474:	33f0      	adds	r3, #240	; 0xf0
 8014476:	b29b      	uxth	r3, r3
 8014478:	4619      	mov	r1, r3
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f7f6 feb0 	bl	800b1e0 <pbuf_realloc>
}
 8014480:	bf00      	nop
 8014482:	3710      	adds	r7, #16
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}

08014488 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014488:	b480      	push	{r7}
 801448a:	b085      	sub	sp, #20
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d017      	beq.n	80144c6 <dhcp_supplied_address+0x3e>
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801449a:	2b00      	cmp	r3, #0
 801449c:	d013      	beq.n	80144c6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144a2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	795b      	ldrb	r3, [r3, #5]
 80144a8:	2b0a      	cmp	r3, #10
 80144aa:	d007      	beq.n	80144bc <dhcp_supplied_address+0x34>
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	795b      	ldrb	r3, [r3, #5]
 80144b0:	2b05      	cmp	r3, #5
 80144b2:	d003      	beq.n	80144bc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80144b8:	2b04      	cmp	r3, #4
 80144ba:	d101      	bne.n	80144c0 <dhcp_supplied_address+0x38>
 80144bc:	2301      	movs	r3, #1
 80144be:	e000      	b.n	80144c2 <dhcp_supplied_address+0x3a>
 80144c0:	2300      	movs	r3, #0
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	e000      	b.n	80144c8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80144c6:	2300      	movs	r3, #0
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3714      	adds	r7, #20
 80144cc:	46bd      	mov	sp, r7
 80144ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d2:	4770      	bx	lr

080144d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b082      	sub	sp, #8
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80144dc:	4915      	ldr	r1, [pc, #84]	; (8014534 <etharp_free_entry+0x60>)
 80144de:	687a      	ldr	r2, [r7, #4]
 80144e0:	4613      	mov	r3, r2
 80144e2:	005b      	lsls	r3, r3, #1
 80144e4:	4413      	add	r3, r2
 80144e6:	00db      	lsls	r3, r3, #3
 80144e8:	440b      	add	r3, r1
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d013      	beq.n	8014518 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80144f0:	4910      	ldr	r1, [pc, #64]	; (8014534 <etharp_free_entry+0x60>)
 80144f2:	687a      	ldr	r2, [r7, #4]
 80144f4:	4613      	mov	r3, r2
 80144f6:	005b      	lsls	r3, r3, #1
 80144f8:	4413      	add	r3, r2
 80144fa:	00db      	lsls	r3, r3, #3
 80144fc:	440b      	add	r3, r1
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	4618      	mov	r0, r3
 8014502:	f7f6 fff3 	bl	800b4ec <pbuf_free>
    arp_table[i].q = NULL;
 8014506:	490b      	ldr	r1, [pc, #44]	; (8014534 <etharp_free_entry+0x60>)
 8014508:	687a      	ldr	r2, [r7, #4]
 801450a:	4613      	mov	r3, r2
 801450c:	005b      	lsls	r3, r3, #1
 801450e:	4413      	add	r3, r2
 8014510:	00db      	lsls	r3, r3, #3
 8014512:	440b      	add	r3, r1
 8014514:	2200      	movs	r2, #0
 8014516:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014518:	4906      	ldr	r1, [pc, #24]	; (8014534 <etharp_free_entry+0x60>)
 801451a:	687a      	ldr	r2, [r7, #4]
 801451c:	4613      	mov	r3, r2
 801451e:	005b      	lsls	r3, r3, #1
 8014520:	4413      	add	r3, r2
 8014522:	00db      	lsls	r3, r3, #3
 8014524:	440b      	add	r3, r1
 8014526:	3314      	adds	r3, #20
 8014528:	2200      	movs	r2, #0
 801452a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801452c:	bf00      	nop
 801452e:	3708      	adds	r7, #8
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	200002a4 	.word	0x200002a4

08014538 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801453e:	2300      	movs	r3, #0
 8014540:	607b      	str	r3, [r7, #4]
 8014542:	e096      	b.n	8014672 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014544:	494f      	ldr	r1, [pc, #316]	; (8014684 <etharp_tmr+0x14c>)
 8014546:	687a      	ldr	r2, [r7, #4]
 8014548:	4613      	mov	r3, r2
 801454a:	005b      	lsls	r3, r3, #1
 801454c:	4413      	add	r3, r2
 801454e:	00db      	lsls	r3, r3, #3
 8014550:	440b      	add	r3, r1
 8014552:	3314      	adds	r3, #20
 8014554:	781b      	ldrb	r3, [r3, #0]
 8014556:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014558:	78fb      	ldrb	r3, [r7, #3]
 801455a:	2b00      	cmp	r3, #0
 801455c:	f000 8086 	beq.w	801466c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014560:	4948      	ldr	r1, [pc, #288]	; (8014684 <etharp_tmr+0x14c>)
 8014562:	687a      	ldr	r2, [r7, #4]
 8014564:	4613      	mov	r3, r2
 8014566:	005b      	lsls	r3, r3, #1
 8014568:	4413      	add	r3, r2
 801456a:	00db      	lsls	r3, r3, #3
 801456c:	440b      	add	r3, r1
 801456e:	3312      	adds	r3, #18
 8014570:	881b      	ldrh	r3, [r3, #0]
 8014572:	3301      	adds	r3, #1
 8014574:	b298      	uxth	r0, r3
 8014576:	4943      	ldr	r1, [pc, #268]	; (8014684 <etharp_tmr+0x14c>)
 8014578:	687a      	ldr	r2, [r7, #4]
 801457a:	4613      	mov	r3, r2
 801457c:	005b      	lsls	r3, r3, #1
 801457e:	4413      	add	r3, r2
 8014580:	00db      	lsls	r3, r3, #3
 8014582:	440b      	add	r3, r1
 8014584:	3312      	adds	r3, #18
 8014586:	4602      	mov	r2, r0
 8014588:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801458a:	493e      	ldr	r1, [pc, #248]	; (8014684 <etharp_tmr+0x14c>)
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	4613      	mov	r3, r2
 8014590:	005b      	lsls	r3, r3, #1
 8014592:	4413      	add	r3, r2
 8014594:	00db      	lsls	r3, r3, #3
 8014596:	440b      	add	r3, r1
 8014598:	3312      	adds	r3, #18
 801459a:	881b      	ldrh	r3, [r3, #0]
 801459c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80145a0:	d215      	bcs.n	80145ce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80145a2:	4938      	ldr	r1, [pc, #224]	; (8014684 <etharp_tmr+0x14c>)
 80145a4:	687a      	ldr	r2, [r7, #4]
 80145a6:	4613      	mov	r3, r2
 80145a8:	005b      	lsls	r3, r3, #1
 80145aa:	4413      	add	r3, r2
 80145ac:	00db      	lsls	r3, r3, #3
 80145ae:	440b      	add	r3, r1
 80145b0:	3314      	adds	r3, #20
 80145b2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80145b4:	2b01      	cmp	r3, #1
 80145b6:	d10e      	bne.n	80145d6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80145b8:	4932      	ldr	r1, [pc, #200]	; (8014684 <etharp_tmr+0x14c>)
 80145ba:	687a      	ldr	r2, [r7, #4]
 80145bc:	4613      	mov	r3, r2
 80145be:	005b      	lsls	r3, r3, #1
 80145c0:	4413      	add	r3, r2
 80145c2:	00db      	lsls	r3, r3, #3
 80145c4:	440b      	add	r3, r1
 80145c6:	3312      	adds	r3, #18
 80145c8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80145ca:	2b04      	cmp	r3, #4
 80145cc:	d903      	bls.n	80145d6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f7ff ff80 	bl	80144d4 <etharp_free_entry>
 80145d4:	e04a      	b.n	801466c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80145d6:	492b      	ldr	r1, [pc, #172]	; (8014684 <etharp_tmr+0x14c>)
 80145d8:	687a      	ldr	r2, [r7, #4]
 80145da:	4613      	mov	r3, r2
 80145dc:	005b      	lsls	r3, r3, #1
 80145de:	4413      	add	r3, r2
 80145e0:	00db      	lsls	r3, r3, #3
 80145e2:	440b      	add	r3, r1
 80145e4:	3314      	adds	r3, #20
 80145e6:	781b      	ldrb	r3, [r3, #0]
 80145e8:	2b03      	cmp	r3, #3
 80145ea:	d10a      	bne.n	8014602 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80145ec:	4925      	ldr	r1, [pc, #148]	; (8014684 <etharp_tmr+0x14c>)
 80145ee:	687a      	ldr	r2, [r7, #4]
 80145f0:	4613      	mov	r3, r2
 80145f2:	005b      	lsls	r3, r3, #1
 80145f4:	4413      	add	r3, r2
 80145f6:	00db      	lsls	r3, r3, #3
 80145f8:	440b      	add	r3, r1
 80145fa:	3314      	adds	r3, #20
 80145fc:	2204      	movs	r2, #4
 80145fe:	701a      	strb	r2, [r3, #0]
 8014600:	e034      	b.n	801466c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014602:	4920      	ldr	r1, [pc, #128]	; (8014684 <etharp_tmr+0x14c>)
 8014604:	687a      	ldr	r2, [r7, #4]
 8014606:	4613      	mov	r3, r2
 8014608:	005b      	lsls	r3, r3, #1
 801460a:	4413      	add	r3, r2
 801460c:	00db      	lsls	r3, r3, #3
 801460e:	440b      	add	r3, r1
 8014610:	3314      	adds	r3, #20
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	2b04      	cmp	r3, #4
 8014616:	d10a      	bne.n	801462e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014618:	491a      	ldr	r1, [pc, #104]	; (8014684 <etharp_tmr+0x14c>)
 801461a:	687a      	ldr	r2, [r7, #4]
 801461c:	4613      	mov	r3, r2
 801461e:	005b      	lsls	r3, r3, #1
 8014620:	4413      	add	r3, r2
 8014622:	00db      	lsls	r3, r3, #3
 8014624:	440b      	add	r3, r1
 8014626:	3314      	adds	r3, #20
 8014628:	2202      	movs	r2, #2
 801462a:	701a      	strb	r2, [r3, #0]
 801462c:	e01e      	b.n	801466c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801462e:	4915      	ldr	r1, [pc, #84]	; (8014684 <etharp_tmr+0x14c>)
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	4613      	mov	r3, r2
 8014634:	005b      	lsls	r3, r3, #1
 8014636:	4413      	add	r3, r2
 8014638:	00db      	lsls	r3, r3, #3
 801463a:	440b      	add	r3, r1
 801463c:	3314      	adds	r3, #20
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	2b01      	cmp	r3, #1
 8014642:	d113      	bne.n	801466c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014644:	490f      	ldr	r1, [pc, #60]	; (8014684 <etharp_tmr+0x14c>)
 8014646:	687a      	ldr	r2, [r7, #4]
 8014648:	4613      	mov	r3, r2
 801464a:	005b      	lsls	r3, r3, #1
 801464c:	4413      	add	r3, r2
 801464e:	00db      	lsls	r3, r3, #3
 8014650:	440b      	add	r3, r1
 8014652:	3308      	adds	r3, #8
 8014654:	6818      	ldr	r0, [r3, #0]
 8014656:	687a      	ldr	r2, [r7, #4]
 8014658:	4613      	mov	r3, r2
 801465a:	005b      	lsls	r3, r3, #1
 801465c:	4413      	add	r3, r2
 801465e:	00db      	lsls	r3, r3, #3
 8014660:	4a08      	ldr	r2, [pc, #32]	; (8014684 <etharp_tmr+0x14c>)
 8014662:	4413      	add	r3, r2
 8014664:	3304      	adds	r3, #4
 8014666:	4619      	mov	r1, r3
 8014668:	f000 fe72 	bl	8015350 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	3301      	adds	r3, #1
 8014670:	607b      	str	r3, [r7, #4]
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	2b09      	cmp	r3, #9
 8014676:	f77f af65 	ble.w	8014544 <etharp_tmr+0xc>
      }
    }
  }
}
 801467a:	bf00      	nop
 801467c:	bf00      	nop
 801467e:	3708      	adds	r7, #8
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}
 8014684:	200002a4 	.word	0x200002a4

08014688 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b08a      	sub	sp, #40	; 0x28
 801468c:	af00      	add	r7, sp, #0
 801468e:	60f8      	str	r0, [r7, #12]
 8014690:	460b      	mov	r3, r1
 8014692:	607a      	str	r2, [r7, #4]
 8014694:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014696:	230a      	movs	r3, #10
 8014698:	84fb      	strh	r3, [r7, #38]	; 0x26
 801469a:	230a      	movs	r3, #10
 801469c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801469e:	230a      	movs	r3, #10
 80146a0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80146a2:	2300      	movs	r3, #0
 80146a4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80146a6:	230a      	movs	r3, #10
 80146a8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80146aa:	2300      	movs	r3, #0
 80146ac:	83bb      	strh	r3, [r7, #28]
 80146ae:	2300      	movs	r3, #0
 80146b0:	837b      	strh	r3, [r7, #26]
 80146b2:	2300      	movs	r3, #0
 80146b4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146b6:	2300      	movs	r3, #0
 80146b8:	843b      	strh	r3, [r7, #32]
 80146ba:	e0ae      	b.n	801481a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80146bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146c0:	49a6      	ldr	r1, [pc, #664]	; (801495c <etharp_find_entry+0x2d4>)
 80146c2:	4613      	mov	r3, r2
 80146c4:	005b      	lsls	r3, r3, #1
 80146c6:	4413      	add	r3, r2
 80146c8:	00db      	lsls	r3, r3, #3
 80146ca:	440b      	add	r3, r1
 80146cc:	3314      	adds	r3, #20
 80146ce:	781b      	ldrb	r3, [r3, #0]
 80146d0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80146d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80146d6:	2b0a      	cmp	r3, #10
 80146d8:	d105      	bne.n	80146e6 <etharp_find_entry+0x5e>
 80146da:	7dfb      	ldrb	r3, [r7, #23]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d102      	bne.n	80146e6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80146e0:	8c3b      	ldrh	r3, [r7, #32]
 80146e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80146e4:	e095      	b.n	8014812 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80146e6:	7dfb      	ldrb	r3, [r7, #23]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	f000 8092 	beq.w	8014812 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80146ee:	7dfb      	ldrb	r3, [r7, #23]
 80146f0:	2b01      	cmp	r3, #1
 80146f2:	d009      	beq.n	8014708 <etharp_find_entry+0x80>
 80146f4:	7dfb      	ldrb	r3, [r7, #23]
 80146f6:	2b01      	cmp	r3, #1
 80146f8:	d806      	bhi.n	8014708 <etharp_find_entry+0x80>
 80146fa:	4b99      	ldr	r3, [pc, #612]	; (8014960 <etharp_find_entry+0x2d8>)
 80146fc:	f240 1223 	movw	r2, #291	; 0x123
 8014700:	4998      	ldr	r1, [pc, #608]	; (8014964 <etharp_find_entry+0x2dc>)
 8014702:	4899      	ldr	r0, [pc, #612]	; (8014968 <etharp_find_entry+0x2e0>)
 8014704:	f002 ff58 	bl	80175b8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d020      	beq.n	8014750 <etharp_find_entry+0xc8>
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	6819      	ldr	r1, [r3, #0]
 8014712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014716:	4891      	ldr	r0, [pc, #580]	; (801495c <etharp_find_entry+0x2d4>)
 8014718:	4613      	mov	r3, r2
 801471a:	005b      	lsls	r3, r3, #1
 801471c:	4413      	add	r3, r2
 801471e:	00db      	lsls	r3, r3, #3
 8014720:	4403      	add	r3, r0
 8014722:	3304      	adds	r3, #4
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	4299      	cmp	r1, r3
 8014728:	d112      	bne.n	8014750 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d00c      	beq.n	801474a <etharp_find_entry+0xc2>
 8014730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014734:	4989      	ldr	r1, [pc, #548]	; (801495c <etharp_find_entry+0x2d4>)
 8014736:	4613      	mov	r3, r2
 8014738:	005b      	lsls	r3, r3, #1
 801473a:	4413      	add	r3, r2
 801473c:	00db      	lsls	r3, r3, #3
 801473e:	440b      	add	r3, r1
 8014740:	3308      	adds	r3, #8
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	687a      	ldr	r2, [r7, #4]
 8014746:	429a      	cmp	r2, r3
 8014748:	d102      	bne.n	8014750 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801474a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801474e:	e100      	b.n	8014952 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014750:	7dfb      	ldrb	r3, [r7, #23]
 8014752:	2b01      	cmp	r3, #1
 8014754:	d140      	bne.n	80147d8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014756:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801475a:	4980      	ldr	r1, [pc, #512]	; (801495c <etharp_find_entry+0x2d4>)
 801475c:	4613      	mov	r3, r2
 801475e:	005b      	lsls	r3, r3, #1
 8014760:	4413      	add	r3, r2
 8014762:	00db      	lsls	r3, r3, #3
 8014764:	440b      	add	r3, r1
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d01a      	beq.n	80147a2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801476c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014770:	497a      	ldr	r1, [pc, #488]	; (801495c <etharp_find_entry+0x2d4>)
 8014772:	4613      	mov	r3, r2
 8014774:	005b      	lsls	r3, r3, #1
 8014776:	4413      	add	r3, r2
 8014778:	00db      	lsls	r3, r3, #3
 801477a:	440b      	add	r3, r1
 801477c:	3312      	adds	r3, #18
 801477e:	881b      	ldrh	r3, [r3, #0]
 8014780:	8bba      	ldrh	r2, [r7, #28]
 8014782:	429a      	cmp	r2, r3
 8014784:	d845      	bhi.n	8014812 <etharp_find_entry+0x18a>
            old_queue = i;
 8014786:	8c3b      	ldrh	r3, [r7, #32]
 8014788:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801478a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801478e:	4973      	ldr	r1, [pc, #460]	; (801495c <etharp_find_entry+0x2d4>)
 8014790:	4613      	mov	r3, r2
 8014792:	005b      	lsls	r3, r3, #1
 8014794:	4413      	add	r3, r2
 8014796:	00db      	lsls	r3, r3, #3
 8014798:	440b      	add	r3, r1
 801479a:	3312      	adds	r3, #18
 801479c:	881b      	ldrh	r3, [r3, #0]
 801479e:	83bb      	strh	r3, [r7, #28]
 80147a0:	e037      	b.n	8014812 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80147a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147a6:	496d      	ldr	r1, [pc, #436]	; (801495c <etharp_find_entry+0x2d4>)
 80147a8:	4613      	mov	r3, r2
 80147aa:	005b      	lsls	r3, r3, #1
 80147ac:	4413      	add	r3, r2
 80147ae:	00db      	lsls	r3, r3, #3
 80147b0:	440b      	add	r3, r1
 80147b2:	3312      	adds	r3, #18
 80147b4:	881b      	ldrh	r3, [r3, #0]
 80147b6:	8b7a      	ldrh	r2, [r7, #26]
 80147b8:	429a      	cmp	r2, r3
 80147ba:	d82a      	bhi.n	8014812 <etharp_find_entry+0x18a>
            old_pending = i;
 80147bc:	8c3b      	ldrh	r3, [r7, #32]
 80147be:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80147c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147c4:	4965      	ldr	r1, [pc, #404]	; (801495c <etharp_find_entry+0x2d4>)
 80147c6:	4613      	mov	r3, r2
 80147c8:	005b      	lsls	r3, r3, #1
 80147ca:	4413      	add	r3, r2
 80147cc:	00db      	lsls	r3, r3, #3
 80147ce:	440b      	add	r3, r1
 80147d0:	3312      	adds	r3, #18
 80147d2:	881b      	ldrh	r3, [r3, #0]
 80147d4:	837b      	strh	r3, [r7, #26]
 80147d6:	e01c      	b.n	8014812 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80147d8:	7dfb      	ldrb	r3, [r7, #23]
 80147da:	2b01      	cmp	r3, #1
 80147dc:	d919      	bls.n	8014812 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80147de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147e2:	495e      	ldr	r1, [pc, #376]	; (801495c <etharp_find_entry+0x2d4>)
 80147e4:	4613      	mov	r3, r2
 80147e6:	005b      	lsls	r3, r3, #1
 80147e8:	4413      	add	r3, r2
 80147ea:	00db      	lsls	r3, r3, #3
 80147ec:	440b      	add	r3, r1
 80147ee:	3312      	adds	r3, #18
 80147f0:	881b      	ldrh	r3, [r3, #0]
 80147f2:	8b3a      	ldrh	r2, [r7, #24]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d80c      	bhi.n	8014812 <etharp_find_entry+0x18a>
            old_stable = i;
 80147f8:	8c3b      	ldrh	r3, [r7, #32]
 80147fa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80147fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014800:	4956      	ldr	r1, [pc, #344]	; (801495c <etharp_find_entry+0x2d4>)
 8014802:	4613      	mov	r3, r2
 8014804:	005b      	lsls	r3, r3, #1
 8014806:	4413      	add	r3, r2
 8014808:	00db      	lsls	r3, r3, #3
 801480a:	440b      	add	r3, r1
 801480c:	3312      	adds	r3, #18
 801480e:	881b      	ldrh	r3, [r3, #0]
 8014810:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014812:	8c3b      	ldrh	r3, [r7, #32]
 8014814:	3301      	adds	r3, #1
 8014816:	b29b      	uxth	r3, r3
 8014818:	843b      	strh	r3, [r7, #32]
 801481a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801481e:	2b09      	cmp	r3, #9
 8014820:	f77f af4c 	ble.w	80146bc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014824:	7afb      	ldrb	r3, [r7, #11]
 8014826:	f003 0302 	and.w	r3, r3, #2
 801482a:	2b00      	cmp	r3, #0
 801482c:	d108      	bne.n	8014840 <etharp_find_entry+0x1b8>
 801482e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014832:	2b0a      	cmp	r3, #10
 8014834:	d107      	bne.n	8014846 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014836:	7afb      	ldrb	r3, [r7, #11]
 8014838:	f003 0301 	and.w	r3, r3, #1
 801483c:	2b00      	cmp	r3, #0
 801483e:	d102      	bne.n	8014846 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014840:	f04f 33ff 	mov.w	r3, #4294967295
 8014844:	e085      	b.n	8014952 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014846:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801484a:	2b09      	cmp	r3, #9
 801484c:	dc02      	bgt.n	8014854 <etharp_find_entry+0x1cc>
    i = empty;
 801484e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014850:	843b      	strh	r3, [r7, #32]
 8014852:	e039      	b.n	80148c8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014854:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014858:	2b09      	cmp	r3, #9
 801485a:	dc14      	bgt.n	8014886 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801485c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801485e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014860:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014864:	493d      	ldr	r1, [pc, #244]	; (801495c <etharp_find_entry+0x2d4>)
 8014866:	4613      	mov	r3, r2
 8014868:	005b      	lsls	r3, r3, #1
 801486a:	4413      	add	r3, r2
 801486c:	00db      	lsls	r3, r3, #3
 801486e:	440b      	add	r3, r1
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d018      	beq.n	80148a8 <etharp_find_entry+0x220>
 8014876:	4b3a      	ldr	r3, [pc, #232]	; (8014960 <etharp_find_entry+0x2d8>)
 8014878:	f240 126d 	movw	r2, #365	; 0x16d
 801487c:	493b      	ldr	r1, [pc, #236]	; (801496c <etharp_find_entry+0x2e4>)
 801487e:	483a      	ldr	r0, [pc, #232]	; (8014968 <etharp_find_entry+0x2e0>)
 8014880:	f002 fe9a 	bl	80175b8 <iprintf>
 8014884:	e010      	b.n	80148a8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014886:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801488a:	2b09      	cmp	r3, #9
 801488c:	dc02      	bgt.n	8014894 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801488e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014890:	843b      	strh	r3, [r7, #32]
 8014892:	e009      	b.n	80148a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014894:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014898:	2b09      	cmp	r3, #9
 801489a:	dc02      	bgt.n	80148a2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801489c:	8bfb      	ldrh	r3, [r7, #30]
 801489e:	843b      	strh	r3, [r7, #32]
 80148a0:	e002      	b.n	80148a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80148a2:	f04f 33ff 	mov.w	r3, #4294967295
 80148a6:	e054      	b.n	8014952 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80148a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148ac:	2b09      	cmp	r3, #9
 80148ae:	dd06      	ble.n	80148be <etharp_find_entry+0x236>
 80148b0:	4b2b      	ldr	r3, [pc, #172]	; (8014960 <etharp_find_entry+0x2d8>)
 80148b2:	f240 127f 	movw	r2, #383	; 0x17f
 80148b6:	492e      	ldr	r1, [pc, #184]	; (8014970 <etharp_find_entry+0x2e8>)
 80148b8:	482b      	ldr	r0, [pc, #172]	; (8014968 <etharp_find_entry+0x2e0>)
 80148ba:	f002 fe7d 	bl	80175b8 <iprintf>
    etharp_free_entry(i);
 80148be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148c2:	4618      	mov	r0, r3
 80148c4:	f7ff fe06 	bl	80144d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80148c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148cc:	2b09      	cmp	r3, #9
 80148ce:	dd06      	ble.n	80148de <etharp_find_entry+0x256>
 80148d0:	4b23      	ldr	r3, [pc, #140]	; (8014960 <etharp_find_entry+0x2d8>)
 80148d2:	f240 1283 	movw	r2, #387	; 0x183
 80148d6:	4926      	ldr	r1, [pc, #152]	; (8014970 <etharp_find_entry+0x2e8>)
 80148d8:	4823      	ldr	r0, [pc, #140]	; (8014968 <etharp_find_entry+0x2e0>)
 80148da:	f002 fe6d 	bl	80175b8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80148de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148e2:	491e      	ldr	r1, [pc, #120]	; (801495c <etharp_find_entry+0x2d4>)
 80148e4:	4613      	mov	r3, r2
 80148e6:	005b      	lsls	r3, r3, #1
 80148e8:	4413      	add	r3, r2
 80148ea:	00db      	lsls	r3, r3, #3
 80148ec:	440b      	add	r3, r1
 80148ee:	3314      	adds	r3, #20
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d006      	beq.n	8014904 <etharp_find_entry+0x27c>
 80148f6:	4b1a      	ldr	r3, [pc, #104]	; (8014960 <etharp_find_entry+0x2d8>)
 80148f8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80148fc:	491d      	ldr	r1, [pc, #116]	; (8014974 <etharp_find_entry+0x2ec>)
 80148fe:	481a      	ldr	r0, [pc, #104]	; (8014968 <etharp_find_entry+0x2e0>)
 8014900:	f002 fe5a 	bl	80175b8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d00b      	beq.n	8014922 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801490a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	6819      	ldr	r1, [r3, #0]
 8014912:	4812      	ldr	r0, [pc, #72]	; (801495c <etharp_find_entry+0x2d4>)
 8014914:	4613      	mov	r3, r2
 8014916:	005b      	lsls	r3, r3, #1
 8014918:	4413      	add	r3, r2
 801491a:	00db      	lsls	r3, r3, #3
 801491c:	4403      	add	r3, r0
 801491e:	3304      	adds	r3, #4
 8014920:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014922:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014926:	490d      	ldr	r1, [pc, #52]	; (801495c <etharp_find_entry+0x2d4>)
 8014928:	4613      	mov	r3, r2
 801492a:	005b      	lsls	r3, r3, #1
 801492c:	4413      	add	r3, r2
 801492e:	00db      	lsls	r3, r3, #3
 8014930:	440b      	add	r3, r1
 8014932:	3312      	adds	r3, #18
 8014934:	2200      	movs	r2, #0
 8014936:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801493c:	4907      	ldr	r1, [pc, #28]	; (801495c <etharp_find_entry+0x2d4>)
 801493e:	4613      	mov	r3, r2
 8014940:	005b      	lsls	r3, r3, #1
 8014942:	4413      	add	r3, r2
 8014944:	00db      	lsls	r3, r3, #3
 8014946:	440b      	add	r3, r1
 8014948:	3308      	adds	r3, #8
 801494a:	687a      	ldr	r2, [r7, #4]
 801494c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801494e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014952:	4618      	mov	r0, r3
 8014954:	3728      	adds	r7, #40	; 0x28
 8014956:	46bd      	mov	sp, r7
 8014958:	bd80      	pop	{r7, pc}
 801495a:	bf00      	nop
 801495c:	200002a4 	.word	0x200002a4
 8014960:	0801b970 	.word	0x0801b970
 8014964:	0801b9a8 	.word	0x0801b9a8
 8014968:	0801b9e8 	.word	0x0801b9e8
 801496c:	0801ba10 	.word	0x0801ba10
 8014970:	0801ba28 	.word	0x0801ba28
 8014974:	0801ba3c 	.word	0x0801ba3c

08014978 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b088      	sub	sp, #32
 801497c:	af02      	add	r7, sp, #8
 801497e:	60f8      	str	r0, [r7, #12]
 8014980:	60b9      	str	r1, [r7, #8]
 8014982:	607a      	str	r2, [r7, #4]
 8014984:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801498c:	2b06      	cmp	r3, #6
 801498e:	d006      	beq.n	801499e <etharp_update_arp_entry+0x26>
 8014990:	4b48      	ldr	r3, [pc, #288]	; (8014ab4 <etharp_update_arp_entry+0x13c>)
 8014992:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014996:	4948      	ldr	r1, [pc, #288]	; (8014ab8 <etharp_update_arp_entry+0x140>)
 8014998:	4848      	ldr	r0, [pc, #288]	; (8014abc <etharp_update_arp_entry+0x144>)
 801499a:	f002 fe0d 	bl	80175b8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d012      	beq.n	80149ca <etharp_update_arp_entry+0x52>
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d00e      	beq.n	80149ca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	68f9      	ldr	r1, [r7, #12]
 80149b2:	4618      	mov	r0, r3
 80149b4:	f001 f920 	bl	8015bf8 <ip4_addr_isbroadcast_u32>
 80149b8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d105      	bne.n	80149ca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80149c6:	2be0      	cmp	r3, #224	; 0xe0
 80149c8:	d102      	bne.n	80149d0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80149ca:	f06f 030f 	mvn.w	r3, #15
 80149ce:	e06c      	b.n	8014aaa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80149d0:	78fb      	ldrb	r3, [r7, #3]
 80149d2:	68fa      	ldr	r2, [r7, #12]
 80149d4:	4619      	mov	r1, r3
 80149d6:	68b8      	ldr	r0, [r7, #8]
 80149d8:	f7ff fe56 	bl	8014688 <etharp_find_entry>
 80149dc:	4603      	mov	r3, r0
 80149de:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80149e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	da02      	bge.n	80149ee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80149e8:	8afb      	ldrh	r3, [r7, #22]
 80149ea:	b25b      	sxtb	r3, r3
 80149ec:	e05d      	b.n	8014aaa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80149ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80149f2:	4933      	ldr	r1, [pc, #204]	; (8014ac0 <etharp_update_arp_entry+0x148>)
 80149f4:	4613      	mov	r3, r2
 80149f6:	005b      	lsls	r3, r3, #1
 80149f8:	4413      	add	r3, r2
 80149fa:	00db      	lsls	r3, r3, #3
 80149fc:	440b      	add	r3, r1
 80149fe:	3314      	adds	r3, #20
 8014a00:	2202      	movs	r2, #2
 8014a02:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014a04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a08:	492d      	ldr	r1, [pc, #180]	; (8014ac0 <etharp_update_arp_entry+0x148>)
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	005b      	lsls	r3, r3, #1
 8014a0e:	4413      	add	r3, r2
 8014a10:	00db      	lsls	r3, r3, #3
 8014a12:	440b      	add	r3, r1
 8014a14:	3308      	adds	r3, #8
 8014a16:	68fa      	ldr	r2, [r7, #12]
 8014a18:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a1e:	4613      	mov	r3, r2
 8014a20:	005b      	lsls	r3, r3, #1
 8014a22:	4413      	add	r3, r2
 8014a24:	00db      	lsls	r3, r3, #3
 8014a26:	3308      	adds	r3, #8
 8014a28:	4a25      	ldr	r2, [pc, #148]	; (8014ac0 <etharp_update_arp_entry+0x148>)
 8014a2a:	4413      	add	r3, r2
 8014a2c:	3304      	adds	r3, #4
 8014a2e:	2206      	movs	r2, #6
 8014a30:	6879      	ldr	r1, [r7, #4]
 8014a32:	4618      	mov	r0, r3
 8014a34:	f002 fd90 	bl	8017558 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014a38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a3c:	4920      	ldr	r1, [pc, #128]	; (8014ac0 <etharp_update_arp_entry+0x148>)
 8014a3e:	4613      	mov	r3, r2
 8014a40:	005b      	lsls	r3, r3, #1
 8014a42:	4413      	add	r3, r2
 8014a44:	00db      	lsls	r3, r3, #3
 8014a46:	440b      	add	r3, r1
 8014a48:	3312      	adds	r3, #18
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014a4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a52:	491b      	ldr	r1, [pc, #108]	; (8014ac0 <etharp_update_arp_entry+0x148>)
 8014a54:	4613      	mov	r3, r2
 8014a56:	005b      	lsls	r3, r3, #1
 8014a58:	4413      	add	r3, r2
 8014a5a:	00db      	lsls	r3, r3, #3
 8014a5c:	440b      	add	r3, r1
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d021      	beq.n	8014aa8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014a64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a68:	4915      	ldr	r1, [pc, #84]	; (8014ac0 <etharp_update_arp_entry+0x148>)
 8014a6a:	4613      	mov	r3, r2
 8014a6c:	005b      	lsls	r3, r3, #1
 8014a6e:	4413      	add	r3, r2
 8014a70:	00db      	lsls	r3, r3, #3
 8014a72:	440b      	add	r3, r1
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014a78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a7c:	4910      	ldr	r1, [pc, #64]	; (8014ac0 <etharp_update_arp_entry+0x148>)
 8014a7e:	4613      	mov	r3, r2
 8014a80:	005b      	lsls	r3, r3, #1
 8014a82:	4413      	add	r3, r2
 8014a84:	00db      	lsls	r3, r3, #3
 8014a86:	440b      	add	r3, r1
 8014a88:	2200      	movs	r2, #0
 8014a8a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014a96:	9300      	str	r3, [sp, #0]
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6939      	ldr	r1, [r7, #16]
 8014a9c:	68f8      	ldr	r0, [r7, #12]
 8014a9e:	f001 ffb3 	bl	8016a08 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014aa2:	6938      	ldr	r0, [r7, #16]
 8014aa4:	f7f6 fd22 	bl	800b4ec <pbuf_free>
  }
  return ERR_OK;
 8014aa8:	2300      	movs	r3, #0
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3718      	adds	r7, #24
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
 8014ab2:	bf00      	nop
 8014ab4:	0801b970 	.word	0x0801b970
 8014ab8:	0801ba68 	.word	0x0801ba68
 8014abc:	0801b9e8 	.word	0x0801b9e8
 8014ac0:	200002a4 	.word	0x200002a4

08014ac4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014acc:	2300      	movs	r3, #0
 8014ace:	60fb      	str	r3, [r7, #12]
 8014ad0:	e01e      	b.n	8014b10 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014ad2:	4913      	ldr	r1, [pc, #76]	; (8014b20 <etharp_cleanup_netif+0x5c>)
 8014ad4:	68fa      	ldr	r2, [r7, #12]
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	005b      	lsls	r3, r3, #1
 8014ada:	4413      	add	r3, r2
 8014adc:	00db      	lsls	r3, r3, #3
 8014ade:	440b      	add	r3, r1
 8014ae0:	3314      	adds	r3, #20
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014ae6:	7afb      	ldrb	r3, [r7, #11]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d00e      	beq.n	8014b0a <etharp_cleanup_netif+0x46>
 8014aec:	490c      	ldr	r1, [pc, #48]	; (8014b20 <etharp_cleanup_netif+0x5c>)
 8014aee:	68fa      	ldr	r2, [r7, #12]
 8014af0:	4613      	mov	r3, r2
 8014af2:	005b      	lsls	r3, r3, #1
 8014af4:	4413      	add	r3, r2
 8014af6:	00db      	lsls	r3, r3, #3
 8014af8:	440b      	add	r3, r1
 8014afa:	3308      	adds	r3, #8
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	687a      	ldr	r2, [r7, #4]
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d102      	bne.n	8014b0a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014b04:	68f8      	ldr	r0, [r7, #12]
 8014b06:	f7ff fce5 	bl	80144d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	3301      	adds	r3, #1
 8014b0e:	60fb      	str	r3, [r7, #12]
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	2b09      	cmp	r3, #9
 8014b14:	dddd      	ble.n	8014ad2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014b16:	bf00      	nop
 8014b18:	bf00      	nop
 8014b1a:	3710      	adds	r7, #16
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}
 8014b20:	200002a4 	.word	0x200002a4

08014b24 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014b24:	b5b0      	push	{r4, r5, r7, lr}
 8014b26:	b08a      	sub	sp, #40	; 0x28
 8014b28:	af04      	add	r7, sp, #16
 8014b2a:	6078      	str	r0, [r7, #4]
 8014b2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014b2e:	683b      	ldr	r3, [r7, #0]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d107      	bne.n	8014b44 <etharp_input+0x20>
 8014b34:	4b3f      	ldr	r3, [pc, #252]	; (8014c34 <etharp_input+0x110>)
 8014b36:	f240 228a 	movw	r2, #650	; 0x28a
 8014b3a:	493f      	ldr	r1, [pc, #252]	; (8014c38 <etharp_input+0x114>)
 8014b3c:	483f      	ldr	r0, [pc, #252]	; (8014c3c <etharp_input+0x118>)
 8014b3e:	f002 fd3b 	bl	80175b8 <iprintf>
 8014b42:	e074      	b.n	8014c2e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	881b      	ldrh	r3, [r3, #0]
 8014b4e:	b29b      	uxth	r3, r3
 8014b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b54:	d10c      	bne.n	8014b70 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014b56:	693b      	ldr	r3, [r7, #16]
 8014b58:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014b5a:	2b06      	cmp	r3, #6
 8014b5c:	d108      	bne.n	8014b70 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014b5e:	693b      	ldr	r3, [r7, #16]
 8014b60:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014b62:	2b04      	cmp	r3, #4
 8014b64:	d104      	bne.n	8014b70 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014b66:	693b      	ldr	r3, [r7, #16]
 8014b68:	885b      	ldrh	r3, [r3, #2]
 8014b6a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014b6c:	2b08      	cmp	r3, #8
 8014b6e:	d003      	beq.n	8014b78 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014b70:	6878      	ldr	r0, [r7, #4]
 8014b72:	f7f6 fcbb 	bl	800b4ec <pbuf_free>
    return;
 8014b76:	e05a      	b.n	8014c2e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014b78:	693b      	ldr	r3, [r7, #16]
 8014b7a:	330e      	adds	r3, #14
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014b80:	693b      	ldr	r3, [r7, #16]
 8014b82:	3318      	adds	r3, #24
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	3304      	adds	r3, #4
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d102      	bne.n	8014b98 <etharp_input+0x74>
    for_us = 0;
 8014b92:	2300      	movs	r3, #0
 8014b94:	75fb      	strb	r3, [r7, #23]
 8014b96:	e009      	b.n	8014bac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014b98:	68ba      	ldr	r2, [r7, #8]
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	3304      	adds	r3, #4
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	429a      	cmp	r2, r3
 8014ba2:	bf0c      	ite	eq
 8014ba4:	2301      	moveq	r3, #1
 8014ba6:	2300      	movne	r3, #0
 8014ba8:	b2db      	uxtb	r3, r3
 8014baa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014bac:	693b      	ldr	r3, [r7, #16]
 8014bae:	f103 0208 	add.w	r2, r3, #8
 8014bb2:	7dfb      	ldrb	r3, [r7, #23]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d001      	beq.n	8014bbc <etharp_input+0x98>
 8014bb8:	2301      	movs	r3, #1
 8014bba:	e000      	b.n	8014bbe <etharp_input+0x9a>
 8014bbc:	2302      	movs	r3, #2
 8014bbe:	f107 010c 	add.w	r1, r7, #12
 8014bc2:	6838      	ldr	r0, [r7, #0]
 8014bc4:	f7ff fed8 	bl	8014978 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014bc8:	693b      	ldr	r3, [r7, #16]
 8014bca:	88db      	ldrh	r3, [r3, #6]
 8014bcc:	b29b      	uxth	r3, r3
 8014bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014bd2:	d003      	beq.n	8014bdc <etharp_input+0xb8>
 8014bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014bd8:	d01e      	beq.n	8014c18 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014bda:	e025      	b.n	8014c28 <etharp_input+0x104>
      if (for_us) {
 8014bdc:	7dfb      	ldrb	r3, [r7, #23]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d021      	beq.n	8014c26 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014be8:	693b      	ldr	r3, [r7, #16]
 8014bea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8014bf4:	683b      	ldr	r3, [r7, #0]
 8014bf6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014bf8:	693a      	ldr	r2, [r7, #16]
 8014bfa:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014bfc:	2102      	movs	r1, #2
 8014bfe:	9103      	str	r1, [sp, #12]
 8014c00:	f107 010c 	add.w	r1, r7, #12
 8014c04:	9102      	str	r1, [sp, #8]
 8014c06:	9201      	str	r2, [sp, #4]
 8014c08:	9300      	str	r3, [sp, #0]
 8014c0a:	462b      	mov	r3, r5
 8014c0c:	4622      	mov	r2, r4
 8014c0e:	4601      	mov	r1, r0
 8014c10:	6838      	ldr	r0, [r7, #0]
 8014c12:	f000 faef 	bl	80151f4 <etharp_raw>
      break;
 8014c16:	e006      	b.n	8014c26 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014c18:	f107 030c 	add.w	r3, r7, #12
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	6838      	ldr	r0, [r7, #0]
 8014c20:	f7fe f9fc 	bl	801301c <dhcp_arp_reply>
      break;
 8014c24:	e000      	b.n	8014c28 <etharp_input+0x104>
      break;
 8014c26:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	f7f6 fc5f 	bl	800b4ec <pbuf_free>
}
 8014c2e:	3718      	adds	r7, #24
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bdb0      	pop	{r4, r5, r7, pc}
 8014c34:	0801b970 	.word	0x0801b970
 8014c38:	0801bac0 	.word	0x0801bac0
 8014c3c:	0801b9e8 	.word	0x0801b9e8

08014c40 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b086      	sub	sp, #24
 8014c44:	af02      	add	r7, sp, #8
 8014c46:	60f8      	str	r0, [r7, #12]
 8014c48:	60b9      	str	r1, [r7, #8]
 8014c4a:	4613      	mov	r3, r2
 8014c4c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014c4e:	79fa      	ldrb	r2, [r7, #7]
 8014c50:	4944      	ldr	r1, [pc, #272]	; (8014d64 <etharp_output_to_arp_index+0x124>)
 8014c52:	4613      	mov	r3, r2
 8014c54:	005b      	lsls	r3, r3, #1
 8014c56:	4413      	add	r3, r2
 8014c58:	00db      	lsls	r3, r3, #3
 8014c5a:	440b      	add	r3, r1
 8014c5c:	3314      	adds	r3, #20
 8014c5e:	781b      	ldrb	r3, [r3, #0]
 8014c60:	2b01      	cmp	r3, #1
 8014c62:	d806      	bhi.n	8014c72 <etharp_output_to_arp_index+0x32>
 8014c64:	4b40      	ldr	r3, [pc, #256]	; (8014d68 <etharp_output_to_arp_index+0x128>)
 8014c66:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014c6a:	4940      	ldr	r1, [pc, #256]	; (8014d6c <etharp_output_to_arp_index+0x12c>)
 8014c6c:	4840      	ldr	r0, [pc, #256]	; (8014d70 <etharp_output_to_arp_index+0x130>)
 8014c6e:	f002 fca3 	bl	80175b8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014c72:	79fa      	ldrb	r2, [r7, #7]
 8014c74:	493b      	ldr	r1, [pc, #236]	; (8014d64 <etharp_output_to_arp_index+0x124>)
 8014c76:	4613      	mov	r3, r2
 8014c78:	005b      	lsls	r3, r3, #1
 8014c7a:	4413      	add	r3, r2
 8014c7c:	00db      	lsls	r3, r3, #3
 8014c7e:	440b      	add	r3, r1
 8014c80:	3314      	adds	r3, #20
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	2b02      	cmp	r3, #2
 8014c86:	d153      	bne.n	8014d30 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014c88:	79fa      	ldrb	r2, [r7, #7]
 8014c8a:	4936      	ldr	r1, [pc, #216]	; (8014d64 <etharp_output_to_arp_index+0x124>)
 8014c8c:	4613      	mov	r3, r2
 8014c8e:	005b      	lsls	r3, r3, #1
 8014c90:	4413      	add	r3, r2
 8014c92:	00db      	lsls	r3, r3, #3
 8014c94:	440b      	add	r3, r1
 8014c96:	3312      	adds	r3, #18
 8014c98:	881b      	ldrh	r3, [r3, #0]
 8014c9a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014c9e:	d919      	bls.n	8014cd4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014ca0:	79fa      	ldrb	r2, [r7, #7]
 8014ca2:	4613      	mov	r3, r2
 8014ca4:	005b      	lsls	r3, r3, #1
 8014ca6:	4413      	add	r3, r2
 8014ca8:	00db      	lsls	r3, r3, #3
 8014caa:	4a2e      	ldr	r2, [pc, #184]	; (8014d64 <etharp_output_to_arp_index+0x124>)
 8014cac:	4413      	add	r3, r2
 8014cae:	3304      	adds	r3, #4
 8014cb0:	4619      	mov	r1, r3
 8014cb2:	68f8      	ldr	r0, [r7, #12]
 8014cb4:	f000 fb4c 	bl	8015350 <etharp_request>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d138      	bne.n	8014d30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014cbe:	79fa      	ldrb	r2, [r7, #7]
 8014cc0:	4928      	ldr	r1, [pc, #160]	; (8014d64 <etharp_output_to_arp_index+0x124>)
 8014cc2:	4613      	mov	r3, r2
 8014cc4:	005b      	lsls	r3, r3, #1
 8014cc6:	4413      	add	r3, r2
 8014cc8:	00db      	lsls	r3, r3, #3
 8014cca:	440b      	add	r3, r1
 8014ccc:	3314      	adds	r3, #20
 8014cce:	2203      	movs	r2, #3
 8014cd0:	701a      	strb	r2, [r3, #0]
 8014cd2:	e02d      	b.n	8014d30 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014cd4:	79fa      	ldrb	r2, [r7, #7]
 8014cd6:	4923      	ldr	r1, [pc, #140]	; (8014d64 <etharp_output_to_arp_index+0x124>)
 8014cd8:	4613      	mov	r3, r2
 8014cda:	005b      	lsls	r3, r3, #1
 8014cdc:	4413      	add	r3, r2
 8014cde:	00db      	lsls	r3, r3, #3
 8014ce0:	440b      	add	r3, r1
 8014ce2:	3312      	adds	r3, #18
 8014ce4:	881b      	ldrh	r3, [r3, #0]
 8014ce6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014cea:	d321      	bcc.n	8014d30 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014cec:	79fa      	ldrb	r2, [r7, #7]
 8014cee:	4613      	mov	r3, r2
 8014cf0:	005b      	lsls	r3, r3, #1
 8014cf2:	4413      	add	r3, r2
 8014cf4:	00db      	lsls	r3, r3, #3
 8014cf6:	4a1b      	ldr	r2, [pc, #108]	; (8014d64 <etharp_output_to_arp_index+0x124>)
 8014cf8:	4413      	add	r3, r2
 8014cfa:	1d19      	adds	r1, r3, #4
 8014cfc:	79fa      	ldrb	r2, [r7, #7]
 8014cfe:	4613      	mov	r3, r2
 8014d00:	005b      	lsls	r3, r3, #1
 8014d02:	4413      	add	r3, r2
 8014d04:	00db      	lsls	r3, r3, #3
 8014d06:	3308      	adds	r3, #8
 8014d08:	4a16      	ldr	r2, [pc, #88]	; (8014d64 <etharp_output_to_arp_index+0x124>)
 8014d0a:	4413      	add	r3, r2
 8014d0c:	3304      	adds	r3, #4
 8014d0e:	461a      	mov	r2, r3
 8014d10:	68f8      	ldr	r0, [r7, #12]
 8014d12:	f000 fafb 	bl	801530c <etharp_request_dst>
 8014d16:	4603      	mov	r3, r0
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d109      	bne.n	8014d30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014d1c:	79fa      	ldrb	r2, [r7, #7]
 8014d1e:	4911      	ldr	r1, [pc, #68]	; (8014d64 <etharp_output_to_arp_index+0x124>)
 8014d20:	4613      	mov	r3, r2
 8014d22:	005b      	lsls	r3, r3, #1
 8014d24:	4413      	add	r3, r2
 8014d26:	00db      	lsls	r3, r3, #3
 8014d28:	440b      	add	r3, r1
 8014d2a:	3314      	adds	r3, #20
 8014d2c:	2203      	movs	r2, #3
 8014d2e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8014d36:	79fa      	ldrb	r2, [r7, #7]
 8014d38:	4613      	mov	r3, r2
 8014d3a:	005b      	lsls	r3, r3, #1
 8014d3c:	4413      	add	r3, r2
 8014d3e:	00db      	lsls	r3, r3, #3
 8014d40:	3308      	adds	r3, #8
 8014d42:	4a08      	ldr	r2, [pc, #32]	; (8014d64 <etharp_output_to_arp_index+0x124>)
 8014d44:	4413      	add	r3, r2
 8014d46:	3304      	adds	r3, #4
 8014d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014d4c:	9200      	str	r2, [sp, #0]
 8014d4e:	460a      	mov	r2, r1
 8014d50:	68b9      	ldr	r1, [r7, #8]
 8014d52:	68f8      	ldr	r0, [r7, #12]
 8014d54:	f001 fe58 	bl	8016a08 <ethernet_output>
 8014d58:	4603      	mov	r3, r0
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3710      	adds	r7, #16
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	200002a4 	.word	0x200002a4
 8014d68:	0801b970 	.word	0x0801b970
 8014d6c:	0801bae0 	.word	0x0801bae0
 8014d70:	0801b9e8 	.word	0x0801b9e8

08014d74 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b08a      	sub	sp, #40	; 0x28
 8014d78:	af02      	add	r7, sp, #8
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d106      	bne.n	8014d98 <etharp_output+0x24>
 8014d8a:	4b73      	ldr	r3, [pc, #460]	; (8014f58 <etharp_output+0x1e4>)
 8014d8c:	f240 321e 	movw	r2, #798	; 0x31e
 8014d90:	4972      	ldr	r1, [pc, #456]	; (8014f5c <etharp_output+0x1e8>)
 8014d92:	4873      	ldr	r0, [pc, #460]	; (8014f60 <etharp_output+0x1ec>)
 8014d94:	f002 fc10 	bl	80175b8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d106      	bne.n	8014dac <etharp_output+0x38>
 8014d9e:	4b6e      	ldr	r3, [pc, #440]	; (8014f58 <etharp_output+0x1e4>)
 8014da0:	f240 321f 	movw	r2, #799	; 0x31f
 8014da4:	496f      	ldr	r1, [pc, #444]	; (8014f64 <etharp_output+0x1f0>)
 8014da6:	486e      	ldr	r0, [pc, #440]	; (8014f60 <etharp_output+0x1ec>)
 8014da8:	f002 fc06 	bl	80175b8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d106      	bne.n	8014dc0 <etharp_output+0x4c>
 8014db2:	4b69      	ldr	r3, [pc, #420]	; (8014f58 <etharp_output+0x1e4>)
 8014db4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014db8:	496b      	ldr	r1, [pc, #428]	; (8014f68 <etharp_output+0x1f4>)
 8014dba:	4869      	ldr	r0, [pc, #420]	; (8014f60 <etharp_output+0x1ec>)
 8014dbc:	f002 fbfc 	bl	80175b8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	68f9      	ldr	r1, [r7, #12]
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f000 ff16 	bl	8015bf8 <ip4_addr_isbroadcast_u32>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d002      	beq.n	8014dd8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014dd2:	4b66      	ldr	r3, [pc, #408]	; (8014f6c <etharp_output+0x1f8>)
 8014dd4:	61fb      	str	r3, [r7, #28]
 8014dd6:	e0af      	b.n	8014f38 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014de0:	2be0      	cmp	r3, #224	; 0xe0
 8014de2:	d118      	bne.n	8014e16 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014de4:	2301      	movs	r3, #1
 8014de6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014de8:	2300      	movs	r3, #0
 8014dea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014dec:	235e      	movs	r3, #94	; 0x5e
 8014dee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	3301      	adds	r3, #1
 8014df4:	781b      	ldrb	r3, [r3, #0]
 8014df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014dfa:	b2db      	uxtb	r3, r3
 8014dfc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	3302      	adds	r3, #2
 8014e02:	781b      	ldrb	r3, [r3, #0]
 8014e04:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	3303      	adds	r3, #3
 8014e0a:	781b      	ldrb	r3, [r3, #0]
 8014e0c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014e0e:	f107 0310 	add.w	r3, r7, #16
 8014e12:	61fb      	str	r3, [r7, #28]
 8014e14:	e090      	b.n	8014f38 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	681a      	ldr	r2, [r3, #0]
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	3304      	adds	r3, #4
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	405a      	eors	r2, r3
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	3308      	adds	r3, #8
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	4013      	ands	r3, r2
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d012      	beq.n	8014e54 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014e34:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014e38:	4293      	cmp	r3, r2
 8014e3a:	d00b      	beq.n	8014e54 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	330c      	adds	r3, #12
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d003      	beq.n	8014e4e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	330c      	adds	r3, #12
 8014e4a:	61bb      	str	r3, [r7, #24]
 8014e4c:	e002      	b.n	8014e54 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014e4e:	f06f 0303 	mvn.w	r3, #3
 8014e52:	e07d      	b.n	8014f50 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014e54:	4b46      	ldr	r3, [pc, #280]	; (8014f70 <etharp_output+0x1fc>)
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	4619      	mov	r1, r3
 8014e5a:	4a46      	ldr	r2, [pc, #280]	; (8014f74 <etharp_output+0x200>)
 8014e5c:	460b      	mov	r3, r1
 8014e5e:	005b      	lsls	r3, r3, #1
 8014e60:	440b      	add	r3, r1
 8014e62:	00db      	lsls	r3, r3, #3
 8014e64:	4413      	add	r3, r2
 8014e66:	3314      	adds	r3, #20
 8014e68:	781b      	ldrb	r3, [r3, #0]
 8014e6a:	2b01      	cmp	r3, #1
 8014e6c:	d925      	bls.n	8014eba <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014e6e:	4b40      	ldr	r3, [pc, #256]	; (8014f70 <etharp_output+0x1fc>)
 8014e70:	781b      	ldrb	r3, [r3, #0]
 8014e72:	4619      	mov	r1, r3
 8014e74:	4a3f      	ldr	r2, [pc, #252]	; (8014f74 <etharp_output+0x200>)
 8014e76:	460b      	mov	r3, r1
 8014e78:	005b      	lsls	r3, r3, #1
 8014e7a:	440b      	add	r3, r1
 8014e7c:	00db      	lsls	r3, r3, #3
 8014e7e:	4413      	add	r3, r2
 8014e80:	3308      	adds	r3, #8
 8014e82:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014e84:	68fa      	ldr	r2, [r7, #12]
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d117      	bne.n	8014eba <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014e8a:	69bb      	ldr	r3, [r7, #24]
 8014e8c:	681a      	ldr	r2, [r3, #0]
 8014e8e:	4b38      	ldr	r3, [pc, #224]	; (8014f70 <etharp_output+0x1fc>)
 8014e90:	781b      	ldrb	r3, [r3, #0]
 8014e92:	4618      	mov	r0, r3
 8014e94:	4937      	ldr	r1, [pc, #220]	; (8014f74 <etharp_output+0x200>)
 8014e96:	4603      	mov	r3, r0
 8014e98:	005b      	lsls	r3, r3, #1
 8014e9a:	4403      	add	r3, r0
 8014e9c:	00db      	lsls	r3, r3, #3
 8014e9e:	440b      	add	r3, r1
 8014ea0:	3304      	adds	r3, #4
 8014ea2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014ea4:	429a      	cmp	r2, r3
 8014ea6:	d108      	bne.n	8014eba <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014ea8:	4b31      	ldr	r3, [pc, #196]	; (8014f70 <etharp_output+0x1fc>)
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	461a      	mov	r2, r3
 8014eae:	68b9      	ldr	r1, [r7, #8]
 8014eb0:	68f8      	ldr	r0, [r7, #12]
 8014eb2:	f7ff fec5 	bl	8014c40 <etharp_output_to_arp_index>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	e04a      	b.n	8014f50 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014eba:	2300      	movs	r3, #0
 8014ebc:	75fb      	strb	r3, [r7, #23]
 8014ebe:	e031      	b.n	8014f24 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014ec0:	7dfa      	ldrb	r2, [r7, #23]
 8014ec2:	492c      	ldr	r1, [pc, #176]	; (8014f74 <etharp_output+0x200>)
 8014ec4:	4613      	mov	r3, r2
 8014ec6:	005b      	lsls	r3, r3, #1
 8014ec8:	4413      	add	r3, r2
 8014eca:	00db      	lsls	r3, r3, #3
 8014ecc:	440b      	add	r3, r1
 8014ece:	3314      	adds	r3, #20
 8014ed0:	781b      	ldrb	r3, [r3, #0]
 8014ed2:	2b01      	cmp	r3, #1
 8014ed4:	d923      	bls.n	8014f1e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014ed6:	7dfa      	ldrb	r2, [r7, #23]
 8014ed8:	4926      	ldr	r1, [pc, #152]	; (8014f74 <etharp_output+0x200>)
 8014eda:	4613      	mov	r3, r2
 8014edc:	005b      	lsls	r3, r3, #1
 8014ede:	4413      	add	r3, r2
 8014ee0:	00db      	lsls	r3, r3, #3
 8014ee2:	440b      	add	r3, r1
 8014ee4:	3308      	adds	r3, #8
 8014ee6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014ee8:	68fa      	ldr	r2, [r7, #12]
 8014eea:	429a      	cmp	r2, r3
 8014eec:	d117      	bne.n	8014f1e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014eee:	69bb      	ldr	r3, [r7, #24]
 8014ef0:	6819      	ldr	r1, [r3, #0]
 8014ef2:	7dfa      	ldrb	r2, [r7, #23]
 8014ef4:	481f      	ldr	r0, [pc, #124]	; (8014f74 <etharp_output+0x200>)
 8014ef6:	4613      	mov	r3, r2
 8014ef8:	005b      	lsls	r3, r3, #1
 8014efa:	4413      	add	r3, r2
 8014efc:	00db      	lsls	r3, r3, #3
 8014efe:	4403      	add	r3, r0
 8014f00:	3304      	adds	r3, #4
 8014f02:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014f04:	4299      	cmp	r1, r3
 8014f06:	d10a      	bne.n	8014f1e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014f08:	4a19      	ldr	r2, [pc, #100]	; (8014f70 <etharp_output+0x1fc>)
 8014f0a:	7dfb      	ldrb	r3, [r7, #23]
 8014f0c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014f0e:	7dfb      	ldrb	r3, [r7, #23]
 8014f10:	461a      	mov	r2, r3
 8014f12:	68b9      	ldr	r1, [r7, #8]
 8014f14:	68f8      	ldr	r0, [r7, #12]
 8014f16:	f7ff fe93 	bl	8014c40 <etharp_output_to_arp_index>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	e018      	b.n	8014f50 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014f1e:	7dfb      	ldrb	r3, [r7, #23]
 8014f20:	3301      	adds	r3, #1
 8014f22:	75fb      	strb	r3, [r7, #23]
 8014f24:	7dfb      	ldrb	r3, [r7, #23]
 8014f26:	2b09      	cmp	r3, #9
 8014f28:	d9ca      	bls.n	8014ec0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014f2a:	68ba      	ldr	r2, [r7, #8]
 8014f2c:	69b9      	ldr	r1, [r7, #24]
 8014f2e:	68f8      	ldr	r0, [r7, #12]
 8014f30:	f000 f822 	bl	8014f78 <etharp_query>
 8014f34:	4603      	mov	r3, r0
 8014f36:	e00b      	b.n	8014f50 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014f3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014f42:	9300      	str	r3, [sp, #0]
 8014f44:	69fb      	ldr	r3, [r7, #28]
 8014f46:	68b9      	ldr	r1, [r7, #8]
 8014f48:	68f8      	ldr	r0, [r7, #12]
 8014f4a:	f001 fd5d 	bl	8016a08 <ethernet_output>
 8014f4e:	4603      	mov	r3, r0
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3720      	adds	r7, #32
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}
 8014f58:	0801b970 	.word	0x0801b970
 8014f5c:	0801bac0 	.word	0x0801bac0
 8014f60:	0801b9e8 	.word	0x0801b9e8
 8014f64:	0801bb10 	.word	0x0801bb10
 8014f68:	0801bab0 	.word	0x0801bab0
 8014f6c:	0801c174 	.word	0x0801c174
 8014f70:	20000394 	.word	0x20000394
 8014f74:	200002a4 	.word	0x200002a4

08014f78 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b08c      	sub	sp, #48	; 0x30
 8014f7c:	af02      	add	r7, sp, #8
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	60b9      	str	r1, [r7, #8]
 8014f82:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	332a      	adds	r3, #42	; 0x2a
 8014f88:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014f8a:	23ff      	movs	r3, #255	; 0xff
 8014f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014f90:	2300      	movs	r3, #0
 8014f92:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	68f9      	ldr	r1, [r7, #12]
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f000 fe2c 	bl	8015bf8 <ip4_addr_isbroadcast_u32>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d10c      	bne.n	8014fc0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014fae:	2be0      	cmp	r3, #224	; 0xe0
 8014fb0:	d006      	beq.n	8014fc0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d003      	beq.n	8014fc0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014fb8:	68bb      	ldr	r3, [r7, #8]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d102      	bne.n	8014fc6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014fc0:	f06f 030f 	mvn.w	r3, #15
 8014fc4:	e101      	b.n	80151ca <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014fc6:	68fa      	ldr	r2, [r7, #12]
 8014fc8:	2101      	movs	r1, #1
 8014fca:	68b8      	ldr	r0, [r7, #8]
 8014fcc:	f7ff fb5c 	bl	8014688 <etharp_find_entry>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014fd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	da02      	bge.n	8014fe2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014fdc:	8a7b      	ldrh	r3, [r7, #18]
 8014fde:	b25b      	sxtb	r3, r3
 8014fe0:	e0f3      	b.n	80151ca <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014fe2:	8a7b      	ldrh	r3, [r7, #18]
 8014fe4:	2b7e      	cmp	r3, #126	; 0x7e
 8014fe6:	d906      	bls.n	8014ff6 <etharp_query+0x7e>
 8014fe8:	4b7a      	ldr	r3, [pc, #488]	; (80151d4 <etharp_query+0x25c>)
 8014fea:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014fee:	497a      	ldr	r1, [pc, #488]	; (80151d8 <etharp_query+0x260>)
 8014ff0:	487a      	ldr	r0, [pc, #488]	; (80151dc <etharp_query+0x264>)
 8014ff2:	f002 fae1 	bl	80175b8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014ff6:	8a7b      	ldrh	r3, [r7, #18]
 8014ff8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014ffa:	7c7a      	ldrb	r2, [r7, #17]
 8014ffc:	4978      	ldr	r1, [pc, #480]	; (80151e0 <etharp_query+0x268>)
 8014ffe:	4613      	mov	r3, r2
 8015000:	005b      	lsls	r3, r3, #1
 8015002:	4413      	add	r3, r2
 8015004:	00db      	lsls	r3, r3, #3
 8015006:	440b      	add	r3, r1
 8015008:	3314      	adds	r3, #20
 801500a:	781b      	ldrb	r3, [r3, #0]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d115      	bne.n	801503c <etharp_query+0xc4>
    is_new_entry = 1;
 8015010:	2301      	movs	r3, #1
 8015012:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015014:	7c7a      	ldrb	r2, [r7, #17]
 8015016:	4972      	ldr	r1, [pc, #456]	; (80151e0 <etharp_query+0x268>)
 8015018:	4613      	mov	r3, r2
 801501a:	005b      	lsls	r3, r3, #1
 801501c:	4413      	add	r3, r2
 801501e:	00db      	lsls	r3, r3, #3
 8015020:	440b      	add	r3, r1
 8015022:	3314      	adds	r3, #20
 8015024:	2201      	movs	r2, #1
 8015026:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015028:	7c7a      	ldrb	r2, [r7, #17]
 801502a:	496d      	ldr	r1, [pc, #436]	; (80151e0 <etharp_query+0x268>)
 801502c:	4613      	mov	r3, r2
 801502e:	005b      	lsls	r3, r3, #1
 8015030:	4413      	add	r3, r2
 8015032:	00db      	lsls	r3, r3, #3
 8015034:	440b      	add	r3, r1
 8015036:	3308      	adds	r3, #8
 8015038:	68fa      	ldr	r2, [r7, #12]
 801503a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801503c:	7c7a      	ldrb	r2, [r7, #17]
 801503e:	4968      	ldr	r1, [pc, #416]	; (80151e0 <etharp_query+0x268>)
 8015040:	4613      	mov	r3, r2
 8015042:	005b      	lsls	r3, r3, #1
 8015044:	4413      	add	r3, r2
 8015046:	00db      	lsls	r3, r3, #3
 8015048:	440b      	add	r3, r1
 801504a:	3314      	adds	r3, #20
 801504c:	781b      	ldrb	r3, [r3, #0]
 801504e:	2b01      	cmp	r3, #1
 8015050:	d011      	beq.n	8015076 <etharp_query+0xfe>
 8015052:	7c7a      	ldrb	r2, [r7, #17]
 8015054:	4962      	ldr	r1, [pc, #392]	; (80151e0 <etharp_query+0x268>)
 8015056:	4613      	mov	r3, r2
 8015058:	005b      	lsls	r3, r3, #1
 801505a:	4413      	add	r3, r2
 801505c:	00db      	lsls	r3, r3, #3
 801505e:	440b      	add	r3, r1
 8015060:	3314      	adds	r3, #20
 8015062:	781b      	ldrb	r3, [r3, #0]
 8015064:	2b01      	cmp	r3, #1
 8015066:	d806      	bhi.n	8015076 <etharp_query+0xfe>
 8015068:	4b5a      	ldr	r3, [pc, #360]	; (80151d4 <etharp_query+0x25c>)
 801506a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801506e:	495d      	ldr	r1, [pc, #372]	; (80151e4 <etharp_query+0x26c>)
 8015070:	485a      	ldr	r0, [pc, #360]	; (80151dc <etharp_query+0x264>)
 8015072:	f002 faa1 	bl	80175b8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015076:	6a3b      	ldr	r3, [r7, #32]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d102      	bne.n	8015082 <etharp_query+0x10a>
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d10c      	bne.n	801509c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015082:	68b9      	ldr	r1, [r7, #8]
 8015084:	68f8      	ldr	r0, [r7, #12]
 8015086:	f000 f963 	bl	8015350 <etharp_request>
 801508a:	4603      	mov	r3, r0
 801508c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d102      	bne.n	801509c <etharp_query+0x124>
      return result;
 8015096:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801509a:	e096      	b.n	80151ca <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d106      	bne.n	80150b0 <etharp_query+0x138>
 80150a2:	4b4c      	ldr	r3, [pc, #304]	; (80151d4 <etharp_query+0x25c>)
 80150a4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80150a8:	494f      	ldr	r1, [pc, #316]	; (80151e8 <etharp_query+0x270>)
 80150aa:	484c      	ldr	r0, [pc, #304]	; (80151dc <etharp_query+0x264>)
 80150ac:	f002 fa84 	bl	80175b8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80150b0:	7c7a      	ldrb	r2, [r7, #17]
 80150b2:	494b      	ldr	r1, [pc, #300]	; (80151e0 <etharp_query+0x268>)
 80150b4:	4613      	mov	r3, r2
 80150b6:	005b      	lsls	r3, r3, #1
 80150b8:	4413      	add	r3, r2
 80150ba:	00db      	lsls	r3, r3, #3
 80150bc:	440b      	add	r3, r1
 80150be:	3314      	adds	r3, #20
 80150c0:	781b      	ldrb	r3, [r3, #0]
 80150c2:	2b01      	cmp	r3, #1
 80150c4:	d917      	bls.n	80150f6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80150c6:	4a49      	ldr	r2, [pc, #292]	; (80151ec <etharp_query+0x274>)
 80150c8:	7c7b      	ldrb	r3, [r7, #17]
 80150ca:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80150cc:	7c7a      	ldrb	r2, [r7, #17]
 80150ce:	4613      	mov	r3, r2
 80150d0:	005b      	lsls	r3, r3, #1
 80150d2:	4413      	add	r3, r2
 80150d4:	00db      	lsls	r3, r3, #3
 80150d6:	3308      	adds	r3, #8
 80150d8:	4a41      	ldr	r2, [pc, #260]	; (80151e0 <etharp_query+0x268>)
 80150da:	4413      	add	r3, r2
 80150dc:	3304      	adds	r3, #4
 80150de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80150e2:	9200      	str	r2, [sp, #0]
 80150e4:	697a      	ldr	r2, [r7, #20]
 80150e6:	6879      	ldr	r1, [r7, #4]
 80150e8:	68f8      	ldr	r0, [r7, #12]
 80150ea:	f001 fc8d 	bl	8016a08 <ethernet_output>
 80150ee:	4603      	mov	r3, r0
 80150f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80150f4:	e067      	b.n	80151c6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80150f6:	7c7a      	ldrb	r2, [r7, #17]
 80150f8:	4939      	ldr	r1, [pc, #228]	; (80151e0 <etharp_query+0x268>)
 80150fa:	4613      	mov	r3, r2
 80150fc:	005b      	lsls	r3, r3, #1
 80150fe:	4413      	add	r3, r2
 8015100:	00db      	lsls	r3, r3, #3
 8015102:	440b      	add	r3, r1
 8015104:	3314      	adds	r3, #20
 8015106:	781b      	ldrb	r3, [r3, #0]
 8015108:	2b01      	cmp	r3, #1
 801510a:	d15c      	bne.n	80151c6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801510c:	2300      	movs	r3, #0
 801510e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015114:	e01c      	b.n	8015150 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015116:	69fb      	ldr	r3, [r7, #28]
 8015118:	895a      	ldrh	r2, [r3, #10]
 801511a:	69fb      	ldr	r3, [r7, #28]
 801511c:	891b      	ldrh	r3, [r3, #8]
 801511e:	429a      	cmp	r2, r3
 8015120:	d10a      	bne.n	8015138 <etharp_query+0x1c0>
 8015122:	69fb      	ldr	r3, [r7, #28]
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d006      	beq.n	8015138 <etharp_query+0x1c0>
 801512a:	4b2a      	ldr	r3, [pc, #168]	; (80151d4 <etharp_query+0x25c>)
 801512c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015130:	492f      	ldr	r1, [pc, #188]	; (80151f0 <etharp_query+0x278>)
 8015132:	482a      	ldr	r0, [pc, #168]	; (80151dc <etharp_query+0x264>)
 8015134:	f002 fa40 	bl	80175b8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015138:	69fb      	ldr	r3, [r7, #28]
 801513a:	7b1b      	ldrb	r3, [r3, #12]
 801513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015140:	2b00      	cmp	r3, #0
 8015142:	d002      	beq.n	801514a <etharp_query+0x1d2>
        copy_needed = 1;
 8015144:	2301      	movs	r3, #1
 8015146:	61bb      	str	r3, [r7, #24]
        break;
 8015148:	e005      	b.n	8015156 <etharp_query+0x1de>
      }
      p = p->next;
 801514a:	69fb      	ldr	r3, [r7, #28]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015150:	69fb      	ldr	r3, [r7, #28]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d1df      	bne.n	8015116 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d007      	beq.n	801516c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801515c:	687a      	ldr	r2, [r7, #4]
 801515e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015162:	200e      	movs	r0, #14
 8015164:	f7f6 fc58 	bl	800ba18 <pbuf_clone>
 8015168:	61f8      	str	r0, [r7, #28]
 801516a:	e004      	b.n	8015176 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015170:	69f8      	ldr	r0, [r7, #28]
 8015172:	f7f6 fa5b 	bl	800b62c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015176:	69fb      	ldr	r3, [r7, #28]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d021      	beq.n	80151c0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801517c:	7c7a      	ldrb	r2, [r7, #17]
 801517e:	4918      	ldr	r1, [pc, #96]	; (80151e0 <etharp_query+0x268>)
 8015180:	4613      	mov	r3, r2
 8015182:	005b      	lsls	r3, r3, #1
 8015184:	4413      	add	r3, r2
 8015186:	00db      	lsls	r3, r3, #3
 8015188:	440b      	add	r3, r1
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d00a      	beq.n	80151a6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015190:	7c7a      	ldrb	r2, [r7, #17]
 8015192:	4913      	ldr	r1, [pc, #76]	; (80151e0 <etharp_query+0x268>)
 8015194:	4613      	mov	r3, r2
 8015196:	005b      	lsls	r3, r3, #1
 8015198:	4413      	add	r3, r2
 801519a:	00db      	lsls	r3, r3, #3
 801519c:	440b      	add	r3, r1
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7f6 f9a3 	bl	800b4ec <pbuf_free>
      }
      arp_table[i].q = p;
 80151a6:	7c7a      	ldrb	r2, [r7, #17]
 80151a8:	490d      	ldr	r1, [pc, #52]	; (80151e0 <etharp_query+0x268>)
 80151aa:	4613      	mov	r3, r2
 80151ac:	005b      	lsls	r3, r3, #1
 80151ae:	4413      	add	r3, r2
 80151b0:	00db      	lsls	r3, r3, #3
 80151b2:	440b      	add	r3, r1
 80151b4:	69fa      	ldr	r2, [r7, #28]
 80151b6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80151b8:	2300      	movs	r3, #0
 80151ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80151be:	e002      	b.n	80151c6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80151c0:	23ff      	movs	r3, #255	; 0xff
 80151c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80151c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3728      	adds	r7, #40	; 0x28
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	bf00      	nop
 80151d4:	0801b970 	.word	0x0801b970
 80151d8:	0801bb1c 	.word	0x0801bb1c
 80151dc:	0801b9e8 	.word	0x0801b9e8
 80151e0:	200002a4 	.word	0x200002a4
 80151e4:	0801bb2c 	.word	0x0801bb2c
 80151e8:	0801bb10 	.word	0x0801bb10
 80151ec:	20000394 	.word	0x20000394
 80151f0:	0801bb54 	.word	0x0801bb54

080151f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b08a      	sub	sp, #40	; 0x28
 80151f8:	af02      	add	r7, sp, #8
 80151fa:	60f8      	str	r0, [r7, #12]
 80151fc:	60b9      	str	r1, [r7, #8]
 80151fe:	607a      	str	r2, [r7, #4]
 8015200:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015202:	2300      	movs	r3, #0
 8015204:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d106      	bne.n	801521a <etharp_raw+0x26>
 801520c:	4b3a      	ldr	r3, [pc, #232]	; (80152f8 <etharp_raw+0x104>)
 801520e:	f240 4257 	movw	r2, #1111	; 0x457
 8015212:	493a      	ldr	r1, [pc, #232]	; (80152fc <etharp_raw+0x108>)
 8015214:	483a      	ldr	r0, [pc, #232]	; (8015300 <etharp_raw+0x10c>)
 8015216:	f002 f9cf 	bl	80175b8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801521a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801521e:	211c      	movs	r1, #28
 8015220:	200e      	movs	r0, #14
 8015222:	f7f5 fe7f 	bl	800af24 <pbuf_alloc>
 8015226:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015228:	69bb      	ldr	r3, [r7, #24]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d102      	bne.n	8015234 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801522e:	f04f 33ff 	mov.w	r3, #4294967295
 8015232:	e05d      	b.n	80152f0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015234:	69bb      	ldr	r3, [r7, #24]
 8015236:	895b      	ldrh	r3, [r3, #10]
 8015238:	2b1b      	cmp	r3, #27
 801523a:	d806      	bhi.n	801524a <etharp_raw+0x56>
 801523c:	4b2e      	ldr	r3, [pc, #184]	; (80152f8 <etharp_raw+0x104>)
 801523e:	f240 4262 	movw	r2, #1122	; 0x462
 8015242:	4930      	ldr	r1, [pc, #192]	; (8015304 <etharp_raw+0x110>)
 8015244:	482e      	ldr	r0, [pc, #184]	; (8015300 <etharp_raw+0x10c>)
 8015246:	f002 f9b7 	bl	80175b8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801524a:	69bb      	ldr	r3, [r7, #24]
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015250:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015252:	4618      	mov	r0, r3
 8015254:	f7f4 fe66 	bl	8009f24 <lwip_htons>
 8015258:	4603      	mov	r3, r0
 801525a:	461a      	mov	r2, r3
 801525c:	697b      	ldr	r3, [r7, #20]
 801525e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015266:	2b06      	cmp	r3, #6
 8015268:	d006      	beq.n	8015278 <etharp_raw+0x84>
 801526a:	4b23      	ldr	r3, [pc, #140]	; (80152f8 <etharp_raw+0x104>)
 801526c:	f240 4269 	movw	r2, #1129	; 0x469
 8015270:	4925      	ldr	r1, [pc, #148]	; (8015308 <etharp_raw+0x114>)
 8015272:	4823      	ldr	r0, [pc, #140]	; (8015300 <etharp_raw+0x10c>)
 8015274:	f002 f9a0 	bl	80175b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	3308      	adds	r3, #8
 801527c:	2206      	movs	r2, #6
 801527e:	6839      	ldr	r1, [r7, #0]
 8015280:	4618      	mov	r0, r3
 8015282:	f002 f969 	bl	8017558 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015286:	697b      	ldr	r3, [r7, #20]
 8015288:	3312      	adds	r3, #18
 801528a:	2206      	movs	r2, #6
 801528c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801528e:	4618      	mov	r0, r3
 8015290:	f002 f962 	bl	8017558 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015294:	697b      	ldr	r3, [r7, #20]
 8015296:	330e      	adds	r3, #14
 8015298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801529a:	6812      	ldr	r2, [r2, #0]
 801529c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	3318      	adds	r3, #24
 80152a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152a4:	6812      	ldr	r2, [r2, #0]
 80152a6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80152a8:	697b      	ldr	r3, [r7, #20]
 80152aa:	2200      	movs	r2, #0
 80152ac:	701a      	strb	r2, [r3, #0]
 80152ae:	2200      	movs	r2, #0
 80152b0:	f042 0201 	orr.w	r2, r2, #1
 80152b4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	2200      	movs	r2, #0
 80152ba:	f042 0208 	orr.w	r2, r2, #8
 80152be:	709a      	strb	r2, [r3, #2]
 80152c0:	2200      	movs	r2, #0
 80152c2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80152c4:	697b      	ldr	r3, [r7, #20]
 80152c6:	2206      	movs	r2, #6
 80152c8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	2204      	movs	r2, #4
 80152ce:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80152d0:	f640 0306 	movw	r3, #2054	; 0x806
 80152d4:	9300      	str	r3, [sp, #0]
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	68ba      	ldr	r2, [r7, #8]
 80152da:	69b9      	ldr	r1, [r7, #24]
 80152dc:	68f8      	ldr	r0, [r7, #12]
 80152de:	f001 fb93 	bl	8016a08 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80152e2:	69b8      	ldr	r0, [r7, #24]
 80152e4:	f7f6 f902 	bl	800b4ec <pbuf_free>
  p = NULL;
 80152e8:	2300      	movs	r3, #0
 80152ea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80152ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3720      	adds	r7, #32
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	0801b970 	.word	0x0801b970
 80152fc:	0801bac0 	.word	0x0801bac0
 8015300:	0801b9e8 	.word	0x0801b9e8
 8015304:	0801bb70 	.word	0x0801bb70
 8015308:	0801bba4 	.word	0x0801bba4

0801530c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b088      	sub	sp, #32
 8015310:	af04      	add	r7, sp, #16
 8015312:	60f8      	str	r0, [r7, #12]
 8015314:	60b9      	str	r1, [r7, #8]
 8015316:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015328:	2201      	movs	r2, #1
 801532a:	9203      	str	r2, [sp, #12]
 801532c:	68ba      	ldr	r2, [r7, #8]
 801532e:	9202      	str	r2, [sp, #8]
 8015330:	4a06      	ldr	r2, [pc, #24]	; (801534c <etharp_request_dst+0x40>)
 8015332:	9201      	str	r2, [sp, #4]
 8015334:	9300      	str	r3, [sp, #0]
 8015336:	4603      	mov	r3, r0
 8015338:	687a      	ldr	r2, [r7, #4]
 801533a:	68f8      	ldr	r0, [r7, #12]
 801533c:	f7ff ff5a 	bl	80151f4 <etharp_raw>
 8015340:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015342:	4618      	mov	r0, r3
 8015344:	3710      	adds	r7, #16
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}
 801534a:	bf00      	nop
 801534c:	0801c17c 	.word	0x0801c17c

08015350 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
 8015358:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801535a:	4a05      	ldr	r2, [pc, #20]	; (8015370 <etharp_request+0x20>)
 801535c:	6839      	ldr	r1, [r7, #0]
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f7ff ffd4 	bl	801530c <etharp_request_dst>
 8015364:	4603      	mov	r3, r0
}
 8015366:	4618      	mov	r0, r3
 8015368:	3708      	adds	r7, #8
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}
 801536e:	bf00      	nop
 8015370:	0801c174 	.word	0x0801c174

08015374 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b08e      	sub	sp, #56	; 0x38
 8015378:	af04      	add	r7, sp, #16
 801537a:	6078      	str	r0, [r7, #4]
 801537c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801537e:	4b79      	ldr	r3, [pc, #484]	; (8015564 <icmp_input+0x1f0>)
 8015380:	689b      	ldr	r3, [r3, #8]
 8015382:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015386:	781b      	ldrb	r3, [r3, #0]
 8015388:	f003 030f 	and.w	r3, r3, #15
 801538c:	b2db      	uxtb	r3, r3
 801538e:	009b      	lsls	r3, r3, #2
 8015390:	b2db      	uxtb	r3, r3
 8015392:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015394:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015396:	2b13      	cmp	r3, #19
 8015398:	f240 80cd 	bls.w	8015536 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	895b      	ldrh	r3, [r3, #10]
 80153a0:	2b03      	cmp	r3, #3
 80153a2:	f240 80ca 	bls.w	801553a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	685b      	ldr	r3, [r3, #4]
 80153aa:	781b      	ldrb	r3, [r3, #0]
 80153ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80153b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	f000 80b7 	beq.w	8015528 <icmp_input+0x1b4>
 80153ba:	2b08      	cmp	r3, #8
 80153bc:	f040 80b7 	bne.w	801552e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80153c0:	4b69      	ldr	r3, [pc, #420]	; (8015568 <icmp_input+0x1f4>)
 80153c2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80153c4:	4b67      	ldr	r3, [pc, #412]	; (8015564 <icmp_input+0x1f0>)
 80153c6:	695b      	ldr	r3, [r3, #20]
 80153c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80153cc:	2be0      	cmp	r3, #224	; 0xe0
 80153ce:	f000 80bb 	beq.w	8015548 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80153d2:	4b64      	ldr	r3, [pc, #400]	; (8015564 <icmp_input+0x1f0>)
 80153d4:	695b      	ldr	r3, [r3, #20]
 80153d6:	4a63      	ldr	r2, [pc, #396]	; (8015564 <icmp_input+0x1f0>)
 80153d8:	6812      	ldr	r2, [r2, #0]
 80153da:	4611      	mov	r1, r2
 80153dc:	4618      	mov	r0, r3
 80153de:	f000 fc0b 	bl	8015bf8 <ip4_addr_isbroadcast_u32>
 80153e2:	4603      	mov	r3, r0
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	f040 80b1 	bne.w	801554c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	891b      	ldrh	r3, [r3, #8]
 80153ee:	2b07      	cmp	r3, #7
 80153f0:	f240 80a5 	bls.w	801553e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80153f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80153f6:	330e      	adds	r3, #14
 80153f8:	4619      	mov	r1, r3
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f7f5 ffe0 	bl	800b3c0 <pbuf_add_header>
 8015400:	4603      	mov	r3, r0
 8015402:	2b00      	cmp	r3, #0
 8015404:	d04b      	beq.n	801549e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	891a      	ldrh	r2, [r3, #8]
 801540a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801540c:	4413      	add	r3, r2
 801540e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	891b      	ldrh	r3, [r3, #8]
 8015414:	8b7a      	ldrh	r2, [r7, #26]
 8015416:	429a      	cmp	r2, r3
 8015418:	f0c0 809a 	bcc.w	8015550 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801541c:	8b7b      	ldrh	r3, [r7, #26]
 801541e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015422:	4619      	mov	r1, r3
 8015424:	200e      	movs	r0, #14
 8015426:	f7f5 fd7d 	bl	800af24 <pbuf_alloc>
 801542a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	2b00      	cmp	r3, #0
 8015430:	f000 8090 	beq.w	8015554 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015434:	697b      	ldr	r3, [r7, #20]
 8015436:	895b      	ldrh	r3, [r3, #10]
 8015438:	461a      	mov	r2, r3
 801543a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801543c:	3308      	adds	r3, #8
 801543e:	429a      	cmp	r2, r3
 8015440:	d203      	bcs.n	801544a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015442:	6978      	ldr	r0, [r7, #20]
 8015444:	f7f6 f852 	bl	800b4ec <pbuf_free>
          goto icmperr;
 8015448:	e085      	b.n	8015556 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801544a:	697b      	ldr	r3, [r7, #20]
 801544c:	685b      	ldr	r3, [r3, #4]
 801544e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015452:	4618      	mov	r0, r3
 8015454:	f002 f880 	bl	8017558 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015458:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801545a:	4619      	mov	r1, r3
 801545c:	6978      	ldr	r0, [r7, #20]
 801545e:	f7f5 ffbf 	bl	800b3e0 <pbuf_remove_header>
 8015462:	4603      	mov	r3, r0
 8015464:	2b00      	cmp	r3, #0
 8015466:	d009      	beq.n	801547c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015468:	4b40      	ldr	r3, [pc, #256]	; (801556c <icmp_input+0x1f8>)
 801546a:	22b6      	movs	r2, #182	; 0xb6
 801546c:	4940      	ldr	r1, [pc, #256]	; (8015570 <icmp_input+0x1fc>)
 801546e:	4841      	ldr	r0, [pc, #260]	; (8015574 <icmp_input+0x200>)
 8015470:	f002 f8a2 	bl	80175b8 <iprintf>
          pbuf_free(r);
 8015474:	6978      	ldr	r0, [r7, #20]
 8015476:	f7f6 f839 	bl	800b4ec <pbuf_free>
          goto icmperr;
 801547a:	e06c      	b.n	8015556 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801547c:	6879      	ldr	r1, [r7, #4]
 801547e:	6978      	ldr	r0, [r7, #20]
 8015480:	f7f6 f95c 	bl	800b73c <pbuf_copy>
 8015484:	4603      	mov	r3, r0
 8015486:	2b00      	cmp	r3, #0
 8015488:	d003      	beq.n	8015492 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801548a:	6978      	ldr	r0, [r7, #20]
 801548c:	f7f6 f82e 	bl	800b4ec <pbuf_free>
          goto icmperr;
 8015490:	e061      	b.n	8015556 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	f7f6 f82a 	bl	800b4ec <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	607b      	str	r3, [r7, #4]
 801549c:	e00f      	b.n	80154be <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801549e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154a0:	330e      	adds	r3, #14
 80154a2:	4619      	mov	r1, r3
 80154a4:	6878      	ldr	r0, [r7, #4]
 80154a6:	f7f5 ff9b 	bl	800b3e0 <pbuf_remove_header>
 80154aa:	4603      	mov	r3, r0
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d006      	beq.n	80154be <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80154b0:	4b2e      	ldr	r3, [pc, #184]	; (801556c <icmp_input+0x1f8>)
 80154b2:	22c7      	movs	r2, #199	; 0xc7
 80154b4:	4930      	ldr	r1, [pc, #192]	; (8015578 <icmp_input+0x204>)
 80154b6:	482f      	ldr	r0, [pc, #188]	; (8015574 <icmp_input+0x200>)
 80154b8:	f002 f87e 	bl	80175b8 <iprintf>
          goto icmperr;
 80154bc:	e04b      	b.n	8015556 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80154c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154c6:	4619      	mov	r1, r3
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f7f5 ff79 	bl	800b3c0 <pbuf_add_header>
 80154ce:	4603      	mov	r3, r0
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d12b      	bne.n	801552c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	685b      	ldr	r3, [r3, #4]
 80154d8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80154da:	69fb      	ldr	r3, [r7, #28]
 80154dc:	681a      	ldr	r2, [r3, #0]
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80154e2:	4b20      	ldr	r3, [pc, #128]	; (8015564 <icmp_input+0x1f0>)
 80154e4:	691a      	ldr	r2, [r3, #16]
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80154ea:	693b      	ldr	r3, [r7, #16]
 80154ec:	2200      	movs	r2, #0
 80154ee:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80154f0:	693b      	ldr	r3, [r7, #16]
 80154f2:	2200      	movs	r2, #0
 80154f4:	709a      	strb	r2, [r3, #2]
 80154f6:	2200      	movs	r2, #0
 80154f8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	22ff      	movs	r2, #255	; 0xff
 80154fe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	2200      	movs	r2, #0
 8015504:	729a      	strb	r2, [r3, #10]
 8015506:	2200      	movs	r2, #0
 8015508:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	9302      	str	r3, [sp, #8]
 801550e:	2301      	movs	r3, #1
 8015510:	9301      	str	r3, [sp, #4]
 8015512:	2300      	movs	r3, #0
 8015514:	9300      	str	r3, [sp, #0]
 8015516:	23ff      	movs	r3, #255	; 0xff
 8015518:	2200      	movs	r2, #0
 801551a:	69f9      	ldr	r1, [r7, #28]
 801551c:	6878      	ldr	r0, [r7, #4]
 801551e:	f000 fa93 	bl	8015a48 <ip4_output_if>
 8015522:	4603      	mov	r3, r0
 8015524:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015526:	e001      	b.n	801552c <icmp_input+0x1b8>
      break;
 8015528:	bf00      	nop
 801552a:	e000      	b.n	801552e <icmp_input+0x1ba>
      break;
 801552c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801552e:	6878      	ldr	r0, [r7, #4]
 8015530:	f7f5 ffdc 	bl	800b4ec <pbuf_free>
  return;
 8015534:	e013      	b.n	801555e <icmp_input+0x1ea>
    goto lenerr;
 8015536:	bf00      	nop
 8015538:	e002      	b.n	8015540 <icmp_input+0x1cc>
    goto lenerr;
 801553a:	bf00      	nop
 801553c:	e000      	b.n	8015540 <icmp_input+0x1cc>
        goto lenerr;
 801553e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015540:	6878      	ldr	r0, [r7, #4]
 8015542:	f7f5 ffd3 	bl	800b4ec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015546:	e00a      	b.n	801555e <icmp_input+0x1ea>
        goto icmperr;
 8015548:	bf00      	nop
 801554a:	e004      	b.n	8015556 <icmp_input+0x1e2>
        goto icmperr;
 801554c:	bf00      	nop
 801554e:	e002      	b.n	8015556 <icmp_input+0x1e2>
          goto icmperr;
 8015550:	bf00      	nop
 8015552:	e000      	b.n	8015556 <icmp_input+0x1e2>
          goto icmperr;
 8015554:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015556:	6878      	ldr	r0, [r7, #4]
 8015558:	f7f5 ffc8 	bl	800b4ec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801555c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801555e:	3728      	adds	r7, #40	; 0x28
 8015560:	46bd      	mov	sp, r7
 8015562:	bd80      	pop	{r7, pc}
 8015564:	200037a8 	.word	0x200037a8
 8015568:	200037bc 	.word	0x200037bc
 801556c:	0801bbe8 	.word	0x0801bbe8
 8015570:	0801bc20 	.word	0x0801bc20
 8015574:	0801bc58 	.word	0x0801bc58
 8015578:	0801bc80 	.word	0x0801bc80

0801557c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	460b      	mov	r3, r1
 8015586:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015588:	78fb      	ldrb	r3, [r7, #3]
 801558a:	461a      	mov	r2, r3
 801558c:	2103      	movs	r1, #3
 801558e:	6878      	ldr	r0, [r7, #4]
 8015590:	f000 f814 	bl	80155bc <icmp_send_response>
}
 8015594:	bf00      	nop
 8015596:	3708      	adds	r7, #8
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}

0801559c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b082      	sub	sp, #8
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
 80155a4:	460b      	mov	r3, r1
 80155a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80155a8:	78fb      	ldrb	r3, [r7, #3]
 80155aa:	461a      	mov	r2, r3
 80155ac:	210b      	movs	r1, #11
 80155ae:	6878      	ldr	r0, [r7, #4]
 80155b0:	f000 f804 	bl	80155bc <icmp_send_response>
}
 80155b4:	bf00      	nop
 80155b6:	3708      	adds	r7, #8
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}

080155bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b08c      	sub	sp, #48	; 0x30
 80155c0:	af04      	add	r7, sp, #16
 80155c2:	6078      	str	r0, [r7, #4]
 80155c4:	460b      	mov	r3, r1
 80155c6:	70fb      	strb	r3, [r7, #3]
 80155c8:	4613      	mov	r3, r2
 80155ca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80155cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155d0:	2124      	movs	r1, #36	; 0x24
 80155d2:	2022      	movs	r0, #34	; 0x22
 80155d4:	f7f5 fca6 	bl	800af24 <pbuf_alloc>
 80155d8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80155da:	69fb      	ldr	r3, [r7, #28]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d04c      	beq.n	801567a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80155e0:	69fb      	ldr	r3, [r7, #28]
 80155e2:	895b      	ldrh	r3, [r3, #10]
 80155e4:	2b23      	cmp	r3, #35	; 0x23
 80155e6:	d806      	bhi.n	80155f6 <icmp_send_response+0x3a>
 80155e8:	4b26      	ldr	r3, [pc, #152]	; (8015684 <icmp_send_response+0xc8>)
 80155ea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80155ee:	4926      	ldr	r1, [pc, #152]	; (8015688 <icmp_send_response+0xcc>)
 80155f0:	4826      	ldr	r0, [pc, #152]	; (801568c <icmp_send_response+0xd0>)
 80155f2:	f001 ffe1 	bl	80175b8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	685b      	ldr	r3, [r3, #4]
 80155fa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	685b      	ldr	r3, [r3, #4]
 8015600:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015602:	697b      	ldr	r3, [r7, #20]
 8015604:	78fa      	ldrb	r2, [r7, #3]
 8015606:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	78ba      	ldrb	r2, [r7, #2]
 801560c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801560e:	697b      	ldr	r3, [r7, #20]
 8015610:	2200      	movs	r2, #0
 8015612:	711a      	strb	r2, [r3, #4]
 8015614:	2200      	movs	r2, #0
 8015616:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015618:	697b      	ldr	r3, [r7, #20]
 801561a:	2200      	movs	r2, #0
 801561c:	719a      	strb	r2, [r3, #6]
 801561e:	2200      	movs	r2, #0
 8015620:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015622:	69fb      	ldr	r3, [r7, #28]
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	f103 0008 	add.w	r0, r3, #8
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	685b      	ldr	r3, [r3, #4]
 801562e:	221c      	movs	r2, #28
 8015630:	4619      	mov	r1, r3
 8015632:	f001 ff91 	bl	8017558 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015636:	69bb      	ldr	r3, [r7, #24]
 8015638:	68db      	ldr	r3, [r3, #12]
 801563a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801563c:	f107 030c 	add.w	r3, r7, #12
 8015640:	4618      	mov	r0, r3
 8015642:	f000 f825 	bl	8015690 <ip4_route>
 8015646:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015648:	693b      	ldr	r3, [r7, #16]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d011      	beq.n	8015672 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	2200      	movs	r2, #0
 8015652:	709a      	strb	r2, [r3, #2]
 8015654:	2200      	movs	r2, #0
 8015656:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015658:	f107 020c 	add.w	r2, r7, #12
 801565c:	693b      	ldr	r3, [r7, #16]
 801565e:	9302      	str	r3, [sp, #8]
 8015660:	2301      	movs	r3, #1
 8015662:	9301      	str	r3, [sp, #4]
 8015664:	2300      	movs	r3, #0
 8015666:	9300      	str	r3, [sp, #0]
 8015668:	23ff      	movs	r3, #255	; 0xff
 801566a:	2100      	movs	r1, #0
 801566c:	69f8      	ldr	r0, [r7, #28]
 801566e:	f000 f9eb 	bl	8015a48 <ip4_output_if>
  }
  pbuf_free(q);
 8015672:	69f8      	ldr	r0, [r7, #28]
 8015674:	f7f5 ff3a 	bl	800b4ec <pbuf_free>
 8015678:	e000      	b.n	801567c <icmp_send_response+0xc0>
    return;
 801567a:	bf00      	nop
}
 801567c:	3720      	adds	r7, #32
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}
 8015682:	bf00      	nop
 8015684:	0801bbe8 	.word	0x0801bbe8
 8015688:	0801bcb4 	.word	0x0801bcb4
 801568c:	0801bc58 	.word	0x0801bc58

08015690 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015690:	b480      	push	{r7}
 8015692:	b085      	sub	sp, #20
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015698:	4b33      	ldr	r3, [pc, #204]	; (8015768 <ip4_route+0xd8>)
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	60fb      	str	r3, [r7, #12]
 801569e:	e036      	b.n	801570e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80156a6:	f003 0301 	and.w	r3, r3, #1
 80156aa:	b2db      	uxtb	r3, r3
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d02b      	beq.n	8015708 <ip4_route+0x78>
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80156b6:	089b      	lsrs	r3, r3, #2
 80156b8:	f003 0301 	and.w	r3, r3, #1
 80156bc:	b2db      	uxtb	r3, r3
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d022      	beq.n	8015708 <ip4_route+0x78>
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	3304      	adds	r3, #4
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d01d      	beq.n	8015708 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681a      	ldr	r2, [r3, #0]
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	3304      	adds	r3, #4
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	405a      	eors	r2, r3
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	3308      	adds	r3, #8
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	4013      	ands	r3, r2
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d101      	bne.n	80156e8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	e038      	b.n	801575a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80156ee:	f003 0302 	and.w	r3, r3, #2
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d108      	bne.n	8015708 <ip4_route+0x78>
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681a      	ldr	r2, [r3, #0]
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	330c      	adds	r3, #12
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	429a      	cmp	r2, r3
 8015702:	d101      	bne.n	8015708 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	e028      	b.n	801575a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	60fb      	str	r3, [r7, #12]
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d1c5      	bne.n	80156a0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015714:	4b15      	ldr	r3, [pc, #84]	; (801576c <ip4_route+0xdc>)
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d01a      	beq.n	8015752 <ip4_route+0xc2>
 801571c:	4b13      	ldr	r3, [pc, #76]	; (801576c <ip4_route+0xdc>)
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015724:	f003 0301 	and.w	r3, r3, #1
 8015728:	2b00      	cmp	r3, #0
 801572a:	d012      	beq.n	8015752 <ip4_route+0xc2>
 801572c:	4b0f      	ldr	r3, [pc, #60]	; (801576c <ip4_route+0xdc>)
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015734:	f003 0304 	and.w	r3, r3, #4
 8015738:	2b00      	cmp	r3, #0
 801573a:	d00a      	beq.n	8015752 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801573c:	4b0b      	ldr	r3, [pc, #44]	; (801576c <ip4_route+0xdc>)
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	3304      	adds	r3, #4
 8015742:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015744:	2b00      	cmp	r3, #0
 8015746:	d004      	beq.n	8015752 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	b2db      	uxtb	r3, r3
 801574e:	2b7f      	cmp	r3, #127	; 0x7f
 8015750:	d101      	bne.n	8015756 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015752:	2300      	movs	r3, #0
 8015754:	e001      	b.n	801575a <ip4_route+0xca>
  }

  return netif_default;
 8015756:	4b05      	ldr	r3, [pc, #20]	; (801576c <ip4_route+0xdc>)
 8015758:	681b      	ldr	r3, [r3, #0]
}
 801575a:	4618      	mov	r0, r3
 801575c:	3714      	adds	r7, #20
 801575e:	46bd      	mov	sp, r7
 8015760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015764:	4770      	bx	lr
 8015766:	bf00      	nop
 8015768:	20006cfc 	.word	0x20006cfc
 801576c:	20006d00 	.word	0x20006d00

08015770 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801577e:	f003 0301 	and.w	r3, r3, #1
 8015782:	b2db      	uxtb	r3, r3
 8015784:	2b00      	cmp	r3, #0
 8015786:	d016      	beq.n	80157b6 <ip4_input_accept+0x46>
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	3304      	adds	r3, #4
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d011      	beq.n	80157b6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015792:	4b0b      	ldr	r3, [pc, #44]	; (80157c0 <ip4_input_accept+0x50>)
 8015794:	695a      	ldr	r2, [r3, #20]
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	3304      	adds	r3, #4
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	429a      	cmp	r2, r3
 801579e:	d008      	beq.n	80157b2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80157a0:	4b07      	ldr	r3, [pc, #28]	; (80157c0 <ip4_input_accept+0x50>)
 80157a2:	695b      	ldr	r3, [r3, #20]
 80157a4:	6879      	ldr	r1, [r7, #4]
 80157a6:	4618      	mov	r0, r3
 80157a8:	f000 fa26 	bl	8015bf8 <ip4_addr_isbroadcast_u32>
 80157ac:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d001      	beq.n	80157b6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80157b2:	2301      	movs	r3, #1
 80157b4:	e000      	b.n	80157b8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80157b6:	2300      	movs	r3, #0
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	3708      	adds	r7, #8
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}
 80157c0:	200037a8 	.word	0x200037a8

080157c4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b088      	sub	sp, #32
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
 80157cc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80157ce:	2301      	movs	r3, #1
 80157d0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	685b      	ldr	r3, [r3, #4]
 80157d6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80157d8:	69fb      	ldr	r3, [r7, #28]
 80157da:	781b      	ldrb	r3, [r3, #0]
 80157dc:	091b      	lsrs	r3, r3, #4
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	2b04      	cmp	r3, #4
 80157e2:	d004      	beq.n	80157ee <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80157e4:	6878      	ldr	r0, [r7, #4]
 80157e6:	f7f5 fe81 	bl	800b4ec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80157ea:	2300      	movs	r3, #0
 80157ec:	e123      	b.n	8015a36 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80157ee:	69fb      	ldr	r3, [r7, #28]
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	f003 030f 	and.w	r3, r3, #15
 80157f6:	b2db      	uxtb	r3, r3
 80157f8:	009b      	lsls	r3, r3, #2
 80157fa:	b2db      	uxtb	r3, r3
 80157fc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80157fe:	69fb      	ldr	r3, [r7, #28]
 8015800:	885b      	ldrh	r3, [r3, #2]
 8015802:	b29b      	uxth	r3, r3
 8015804:	4618      	mov	r0, r3
 8015806:	f7f4 fb8d 	bl	8009f24 <lwip_htons>
 801580a:	4603      	mov	r3, r0
 801580c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	891b      	ldrh	r3, [r3, #8]
 8015812:	8a3a      	ldrh	r2, [r7, #16]
 8015814:	429a      	cmp	r2, r3
 8015816:	d204      	bcs.n	8015822 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015818:	8a3b      	ldrh	r3, [r7, #16]
 801581a:	4619      	mov	r1, r3
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f7f5 fcdf 	bl	800b1e0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	895b      	ldrh	r3, [r3, #10]
 8015826:	8a7a      	ldrh	r2, [r7, #18]
 8015828:	429a      	cmp	r2, r3
 801582a:	d807      	bhi.n	801583c <ip4_input+0x78>
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	891b      	ldrh	r3, [r3, #8]
 8015830:	8a3a      	ldrh	r2, [r7, #16]
 8015832:	429a      	cmp	r2, r3
 8015834:	d802      	bhi.n	801583c <ip4_input+0x78>
 8015836:	8a7b      	ldrh	r3, [r7, #18]
 8015838:	2b13      	cmp	r3, #19
 801583a:	d804      	bhi.n	8015846 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f7f5 fe55 	bl	800b4ec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015842:	2300      	movs	r3, #0
 8015844:	e0f7      	b.n	8015a36 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015846:	69fb      	ldr	r3, [r7, #28]
 8015848:	691b      	ldr	r3, [r3, #16]
 801584a:	4a7d      	ldr	r2, [pc, #500]	; (8015a40 <ip4_input+0x27c>)
 801584c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801584e:	69fb      	ldr	r3, [r7, #28]
 8015850:	68db      	ldr	r3, [r3, #12]
 8015852:	4a7b      	ldr	r2, [pc, #492]	; (8015a40 <ip4_input+0x27c>)
 8015854:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015856:	4b7a      	ldr	r3, [pc, #488]	; (8015a40 <ip4_input+0x27c>)
 8015858:	695b      	ldr	r3, [r3, #20]
 801585a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801585e:	2be0      	cmp	r3, #224	; 0xe0
 8015860:	d112      	bne.n	8015888 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015868:	f003 0301 	and.w	r3, r3, #1
 801586c:	b2db      	uxtb	r3, r3
 801586e:	2b00      	cmp	r3, #0
 8015870:	d007      	beq.n	8015882 <ip4_input+0xbe>
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	3304      	adds	r3, #4
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d002      	beq.n	8015882 <ip4_input+0xbe>
      netif = inp;
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	61bb      	str	r3, [r7, #24]
 8015880:	e02a      	b.n	80158d8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015882:	2300      	movs	r3, #0
 8015884:	61bb      	str	r3, [r7, #24]
 8015886:	e027      	b.n	80158d8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015888:	6838      	ldr	r0, [r7, #0]
 801588a:	f7ff ff71 	bl	8015770 <ip4_input_accept>
 801588e:	4603      	mov	r3, r0
 8015890:	2b00      	cmp	r3, #0
 8015892:	d002      	beq.n	801589a <ip4_input+0xd6>
      netif = inp;
 8015894:	683b      	ldr	r3, [r7, #0]
 8015896:	61bb      	str	r3, [r7, #24]
 8015898:	e01e      	b.n	80158d8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801589a:	2300      	movs	r3, #0
 801589c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801589e:	4b68      	ldr	r3, [pc, #416]	; (8015a40 <ip4_input+0x27c>)
 80158a0:	695b      	ldr	r3, [r3, #20]
 80158a2:	b2db      	uxtb	r3, r3
 80158a4:	2b7f      	cmp	r3, #127	; 0x7f
 80158a6:	d017      	beq.n	80158d8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80158a8:	4b66      	ldr	r3, [pc, #408]	; (8015a44 <ip4_input+0x280>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	61bb      	str	r3, [r7, #24]
 80158ae:	e00e      	b.n	80158ce <ip4_input+0x10a>
          if (netif == inp) {
 80158b0:	69ba      	ldr	r2, [r7, #24]
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	429a      	cmp	r2, r3
 80158b6:	d006      	beq.n	80158c6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80158b8:	69b8      	ldr	r0, [r7, #24]
 80158ba:	f7ff ff59 	bl	8015770 <ip4_input_accept>
 80158be:	4603      	mov	r3, r0
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d108      	bne.n	80158d6 <ip4_input+0x112>
 80158c4:	e000      	b.n	80158c8 <ip4_input+0x104>
            continue;
 80158c6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80158c8:	69bb      	ldr	r3, [r7, #24]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	61bb      	str	r3, [r7, #24]
 80158ce:	69bb      	ldr	r3, [r7, #24]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d1ed      	bne.n	80158b0 <ip4_input+0xec>
 80158d4:	e000      	b.n	80158d8 <ip4_input+0x114>
            break;
 80158d6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80158d8:	69bb      	ldr	r3, [r7, #24]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d111      	bne.n	8015902 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80158de:	69fb      	ldr	r3, [r7, #28]
 80158e0:	7a5b      	ldrb	r3, [r3, #9]
 80158e2:	2b11      	cmp	r3, #17
 80158e4:	d10d      	bne.n	8015902 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80158e6:	8a7b      	ldrh	r3, [r7, #18]
 80158e8:	69fa      	ldr	r2, [r7, #28]
 80158ea:	4413      	add	r3, r2
 80158ec:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	885b      	ldrh	r3, [r3, #2]
 80158f2:	b29b      	uxth	r3, r3
 80158f4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80158f8:	d103      	bne.n	8015902 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80158fa:	683b      	ldr	r3, [r7, #0]
 80158fc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80158fe:	2300      	movs	r3, #0
 8015900:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015902:	697b      	ldr	r3, [r7, #20]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d017      	beq.n	8015938 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015908:	4b4d      	ldr	r3, [pc, #308]	; (8015a40 <ip4_input+0x27c>)
 801590a:	691b      	ldr	r3, [r3, #16]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d013      	beq.n	8015938 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015910:	4b4b      	ldr	r3, [pc, #300]	; (8015a40 <ip4_input+0x27c>)
 8015912:	691b      	ldr	r3, [r3, #16]
 8015914:	6839      	ldr	r1, [r7, #0]
 8015916:	4618      	mov	r0, r3
 8015918:	f000 f96e 	bl	8015bf8 <ip4_addr_isbroadcast_u32>
 801591c:	4603      	mov	r3, r0
 801591e:	2b00      	cmp	r3, #0
 8015920:	d105      	bne.n	801592e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015922:	4b47      	ldr	r3, [pc, #284]	; (8015a40 <ip4_input+0x27c>)
 8015924:	691b      	ldr	r3, [r3, #16]
 8015926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801592a:	2be0      	cmp	r3, #224	; 0xe0
 801592c:	d104      	bne.n	8015938 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f7f5 fddc 	bl	800b4ec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015934:	2300      	movs	r3, #0
 8015936:	e07e      	b.n	8015a36 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015938:	69bb      	ldr	r3, [r7, #24]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d104      	bne.n	8015948 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801593e:	6878      	ldr	r0, [r7, #4]
 8015940:	f7f5 fdd4 	bl	800b4ec <pbuf_free>
    return ERR_OK;
 8015944:	2300      	movs	r3, #0
 8015946:	e076      	b.n	8015a36 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015948:	69fb      	ldr	r3, [r7, #28]
 801594a:	88db      	ldrh	r3, [r3, #6]
 801594c:	b29b      	uxth	r3, r3
 801594e:	461a      	mov	r2, r3
 8015950:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015954:	4013      	ands	r3, r2
 8015956:	2b00      	cmp	r3, #0
 8015958:	d00b      	beq.n	8015972 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f000 fc92 	bl	8016284 <ip4_reass>
 8015960:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d101      	bne.n	801596c <ip4_input+0x1a8>
      return ERR_OK;
 8015968:	2300      	movs	r3, #0
 801596a:	e064      	b.n	8015a36 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	685b      	ldr	r3, [r3, #4]
 8015970:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015972:	4a33      	ldr	r2, [pc, #204]	; (8015a40 <ip4_input+0x27c>)
 8015974:	69bb      	ldr	r3, [r7, #24]
 8015976:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015978:	4a31      	ldr	r2, [pc, #196]	; (8015a40 <ip4_input+0x27c>)
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801597e:	4a30      	ldr	r2, [pc, #192]	; (8015a40 <ip4_input+0x27c>)
 8015980:	69fb      	ldr	r3, [r7, #28]
 8015982:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015984:	69fb      	ldr	r3, [r7, #28]
 8015986:	781b      	ldrb	r3, [r3, #0]
 8015988:	f003 030f 	and.w	r3, r3, #15
 801598c:	b2db      	uxtb	r3, r3
 801598e:	009b      	lsls	r3, r3, #2
 8015990:	b2db      	uxtb	r3, r3
 8015992:	b29a      	uxth	r2, r3
 8015994:	4b2a      	ldr	r3, [pc, #168]	; (8015a40 <ip4_input+0x27c>)
 8015996:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015998:	8a7b      	ldrh	r3, [r7, #18]
 801599a:	4619      	mov	r1, r3
 801599c:	6878      	ldr	r0, [r7, #4]
 801599e:	f7f5 fd1f 	bl	800b3e0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80159a2:	69fb      	ldr	r3, [r7, #28]
 80159a4:	7a5b      	ldrb	r3, [r3, #9]
 80159a6:	2b11      	cmp	r3, #17
 80159a8:	d006      	beq.n	80159b8 <ip4_input+0x1f4>
 80159aa:	2b11      	cmp	r3, #17
 80159ac:	dc13      	bgt.n	80159d6 <ip4_input+0x212>
 80159ae:	2b01      	cmp	r3, #1
 80159b0:	d00c      	beq.n	80159cc <ip4_input+0x208>
 80159b2:	2b06      	cmp	r3, #6
 80159b4:	d005      	beq.n	80159c2 <ip4_input+0x1fe>
 80159b6:	e00e      	b.n	80159d6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80159b8:	6839      	ldr	r1, [r7, #0]
 80159ba:	6878      	ldr	r0, [r7, #4]
 80159bc:	f7fc fb26 	bl	801200c <udp_input>
        break;
 80159c0:	e026      	b.n	8015a10 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80159c2:	6839      	ldr	r1, [r7, #0]
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f7f7 fed9 	bl	800d77c <tcp_input>
        break;
 80159ca:	e021      	b.n	8015a10 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80159cc:	6839      	ldr	r1, [r7, #0]
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f7ff fcd0 	bl	8015374 <icmp_input>
        break;
 80159d4:	e01c      	b.n	8015a10 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80159d6:	4b1a      	ldr	r3, [pc, #104]	; (8015a40 <ip4_input+0x27c>)
 80159d8:	695b      	ldr	r3, [r3, #20]
 80159da:	69b9      	ldr	r1, [r7, #24]
 80159dc:	4618      	mov	r0, r3
 80159de:	f000 f90b 	bl	8015bf8 <ip4_addr_isbroadcast_u32>
 80159e2:	4603      	mov	r3, r0
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d10f      	bne.n	8015a08 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80159e8:	4b15      	ldr	r3, [pc, #84]	; (8015a40 <ip4_input+0x27c>)
 80159ea:	695b      	ldr	r3, [r3, #20]
 80159ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80159f0:	2be0      	cmp	r3, #224	; 0xe0
 80159f2:	d009      	beq.n	8015a08 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80159f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80159f8:	4619      	mov	r1, r3
 80159fa:	6878      	ldr	r0, [r7, #4]
 80159fc:	f7f5 fd63 	bl	800b4c6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015a00:	2102      	movs	r1, #2
 8015a02:	6878      	ldr	r0, [r7, #4]
 8015a04:	f7ff fdba 	bl	801557c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f7f5 fd6f 	bl	800b4ec <pbuf_free>
        break;
 8015a0e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015a10:	4b0b      	ldr	r3, [pc, #44]	; (8015a40 <ip4_input+0x27c>)
 8015a12:	2200      	movs	r2, #0
 8015a14:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015a16:	4b0a      	ldr	r3, [pc, #40]	; (8015a40 <ip4_input+0x27c>)
 8015a18:	2200      	movs	r2, #0
 8015a1a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015a1c:	4b08      	ldr	r3, [pc, #32]	; (8015a40 <ip4_input+0x27c>)
 8015a1e:	2200      	movs	r2, #0
 8015a20:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015a22:	4b07      	ldr	r3, [pc, #28]	; (8015a40 <ip4_input+0x27c>)
 8015a24:	2200      	movs	r2, #0
 8015a26:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015a28:	4b05      	ldr	r3, [pc, #20]	; (8015a40 <ip4_input+0x27c>)
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015a2e:	4b04      	ldr	r3, [pc, #16]	; (8015a40 <ip4_input+0x27c>)
 8015a30:	2200      	movs	r2, #0
 8015a32:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015a34:	2300      	movs	r3, #0
}
 8015a36:	4618      	mov	r0, r3
 8015a38:	3720      	adds	r7, #32
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bd80      	pop	{r7, pc}
 8015a3e:	bf00      	nop
 8015a40:	200037a8 	.word	0x200037a8
 8015a44:	20006cfc 	.word	0x20006cfc

08015a48 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b08a      	sub	sp, #40	; 0x28
 8015a4c:	af04      	add	r7, sp, #16
 8015a4e:	60f8      	str	r0, [r7, #12]
 8015a50:	60b9      	str	r1, [r7, #8]
 8015a52:	607a      	str	r2, [r7, #4]
 8015a54:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d009      	beq.n	8015a74 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d003      	beq.n	8015a6e <ip4_output_if+0x26>
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d102      	bne.n	8015a74 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a70:	3304      	adds	r3, #4
 8015a72:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015a74:	78fa      	ldrb	r2, [r7, #3]
 8015a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a78:	9302      	str	r3, [sp, #8]
 8015a7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015a7e:	9301      	str	r3, [sp, #4]
 8015a80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015a84:	9300      	str	r3, [sp, #0]
 8015a86:	4613      	mov	r3, r2
 8015a88:	687a      	ldr	r2, [r7, #4]
 8015a8a:	6979      	ldr	r1, [r7, #20]
 8015a8c:	68f8      	ldr	r0, [r7, #12]
 8015a8e:	f000 f805 	bl	8015a9c <ip4_output_if_src>
 8015a92:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	3718      	adds	r7, #24
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b088      	sub	sp, #32
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	60f8      	str	r0, [r7, #12]
 8015aa4:	60b9      	str	r1, [r7, #8]
 8015aa6:	607a      	str	r2, [r7, #4]
 8015aa8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	7b9b      	ldrb	r3, [r3, #14]
 8015aae:	2b01      	cmp	r3, #1
 8015ab0:	d006      	beq.n	8015ac0 <ip4_output_if_src+0x24>
 8015ab2:	4b4b      	ldr	r3, [pc, #300]	; (8015be0 <ip4_output_if_src+0x144>)
 8015ab4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015ab8:	494a      	ldr	r1, [pc, #296]	; (8015be4 <ip4_output_if_src+0x148>)
 8015aba:	484b      	ldr	r0, [pc, #300]	; (8015be8 <ip4_output_if_src+0x14c>)
 8015abc:	f001 fd7c 	bl	80175b8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d060      	beq.n	8015b88 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015ac6:	2314      	movs	r3, #20
 8015ac8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015aca:	2114      	movs	r1, #20
 8015acc:	68f8      	ldr	r0, [r7, #12]
 8015ace:	f7f5 fc77 	bl	800b3c0 <pbuf_add_header>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d002      	beq.n	8015ade <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015ad8:	f06f 0301 	mvn.w	r3, #1
 8015adc:	e07c      	b.n	8015bd8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	685b      	ldr	r3, [r3, #4]
 8015ae2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	895b      	ldrh	r3, [r3, #10]
 8015ae8:	2b13      	cmp	r3, #19
 8015aea:	d806      	bhi.n	8015afa <ip4_output_if_src+0x5e>
 8015aec:	4b3c      	ldr	r3, [pc, #240]	; (8015be0 <ip4_output_if_src+0x144>)
 8015aee:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015af2:	493e      	ldr	r1, [pc, #248]	; (8015bec <ip4_output_if_src+0x150>)
 8015af4:	483c      	ldr	r0, [pc, #240]	; (8015be8 <ip4_output_if_src+0x14c>)
 8015af6:	f001 fd5f 	bl	80175b8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015afa:	69fb      	ldr	r3, [r7, #28]
 8015afc:	78fa      	ldrb	r2, [r7, #3]
 8015afe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015b00:	69fb      	ldr	r3, [r7, #28]
 8015b02:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015b06:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681a      	ldr	r2, [r3, #0]
 8015b0c:	69fb      	ldr	r3, [r7, #28]
 8015b0e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015b10:	8b7b      	ldrh	r3, [r7, #26]
 8015b12:	089b      	lsrs	r3, r3, #2
 8015b14:	b29b      	uxth	r3, r3
 8015b16:	b2db      	uxtb	r3, r3
 8015b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b1c:	b2da      	uxtb	r2, r3
 8015b1e:	69fb      	ldr	r3, [r7, #28]
 8015b20:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015b22:	69fb      	ldr	r3, [r7, #28]
 8015b24:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015b28:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	891b      	ldrh	r3, [r3, #8]
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f7f4 f9f8 	bl	8009f24 <lwip_htons>
 8015b34:	4603      	mov	r3, r0
 8015b36:	461a      	mov	r2, r3
 8015b38:	69fb      	ldr	r3, [r7, #28]
 8015b3a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	2200      	movs	r2, #0
 8015b40:	719a      	strb	r2, [r3, #6]
 8015b42:	2200      	movs	r2, #0
 8015b44:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015b46:	4b2a      	ldr	r3, [pc, #168]	; (8015bf0 <ip4_output_if_src+0x154>)
 8015b48:	881b      	ldrh	r3, [r3, #0]
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7f4 f9ea 	bl	8009f24 <lwip_htons>
 8015b50:	4603      	mov	r3, r0
 8015b52:	461a      	mov	r2, r3
 8015b54:	69fb      	ldr	r3, [r7, #28]
 8015b56:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015b58:	4b25      	ldr	r3, [pc, #148]	; (8015bf0 <ip4_output_if_src+0x154>)
 8015b5a:	881b      	ldrh	r3, [r3, #0]
 8015b5c:	3301      	adds	r3, #1
 8015b5e:	b29a      	uxth	r2, r3
 8015b60:	4b23      	ldr	r3, [pc, #140]	; (8015bf0 <ip4_output_if_src+0x154>)
 8015b62:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d104      	bne.n	8015b74 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015b6a:	4b22      	ldr	r3, [pc, #136]	; (8015bf4 <ip4_output_if_src+0x158>)
 8015b6c:	681a      	ldr	r2, [r3, #0]
 8015b6e:	69fb      	ldr	r3, [r7, #28]
 8015b70:	60da      	str	r2, [r3, #12]
 8015b72:	e003      	b.n	8015b7c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015b74:	68bb      	ldr	r3, [r7, #8]
 8015b76:	681a      	ldr	r2, [r3, #0]
 8015b78:	69fb      	ldr	r3, [r7, #28]
 8015b7a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015b7c:	69fb      	ldr	r3, [r7, #28]
 8015b7e:	2200      	movs	r2, #0
 8015b80:	729a      	strb	r2, [r3, #10]
 8015b82:	2200      	movs	r2, #0
 8015b84:	72da      	strb	r2, [r3, #11]
 8015b86:	e00f      	b.n	8015ba8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	895b      	ldrh	r3, [r3, #10]
 8015b8c:	2b13      	cmp	r3, #19
 8015b8e:	d802      	bhi.n	8015b96 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015b90:	f06f 0301 	mvn.w	r3, #1
 8015b94:	e020      	b.n	8015bd8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	685b      	ldr	r3, [r3, #4]
 8015b9a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015b9c:	69fb      	ldr	r3, [r7, #28]
 8015b9e:	691b      	ldr	r3, [r3, #16]
 8015ba0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015ba2:	f107 0314 	add.w	r3, r7, #20
 8015ba6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d00c      	beq.n	8015bca <ip4_output_if_src+0x12e>
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	891a      	ldrh	r2, [r3, #8]
 8015bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015bb8:	429a      	cmp	r2, r3
 8015bba:	d906      	bls.n	8015bca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015bc0:	68f8      	ldr	r0, [r7, #12]
 8015bc2:	f000 fd4d 	bl	8016660 <ip4_frag>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	e006      	b.n	8015bd8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bcc:	695b      	ldr	r3, [r3, #20]
 8015bce:	687a      	ldr	r2, [r7, #4]
 8015bd0:	68f9      	ldr	r1, [r7, #12]
 8015bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bd4:	4798      	blx	r3
 8015bd6:	4603      	mov	r3, r0
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3720      	adds	r7, #32
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}
 8015be0:	0801bce0 	.word	0x0801bce0
 8015be4:	0801bd14 	.word	0x0801bd14
 8015be8:	0801bd20 	.word	0x0801bd20
 8015bec:	0801bd48 	.word	0x0801bd48
 8015bf0:	20000396 	.word	0x20000396
 8015bf4:	0801c16c 	.word	0x0801c16c

08015bf8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015bf8:	b480      	push	{r7}
 8015bfa:	b085      	sub	sp, #20
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
 8015c00:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c0c:	d002      	beq.n	8015c14 <ip4_addr_isbroadcast_u32+0x1c>
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d101      	bne.n	8015c18 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015c14:	2301      	movs	r3, #1
 8015c16:	e02a      	b.n	8015c6e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015c18:	683b      	ldr	r3, [r7, #0]
 8015c1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015c1e:	f003 0302 	and.w	r3, r3, #2
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d101      	bne.n	8015c2a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015c26:	2300      	movs	r3, #0
 8015c28:	e021      	b.n	8015c6e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	3304      	adds	r3, #4
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	687a      	ldr	r2, [r7, #4]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d101      	bne.n	8015c3a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015c36:	2300      	movs	r3, #0
 8015c38:	e019      	b.n	8015c6e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015c3a:	68fa      	ldr	r2, [r7, #12]
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	3304      	adds	r3, #4
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	405a      	eors	r2, r3
 8015c44:	683b      	ldr	r3, [r7, #0]
 8015c46:	3308      	adds	r3, #8
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	4013      	ands	r3, r2
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d10d      	bne.n	8015c6c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	3308      	adds	r3, #8
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	43da      	mvns	r2, r3
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	3308      	adds	r3, #8
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015c64:	429a      	cmp	r2, r3
 8015c66:	d101      	bne.n	8015c6c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015c68:	2301      	movs	r3, #1
 8015c6a:	e000      	b.n	8015c6e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015c6c:	2300      	movs	r3, #0
  }
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3714      	adds	r7, #20
 8015c72:	46bd      	mov	sp, r7
 8015c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c78:	4770      	bx	lr
	...

08015c7c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b084      	sub	sp, #16
 8015c80:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015c82:	2300      	movs	r3, #0
 8015c84:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015c86:	4b12      	ldr	r3, [pc, #72]	; (8015cd0 <ip_reass_tmr+0x54>)
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015c8c:	e018      	b.n	8015cc0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	7fdb      	ldrb	r3, [r3, #31]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d00b      	beq.n	8015cae <ip_reass_tmr+0x32>
      r->timer--;
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	7fdb      	ldrb	r3, [r3, #31]
 8015c9a:	3b01      	subs	r3, #1
 8015c9c:	b2da      	uxtb	r2, r3
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	60fb      	str	r3, [r7, #12]
 8015cac:	e008      	b.n	8015cc0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015cb8:	68b9      	ldr	r1, [r7, #8]
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f000 f80a 	bl	8015cd4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d1e3      	bne.n	8015c8e <ip_reass_tmr+0x12>
    }
  }
}
 8015cc6:	bf00      	nop
 8015cc8:	bf00      	nop
 8015cca:	3710      	adds	r7, #16
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}
 8015cd0:	20000398 	.word	0x20000398

08015cd4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b088      	sub	sp, #32
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
 8015cdc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015ce2:	683a      	ldr	r2, [r7, #0]
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d105      	bne.n	8015cf6 <ip_reass_free_complete_datagram+0x22>
 8015cea:	4b45      	ldr	r3, [pc, #276]	; (8015e00 <ip_reass_free_complete_datagram+0x12c>)
 8015cec:	22ab      	movs	r2, #171	; 0xab
 8015cee:	4945      	ldr	r1, [pc, #276]	; (8015e04 <ip_reass_free_complete_datagram+0x130>)
 8015cf0:	4845      	ldr	r0, [pc, #276]	; (8015e08 <ip_reass_free_complete_datagram+0x134>)
 8015cf2:	f001 fc61 	bl	80175b8 <iprintf>
  if (prev != NULL) {
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d00a      	beq.n	8015d12 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	687a      	ldr	r2, [r7, #4]
 8015d02:	429a      	cmp	r2, r3
 8015d04:	d005      	beq.n	8015d12 <ip_reass_free_complete_datagram+0x3e>
 8015d06:	4b3e      	ldr	r3, [pc, #248]	; (8015e00 <ip_reass_free_complete_datagram+0x12c>)
 8015d08:	22ad      	movs	r2, #173	; 0xad
 8015d0a:	4940      	ldr	r1, [pc, #256]	; (8015e0c <ip_reass_free_complete_datagram+0x138>)
 8015d0c:	483e      	ldr	r0, [pc, #248]	; (8015e08 <ip_reass_free_complete_datagram+0x134>)
 8015d0e:	f001 fc53 	bl	80175b8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	685b      	ldr	r3, [r3, #4]
 8015d16:	685b      	ldr	r3, [r3, #4]
 8015d18:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015d1a:	697b      	ldr	r3, [r7, #20]
 8015d1c:	889b      	ldrh	r3, [r3, #4]
 8015d1e:	b29b      	uxth	r3, r3
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d12a      	bne.n	8015d7a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015d2a:	697b      	ldr	r3, [r7, #20]
 8015d2c:	681a      	ldr	r2, [r3, #0]
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015d32:	69bb      	ldr	r3, [r7, #24]
 8015d34:	6858      	ldr	r0, [r3, #4]
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	3308      	adds	r3, #8
 8015d3a:	2214      	movs	r2, #20
 8015d3c:	4619      	mov	r1, r3
 8015d3e:	f001 fc0b 	bl	8017558 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015d42:	2101      	movs	r1, #1
 8015d44:	69b8      	ldr	r0, [r7, #24]
 8015d46:	f7ff fc29 	bl	801559c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015d4a:	69b8      	ldr	r0, [r7, #24]
 8015d4c:	f7f5 fc56 	bl	800b5fc <pbuf_clen>
 8015d50:	4603      	mov	r3, r0
 8015d52:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015d54:	8bfa      	ldrh	r2, [r7, #30]
 8015d56:	8a7b      	ldrh	r3, [r7, #18]
 8015d58:	4413      	add	r3, r2
 8015d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d5e:	db05      	blt.n	8015d6c <ip_reass_free_complete_datagram+0x98>
 8015d60:	4b27      	ldr	r3, [pc, #156]	; (8015e00 <ip_reass_free_complete_datagram+0x12c>)
 8015d62:	22bc      	movs	r2, #188	; 0xbc
 8015d64:	492a      	ldr	r1, [pc, #168]	; (8015e10 <ip_reass_free_complete_datagram+0x13c>)
 8015d66:	4828      	ldr	r0, [pc, #160]	; (8015e08 <ip_reass_free_complete_datagram+0x134>)
 8015d68:	f001 fc26 	bl	80175b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015d6c:	8bfa      	ldrh	r2, [r7, #30]
 8015d6e:	8a7b      	ldrh	r3, [r7, #18]
 8015d70:	4413      	add	r3, r2
 8015d72:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015d74:	69b8      	ldr	r0, [r7, #24]
 8015d76:	f7f5 fbb9 	bl	800b4ec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	685b      	ldr	r3, [r3, #4]
 8015d7e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015d80:	e01f      	b.n	8015dc2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015d82:	69bb      	ldr	r3, [r7, #24]
 8015d84:	685b      	ldr	r3, [r3, #4]
 8015d86:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015d88:	69bb      	ldr	r3, [r7, #24]
 8015d8a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015d8c:	697b      	ldr	r3, [r7, #20]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015d92:	68f8      	ldr	r0, [r7, #12]
 8015d94:	f7f5 fc32 	bl	800b5fc <pbuf_clen>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015d9c:	8bfa      	ldrh	r2, [r7, #30]
 8015d9e:	8a7b      	ldrh	r3, [r7, #18]
 8015da0:	4413      	add	r3, r2
 8015da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015da6:	db05      	blt.n	8015db4 <ip_reass_free_complete_datagram+0xe0>
 8015da8:	4b15      	ldr	r3, [pc, #84]	; (8015e00 <ip_reass_free_complete_datagram+0x12c>)
 8015daa:	22cc      	movs	r2, #204	; 0xcc
 8015dac:	4918      	ldr	r1, [pc, #96]	; (8015e10 <ip_reass_free_complete_datagram+0x13c>)
 8015dae:	4816      	ldr	r0, [pc, #88]	; (8015e08 <ip_reass_free_complete_datagram+0x134>)
 8015db0:	f001 fc02 	bl	80175b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015db4:	8bfa      	ldrh	r2, [r7, #30]
 8015db6:	8a7b      	ldrh	r3, [r7, #18]
 8015db8:	4413      	add	r3, r2
 8015dba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015dbc:	68f8      	ldr	r0, [r7, #12]
 8015dbe:	f7f5 fb95 	bl	800b4ec <pbuf_free>
  while (p != NULL) {
 8015dc2:	69bb      	ldr	r3, [r7, #24]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d1dc      	bne.n	8015d82 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015dc8:	6839      	ldr	r1, [r7, #0]
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f000 f8c2 	bl	8015f54 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015dd0:	4b10      	ldr	r3, [pc, #64]	; (8015e14 <ip_reass_free_complete_datagram+0x140>)
 8015dd2:	881b      	ldrh	r3, [r3, #0]
 8015dd4:	8bfa      	ldrh	r2, [r7, #30]
 8015dd6:	429a      	cmp	r2, r3
 8015dd8:	d905      	bls.n	8015de6 <ip_reass_free_complete_datagram+0x112>
 8015dda:	4b09      	ldr	r3, [pc, #36]	; (8015e00 <ip_reass_free_complete_datagram+0x12c>)
 8015ddc:	22d2      	movs	r2, #210	; 0xd2
 8015dde:	490e      	ldr	r1, [pc, #56]	; (8015e18 <ip_reass_free_complete_datagram+0x144>)
 8015de0:	4809      	ldr	r0, [pc, #36]	; (8015e08 <ip_reass_free_complete_datagram+0x134>)
 8015de2:	f001 fbe9 	bl	80175b8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015de6:	4b0b      	ldr	r3, [pc, #44]	; (8015e14 <ip_reass_free_complete_datagram+0x140>)
 8015de8:	881a      	ldrh	r2, [r3, #0]
 8015dea:	8bfb      	ldrh	r3, [r7, #30]
 8015dec:	1ad3      	subs	r3, r2, r3
 8015dee:	b29a      	uxth	r2, r3
 8015df0:	4b08      	ldr	r3, [pc, #32]	; (8015e14 <ip_reass_free_complete_datagram+0x140>)
 8015df2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015df4:	8bfb      	ldrh	r3, [r7, #30]
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	3720      	adds	r7, #32
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}
 8015dfe:	bf00      	nop
 8015e00:	0801bd78 	.word	0x0801bd78
 8015e04:	0801bdb4 	.word	0x0801bdb4
 8015e08:	0801bdc0 	.word	0x0801bdc0
 8015e0c:	0801bde8 	.word	0x0801bde8
 8015e10:	0801bdfc 	.word	0x0801bdfc
 8015e14:	2000039c 	.word	0x2000039c
 8015e18:	0801be1c 	.word	0x0801be1c

08015e1c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b08a      	sub	sp, #40	; 0x28
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
 8015e24:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015e26:	2300      	movs	r3, #0
 8015e28:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015e32:	2300      	movs	r3, #0
 8015e34:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015e36:	2300      	movs	r3, #0
 8015e38:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015e3a:	4b28      	ldr	r3, [pc, #160]	; (8015edc <ip_reass_remove_oldest_datagram+0xc0>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015e40:	e030      	b.n	8015ea4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e44:	695a      	ldr	r2, [r3, #20]
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	68db      	ldr	r3, [r3, #12]
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d10c      	bne.n	8015e68 <ip_reass_remove_oldest_datagram+0x4c>
 8015e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e50:	699a      	ldr	r2, [r3, #24]
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	691b      	ldr	r3, [r3, #16]
 8015e56:	429a      	cmp	r2, r3
 8015e58:	d106      	bne.n	8015e68 <ip_reass_remove_oldest_datagram+0x4c>
 8015e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e5c:	899a      	ldrh	r2, [r3, #12]
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	889b      	ldrh	r3, [r3, #4]
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	429a      	cmp	r2, r3
 8015e66:	d014      	beq.n	8015e92 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	3301      	adds	r3, #1
 8015e6c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015e6e:	6a3b      	ldr	r3, [r7, #32]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d104      	bne.n	8015e7e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e76:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015e78:	69fb      	ldr	r3, [r7, #28]
 8015e7a:	61bb      	str	r3, [r7, #24]
 8015e7c:	e009      	b.n	8015e92 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e80:	7fda      	ldrb	r2, [r3, #31]
 8015e82:	6a3b      	ldr	r3, [r7, #32]
 8015e84:	7fdb      	ldrb	r3, [r3, #31]
 8015e86:	429a      	cmp	r2, r3
 8015e88:	d803      	bhi.n	8015e92 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e8c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015e8e:	69fb      	ldr	r3, [r7, #28]
 8015e90:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d001      	beq.n	8015e9e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e9c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d1cb      	bne.n	8015e42 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015eaa:	6a3b      	ldr	r3, [r7, #32]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d008      	beq.n	8015ec2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015eb0:	69b9      	ldr	r1, [r7, #24]
 8015eb2:	6a38      	ldr	r0, [r7, #32]
 8015eb4:	f7ff ff0e 	bl	8015cd4 <ip_reass_free_complete_datagram>
 8015eb8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015eba:	697a      	ldr	r2, [r7, #20]
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	4413      	add	r3, r2
 8015ec0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015ec2:	697a      	ldr	r2, [r7, #20]
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	da02      	bge.n	8015ed0 <ip_reass_remove_oldest_datagram+0xb4>
 8015eca:	693b      	ldr	r3, [r7, #16]
 8015ecc:	2b01      	cmp	r3, #1
 8015ece:	dcac      	bgt.n	8015e2a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015ed0:	697b      	ldr	r3, [r7, #20]
}
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	3728      	adds	r7, #40	; 0x28
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	bd80      	pop	{r7, pc}
 8015eda:	bf00      	nop
 8015edc:	20000398 	.word	0x20000398

08015ee0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b084      	sub	sp, #16
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
 8015ee8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015eea:	2004      	movs	r0, #4
 8015eec:	f7f4 fc98 	bl	800a820 <memp_malloc>
 8015ef0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d110      	bne.n	8015f1a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015ef8:	6839      	ldr	r1, [r7, #0]
 8015efa:	6878      	ldr	r0, [r7, #4]
 8015efc:	f7ff ff8e 	bl	8015e1c <ip_reass_remove_oldest_datagram>
 8015f00:	4602      	mov	r2, r0
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	4293      	cmp	r3, r2
 8015f06:	dc03      	bgt.n	8015f10 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015f08:	2004      	movs	r0, #4
 8015f0a:	f7f4 fc89 	bl	800a820 <memp_malloc>
 8015f0e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d101      	bne.n	8015f1a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015f16:	2300      	movs	r3, #0
 8015f18:	e016      	b.n	8015f48 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015f1a:	2220      	movs	r2, #32
 8015f1c:	2100      	movs	r1, #0
 8015f1e:	68f8      	ldr	r0, [r7, #12]
 8015f20:	f001 fb42 	bl	80175a8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	220f      	movs	r2, #15
 8015f28:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015f2a:	4b09      	ldr	r3, [pc, #36]	; (8015f50 <ip_reass_enqueue_new_datagram+0x70>)
 8015f2c:	681a      	ldr	r2, [r3, #0]
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015f32:	4a07      	ldr	r2, [pc, #28]	; (8015f50 <ip_reass_enqueue_new_datagram+0x70>)
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	3308      	adds	r3, #8
 8015f3c:	2214      	movs	r2, #20
 8015f3e:	6879      	ldr	r1, [r7, #4]
 8015f40:	4618      	mov	r0, r3
 8015f42:	f001 fb09 	bl	8017558 <memcpy>
  return ipr;
 8015f46:	68fb      	ldr	r3, [r7, #12]
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3710      	adds	r7, #16
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}
 8015f50:	20000398 	.word	0x20000398

08015f54 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b082      	sub	sp, #8
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015f5e:	4b10      	ldr	r3, [pc, #64]	; (8015fa0 <ip_reass_dequeue_datagram+0x4c>)
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	687a      	ldr	r2, [r7, #4]
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d104      	bne.n	8015f72 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	4a0c      	ldr	r2, [pc, #48]	; (8015fa0 <ip_reass_dequeue_datagram+0x4c>)
 8015f6e:	6013      	str	r3, [r2, #0]
 8015f70:	e00d      	b.n	8015f8e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d106      	bne.n	8015f86 <ip_reass_dequeue_datagram+0x32>
 8015f78:	4b0a      	ldr	r3, [pc, #40]	; (8015fa4 <ip_reass_dequeue_datagram+0x50>)
 8015f7a:	f240 1245 	movw	r2, #325	; 0x145
 8015f7e:	490a      	ldr	r1, [pc, #40]	; (8015fa8 <ip_reass_dequeue_datagram+0x54>)
 8015f80:	480a      	ldr	r0, [pc, #40]	; (8015fac <ip_reass_dequeue_datagram+0x58>)
 8015f82:	f001 fb19 	bl	80175b8 <iprintf>
    prev->next = ipr->next;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	681a      	ldr	r2, [r3, #0]
 8015f8a:	683b      	ldr	r3, [r7, #0]
 8015f8c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015f8e:	6879      	ldr	r1, [r7, #4]
 8015f90:	2004      	movs	r0, #4
 8015f92:	f7f4 fc91 	bl	800a8b8 <memp_free>
}
 8015f96:	bf00      	nop
 8015f98:	3708      	adds	r7, #8
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}
 8015f9e:	bf00      	nop
 8015fa0:	20000398 	.word	0x20000398
 8015fa4:	0801bd78 	.word	0x0801bd78
 8015fa8:	0801be40 	.word	0x0801be40
 8015fac:	0801bdc0 	.word	0x0801bdc0

08015fb0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b08c      	sub	sp, #48	; 0x30
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	60f8      	str	r0, [r7, #12]
 8015fb8:	60b9      	str	r1, [r7, #8]
 8015fba:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015fc4:	68bb      	ldr	r3, [r7, #8]
 8015fc6:	685b      	ldr	r3, [r3, #4]
 8015fc8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015fca:	69fb      	ldr	r3, [r7, #28]
 8015fcc:	885b      	ldrh	r3, [r3, #2]
 8015fce:	b29b      	uxth	r3, r3
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7f3 ffa7 	bl	8009f24 <lwip_htons>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015fda:	69fb      	ldr	r3, [r7, #28]
 8015fdc:	781b      	ldrb	r3, [r3, #0]
 8015fde:	f003 030f 	and.w	r3, r3, #15
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	009b      	lsls	r3, r3, #2
 8015fe6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015fe8:	7e7b      	ldrb	r3, [r7, #25]
 8015fea:	b29b      	uxth	r3, r3
 8015fec:	8b7a      	ldrh	r2, [r7, #26]
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	d202      	bcs.n	8015ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ff6:	e135      	b.n	8016264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015ff8:	7e7b      	ldrb	r3, [r7, #25]
 8015ffa:	b29b      	uxth	r3, r3
 8015ffc:	8b7a      	ldrh	r2, [r7, #26]
 8015ffe:	1ad3      	subs	r3, r2, r3
 8016000:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016002:	69fb      	ldr	r3, [r7, #28]
 8016004:	88db      	ldrh	r3, [r3, #6]
 8016006:	b29b      	uxth	r3, r3
 8016008:	4618      	mov	r0, r3
 801600a:	f7f3 ff8b 	bl	8009f24 <lwip_htons>
 801600e:	4603      	mov	r3, r0
 8016010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016014:	b29b      	uxth	r3, r3
 8016016:	00db      	lsls	r3, r3, #3
 8016018:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801601a:	68bb      	ldr	r3, [r7, #8]
 801601c:	685b      	ldr	r3, [r3, #4]
 801601e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016022:	2200      	movs	r2, #0
 8016024:	701a      	strb	r2, [r3, #0]
 8016026:	2200      	movs	r2, #0
 8016028:	705a      	strb	r2, [r3, #1]
 801602a:	2200      	movs	r2, #0
 801602c:	709a      	strb	r2, [r3, #2]
 801602e:	2200      	movs	r2, #0
 8016030:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016034:	8afa      	ldrh	r2, [r7, #22]
 8016036:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016038:	8afa      	ldrh	r2, [r7, #22]
 801603a:	8b7b      	ldrh	r3, [r7, #26]
 801603c:	4413      	add	r3, r2
 801603e:	b29a      	uxth	r2, r3
 8016040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016042:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016046:	88db      	ldrh	r3, [r3, #6]
 8016048:	b29b      	uxth	r3, r3
 801604a:	8afa      	ldrh	r2, [r7, #22]
 801604c:	429a      	cmp	r2, r3
 801604e:	d902      	bls.n	8016056 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016050:	f04f 33ff 	mov.w	r3, #4294967295
 8016054:	e106      	b.n	8016264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	627b      	str	r3, [r7, #36]	; 0x24
 801605c:	e068      	b.n	8016130 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016066:	889b      	ldrh	r3, [r3, #4]
 8016068:	b29a      	uxth	r2, r3
 801606a:	693b      	ldr	r3, [r7, #16]
 801606c:	889b      	ldrh	r3, [r3, #4]
 801606e:	b29b      	uxth	r3, r3
 8016070:	429a      	cmp	r2, r3
 8016072:	d235      	bcs.n	80160e0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016078:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801607c:	2b00      	cmp	r3, #0
 801607e:	d020      	beq.n	80160c2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016082:	889b      	ldrh	r3, [r3, #4]
 8016084:	b29a      	uxth	r2, r3
 8016086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016088:	88db      	ldrh	r3, [r3, #6]
 801608a:	b29b      	uxth	r3, r3
 801608c:	429a      	cmp	r2, r3
 801608e:	d307      	bcc.n	80160a0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016092:	88db      	ldrh	r3, [r3, #6]
 8016094:	b29a      	uxth	r2, r3
 8016096:	693b      	ldr	r3, [r7, #16]
 8016098:	889b      	ldrh	r3, [r3, #4]
 801609a:	b29b      	uxth	r3, r3
 801609c:	429a      	cmp	r2, r3
 801609e:	d902      	bls.n	80160a6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160a0:	f04f 33ff 	mov.w	r3, #4294967295
 80160a4:	e0de      	b.n	8016264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80160a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a8:	68ba      	ldr	r2, [r7, #8]
 80160aa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80160ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ae:	88db      	ldrh	r3, [r3, #6]
 80160b0:	b29a      	uxth	r2, r3
 80160b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b4:	889b      	ldrh	r3, [r3, #4]
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	429a      	cmp	r2, r3
 80160ba:	d03d      	beq.n	8016138 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80160bc:	2300      	movs	r3, #0
 80160be:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80160c0:	e03a      	b.n	8016138 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80160c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c4:	88db      	ldrh	r3, [r3, #6]
 80160c6:	b29a      	uxth	r2, r3
 80160c8:	693b      	ldr	r3, [r7, #16]
 80160ca:	889b      	ldrh	r3, [r3, #4]
 80160cc:	b29b      	uxth	r3, r3
 80160ce:	429a      	cmp	r2, r3
 80160d0:	d902      	bls.n	80160d8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160d2:	f04f 33ff 	mov.w	r3, #4294967295
 80160d6:	e0c5      	b.n	8016264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	68ba      	ldr	r2, [r7, #8]
 80160dc:	605a      	str	r2, [r3, #4]
      break;
 80160de:	e02b      	b.n	8016138 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80160e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e2:	889b      	ldrh	r3, [r3, #4]
 80160e4:	b29a      	uxth	r2, r3
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	889b      	ldrh	r3, [r3, #4]
 80160ea:	b29b      	uxth	r3, r3
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d102      	bne.n	80160f6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160f0:	f04f 33ff 	mov.w	r3, #4294967295
 80160f4:	e0b6      	b.n	8016264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80160f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f8:	889b      	ldrh	r3, [r3, #4]
 80160fa:	b29a      	uxth	r2, r3
 80160fc:	693b      	ldr	r3, [r7, #16]
 80160fe:	88db      	ldrh	r3, [r3, #6]
 8016100:	b29b      	uxth	r3, r3
 8016102:	429a      	cmp	r2, r3
 8016104:	d202      	bcs.n	801610c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016106:	f04f 33ff 	mov.w	r3, #4294967295
 801610a:	e0ab      	b.n	8016264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801610e:	2b00      	cmp	r3, #0
 8016110:	d009      	beq.n	8016126 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016114:	88db      	ldrh	r3, [r3, #6]
 8016116:	b29a      	uxth	r2, r3
 8016118:	693b      	ldr	r3, [r7, #16]
 801611a:	889b      	ldrh	r3, [r3, #4]
 801611c:	b29b      	uxth	r3, r3
 801611e:	429a      	cmp	r2, r3
 8016120:	d001      	beq.n	8016126 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016122:	2300      	movs	r3, #0
 8016124:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801612c:	693b      	ldr	r3, [r7, #16]
 801612e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016132:	2b00      	cmp	r3, #0
 8016134:	d193      	bne.n	801605e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016136:	e000      	b.n	801613a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016138:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801613c:	2b00      	cmp	r3, #0
 801613e:	d12d      	bne.n	801619c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016142:	2b00      	cmp	r3, #0
 8016144:	d01c      	beq.n	8016180 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016148:	88db      	ldrh	r3, [r3, #6]
 801614a:	b29a      	uxth	r2, r3
 801614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801614e:	889b      	ldrh	r3, [r3, #4]
 8016150:	b29b      	uxth	r3, r3
 8016152:	429a      	cmp	r2, r3
 8016154:	d906      	bls.n	8016164 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016156:	4b45      	ldr	r3, [pc, #276]	; (801626c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016158:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801615c:	4944      	ldr	r1, [pc, #272]	; (8016270 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801615e:	4845      	ldr	r0, [pc, #276]	; (8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016160:	f001 fa2a 	bl	80175b8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016166:	68ba      	ldr	r2, [r7, #8]
 8016168:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801616c:	88db      	ldrh	r3, [r3, #6]
 801616e:	b29a      	uxth	r2, r3
 8016170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016172:	889b      	ldrh	r3, [r3, #4]
 8016174:	b29b      	uxth	r3, r3
 8016176:	429a      	cmp	r2, r3
 8016178:	d010      	beq.n	801619c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801617a:	2300      	movs	r3, #0
 801617c:	623b      	str	r3, [r7, #32]
 801617e:	e00d      	b.n	801619c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	685b      	ldr	r3, [r3, #4]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d006      	beq.n	8016196 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016188:	4b38      	ldr	r3, [pc, #224]	; (801626c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801618a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801618e:	493a      	ldr	r1, [pc, #232]	; (8016278 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016190:	4838      	ldr	r0, [pc, #224]	; (8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016192:	f001 fa11 	bl	80175b8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	68ba      	ldr	r2, [r7, #8]
 801619a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d105      	bne.n	80161ae <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	7f9b      	ldrb	r3, [r3, #30]
 80161a6:	f003 0301 	and.w	r3, r3, #1
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d059      	beq.n	8016262 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80161ae:	6a3b      	ldr	r3, [r7, #32]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d04f      	beq.n	8016254 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	685b      	ldr	r3, [r3, #4]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d006      	beq.n	80161ca <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	685b      	ldr	r3, [r3, #4]
 80161c0:	685b      	ldr	r3, [r3, #4]
 80161c2:	889b      	ldrh	r3, [r3, #4]
 80161c4:	b29b      	uxth	r3, r3
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d002      	beq.n	80161d0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80161ca:	2300      	movs	r3, #0
 80161cc:	623b      	str	r3, [r7, #32]
 80161ce:	e041      	b.n	8016254 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80161d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80161d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80161da:	e012      	b.n	8016202 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80161dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161de:	685b      	ldr	r3, [r3, #4]
 80161e0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80161e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e4:	88db      	ldrh	r3, [r3, #6]
 80161e6:	b29a      	uxth	r2, r3
 80161e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ea:	889b      	ldrh	r3, [r3, #4]
 80161ec:	b29b      	uxth	r3, r3
 80161ee:	429a      	cmp	r2, r3
 80161f0:	d002      	beq.n	80161f8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80161f2:	2300      	movs	r3, #0
 80161f4:	623b      	str	r3, [r7, #32]
            break;
 80161f6:	e007      	b.n	8016208 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80161f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161fa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80161fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016204:	2b00      	cmp	r3, #0
 8016206:	d1e9      	bne.n	80161dc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016208:	6a3b      	ldr	r3, [r7, #32]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d022      	beq.n	8016254 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	685b      	ldr	r3, [r3, #4]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d106      	bne.n	8016224 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016216:	4b15      	ldr	r3, [pc, #84]	; (801626c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016218:	f240 12df 	movw	r2, #479	; 0x1df
 801621c:	4917      	ldr	r1, [pc, #92]	; (801627c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801621e:	4815      	ldr	r0, [pc, #84]	; (8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016220:	f001 f9ca 	bl	80175b8 <iprintf>
          LWIP_ASSERT("sanity check",
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	685b      	ldr	r3, [r3, #4]
 8016228:	685b      	ldr	r3, [r3, #4]
 801622a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801622c:	429a      	cmp	r2, r3
 801622e:	d106      	bne.n	801623e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016230:	4b0e      	ldr	r3, [pc, #56]	; (801626c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016232:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016236:	4911      	ldr	r1, [pc, #68]	; (801627c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016238:	480e      	ldr	r0, [pc, #56]	; (8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801623a:	f001 f9bd 	bl	80175b8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d006      	beq.n	8016254 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016246:	4b09      	ldr	r3, [pc, #36]	; (801626c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016248:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801624c:	490c      	ldr	r1, [pc, #48]	; (8016280 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801624e:	4809      	ldr	r0, [pc, #36]	; (8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016250:	f001 f9b2 	bl	80175b8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016254:	6a3b      	ldr	r3, [r7, #32]
 8016256:	2b00      	cmp	r3, #0
 8016258:	bf14      	ite	ne
 801625a:	2301      	movne	r3, #1
 801625c:	2300      	moveq	r3, #0
 801625e:	b2db      	uxtb	r3, r3
 8016260:	e000      	b.n	8016264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016262:	2300      	movs	r3, #0
}
 8016264:	4618      	mov	r0, r3
 8016266:	3730      	adds	r7, #48	; 0x30
 8016268:	46bd      	mov	sp, r7
 801626a:	bd80      	pop	{r7, pc}
 801626c:	0801bd78 	.word	0x0801bd78
 8016270:	0801be5c 	.word	0x0801be5c
 8016274:	0801bdc0 	.word	0x0801bdc0
 8016278:	0801be7c 	.word	0x0801be7c
 801627c:	0801beb4 	.word	0x0801beb4
 8016280:	0801bec4 	.word	0x0801bec4

08016284 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b08e      	sub	sp, #56	; 0x38
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	685b      	ldr	r3, [r3, #4]
 8016290:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016294:	781b      	ldrb	r3, [r3, #0]
 8016296:	f003 030f 	and.w	r3, r3, #15
 801629a:	b2db      	uxtb	r3, r3
 801629c:	009b      	lsls	r3, r3, #2
 801629e:	b2db      	uxtb	r3, r3
 80162a0:	2b14      	cmp	r3, #20
 80162a2:	f040 8167 	bne.w	8016574 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80162a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162a8:	88db      	ldrh	r3, [r3, #6]
 80162aa:	b29b      	uxth	r3, r3
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7f3 fe39 	bl	8009f24 <lwip_htons>
 80162b2:	4603      	mov	r3, r0
 80162b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162b8:	b29b      	uxth	r3, r3
 80162ba:	00db      	lsls	r3, r3, #3
 80162bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80162be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162c0:	885b      	ldrh	r3, [r3, #2]
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7f3 fe2d 	bl	8009f24 <lwip_htons>
 80162ca:	4603      	mov	r3, r0
 80162cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80162ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d0:	781b      	ldrb	r3, [r3, #0]
 80162d2:	f003 030f 	and.w	r3, r3, #15
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	009b      	lsls	r3, r3, #2
 80162da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80162de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80162e2:	b29b      	uxth	r3, r3
 80162e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80162e6:	429a      	cmp	r2, r3
 80162e8:	f0c0 8146 	bcc.w	8016578 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80162ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80162f0:	b29b      	uxth	r3, r3
 80162f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80162f4:	1ad3      	subs	r3, r2, r3
 80162f6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80162f8:	6878      	ldr	r0, [r7, #4]
 80162fa:	f7f5 f97f 	bl	800b5fc <pbuf_clen>
 80162fe:	4603      	mov	r3, r0
 8016300:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016302:	4b9f      	ldr	r3, [pc, #636]	; (8016580 <ip4_reass+0x2fc>)
 8016304:	881b      	ldrh	r3, [r3, #0]
 8016306:	461a      	mov	r2, r3
 8016308:	8c3b      	ldrh	r3, [r7, #32]
 801630a:	4413      	add	r3, r2
 801630c:	2b0a      	cmp	r3, #10
 801630e:	dd10      	ble.n	8016332 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016310:	8c3b      	ldrh	r3, [r7, #32]
 8016312:	4619      	mov	r1, r3
 8016314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016316:	f7ff fd81 	bl	8015e1c <ip_reass_remove_oldest_datagram>
 801631a:	4603      	mov	r3, r0
 801631c:	2b00      	cmp	r3, #0
 801631e:	f000 812d 	beq.w	801657c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016322:	4b97      	ldr	r3, [pc, #604]	; (8016580 <ip4_reass+0x2fc>)
 8016324:	881b      	ldrh	r3, [r3, #0]
 8016326:	461a      	mov	r2, r3
 8016328:	8c3b      	ldrh	r3, [r7, #32]
 801632a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801632c:	2b0a      	cmp	r3, #10
 801632e:	f300 8125 	bgt.w	801657c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016332:	4b94      	ldr	r3, [pc, #592]	; (8016584 <ip4_reass+0x300>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	633b      	str	r3, [r7, #48]	; 0x30
 8016338:	e015      	b.n	8016366 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801633c:	695a      	ldr	r2, [r3, #20]
 801633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016340:	68db      	ldr	r3, [r3, #12]
 8016342:	429a      	cmp	r2, r3
 8016344:	d10c      	bne.n	8016360 <ip4_reass+0xdc>
 8016346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016348:	699a      	ldr	r2, [r3, #24]
 801634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801634c:	691b      	ldr	r3, [r3, #16]
 801634e:	429a      	cmp	r2, r3
 8016350:	d106      	bne.n	8016360 <ip4_reass+0xdc>
 8016352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016354:	899a      	ldrh	r2, [r3, #12]
 8016356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016358:	889b      	ldrh	r3, [r3, #4]
 801635a:	b29b      	uxth	r3, r3
 801635c:	429a      	cmp	r2, r3
 801635e:	d006      	beq.n	801636e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	633b      	str	r3, [r7, #48]	; 0x30
 8016366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016368:	2b00      	cmp	r3, #0
 801636a:	d1e6      	bne.n	801633a <ip4_reass+0xb6>
 801636c:	e000      	b.n	8016370 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801636e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016372:	2b00      	cmp	r3, #0
 8016374:	d109      	bne.n	801638a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016376:	8c3b      	ldrh	r3, [r7, #32]
 8016378:	4619      	mov	r1, r3
 801637a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801637c:	f7ff fdb0 	bl	8015ee0 <ip_reass_enqueue_new_datagram>
 8016380:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016384:	2b00      	cmp	r3, #0
 8016386:	d11c      	bne.n	80163c2 <ip4_reass+0x13e>
      goto nullreturn;
 8016388:	e109      	b.n	801659e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801638c:	88db      	ldrh	r3, [r3, #6]
 801638e:	b29b      	uxth	r3, r3
 8016390:	4618      	mov	r0, r3
 8016392:	f7f3 fdc7 	bl	8009f24 <lwip_htons>
 8016396:	4603      	mov	r3, r0
 8016398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801639c:	2b00      	cmp	r3, #0
 801639e:	d110      	bne.n	80163c2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80163a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a2:	89db      	ldrh	r3, [r3, #14]
 80163a4:	4618      	mov	r0, r3
 80163a6:	f7f3 fdbd 	bl	8009f24 <lwip_htons>
 80163aa:	4603      	mov	r3, r0
 80163ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d006      	beq.n	80163c2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80163b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b6:	3308      	adds	r3, #8
 80163b8:	2214      	movs	r2, #20
 80163ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80163bc:	4618      	mov	r0, r3
 80163be:	f001 f8cb 	bl	8017558 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80163c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163c4:	88db      	ldrh	r3, [r3, #6]
 80163c6:	b29b      	uxth	r3, r3
 80163c8:	f003 0320 	and.w	r3, r3, #32
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	bf0c      	ite	eq
 80163d0:	2301      	moveq	r3, #1
 80163d2:	2300      	movne	r3, #0
 80163d4:	b2db      	uxtb	r3, r3
 80163d6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80163d8:	69fb      	ldr	r3, [r7, #28]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d00e      	beq.n	80163fc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80163de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80163e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80163e2:	4413      	add	r3, r2
 80163e4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80163e6:	8b7a      	ldrh	r2, [r7, #26]
 80163e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80163ea:	429a      	cmp	r2, r3
 80163ec:	f0c0 80a0 	bcc.w	8016530 <ip4_reass+0x2ac>
 80163f0:	8b7b      	ldrh	r3, [r7, #26]
 80163f2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80163f6:	4293      	cmp	r3, r2
 80163f8:	f200 809a 	bhi.w	8016530 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80163fc:	69fa      	ldr	r2, [r7, #28]
 80163fe:	6879      	ldr	r1, [r7, #4]
 8016400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016402:	f7ff fdd5 	bl	8015fb0 <ip_reass_chain_frag_into_datagram_and_validate>
 8016406:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016408:	697b      	ldr	r3, [r7, #20]
 801640a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801640e:	f000 8091 	beq.w	8016534 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016412:	4b5b      	ldr	r3, [pc, #364]	; (8016580 <ip4_reass+0x2fc>)
 8016414:	881a      	ldrh	r2, [r3, #0]
 8016416:	8c3b      	ldrh	r3, [r7, #32]
 8016418:	4413      	add	r3, r2
 801641a:	b29a      	uxth	r2, r3
 801641c:	4b58      	ldr	r3, [pc, #352]	; (8016580 <ip4_reass+0x2fc>)
 801641e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016420:	69fb      	ldr	r3, [r7, #28]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d00d      	beq.n	8016442 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016426:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801642a:	4413      	add	r3, r2
 801642c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016430:	8a7a      	ldrh	r2, [r7, #18]
 8016432:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016436:	7f9b      	ldrb	r3, [r3, #30]
 8016438:	f043 0301 	orr.w	r3, r3, #1
 801643c:	b2da      	uxtb	r2, r3
 801643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016440:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016442:	697b      	ldr	r3, [r7, #20]
 8016444:	2b01      	cmp	r3, #1
 8016446:	d171      	bne.n	801652c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801644a:	8b9b      	ldrh	r3, [r3, #28]
 801644c:	3314      	adds	r3, #20
 801644e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016452:	685b      	ldr	r3, [r3, #4]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801645c:	685b      	ldr	r3, [r3, #4]
 801645e:	685b      	ldr	r3, [r3, #4]
 8016460:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016464:	3308      	adds	r3, #8
 8016466:	2214      	movs	r2, #20
 8016468:	4619      	mov	r1, r3
 801646a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801646c:	f001 f874 	bl	8017558 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016470:	8a3b      	ldrh	r3, [r7, #16]
 8016472:	4618      	mov	r0, r3
 8016474:	f7f3 fd56 	bl	8009f24 <lwip_htons>
 8016478:	4603      	mov	r3, r0
 801647a:	461a      	mov	r2, r3
 801647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801647e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016482:	2200      	movs	r2, #0
 8016484:	719a      	strb	r2, [r3, #6]
 8016486:	2200      	movs	r2, #0
 8016488:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801648c:	2200      	movs	r2, #0
 801648e:	729a      	strb	r2, [r3, #10]
 8016490:	2200      	movs	r2, #0
 8016492:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016496:	685b      	ldr	r3, [r3, #4]
 8016498:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801649a:	e00d      	b.n	80164b8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801649e:	685b      	ldr	r3, [r3, #4]
 80164a0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80164a2:	2114      	movs	r1, #20
 80164a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80164a6:	f7f4 ff9b 	bl	800b3e0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80164aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80164ac:	6878      	ldr	r0, [r7, #4]
 80164ae:	f7f5 f8df 	bl	800b670 <pbuf_cat>
      r = iprh->next_pbuf;
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80164b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d1ee      	bne.n	801649c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80164be:	4b31      	ldr	r3, [pc, #196]	; (8016584 <ip4_reass+0x300>)
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164c4:	429a      	cmp	r2, r3
 80164c6:	d102      	bne.n	80164ce <ip4_reass+0x24a>
      ipr_prev = NULL;
 80164c8:	2300      	movs	r3, #0
 80164ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164cc:	e010      	b.n	80164f0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80164ce:	4b2d      	ldr	r3, [pc, #180]	; (8016584 <ip4_reass+0x300>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164d4:	e007      	b.n	80164e6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80164d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164dc:	429a      	cmp	r2, r3
 80164de:	d006      	beq.n	80164ee <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80164e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d1f4      	bne.n	80164d6 <ip4_reass+0x252>
 80164ec:	e000      	b.n	80164f0 <ip4_reass+0x26c>
          break;
 80164ee:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80164f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80164f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80164f4:	f7ff fd2e 	bl	8015f54 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f7f5 f87f 	bl	800b5fc <pbuf_clen>
 80164fe:	4603      	mov	r3, r0
 8016500:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016502:	4b1f      	ldr	r3, [pc, #124]	; (8016580 <ip4_reass+0x2fc>)
 8016504:	881b      	ldrh	r3, [r3, #0]
 8016506:	8c3a      	ldrh	r2, [r7, #32]
 8016508:	429a      	cmp	r2, r3
 801650a:	d906      	bls.n	801651a <ip4_reass+0x296>
 801650c:	4b1e      	ldr	r3, [pc, #120]	; (8016588 <ip4_reass+0x304>)
 801650e:	f240 229b 	movw	r2, #667	; 0x29b
 8016512:	491e      	ldr	r1, [pc, #120]	; (801658c <ip4_reass+0x308>)
 8016514:	481e      	ldr	r0, [pc, #120]	; (8016590 <ip4_reass+0x30c>)
 8016516:	f001 f84f 	bl	80175b8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801651a:	4b19      	ldr	r3, [pc, #100]	; (8016580 <ip4_reass+0x2fc>)
 801651c:	881a      	ldrh	r2, [r3, #0]
 801651e:	8c3b      	ldrh	r3, [r7, #32]
 8016520:	1ad3      	subs	r3, r2, r3
 8016522:	b29a      	uxth	r2, r3
 8016524:	4b16      	ldr	r3, [pc, #88]	; (8016580 <ip4_reass+0x2fc>)
 8016526:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	e03c      	b.n	80165a6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801652c:	2300      	movs	r3, #0
 801652e:	e03a      	b.n	80165a6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016530:	bf00      	nop
 8016532:	e000      	b.n	8016536 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016534:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016538:	2b00      	cmp	r3, #0
 801653a:	d106      	bne.n	801654a <ip4_reass+0x2c6>
 801653c:	4b12      	ldr	r3, [pc, #72]	; (8016588 <ip4_reass+0x304>)
 801653e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016542:	4914      	ldr	r1, [pc, #80]	; (8016594 <ip4_reass+0x310>)
 8016544:	4812      	ldr	r0, [pc, #72]	; (8016590 <ip4_reass+0x30c>)
 8016546:	f001 f837 	bl	80175b8 <iprintf>
  if (ipr->p == NULL) {
 801654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801654c:	685b      	ldr	r3, [r3, #4]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d124      	bne.n	801659c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016552:	4b0c      	ldr	r3, [pc, #48]	; (8016584 <ip4_reass+0x300>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016558:	429a      	cmp	r2, r3
 801655a:	d006      	beq.n	801656a <ip4_reass+0x2e6>
 801655c:	4b0a      	ldr	r3, [pc, #40]	; (8016588 <ip4_reass+0x304>)
 801655e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016562:	490d      	ldr	r1, [pc, #52]	; (8016598 <ip4_reass+0x314>)
 8016564:	480a      	ldr	r0, [pc, #40]	; (8016590 <ip4_reass+0x30c>)
 8016566:	f001 f827 	bl	80175b8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801656a:	2100      	movs	r1, #0
 801656c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801656e:	f7ff fcf1 	bl	8015f54 <ip_reass_dequeue_datagram>
 8016572:	e014      	b.n	801659e <ip4_reass+0x31a>
    goto nullreturn;
 8016574:	bf00      	nop
 8016576:	e012      	b.n	801659e <ip4_reass+0x31a>
    goto nullreturn;
 8016578:	bf00      	nop
 801657a:	e010      	b.n	801659e <ip4_reass+0x31a>
      goto nullreturn;
 801657c:	bf00      	nop
 801657e:	e00e      	b.n	801659e <ip4_reass+0x31a>
 8016580:	2000039c 	.word	0x2000039c
 8016584:	20000398 	.word	0x20000398
 8016588:	0801bd78 	.word	0x0801bd78
 801658c:	0801bee8 	.word	0x0801bee8
 8016590:	0801bdc0 	.word	0x0801bdc0
 8016594:	0801bf04 	.word	0x0801bf04
 8016598:	0801bf10 	.word	0x0801bf10
  }

nullreturn:
 801659c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801659e:	6878      	ldr	r0, [r7, #4]
 80165a0:	f7f4 ffa4 	bl	800b4ec <pbuf_free>
  return NULL;
 80165a4:	2300      	movs	r3, #0
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3738      	adds	r7, #56	; 0x38
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop

080165b0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80165b4:	2005      	movs	r0, #5
 80165b6:	f7f4 f933 	bl	800a820 <memp_malloc>
 80165ba:	4603      	mov	r3, r0
}
 80165bc:	4618      	mov	r0, r3
 80165be:	bd80      	pop	{r7, pc}

080165c0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b082      	sub	sp, #8
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d106      	bne.n	80165dc <ip_frag_free_pbuf_custom_ref+0x1c>
 80165ce:	4b07      	ldr	r3, [pc, #28]	; (80165ec <ip_frag_free_pbuf_custom_ref+0x2c>)
 80165d0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80165d4:	4906      	ldr	r1, [pc, #24]	; (80165f0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80165d6:	4807      	ldr	r0, [pc, #28]	; (80165f4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80165d8:	f000 ffee 	bl	80175b8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80165dc:	6879      	ldr	r1, [r7, #4]
 80165de:	2005      	movs	r0, #5
 80165e0:	f7f4 f96a 	bl	800a8b8 <memp_free>
}
 80165e4:	bf00      	nop
 80165e6:	3708      	adds	r7, #8
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}
 80165ec:	0801bd78 	.word	0x0801bd78
 80165f0:	0801bf30 	.word	0x0801bf30
 80165f4:	0801bdc0 	.word	0x0801bdc0

080165f8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b084      	sub	sp, #16
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d106      	bne.n	8016618 <ipfrag_free_pbuf_custom+0x20>
 801660a:	4b11      	ldr	r3, [pc, #68]	; (8016650 <ipfrag_free_pbuf_custom+0x58>)
 801660c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016610:	4910      	ldr	r1, [pc, #64]	; (8016654 <ipfrag_free_pbuf_custom+0x5c>)
 8016612:	4811      	ldr	r0, [pc, #68]	; (8016658 <ipfrag_free_pbuf_custom+0x60>)
 8016614:	f000 ffd0 	bl	80175b8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016618:	68fa      	ldr	r2, [r7, #12]
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	429a      	cmp	r2, r3
 801661e:	d006      	beq.n	801662e <ipfrag_free_pbuf_custom+0x36>
 8016620:	4b0b      	ldr	r3, [pc, #44]	; (8016650 <ipfrag_free_pbuf_custom+0x58>)
 8016622:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016626:	490d      	ldr	r1, [pc, #52]	; (801665c <ipfrag_free_pbuf_custom+0x64>)
 8016628:	480b      	ldr	r0, [pc, #44]	; (8016658 <ipfrag_free_pbuf_custom+0x60>)
 801662a:	f000 ffc5 	bl	80175b8 <iprintf>
  if (pcr->original != NULL) {
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	695b      	ldr	r3, [r3, #20]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d004      	beq.n	8016640 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	695b      	ldr	r3, [r3, #20]
 801663a:	4618      	mov	r0, r3
 801663c:	f7f4 ff56 	bl	800b4ec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016640:	68f8      	ldr	r0, [r7, #12]
 8016642:	f7ff ffbd 	bl	80165c0 <ip_frag_free_pbuf_custom_ref>
}
 8016646:	bf00      	nop
 8016648:	3710      	adds	r7, #16
 801664a:	46bd      	mov	sp, r7
 801664c:	bd80      	pop	{r7, pc}
 801664e:	bf00      	nop
 8016650:	0801bd78 	.word	0x0801bd78
 8016654:	0801bf3c 	.word	0x0801bf3c
 8016658:	0801bdc0 	.word	0x0801bdc0
 801665c:	0801bf48 	.word	0x0801bf48

08016660 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b094      	sub	sp, #80	; 0x50
 8016664:	af02      	add	r7, sp, #8
 8016666:	60f8      	str	r0, [r7, #12]
 8016668:	60b9      	str	r1, [r7, #8]
 801666a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801666c:	2300      	movs	r3, #0
 801666e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016672:	68bb      	ldr	r3, [r7, #8]
 8016674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016676:	3b14      	subs	r3, #20
 8016678:	2b00      	cmp	r3, #0
 801667a:	da00      	bge.n	801667e <ip4_frag+0x1e>
 801667c:	3307      	adds	r3, #7
 801667e:	10db      	asrs	r3, r3, #3
 8016680:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016682:	2314      	movs	r3, #20
 8016684:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	685b      	ldr	r3, [r3, #4]
 801668a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801668c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801668e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016692:	781b      	ldrb	r3, [r3, #0]
 8016694:	f003 030f 	and.w	r3, r3, #15
 8016698:	b2db      	uxtb	r3, r3
 801669a:	009b      	lsls	r3, r3, #2
 801669c:	b2db      	uxtb	r3, r3
 801669e:	2b14      	cmp	r3, #20
 80166a0:	d002      	beq.n	80166a8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80166a2:	f06f 0305 	mvn.w	r3, #5
 80166a6:	e110      	b.n	80168ca <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	895b      	ldrh	r3, [r3, #10]
 80166ac:	2b13      	cmp	r3, #19
 80166ae:	d809      	bhi.n	80166c4 <ip4_frag+0x64>
 80166b0:	4b88      	ldr	r3, [pc, #544]	; (80168d4 <ip4_frag+0x274>)
 80166b2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80166b6:	4988      	ldr	r1, [pc, #544]	; (80168d8 <ip4_frag+0x278>)
 80166b8:	4888      	ldr	r0, [pc, #544]	; (80168dc <ip4_frag+0x27c>)
 80166ba:	f000 ff7d 	bl	80175b8 <iprintf>
 80166be:	f06f 0305 	mvn.w	r3, #5
 80166c2:	e102      	b.n	80168ca <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80166c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166c6:	88db      	ldrh	r3, [r3, #6]
 80166c8:	b29b      	uxth	r3, r3
 80166ca:	4618      	mov	r0, r3
 80166cc:	f7f3 fc2a 	bl	8009f24 <lwip_htons>
 80166d0:	4603      	mov	r3, r0
 80166d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80166d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80166da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80166de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80166e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	891b      	ldrh	r3, [r3, #8]
 80166ea:	3b14      	subs	r3, #20
 80166ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80166f0:	e0e1      	b.n	80168b6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80166f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80166f4:	00db      	lsls	r3, r3, #3
 80166f6:	b29b      	uxth	r3, r3
 80166f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80166fc:	4293      	cmp	r3, r2
 80166fe:	bf28      	it	cs
 8016700:	4613      	movcs	r3, r2
 8016702:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016704:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016708:	2114      	movs	r1, #20
 801670a:	200e      	movs	r0, #14
 801670c:	f7f4 fc0a 	bl	800af24 <pbuf_alloc>
 8016710:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016714:	2b00      	cmp	r3, #0
 8016716:	f000 80d5 	beq.w	80168c4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801671c:	895b      	ldrh	r3, [r3, #10]
 801671e:	2b13      	cmp	r3, #19
 8016720:	d806      	bhi.n	8016730 <ip4_frag+0xd0>
 8016722:	4b6c      	ldr	r3, [pc, #432]	; (80168d4 <ip4_frag+0x274>)
 8016724:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016728:	496d      	ldr	r1, [pc, #436]	; (80168e0 <ip4_frag+0x280>)
 801672a:	486c      	ldr	r0, [pc, #432]	; (80168dc <ip4_frag+0x27c>)
 801672c:	f000 ff44 	bl	80175b8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016732:	685b      	ldr	r3, [r3, #4]
 8016734:	2214      	movs	r2, #20
 8016736:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016738:	4618      	mov	r0, r3
 801673a:	f000 ff0d 	bl	8017558 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016740:	685b      	ldr	r3, [r3, #4]
 8016742:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016744:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016746:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801674a:	e064      	b.n	8016816 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	895a      	ldrh	r2, [r3, #10]
 8016750:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016752:	1ad3      	subs	r3, r2, r3
 8016754:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	895b      	ldrh	r3, [r3, #10]
 801675a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801675c:	429a      	cmp	r2, r3
 801675e:	d906      	bls.n	801676e <ip4_frag+0x10e>
 8016760:	4b5c      	ldr	r3, [pc, #368]	; (80168d4 <ip4_frag+0x274>)
 8016762:	f240 322d 	movw	r2, #813	; 0x32d
 8016766:	495f      	ldr	r1, [pc, #380]	; (80168e4 <ip4_frag+0x284>)
 8016768:	485c      	ldr	r0, [pc, #368]	; (80168dc <ip4_frag+0x27c>)
 801676a:	f000 ff25 	bl	80175b8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801676e:	8bfa      	ldrh	r2, [r7, #30]
 8016770:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016774:	4293      	cmp	r3, r2
 8016776:	bf28      	it	cs
 8016778:	4613      	movcs	r3, r2
 801677a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801677e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016782:	2b00      	cmp	r3, #0
 8016784:	d105      	bne.n	8016792 <ip4_frag+0x132>
        poff = 0;
 8016786:	2300      	movs	r3, #0
 8016788:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	60fb      	str	r3, [r7, #12]
        continue;
 8016790:	e041      	b.n	8016816 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016792:	f7ff ff0d 	bl	80165b0 <ip_frag_alloc_pbuf_custom_ref>
 8016796:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016798:	69bb      	ldr	r3, [r7, #24]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d103      	bne.n	80167a6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801679e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167a0:	f7f4 fea4 	bl	800b4ec <pbuf_free>
        goto memerr;
 80167a4:	e08f      	b.n	80168c6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80167a6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80167ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80167ae:	4413      	add	r3, r2
 80167b0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80167b4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80167b8:	9201      	str	r2, [sp, #4]
 80167ba:	9300      	str	r3, [sp, #0]
 80167bc:	4603      	mov	r3, r0
 80167be:	2241      	movs	r2, #65	; 0x41
 80167c0:	2000      	movs	r0, #0
 80167c2:	f7f4 fcd9 	bl	800b178 <pbuf_alloced_custom>
 80167c6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80167c8:	697b      	ldr	r3, [r7, #20]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d106      	bne.n	80167dc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80167ce:	69b8      	ldr	r0, [r7, #24]
 80167d0:	f7ff fef6 	bl	80165c0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80167d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167d6:	f7f4 fe89 	bl	800b4ec <pbuf_free>
        goto memerr;
 80167da:	e074      	b.n	80168c6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80167dc:	68f8      	ldr	r0, [r7, #12]
 80167de:	f7f4 ff25 	bl	800b62c <pbuf_ref>
      pcr->original = p;
 80167e2:	69bb      	ldr	r3, [r7, #24]
 80167e4:	68fa      	ldr	r2, [r7, #12]
 80167e6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80167e8:	69bb      	ldr	r3, [r7, #24]
 80167ea:	4a3f      	ldr	r2, [pc, #252]	; (80168e8 <ip4_frag+0x288>)
 80167ec:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80167ee:	6979      	ldr	r1, [r7, #20]
 80167f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167f2:	f7f4 ff3d 	bl	800b670 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80167f6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80167fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80167fe:	1ad3      	subs	r3, r2, r3
 8016800:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016804:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016808:	2b00      	cmp	r3, #0
 801680a:	d004      	beq.n	8016816 <ip4_frag+0x1b6>
        poff = 0;
 801680c:	2300      	movs	r3, #0
 801680e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016816:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801681a:	2b00      	cmp	r3, #0
 801681c:	d196      	bne.n	801674c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801681e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016820:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016824:	4413      	add	r3, r2
 8016826:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016828:	68bb      	ldr	r3, [r7, #8]
 801682a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801682c:	f1a3 0213 	sub.w	r2, r3, #19
 8016830:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016834:	429a      	cmp	r2, r3
 8016836:	bfcc      	ite	gt
 8016838:	2301      	movgt	r3, #1
 801683a:	2300      	movle	r3, #0
 801683c:	b2db      	uxtb	r3, r3
 801683e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016840:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016848:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801684a:	6a3b      	ldr	r3, [r7, #32]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d002      	beq.n	8016856 <ip4_frag+0x1f6>
 8016850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016852:	2b00      	cmp	r3, #0
 8016854:	d003      	beq.n	801685e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016856:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016858:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801685c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801685e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016860:	4618      	mov	r0, r3
 8016862:	f7f3 fb5f 	bl	8009f24 <lwip_htons>
 8016866:	4603      	mov	r3, r0
 8016868:	461a      	mov	r2, r3
 801686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801686c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801686e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016870:	3314      	adds	r3, #20
 8016872:	b29b      	uxth	r3, r3
 8016874:	4618      	mov	r0, r3
 8016876:	f7f3 fb55 	bl	8009f24 <lwip_htons>
 801687a:	4603      	mov	r3, r0
 801687c:	461a      	mov	r2, r3
 801687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016880:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016884:	2200      	movs	r2, #0
 8016886:	729a      	strb	r2, [r3, #10]
 8016888:	2200      	movs	r2, #0
 801688a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801688c:	68bb      	ldr	r3, [r7, #8]
 801688e:	695b      	ldr	r3, [r3, #20]
 8016890:	687a      	ldr	r2, [r7, #4]
 8016892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016894:	68b8      	ldr	r0, [r7, #8]
 8016896:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801689a:	f7f4 fe27 	bl	800b4ec <pbuf_free>
    left = (u16_t)(left - fragsize);
 801689e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80168a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80168a4:	1ad3      	subs	r3, r2, r3
 80168a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80168aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80168ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80168b0:	4413      	add	r3, r2
 80168b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80168b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	f47f af19 	bne.w	80166f2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80168c0:	2300      	movs	r3, #0
 80168c2:	e002      	b.n	80168ca <ip4_frag+0x26a>
      goto memerr;
 80168c4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80168c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80168ca:	4618      	mov	r0, r3
 80168cc:	3748      	adds	r7, #72	; 0x48
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}
 80168d2:	bf00      	nop
 80168d4:	0801bd78 	.word	0x0801bd78
 80168d8:	0801bf54 	.word	0x0801bf54
 80168dc:	0801bdc0 	.word	0x0801bdc0
 80168e0:	0801bf70 	.word	0x0801bf70
 80168e4:	0801bf90 	.word	0x0801bf90
 80168e8:	080165f9 	.word	0x080165f9

080168ec <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b086      	sub	sp, #24
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
 80168f4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80168f6:	230e      	movs	r3, #14
 80168f8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	895b      	ldrh	r3, [r3, #10]
 80168fe:	2b0e      	cmp	r3, #14
 8016900:	d96e      	bls.n	80169e0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	7bdb      	ldrb	r3, [r3, #15]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d106      	bne.n	8016918 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016910:	3301      	adds	r3, #1
 8016912:	b2da      	uxtb	r2, r3
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	685b      	ldr	r3, [r3, #4]
 801691c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	7b1a      	ldrb	r2, [r3, #12]
 8016922:	7b5b      	ldrb	r3, [r3, #13]
 8016924:	021b      	lsls	r3, r3, #8
 8016926:	4313      	orrs	r3, r2
 8016928:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801692a:	693b      	ldr	r3, [r7, #16]
 801692c:	781b      	ldrb	r3, [r3, #0]
 801692e:	f003 0301 	and.w	r3, r3, #1
 8016932:	2b00      	cmp	r3, #0
 8016934:	d023      	beq.n	801697e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016936:	693b      	ldr	r3, [r7, #16]
 8016938:	781b      	ldrb	r3, [r3, #0]
 801693a:	2b01      	cmp	r3, #1
 801693c:	d10f      	bne.n	801695e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801693e:	693b      	ldr	r3, [r7, #16]
 8016940:	785b      	ldrb	r3, [r3, #1]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d11b      	bne.n	801697e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016946:	693b      	ldr	r3, [r7, #16]
 8016948:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801694a:	2b5e      	cmp	r3, #94	; 0x5e
 801694c:	d117      	bne.n	801697e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	7b5b      	ldrb	r3, [r3, #13]
 8016952:	f043 0310 	orr.w	r3, r3, #16
 8016956:	b2da      	uxtb	r2, r3
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	735a      	strb	r2, [r3, #13]
 801695c:	e00f      	b.n	801697e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801695e:	693b      	ldr	r3, [r7, #16]
 8016960:	2206      	movs	r2, #6
 8016962:	4928      	ldr	r1, [pc, #160]	; (8016a04 <ethernet_input+0x118>)
 8016964:	4618      	mov	r0, r3
 8016966:	f000 fde9 	bl	801753c <memcmp>
 801696a:	4603      	mov	r3, r0
 801696c:	2b00      	cmp	r3, #0
 801696e:	d106      	bne.n	801697e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	7b5b      	ldrb	r3, [r3, #13]
 8016974:	f043 0308 	orr.w	r3, r3, #8
 8016978:	b2da      	uxtb	r2, r3
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801697e:	89fb      	ldrh	r3, [r7, #14]
 8016980:	2b08      	cmp	r3, #8
 8016982:	d003      	beq.n	801698c <ethernet_input+0xa0>
 8016984:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016988:	d014      	beq.n	80169b4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801698a:	e032      	b.n	80169f2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016992:	f003 0308 	and.w	r3, r3, #8
 8016996:	2b00      	cmp	r3, #0
 8016998:	d024      	beq.n	80169e4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801699a:	8afb      	ldrh	r3, [r7, #22]
 801699c:	4619      	mov	r1, r3
 801699e:	6878      	ldr	r0, [r7, #4]
 80169a0:	f7f4 fd1e 	bl	800b3e0 <pbuf_remove_header>
 80169a4:	4603      	mov	r3, r0
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d11e      	bne.n	80169e8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80169aa:	6839      	ldr	r1, [r7, #0]
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f7fe ff09 	bl	80157c4 <ip4_input>
      break;
 80169b2:	e013      	b.n	80169dc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80169b4:	683b      	ldr	r3, [r7, #0]
 80169b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80169ba:	f003 0308 	and.w	r3, r3, #8
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d014      	beq.n	80169ec <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80169c2:	8afb      	ldrh	r3, [r7, #22]
 80169c4:	4619      	mov	r1, r3
 80169c6:	6878      	ldr	r0, [r7, #4]
 80169c8:	f7f4 fd0a 	bl	800b3e0 <pbuf_remove_header>
 80169cc:	4603      	mov	r3, r0
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d10e      	bne.n	80169f0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80169d2:	6839      	ldr	r1, [r7, #0]
 80169d4:	6878      	ldr	r0, [r7, #4]
 80169d6:	f7fe f8a5 	bl	8014b24 <etharp_input>
      break;
 80169da:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80169dc:	2300      	movs	r3, #0
 80169de:	e00c      	b.n	80169fa <ethernet_input+0x10e>
    goto free_and_return;
 80169e0:	bf00      	nop
 80169e2:	e006      	b.n	80169f2 <ethernet_input+0x106>
        goto free_and_return;
 80169e4:	bf00      	nop
 80169e6:	e004      	b.n	80169f2 <ethernet_input+0x106>
        goto free_and_return;
 80169e8:	bf00      	nop
 80169ea:	e002      	b.n	80169f2 <ethernet_input+0x106>
        goto free_and_return;
 80169ec:	bf00      	nop
 80169ee:	e000      	b.n	80169f2 <ethernet_input+0x106>
        goto free_and_return;
 80169f0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80169f2:	6878      	ldr	r0, [r7, #4]
 80169f4:	f7f4 fd7a 	bl	800b4ec <pbuf_free>
  return ERR_OK;
 80169f8:	2300      	movs	r3, #0
}
 80169fa:	4618      	mov	r0, r3
 80169fc:	3718      	adds	r7, #24
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd80      	pop	{r7, pc}
 8016a02:	bf00      	nop
 8016a04:	0801c174 	.word	0x0801c174

08016a08 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b086      	sub	sp, #24
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	60f8      	str	r0, [r7, #12]
 8016a10:	60b9      	str	r1, [r7, #8]
 8016a12:	607a      	str	r2, [r7, #4]
 8016a14:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016a16:	8c3b      	ldrh	r3, [r7, #32]
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f7f3 fa83 	bl	8009f24 <lwip_htons>
 8016a1e:	4603      	mov	r3, r0
 8016a20:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016a22:	210e      	movs	r1, #14
 8016a24:	68b8      	ldr	r0, [r7, #8]
 8016a26:	f7f4 fccb 	bl	800b3c0 <pbuf_add_header>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d125      	bne.n	8016a7c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016a30:	68bb      	ldr	r3, [r7, #8]
 8016a32:	685b      	ldr	r3, [r3, #4]
 8016a34:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016a36:	693b      	ldr	r3, [r7, #16]
 8016a38:	8afa      	ldrh	r2, [r7, #22]
 8016a3a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016a3c:	693b      	ldr	r3, [r7, #16]
 8016a3e:	2206      	movs	r2, #6
 8016a40:	6839      	ldr	r1, [r7, #0]
 8016a42:	4618      	mov	r0, r3
 8016a44:	f000 fd88 	bl	8017558 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016a48:	693b      	ldr	r3, [r7, #16]
 8016a4a:	3306      	adds	r3, #6
 8016a4c:	2206      	movs	r2, #6
 8016a4e:	6879      	ldr	r1, [r7, #4]
 8016a50:	4618      	mov	r0, r3
 8016a52:	f000 fd81 	bl	8017558 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a5c:	2b06      	cmp	r3, #6
 8016a5e:	d006      	beq.n	8016a6e <ethernet_output+0x66>
 8016a60:	4b0a      	ldr	r3, [pc, #40]	; (8016a8c <ethernet_output+0x84>)
 8016a62:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016a66:	490a      	ldr	r1, [pc, #40]	; (8016a90 <ethernet_output+0x88>)
 8016a68:	480a      	ldr	r0, [pc, #40]	; (8016a94 <ethernet_output+0x8c>)
 8016a6a:	f000 fda5 	bl	80175b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	699b      	ldr	r3, [r3, #24]
 8016a72:	68b9      	ldr	r1, [r7, #8]
 8016a74:	68f8      	ldr	r0, [r7, #12]
 8016a76:	4798      	blx	r3
 8016a78:	4603      	mov	r3, r0
 8016a7a:	e002      	b.n	8016a82 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016a7c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016a7e:	f06f 0301 	mvn.w	r3, #1
}
 8016a82:	4618      	mov	r0, r3
 8016a84:	3718      	adds	r7, #24
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}
 8016a8a:	bf00      	nop
 8016a8c:	0801bfa0 	.word	0x0801bfa0
 8016a90:	0801bfd8 	.word	0x0801bfd8
 8016a94:	0801c00c 	.word	0x0801c00c

08016a98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	4912      	ldr	r1, [pc, #72]	; (8016ae8 <MX_USB_DEVICE_Init+0x50>)
 8016aa0:	4812      	ldr	r0, [pc, #72]	; (8016aec <MX_USB_DEVICE_Init+0x54>)
 8016aa2:	f7f0 fbbd 	bl	8007220 <USBD_Init>
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d001      	beq.n	8016ab0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016aac:	f7ea f888 	bl	8000bc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016ab0:	490f      	ldr	r1, [pc, #60]	; (8016af0 <MX_USB_DEVICE_Init+0x58>)
 8016ab2:	480e      	ldr	r0, [pc, #56]	; (8016aec <MX_USB_DEVICE_Init+0x54>)
 8016ab4:	f7f0 fbe4 	bl	8007280 <USBD_RegisterClass>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d001      	beq.n	8016ac2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016abe:	f7ea f87f 	bl	8000bc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016ac2:	490c      	ldr	r1, [pc, #48]	; (8016af4 <MX_USB_DEVICE_Init+0x5c>)
 8016ac4:	4809      	ldr	r0, [pc, #36]	; (8016aec <MX_USB_DEVICE_Init+0x54>)
 8016ac6:	f7f0 fb05 	bl	80070d4 <USBD_CDC_RegisterInterface>
 8016aca:	4603      	mov	r3, r0
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d001      	beq.n	8016ad4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016ad0:	f7ea f876 	bl	8000bc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016ad4:	4805      	ldr	r0, [pc, #20]	; (8016aec <MX_USB_DEVICE_Init+0x54>)
 8016ad6:	f7f0 fbfa 	bl	80072ce <USBD_Start>
 8016ada:	4603      	mov	r3, r0
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d001      	beq.n	8016ae4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016ae0:	f7ea f86e 	bl	8000bc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016ae4:	bf00      	nop
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	20000148 	.word	0x20000148
 8016aec:	20006d50 	.word	0x20006d50
 8016af0:	20000018 	.word	0x20000018
 8016af4:	2000012c 	.word	0x2000012c

08016af8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016afc:	2200      	movs	r2, #0
 8016afe:	4905      	ldr	r1, [pc, #20]	; (8016b14 <CDC_Init_FS+0x1c>)
 8016b00:	4805      	ldr	r0, [pc, #20]	; (8016b18 <CDC_Init_FS+0x20>)
 8016b02:	f7f0 fafc 	bl	80070fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016b06:	4905      	ldr	r1, [pc, #20]	; (8016b1c <CDC_Init_FS+0x24>)
 8016b08:	4803      	ldr	r0, [pc, #12]	; (8016b18 <CDC_Init_FS+0x20>)
 8016b0a:	f7f0 fb16 	bl	800713a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016b0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016b10:	4618      	mov	r0, r3
 8016b12:	bd80      	pop	{r7, pc}
 8016b14:	20007820 	.word	0x20007820
 8016b18:	20006d50 	.word	0x20006d50
 8016b1c:	20007020 	.word	0x20007020

08016b20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016b20:	b480      	push	{r7}
 8016b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016b24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2e:	4770      	bx	lr

08016b30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016b30:	b480      	push	{r7}
 8016b32:	b083      	sub	sp, #12
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	4603      	mov	r3, r0
 8016b38:	6039      	str	r1, [r7, #0]
 8016b3a:	71fb      	strb	r3, [r7, #7]
 8016b3c:	4613      	mov	r3, r2
 8016b3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
	    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
  switch(cmd)
 8016b40:	79fb      	ldrb	r3, [r7, #7]
 8016b42:	2b23      	cmp	r3, #35	; 0x23
 8016b44:	d85c      	bhi.n	8016c00 <CDC_Control_FS+0xd0>
 8016b46:	a201      	add	r2, pc, #4	; (adr r2, 8016b4c <CDC_Control_FS+0x1c>)
 8016b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b4c:	08016c01 	.word	0x08016c01
 8016b50:	08016c01 	.word	0x08016c01
 8016b54:	08016c01 	.word	0x08016c01
 8016b58:	08016c01 	.word	0x08016c01
 8016b5c:	08016c01 	.word	0x08016c01
 8016b60:	08016c01 	.word	0x08016c01
 8016b64:	08016c01 	.word	0x08016c01
 8016b68:	08016c01 	.word	0x08016c01
 8016b6c:	08016c01 	.word	0x08016c01
 8016b70:	08016c01 	.word	0x08016c01
 8016b74:	08016c01 	.word	0x08016c01
 8016b78:	08016c01 	.word	0x08016c01
 8016b7c:	08016c01 	.word	0x08016c01
 8016b80:	08016c01 	.word	0x08016c01
 8016b84:	08016c01 	.word	0x08016c01
 8016b88:	08016c01 	.word	0x08016c01
 8016b8c:	08016c01 	.word	0x08016c01
 8016b90:	08016c01 	.word	0x08016c01
 8016b94:	08016c01 	.word	0x08016c01
 8016b98:	08016c01 	.word	0x08016c01
 8016b9c:	08016c01 	.word	0x08016c01
 8016ba0:	08016c01 	.word	0x08016c01
 8016ba4:	08016c01 	.word	0x08016c01
 8016ba8:	08016c01 	.word	0x08016c01
 8016bac:	08016c01 	.word	0x08016c01
 8016bb0:	08016c01 	.word	0x08016c01
 8016bb4:	08016c01 	.word	0x08016c01
 8016bb8:	08016c01 	.word	0x08016c01
 8016bbc:	08016c01 	.word	0x08016c01
 8016bc0:	08016c01 	.word	0x08016c01
 8016bc4:	08016c01 	.word	0x08016c01
 8016bc8:	08016c01 	.word	0x08016c01
 8016bcc:	08016bdd 	.word	0x08016bdd
 8016bd0:	08016bef 	.word	0x08016bef
 8016bd4:	08016c01 	.word	0x08016c01
 8016bd8:	08016c01 	.word	0x08016c01
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8016bdc:	4b0c      	ldr	r3, [pc, #48]	; (8016c10 <CDC_Control_FS+0xe0>)
 8016bde:	683a      	ldr	r2, [r7, #0]
 8016be0:	6810      	ldr	r0, [r2, #0]
 8016be2:	6018      	str	r0, [r3, #0]
 8016be4:	8891      	ldrh	r1, [r2, #4]
 8016be6:	7992      	ldrb	r2, [r2, #6]
 8016be8:	8099      	strh	r1, [r3, #4]
 8016bea:	719a      	strb	r2, [r3, #6]
    break;
 8016bec:	e009      	b.n	8016c02 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8016bee:	683b      	ldr	r3, [r7, #0]
 8016bf0:	4a07      	ldr	r2, [pc, #28]	; (8016c10 <CDC_Control_FS+0xe0>)
 8016bf2:	6810      	ldr	r0, [r2, #0]
 8016bf4:	6018      	str	r0, [r3, #0]
 8016bf6:	8891      	ldrh	r1, [r2, #4]
 8016bf8:	7992      	ldrb	r2, [r2, #6]
 8016bfa:	8099      	strh	r1, [r3, #4]
 8016bfc:	719a      	strb	r2, [r3, #6]
    break;
 8016bfe:	e000      	b.n	8016c02 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016c00:	bf00      	nop
  }

  return (USBD_OK);
 8016c02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016c04:	4618      	mov	r0, r3
 8016c06:	370c      	adds	r7, #12
 8016c08:	46bd      	mov	sp, r7
 8016c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c0e:	4770      	bx	lr
 8016c10:	20000140 	.word	0x20000140

08016c14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016c14:	b580      	push	{r7, lr}
 8016c16:	b082      	sub	sp, #8
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	6078      	str	r0, [r7, #4]
 8016c1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016c1e:	6879      	ldr	r1, [r7, #4]
 8016c20:	4805      	ldr	r0, [pc, #20]	; (8016c38 <CDC_Receive_FS+0x24>)
 8016c22:	f7f0 fa8a 	bl	800713a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016c26:	4804      	ldr	r0, [pc, #16]	; (8016c38 <CDC_Receive_FS+0x24>)
 8016c28:	f7f0 fad0 	bl	80071cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016c2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016c2e:	4618      	mov	r0, r3
 8016c30:	3708      	adds	r7, #8
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bd80      	pop	{r7, pc}
 8016c36:	bf00      	nop
 8016c38:	20006d50 	.word	0x20006d50

08016c3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b084      	sub	sp, #16
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
 8016c44:	460b      	mov	r3, r1
 8016c46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016c48:	2300      	movs	r3, #0
 8016c4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016c4c:	4b0d      	ldr	r3, [pc, #52]	; (8016c84 <CDC_Transmit_FS+0x48>)
 8016c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016c52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016c54:	68bb      	ldr	r3, [r7, #8]
 8016c56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d001      	beq.n	8016c62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8016c5e:	2301      	movs	r3, #1
 8016c60:	e00b      	b.n	8016c7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016c62:	887b      	ldrh	r3, [r7, #2]
 8016c64:	461a      	mov	r2, r3
 8016c66:	6879      	ldr	r1, [r7, #4]
 8016c68:	4806      	ldr	r0, [pc, #24]	; (8016c84 <CDC_Transmit_FS+0x48>)
 8016c6a:	f7f0 fa48 	bl	80070fe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016c6e:	4805      	ldr	r0, [pc, #20]	; (8016c84 <CDC_Transmit_FS+0x48>)
 8016c70:	f7f0 fa7c 	bl	800716c <USBD_CDC_TransmitPacket>
 8016c74:	4603      	mov	r3, r0
 8016c76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	3710      	adds	r7, #16
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	bd80      	pop	{r7, pc}
 8016c82:	bf00      	nop
 8016c84:	20006d50 	.word	0x20006d50

08016c88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016c88:	b480      	push	{r7}
 8016c8a:	b087      	sub	sp, #28
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	60f8      	str	r0, [r7, #12]
 8016c90:	60b9      	str	r1, [r7, #8]
 8016c92:	4613      	mov	r3, r2
 8016c94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016c96:	2300      	movs	r3, #0
 8016c98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	371c      	adds	r7, #28
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca8:	4770      	bx	lr
	...

08016cac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016cac:	b480      	push	{r7}
 8016cae:	b083      	sub	sp, #12
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	6039      	str	r1, [r7, #0]
 8016cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016cb8:	683b      	ldr	r3, [r7, #0]
 8016cba:	2212      	movs	r2, #18
 8016cbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016cbe:	4b03      	ldr	r3, [pc, #12]	; (8016ccc <USBD_FS_DeviceDescriptor+0x20>)
}
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	370c      	adds	r7, #12
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cca:	4770      	bx	lr
 8016ccc:	20000164 	.word	0x20000164

08016cd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016cd0:	b480      	push	{r7}
 8016cd2:	b083      	sub	sp, #12
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	6039      	str	r1, [r7, #0]
 8016cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016cdc:	683b      	ldr	r3, [r7, #0]
 8016cde:	2204      	movs	r2, #4
 8016ce0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016ce2:	4b03      	ldr	r3, [pc, #12]	; (8016cf0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	370c      	adds	r7, #12
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cee:	4770      	bx	lr
 8016cf0:	20000178 	.word	0x20000178

08016cf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b082      	sub	sp, #8
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	6039      	str	r1, [r7, #0]
 8016cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016d00:	79fb      	ldrb	r3, [r7, #7]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d105      	bne.n	8016d12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016d06:	683a      	ldr	r2, [r7, #0]
 8016d08:	4907      	ldr	r1, [pc, #28]	; (8016d28 <USBD_FS_ProductStrDescriptor+0x34>)
 8016d0a:	4808      	ldr	r0, [pc, #32]	; (8016d2c <USBD_FS_ProductStrDescriptor+0x38>)
 8016d0c:	f7f1 fb11 	bl	8008332 <USBD_GetString>
 8016d10:	e004      	b.n	8016d1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016d12:	683a      	ldr	r2, [r7, #0]
 8016d14:	4904      	ldr	r1, [pc, #16]	; (8016d28 <USBD_FS_ProductStrDescriptor+0x34>)
 8016d16:	4805      	ldr	r0, [pc, #20]	; (8016d2c <USBD_FS_ProductStrDescriptor+0x38>)
 8016d18:	f7f1 fb0b 	bl	8008332 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016d1c:	4b02      	ldr	r3, [pc, #8]	; (8016d28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016d1e:	4618      	mov	r0, r3
 8016d20:	3708      	adds	r7, #8
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd80      	pop	{r7, pc}
 8016d26:	bf00      	nop
 8016d28:	20008020 	.word	0x20008020
 8016d2c:	0801c034 	.word	0x0801c034

08016d30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d30:	b580      	push	{r7, lr}
 8016d32:	b082      	sub	sp, #8
 8016d34:	af00      	add	r7, sp, #0
 8016d36:	4603      	mov	r3, r0
 8016d38:	6039      	str	r1, [r7, #0]
 8016d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016d3c:	683a      	ldr	r2, [r7, #0]
 8016d3e:	4904      	ldr	r1, [pc, #16]	; (8016d50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016d40:	4804      	ldr	r0, [pc, #16]	; (8016d54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016d42:	f7f1 faf6 	bl	8008332 <USBD_GetString>
  return USBD_StrDesc;
 8016d46:	4b02      	ldr	r3, [pc, #8]	; (8016d50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3708      	adds	r7, #8
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}
 8016d50:	20008020 	.word	0x20008020
 8016d54:	0801c04c 	.word	0x0801c04c

08016d58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	4603      	mov	r3, r0
 8016d60:	6039      	str	r1, [r7, #0]
 8016d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016d64:	683b      	ldr	r3, [r7, #0]
 8016d66:	221a      	movs	r2, #26
 8016d68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016d6a:	f000 f843 	bl	8016df4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016d6e:	4b02      	ldr	r3, [pc, #8]	; (8016d78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	3708      	adds	r7, #8
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	2000017c 	.word	0x2000017c

08016d7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b082      	sub	sp, #8
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	4603      	mov	r3, r0
 8016d84:	6039      	str	r1, [r7, #0]
 8016d86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016d88:	79fb      	ldrb	r3, [r7, #7]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d105      	bne.n	8016d9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016d8e:	683a      	ldr	r2, [r7, #0]
 8016d90:	4907      	ldr	r1, [pc, #28]	; (8016db0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016d92:	4808      	ldr	r0, [pc, #32]	; (8016db4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016d94:	f7f1 facd 	bl	8008332 <USBD_GetString>
 8016d98:	e004      	b.n	8016da4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016d9a:	683a      	ldr	r2, [r7, #0]
 8016d9c:	4904      	ldr	r1, [pc, #16]	; (8016db0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016d9e:	4805      	ldr	r0, [pc, #20]	; (8016db4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016da0:	f7f1 fac7 	bl	8008332 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016da4:	4b02      	ldr	r3, [pc, #8]	; (8016db0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016da6:	4618      	mov	r0, r3
 8016da8:	3708      	adds	r7, #8
 8016daa:	46bd      	mov	sp, r7
 8016dac:	bd80      	pop	{r7, pc}
 8016dae:	bf00      	nop
 8016db0:	20008020 	.word	0x20008020
 8016db4:	0801c060 	.word	0x0801c060

08016db8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b082      	sub	sp, #8
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	6039      	str	r1, [r7, #0]
 8016dc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016dc4:	79fb      	ldrb	r3, [r7, #7]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d105      	bne.n	8016dd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016dca:	683a      	ldr	r2, [r7, #0]
 8016dcc:	4907      	ldr	r1, [pc, #28]	; (8016dec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016dce:	4808      	ldr	r0, [pc, #32]	; (8016df0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016dd0:	f7f1 faaf 	bl	8008332 <USBD_GetString>
 8016dd4:	e004      	b.n	8016de0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016dd6:	683a      	ldr	r2, [r7, #0]
 8016dd8:	4904      	ldr	r1, [pc, #16]	; (8016dec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016dda:	4805      	ldr	r0, [pc, #20]	; (8016df0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016ddc:	f7f1 faa9 	bl	8008332 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016de0:	4b02      	ldr	r3, [pc, #8]	; (8016dec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	3708      	adds	r7, #8
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}
 8016dea:	bf00      	nop
 8016dec:	20008020 	.word	0x20008020
 8016df0:	0801c06c 	.word	0x0801c06c

08016df4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b084      	sub	sp, #16
 8016df8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016dfa:	4b0f      	ldr	r3, [pc, #60]	; (8016e38 <Get_SerialNum+0x44>)
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016e00:	4b0e      	ldr	r3, [pc, #56]	; (8016e3c <Get_SerialNum+0x48>)
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016e06:	4b0e      	ldr	r3, [pc, #56]	; (8016e40 <Get_SerialNum+0x4c>)
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016e0c:	68fa      	ldr	r2, [r7, #12]
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	4413      	add	r3, r2
 8016e12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d009      	beq.n	8016e2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016e1a:	2208      	movs	r2, #8
 8016e1c:	4909      	ldr	r1, [pc, #36]	; (8016e44 <Get_SerialNum+0x50>)
 8016e1e:	68f8      	ldr	r0, [r7, #12]
 8016e20:	f000 f814 	bl	8016e4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016e24:	2204      	movs	r2, #4
 8016e26:	4908      	ldr	r1, [pc, #32]	; (8016e48 <Get_SerialNum+0x54>)
 8016e28:	68b8      	ldr	r0, [r7, #8]
 8016e2a:	f000 f80f 	bl	8016e4c <IntToUnicode>
  }
}
 8016e2e:	bf00      	nop
 8016e30:	3710      	adds	r7, #16
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
 8016e36:	bf00      	nop
 8016e38:	1fff7a10 	.word	0x1fff7a10
 8016e3c:	1fff7a14 	.word	0x1fff7a14
 8016e40:	1fff7a18 	.word	0x1fff7a18
 8016e44:	2000017e 	.word	0x2000017e
 8016e48:	2000018e 	.word	0x2000018e

08016e4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016e4c:	b480      	push	{r7}
 8016e4e:	b087      	sub	sp, #28
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	60f8      	str	r0, [r7, #12]
 8016e54:	60b9      	str	r1, [r7, #8]
 8016e56:	4613      	mov	r3, r2
 8016e58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016e5e:	2300      	movs	r3, #0
 8016e60:	75fb      	strb	r3, [r7, #23]
 8016e62:	e027      	b.n	8016eb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	0f1b      	lsrs	r3, r3, #28
 8016e68:	2b09      	cmp	r3, #9
 8016e6a:	d80b      	bhi.n	8016e84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	0f1b      	lsrs	r3, r3, #28
 8016e70:	b2da      	uxtb	r2, r3
 8016e72:	7dfb      	ldrb	r3, [r7, #23]
 8016e74:	005b      	lsls	r3, r3, #1
 8016e76:	4619      	mov	r1, r3
 8016e78:	68bb      	ldr	r3, [r7, #8]
 8016e7a:	440b      	add	r3, r1
 8016e7c:	3230      	adds	r2, #48	; 0x30
 8016e7e:	b2d2      	uxtb	r2, r2
 8016e80:	701a      	strb	r2, [r3, #0]
 8016e82:	e00a      	b.n	8016e9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	0f1b      	lsrs	r3, r3, #28
 8016e88:	b2da      	uxtb	r2, r3
 8016e8a:	7dfb      	ldrb	r3, [r7, #23]
 8016e8c:	005b      	lsls	r3, r3, #1
 8016e8e:	4619      	mov	r1, r3
 8016e90:	68bb      	ldr	r3, [r7, #8]
 8016e92:	440b      	add	r3, r1
 8016e94:	3237      	adds	r2, #55	; 0x37
 8016e96:	b2d2      	uxtb	r2, r2
 8016e98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	011b      	lsls	r3, r3, #4
 8016e9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016ea0:	7dfb      	ldrb	r3, [r7, #23]
 8016ea2:	005b      	lsls	r3, r3, #1
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	68ba      	ldr	r2, [r7, #8]
 8016ea8:	4413      	add	r3, r2
 8016eaa:	2200      	movs	r2, #0
 8016eac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016eae:	7dfb      	ldrb	r3, [r7, #23]
 8016eb0:	3301      	adds	r3, #1
 8016eb2:	75fb      	strb	r3, [r7, #23]
 8016eb4:	7dfa      	ldrb	r2, [r7, #23]
 8016eb6:	79fb      	ldrb	r3, [r7, #7]
 8016eb8:	429a      	cmp	r2, r3
 8016eba:	d3d3      	bcc.n	8016e64 <IntToUnicode+0x18>
  }
}
 8016ebc:	bf00      	nop
 8016ebe:	bf00      	nop
 8016ec0:	371c      	adds	r7, #28
 8016ec2:	46bd      	mov	sp, r7
 8016ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec8:	4770      	bx	lr
	...

08016ecc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016ecc:	b580      	push	{r7, lr}
 8016ece:	b08a      	sub	sp, #40	; 0x28
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016ed4:	f107 0314 	add.w	r3, r7, #20
 8016ed8:	2200      	movs	r2, #0
 8016eda:	601a      	str	r2, [r3, #0]
 8016edc:	605a      	str	r2, [r3, #4]
 8016ede:	609a      	str	r2, [r3, #8]
 8016ee0:	60da      	str	r2, [r3, #12]
 8016ee2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016eec:	d13a      	bne.n	8016f64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016eee:	2300      	movs	r3, #0
 8016ef0:	613b      	str	r3, [r7, #16]
 8016ef2:	4b1e      	ldr	r3, [pc, #120]	; (8016f6c <HAL_PCD_MspInit+0xa0>)
 8016ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ef6:	4a1d      	ldr	r2, [pc, #116]	; (8016f6c <HAL_PCD_MspInit+0xa0>)
 8016ef8:	f043 0301 	orr.w	r3, r3, #1
 8016efc:	6313      	str	r3, [r2, #48]	; 0x30
 8016efe:	4b1b      	ldr	r3, [pc, #108]	; (8016f6c <HAL_PCD_MspInit+0xa0>)
 8016f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f02:	f003 0301 	and.w	r3, r3, #1
 8016f06:	613b      	str	r3, [r7, #16]
 8016f08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016f0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016f10:	2302      	movs	r3, #2
 8016f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016f14:	2300      	movs	r3, #0
 8016f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016f18:	2303      	movs	r3, #3
 8016f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016f1c:	230a      	movs	r3, #10
 8016f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016f20:	f107 0314 	add.w	r3, r7, #20
 8016f24:	4619      	mov	r1, r3
 8016f26:	4812      	ldr	r0, [pc, #72]	; (8016f70 <HAL_PCD_MspInit+0xa4>)
 8016f28:	f7eb fb50 	bl	80025cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016f2c:	4b0f      	ldr	r3, [pc, #60]	; (8016f6c <HAL_PCD_MspInit+0xa0>)
 8016f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f30:	4a0e      	ldr	r2, [pc, #56]	; (8016f6c <HAL_PCD_MspInit+0xa0>)
 8016f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f36:	6353      	str	r3, [r2, #52]	; 0x34
 8016f38:	2300      	movs	r3, #0
 8016f3a:	60fb      	str	r3, [r7, #12]
 8016f3c:	4b0b      	ldr	r3, [pc, #44]	; (8016f6c <HAL_PCD_MspInit+0xa0>)
 8016f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f40:	4a0a      	ldr	r2, [pc, #40]	; (8016f6c <HAL_PCD_MspInit+0xa0>)
 8016f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016f46:	6453      	str	r3, [r2, #68]	; 0x44
 8016f48:	4b08      	ldr	r3, [pc, #32]	; (8016f6c <HAL_PCD_MspInit+0xa0>)
 8016f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016f50:	60fb      	str	r3, [r7, #12]
 8016f52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016f54:	2200      	movs	r2, #0
 8016f56:	2100      	movs	r1, #0
 8016f58:	2043      	movs	r0, #67	; 0x43
 8016f5a:	f7ea f954 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016f5e:	2043      	movs	r0, #67	; 0x43
 8016f60:	f7ea f96d 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016f64:	bf00      	nop
 8016f66:	3728      	adds	r7, #40	; 0x28
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	bd80      	pop	{r7, pc}
 8016f6c:	40023800 	.word	0x40023800
 8016f70:	40020000 	.word	0x40020000

08016f74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b082      	sub	sp, #8
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016f88:	4619      	mov	r1, r3
 8016f8a:	4610      	mov	r0, r2
 8016f8c:	f7f0 f9ea 	bl	8007364 <USBD_LL_SetupStage>
}
 8016f90:	bf00      	nop
 8016f92:	3708      	adds	r7, #8
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd80      	pop	{r7, pc}

08016f98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b082      	sub	sp, #8
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
 8016fa0:	460b      	mov	r3, r1
 8016fa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016faa:	78fa      	ldrb	r2, [r7, #3]
 8016fac:	6879      	ldr	r1, [r7, #4]
 8016fae:	4613      	mov	r3, r2
 8016fb0:	00db      	lsls	r3, r3, #3
 8016fb2:	1a9b      	subs	r3, r3, r2
 8016fb4:	009b      	lsls	r3, r3, #2
 8016fb6:	440b      	add	r3, r1
 8016fb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016fbc:	681a      	ldr	r2, [r3, #0]
 8016fbe:	78fb      	ldrb	r3, [r7, #3]
 8016fc0:	4619      	mov	r1, r3
 8016fc2:	f7f0 fa24 	bl	800740e <USBD_LL_DataOutStage>
}
 8016fc6:	bf00      	nop
 8016fc8:	3708      	adds	r7, #8
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	bd80      	pop	{r7, pc}

08016fce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016fce:	b580      	push	{r7, lr}
 8016fd0:	b082      	sub	sp, #8
 8016fd2:	af00      	add	r7, sp, #0
 8016fd4:	6078      	str	r0, [r7, #4]
 8016fd6:	460b      	mov	r3, r1
 8016fd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016fe0:	78fa      	ldrb	r2, [r7, #3]
 8016fe2:	6879      	ldr	r1, [r7, #4]
 8016fe4:	4613      	mov	r3, r2
 8016fe6:	00db      	lsls	r3, r3, #3
 8016fe8:	1a9b      	subs	r3, r3, r2
 8016fea:	009b      	lsls	r3, r3, #2
 8016fec:	440b      	add	r3, r1
 8016fee:	3348      	adds	r3, #72	; 0x48
 8016ff0:	681a      	ldr	r2, [r3, #0]
 8016ff2:	78fb      	ldrb	r3, [r7, #3]
 8016ff4:	4619      	mov	r1, r3
 8016ff6:	f7f0 fa6d 	bl	80074d4 <USBD_LL_DataInStage>
}
 8016ffa:	bf00      	nop
 8016ffc:	3708      	adds	r7, #8
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bd80      	pop	{r7, pc}

08017002 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017002:	b580      	push	{r7, lr}
 8017004:	b082      	sub	sp, #8
 8017006:	af00      	add	r7, sp, #0
 8017008:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017010:	4618      	mov	r0, r3
 8017012:	f7f0 fb81 	bl	8007718 <USBD_LL_SOF>
}
 8017016:	bf00      	nop
 8017018:	3708      	adds	r7, #8
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}

0801701e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801701e:	b580      	push	{r7, lr}
 8017020:	b084      	sub	sp, #16
 8017022:	af00      	add	r7, sp, #0
 8017024:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017026:	2301      	movs	r3, #1
 8017028:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	68db      	ldr	r3, [r3, #12]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d102      	bne.n	8017038 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017032:	2300      	movs	r3, #0
 8017034:	73fb      	strb	r3, [r7, #15]
 8017036:	e008      	b.n	801704a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	68db      	ldr	r3, [r3, #12]
 801703c:	2b02      	cmp	r3, #2
 801703e:	d102      	bne.n	8017046 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017040:	2301      	movs	r3, #1
 8017042:	73fb      	strb	r3, [r7, #15]
 8017044:	e001      	b.n	801704a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017046:	f7e9 fdbb 	bl	8000bc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017050:	7bfa      	ldrb	r2, [r7, #15]
 8017052:	4611      	mov	r1, r2
 8017054:	4618      	mov	r0, r3
 8017056:	f7f0 fb21 	bl	800769c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017060:	4618      	mov	r0, r3
 8017062:	f7f0 facd 	bl	8007600 <USBD_LL_Reset>
}
 8017066:	bf00      	nop
 8017068:	3710      	adds	r7, #16
 801706a:	46bd      	mov	sp, r7
 801706c:	bd80      	pop	{r7, pc}
	...

08017070 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b082      	sub	sp, #8
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801707e:	4618      	mov	r0, r3
 8017080:	f7f0 fb1c 	bl	80076bc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	687a      	ldr	r2, [r7, #4]
 8017090:	6812      	ldr	r2, [r2, #0]
 8017092:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017096:	f043 0301 	orr.w	r3, r3, #1
 801709a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	6a1b      	ldr	r3, [r3, #32]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d005      	beq.n	80170b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80170a4:	4b04      	ldr	r3, [pc, #16]	; (80170b8 <HAL_PCD_SuspendCallback+0x48>)
 80170a6:	691b      	ldr	r3, [r3, #16]
 80170a8:	4a03      	ldr	r2, [pc, #12]	; (80170b8 <HAL_PCD_SuspendCallback+0x48>)
 80170aa:	f043 0306 	orr.w	r3, r3, #6
 80170ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80170b0:	bf00      	nop
 80170b2:	3708      	adds	r7, #8
 80170b4:	46bd      	mov	sp, r7
 80170b6:	bd80      	pop	{r7, pc}
 80170b8:	e000ed00 	.word	0xe000ed00

080170bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80170bc:	b580      	push	{r7, lr}
 80170be:	b082      	sub	sp, #8
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80170ca:	4618      	mov	r0, r3
 80170cc:	f7f0 fb0c 	bl	80076e8 <USBD_LL_Resume>
}
 80170d0:	bf00      	nop
 80170d2:	3708      	adds	r7, #8
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bd80      	pop	{r7, pc}

080170d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80170d8:	b580      	push	{r7, lr}
 80170da:	b082      	sub	sp, #8
 80170dc:	af00      	add	r7, sp, #0
 80170de:	6078      	str	r0, [r7, #4]
 80170e0:	460b      	mov	r3, r1
 80170e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80170ea:	78fa      	ldrb	r2, [r7, #3]
 80170ec:	4611      	mov	r1, r2
 80170ee:	4618      	mov	r0, r3
 80170f0:	f7f0 fb5a 	bl	80077a8 <USBD_LL_IsoOUTIncomplete>
}
 80170f4:	bf00      	nop
 80170f6:	3708      	adds	r7, #8
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}

080170fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b082      	sub	sp, #8
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
 8017104:	460b      	mov	r3, r1
 8017106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801710e:	78fa      	ldrb	r2, [r7, #3]
 8017110:	4611      	mov	r1, r2
 8017112:	4618      	mov	r0, r3
 8017114:	f7f0 fb22 	bl	800775c <USBD_LL_IsoINIncomplete>
}
 8017118:	bf00      	nop
 801711a:	3708      	adds	r7, #8
 801711c:	46bd      	mov	sp, r7
 801711e:	bd80      	pop	{r7, pc}

08017120 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017120:	b580      	push	{r7, lr}
 8017122:	b082      	sub	sp, #8
 8017124:	af00      	add	r7, sp, #0
 8017126:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801712e:	4618      	mov	r0, r3
 8017130:	f7f0 fb60 	bl	80077f4 <USBD_LL_DevConnected>
}
 8017134:	bf00      	nop
 8017136:	3708      	adds	r7, #8
 8017138:	46bd      	mov	sp, r7
 801713a:	bd80      	pop	{r7, pc}

0801713c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b082      	sub	sp, #8
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801714a:	4618      	mov	r0, r3
 801714c:	f7f0 fb5d 	bl	800780a <USBD_LL_DevDisconnected>
}
 8017150:	bf00      	nop
 8017152:	3708      	adds	r7, #8
 8017154:	46bd      	mov	sp, r7
 8017156:	bd80      	pop	{r7, pc}

08017158 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b082      	sub	sp, #8
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	781b      	ldrb	r3, [r3, #0]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d13c      	bne.n	80171e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017168:	4a20      	ldr	r2, [pc, #128]	; (80171ec <USBD_LL_Init+0x94>)
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	4a1e      	ldr	r2, [pc, #120]	; (80171ec <USBD_LL_Init+0x94>)
 8017174:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017178:	4b1c      	ldr	r3, [pc, #112]	; (80171ec <USBD_LL_Init+0x94>)
 801717a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801717e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8017180:	4b1a      	ldr	r3, [pc, #104]	; (80171ec <USBD_LL_Init+0x94>)
 8017182:	2204      	movs	r2, #4
 8017184:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017186:	4b19      	ldr	r3, [pc, #100]	; (80171ec <USBD_LL_Init+0x94>)
 8017188:	2202      	movs	r2, #2
 801718a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801718c:	4b17      	ldr	r3, [pc, #92]	; (80171ec <USBD_LL_Init+0x94>)
 801718e:	2200      	movs	r2, #0
 8017190:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017192:	4b16      	ldr	r3, [pc, #88]	; (80171ec <USBD_LL_Init+0x94>)
 8017194:	2202      	movs	r2, #2
 8017196:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017198:	4b14      	ldr	r3, [pc, #80]	; (80171ec <USBD_LL_Init+0x94>)
 801719a:	2200      	movs	r2, #0
 801719c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801719e:	4b13      	ldr	r3, [pc, #76]	; (80171ec <USBD_LL_Init+0x94>)
 80171a0:	2200      	movs	r2, #0
 80171a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80171a4:	4b11      	ldr	r3, [pc, #68]	; (80171ec <USBD_LL_Init+0x94>)
 80171a6:	2200      	movs	r2, #0
 80171a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80171aa:	4b10      	ldr	r3, [pc, #64]	; (80171ec <USBD_LL_Init+0x94>)
 80171ac:	2200      	movs	r2, #0
 80171ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80171b0:	4b0e      	ldr	r3, [pc, #56]	; (80171ec <USBD_LL_Init+0x94>)
 80171b2:	2200      	movs	r2, #0
 80171b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80171b6:	480d      	ldr	r0, [pc, #52]	; (80171ec <USBD_LL_Init+0x94>)
 80171b8:	f7eb fbd7 	bl	800296a <HAL_PCD_Init>
 80171bc:	4603      	mov	r3, r0
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d001      	beq.n	80171c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80171c2:	f7e9 fcfd 	bl	8000bc0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80171c6:	2180      	movs	r1, #128	; 0x80
 80171c8:	4808      	ldr	r0, [pc, #32]	; (80171ec <USBD_LL_Init+0x94>)
 80171ca:	f7ec fd34 	bl	8003c36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80171ce:	2240      	movs	r2, #64	; 0x40
 80171d0:	2100      	movs	r1, #0
 80171d2:	4806      	ldr	r0, [pc, #24]	; (80171ec <USBD_LL_Init+0x94>)
 80171d4:	f7ec fce8 	bl	8003ba8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80171d8:	2280      	movs	r2, #128	; 0x80
 80171da:	2101      	movs	r1, #1
 80171dc:	4803      	ldr	r0, [pc, #12]	; (80171ec <USBD_LL_Init+0x94>)
 80171de:	f7ec fce3 	bl	8003ba8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80171e2:	2300      	movs	r3, #0
}
 80171e4:	4618      	mov	r0, r3
 80171e6:	3708      	adds	r7, #8
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd80      	pop	{r7, pc}
 80171ec:	20008220 	.word	0x20008220

080171f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b084      	sub	sp, #16
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171f8:	2300      	movs	r3, #0
 80171fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171fc:	2300      	movs	r3, #0
 80171fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017206:	4618      	mov	r0, r3
 8017208:	f7eb fccc 	bl	8002ba4 <HAL_PCD_Start>
 801720c:	4603      	mov	r3, r0
 801720e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017210:	7bfb      	ldrb	r3, [r7, #15]
 8017212:	4618      	mov	r0, r3
 8017214:	f000 f942 	bl	801749c <USBD_Get_USB_Status>
 8017218:	4603      	mov	r3, r0
 801721a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801721c:	7bbb      	ldrb	r3, [r7, #14]
}
 801721e:	4618      	mov	r0, r3
 8017220:	3710      	adds	r7, #16
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}

08017226 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017226:	b580      	push	{r7, lr}
 8017228:	b084      	sub	sp, #16
 801722a:	af00      	add	r7, sp, #0
 801722c:	6078      	str	r0, [r7, #4]
 801722e:	4608      	mov	r0, r1
 8017230:	4611      	mov	r1, r2
 8017232:	461a      	mov	r2, r3
 8017234:	4603      	mov	r3, r0
 8017236:	70fb      	strb	r3, [r7, #3]
 8017238:	460b      	mov	r3, r1
 801723a:	70bb      	strb	r3, [r7, #2]
 801723c:	4613      	mov	r3, r2
 801723e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017240:	2300      	movs	r3, #0
 8017242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017244:	2300      	movs	r3, #0
 8017246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801724e:	78bb      	ldrb	r3, [r7, #2]
 8017250:	883a      	ldrh	r2, [r7, #0]
 8017252:	78f9      	ldrb	r1, [r7, #3]
 8017254:	f7ec f8b0 	bl	80033b8 <HAL_PCD_EP_Open>
 8017258:	4603      	mov	r3, r0
 801725a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801725c:	7bfb      	ldrb	r3, [r7, #15]
 801725e:	4618      	mov	r0, r3
 8017260:	f000 f91c 	bl	801749c <USBD_Get_USB_Status>
 8017264:	4603      	mov	r3, r0
 8017266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017268:	7bbb      	ldrb	r3, [r7, #14]
}
 801726a:	4618      	mov	r0, r3
 801726c:	3710      	adds	r7, #16
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}

08017272 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017272:	b580      	push	{r7, lr}
 8017274:	b084      	sub	sp, #16
 8017276:	af00      	add	r7, sp, #0
 8017278:	6078      	str	r0, [r7, #4]
 801727a:	460b      	mov	r3, r1
 801727c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801727e:	2300      	movs	r3, #0
 8017280:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017282:	2300      	movs	r3, #0
 8017284:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801728c:	78fa      	ldrb	r2, [r7, #3]
 801728e:	4611      	mov	r1, r2
 8017290:	4618      	mov	r0, r3
 8017292:	f7ec f8f9 	bl	8003488 <HAL_PCD_EP_Close>
 8017296:	4603      	mov	r3, r0
 8017298:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801729a:	7bfb      	ldrb	r3, [r7, #15]
 801729c:	4618      	mov	r0, r3
 801729e:	f000 f8fd 	bl	801749c <USBD_Get_USB_Status>
 80172a2:	4603      	mov	r3, r0
 80172a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80172a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	3710      	adds	r7, #16
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd80      	pop	{r7, pc}

080172b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b084      	sub	sp, #16
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	6078      	str	r0, [r7, #4]
 80172b8:	460b      	mov	r3, r1
 80172ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80172bc:	2300      	movs	r3, #0
 80172be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80172c0:	2300      	movs	r3, #0
 80172c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80172ca:	78fa      	ldrb	r2, [r7, #3]
 80172cc:	4611      	mov	r1, r2
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7ec f9d1 	bl	8003676 <HAL_PCD_EP_SetStall>
 80172d4:	4603      	mov	r3, r0
 80172d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80172d8:	7bfb      	ldrb	r3, [r7, #15]
 80172da:	4618      	mov	r0, r3
 80172dc:	f000 f8de 	bl	801749c <USBD_Get_USB_Status>
 80172e0:	4603      	mov	r3, r0
 80172e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80172e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80172e6:	4618      	mov	r0, r3
 80172e8:	3710      	adds	r7, #16
 80172ea:	46bd      	mov	sp, r7
 80172ec:	bd80      	pop	{r7, pc}

080172ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80172ee:	b580      	push	{r7, lr}
 80172f0:	b084      	sub	sp, #16
 80172f2:	af00      	add	r7, sp, #0
 80172f4:	6078      	str	r0, [r7, #4]
 80172f6:	460b      	mov	r3, r1
 80172f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80172fa:	2300      	movs	r3, #0
 80172fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80172fe:	2300      	movs	r3, #0
 8017300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017308:	78fa      	ldrb	r2, [r7, #3]
 801730a:	4611      	mov	r1, r2
 801730c:	4618      	mov	r0, r3
 801730e:	f7ec fa16 	bl	800373e <HAL_PCD_EP_ClrStall>
 8017312:	4603      	mov	r3, r0
 8017314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017316:	7bfb      	ldrb	r3, [r7, #15]
 8017318:	4618      	mov	r0, r3
 801731a:	f000 f8bf 	bl	801749c <USBD_Get_USB_Status>
 801731e:	4603      	mov	r3, r0
 8017320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017322:	7bbb      	ldrb	r3, [r7, #14]
}
 8017324:	4618      	mov	r0, r3
 8017326:	3710      	adds	r7, #16
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}

0801732c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801732c:	b480      	push	{r7}
 801732e:	b085      	sub	sp, #20
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	460b      	mov	r3, r1
 8017336:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801733e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017344:	2b00      	cmp	r3, #0
 8017346:	da0b      	bge.n	8017360 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017348:	78fb      	ldrb	r3, [r7, #3]
 801734a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801734e:	68f9      	ldr	r1, [r7, #12]
 8017350:	4613      	mov	r3, r2
 8017352:	00db      	lsls	r3, r3, #3
 8017354:	1a9b      	subs	r3, r3, r2
 8017356:	009b      	lsls	r3, r3, #2
 8017358:	440b      	add	r3, r1
 801735a:	333e      	adds	r3, #62	; 0x3e
 801735c:	781b      	ldrb	r3, [r3, #0]
 801735e:	e00b      	b.n	8017378 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017360:	78fb      	ldrb	r3, [r7, #3]
 8017362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017366:	68f9      	ldr	r1, [r7, #12]
 8017368:	4613      	mov	r3, r2
 801736a:	00db      	lsls	r3, r3, #3
 801736c:	1a9b      	subs	r3, r3, r2
 801736e:	009b      	lsls	r3, r3, #2
 8017370:	440b      	add	r3, r1
 8017372:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017376:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017378:	4618      	mov	r0, r3
 801737a:	3714      	adds	r7, #20
 801737c:	46bd      	mov	sp, r7
 801737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017382:	4770      	bx	lr

08017384 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b084      	sub	sp, #16
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
 801738c:	460b      	mov	r3, r1
 801738e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017390:	2300      	movs	r3, #0
 8017392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017394:	2300      	movs	r3, #0
 8017396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801739e:	78fa      	ldrb	r2, [r7, #3]
 80173a0:	4611      	mov	r1, r2
 80173a2:	4618      	mov	r0, r3
 80173a4:	f7eb ffe3 	bl	800336e <HAL_PCD_SetAddress>
 80173a8:	4603      	mov	r3, r0
 80173aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173ac:	7bfb      	ldrb	r3, [r7, #15]
 80173ae:	4618      	mov	r0, r3
 80173b0:	f000 f874 	bl	801749c <USBD_Get_USB_Status>
 80173b4:	4603      	mov	r3, r0
 80173b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80173ba:	4618      	mov	r0, r3
 80173bc:	3710      	adds	r7, #16
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}

080173c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80173c2:	b580      	push	{r7, lr}
 80173c4:	b086      	sub	sp, #24
 80173c6:	af00      	add	r7, sp, #0
 80173c8:	60f8      	str	r0, [r7, #12]
 80173ca:	607a      	str	r2, [r7, #4]
 80173cc:	603b      	str	r3, [r7, #0]
 80173ce:	460b      	mov	r3, r1
 80173d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173d2:	2300      	movs	r3, #0
 80173d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173d6:	2300      	movs	r3, #0
 80173d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80173e0:	7af9      	ldrb	r1, [r7, #11]
 80173e2:	683b      	ldr	r3, [r7, #0]
 80173e4:	687a      	ldr	r2, [r7, #4]
 80173e6:	f7ec f8fc 	bl	80035e2 <HAL_PCD_EP_Transmit>
 80173ea:	4603      	mov	r3, r0
 80173ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173ee:	7dfb      	ldrb	r3, [r7, #23]
 80173f0:	4618      	mov	r0, r3
 80173f2:	f000 f853 	bl	801749c <USBD_Get_USB_Status>
 80173f6:	4603      	mov	r3, r0
 80173f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80173fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80173fc:	4618      	mov	r0, r3
 80173fe:	3718      	adds	r7, #24
 8017400:	46bd      	mov	sp, r7
 8017402:	bd80      	pop	{r7, pc}

08017404 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b086      	sub	sp, #24
 8017408:	af00      	add	r7, sp, #0
 801740a:	60f8      	str	r0, [r7, #12]
 801740c:	607a      	str	r2, [r7, #4]
 801740e:	603b      	str	r3, [r7, #0]
 8017410:	460b      	mov	r3, r1
 8017412:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017414:	2300      	movs	r3, #0
 8017416:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017418:	2300      	movs	r3, #0
 801741a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017422:	7af9      	ldrb	r1, [r7, #11]
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	687a      	ldr	r2, [r7, #4]
 8017428:	f7ec f878 	bl	800351c <HAL_PCD_EP_Receive>
 801742c:	4603      	mov	r3, r0
 801742e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017430:	7dfb      	ldrb	r3, [r7, #23]
 8017432:	4618      	mov	r0, r3
 8017434:	f000 f832 	bl	801749c <USBD_Get_USB_Status>
 8017438:	4603      	mov	r3, r0
 801743a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801743c:	7dbb      	ldrb	r3, [r7, #22]
}
 801743e:	4618      	mov	r0, r3
 8017440:	3718      	adds	r7, #24
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}

08017446 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017446:	b580      	push	{r7, lr}
 8017448:	b082      	sub	sp, #8
 801744a:	af00      	add	r7, sp, #0
 801744c:	6078      	str	r0, [r7, #4]
 801744e:	460b      	mov	r3, r1
 8017450:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017458:	78fa      	ldrb	r2, [r7, #3]
 801745a:	4611      	mov	r1, r2
 801745c:	4618      	mov	r0, r3
 801745e:	f7ec f8a8 	bl	80035b2 <HAL_PCD_EP_GetRxCount>
 8017462:	4603      	mov	r3, r0
}
 8017464:	4618      	mov	r0, r3
 8017466:	3708      	adds	r7, #8
 8017468:	46bd      	mov	sp, r7
 801746a:	bd80      	pop	{r7, pc}

0801746c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801746c:	b480      	push	{r7}
 801746e:	b083      	sub	sp, #12
 8017470:	af00      	add	r7, sp, #0
 8017472:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017474:	4b03      	ldr	r3, [pc, #12]	; (8017484 <USBD_static_malloc+0x18>)
}
 8017476:	4618      	mov	r0, r3
 8017478:	370c      	adds	r7, #12
 801747a:	46bd      	mov	sp, r7
 801747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017480:	4770      	bx	lr
 8017482:	bf00      	nop
 8017484:	200003a0 	.word	0x200003a0

08017488 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017488:	b480      	push	{r7}
 801748a:	b083      	sub	sp, #12
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]

}
 8017490:	bf00      	nop
 8017492:	370c      	adds	r7, #12
 8017494:	46bd      	mov	sp, r7
 8017496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801749a:	4770      	bx	lr

0801749c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801749c:	b480      	push	{r7}
 801749e:	b085      	sub	sp, #20
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	4603      	mov	r3, r0
 80174a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174a6:	2300      	movs	r3, #0
 80174a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80174aa:	79fb      	ldrb	r3, [r7, #7]
 80174ac:	2b03      	cmp	r3, #3
 80174ae:	d817      	bhi.n	80174e0 <USBD_Get_USB_Status+0x44>
 80174b0:	a201      	add	r2, pc, #4	; (adr r2, 80174b8 <USBD_Get_USB_Status+0x1c>)
 80174b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174b6:	bf00      	nop
 80174b8:	080174c9 	.word	0x080174c9
 80174bc:	080174cf 	.word	0x080174cf
 80174c0:	080174d5 	.word	0x080174d5
 80174c4:	080174db 	.word	0x080174db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80174c8:	2300      	movs	r3, #0
 80174ca:	73fb      	strb	r3, [r7, #15]
    break;
 80174cc:	e00b      	b.n	80174e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80174ce:	2303      	movs	r3, #3
 80174d0:	73fb      	strb	r3, [r7, #15]
    break;
 80174d2:	e008      	b.n	80174e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80174d4:	2301      	movs	r3, #1
 80174d6:	73fb      	strb	r3, [r7, #15]
    break;
 80174d8:	e005      	b.n	80174e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80174da:	2303      	movs	r3, #3
 80174dc:	73fb      	strb	r3, [r7, #15]
    break;
 80174de:	e002      	b.n	80174e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80174e0:	2303      	movs	r3, #3
 80174e2:	73fb      	strb	r3, [r7, #15]
    break;
 80174e4:	bf00      	nop
  }
  return usb_status;
 80174e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80174e8:	4618      	mov	r0, r3
 80174ea:	3714      	adds	r7, #20
 80174ec:	46bd      	mov	sp, r7
 80174ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f2:	4770      	bx	lr

080174f4 <__libc_init_array>:
 80174f4:	b570      	push	{r4, r5, r6, lr}
 80174f6:	4d0d      	ldr	r5, [pc, #52]	; (801752c <__libc_init_array+0x38>)
 80174f8:	4c0d      	ldr	r4, [pc, #52]	; (8017530 <__libc_init_array+0x3c>)
 80174fa:	1b64      	subs	r4, r4, r5
 80174fc:	10a4      	asrs	r4, r4, #2
 80174fe:	2600      	movs	r6, #0
 8017500:	42a6      	cmp	r6, r4
 8017502:	d109      	bne.n	8017518 <__libc_init_array+0x24>
 8017504:	4d0b      	ldr	r5, [pc, #44]	; (8017534 <__libc_init_array+0x40>)
 8017506:	4c0c      	ldr	r4, [pc, #48]	; (8017538 <__libc_init_array+0x44>)
 8017508:	f001 fa1a 	bl	8018940 <_init>
 801750c:	1b64      	subs	r4, r4, r5
 801750e:	10a4      	asrs	r4, r4, #2
 8017510:	2600      	movs	r6, #0
 8017512:	42a6      	cmp	r6, r4
 8017514:	d105      	bne.n	8017522 <__libc_init_array+0x2e>
 8017516:	bd70      	pop	{r4, r5, r6, pc}
 8017518:	f855 3b04 	ldr.w	r3, [r5], #4
 801751c:	4798      	blx	r3
 801751e:	3601      	adds	r6, #1
 8017520:	e7ee      	b.n	8017500 <__libc_init_array+0xc>
 8017522:	f855 3b04 	ldr.w	r3, [r5], #4
 8017526:	4798      	blx	r3
 8017528:	3601      	adds	r6, #1
 801752a:	e7f2      	b.n	8017512 <__libc_init_array+0x1e>
 801752c:	0801c2d8 	.word	0x0801c2d8
 8017530:	0801c2d8 	.word	0x0801c2d8
 8017534:	0801c2d8 	.word	0x0801c2d8
 8017538:	0801c2dc 	.word	0x0801c2dc

0801753c <memcmp>:
 801753c:	b530      	push	{r4, r5, lr}
 801753e:	3901      	subs	r1, #1
 8017540:	2400      	movs	r4, #0
 8017542:	42a2      	cmp	r2, r4
 8017544:	d101      	bne.n	801754a <memcmp+0xe>
 8017546:	2000      	movs	r0, #0
 8017548:	e005      	b.n	8017556 <memcmp+0x1a>
 801754a:	5d03      	ldrb	r3, [r0, r4]
 801754c:	3401      	adds	r4, #1
 801754e:	5d0d      	ldrb	r5, [r1, r4]
 8017550:	42ab      	cmp	r3, r5
 8017552:	d0f6      	beq.n	8017542 <memcmp+0x6>
 8017554:	1b58      	subs	r0, r3, r5
 8017556:	bd30      	pop	{r4, r5, pc}

08017558 <memcpy>:
 8017558:	440a      	add	r2, r1
 801755a:	4291      	cmp	r1, r2
 801755c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017560:	d100      	bne.n	8017564 <memcpy+0xc>
 8017562:	4770      	bx	lr
 8017564:	b510      	push	{r4, lr}
 8017566:	f811 4b01 	ldrb.w	r4, [r1], #1
 801756a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801756e:	4291      	cmp	r1, r2
 8017570:	d1f9      	bne.n	8017566 <memcpy+0xe>
 8017572:	bd10      	pop	{r4, pc}

08017574 <memmove>:
 8017574:	4288      	cmp	r0, r1
 8017576:	b510      	push	{r4, lr}
 8017578:	eb01 0402 	add.w	r4, r1, r2
 801757c:	d902      	bls.n	8017584 <memmove+0x10>
 801757e:	4284      	cmp	r4, r0
 8017580:	4623      	mov	r3, r4
 8017582:	d807      	bhi.n	8017594 <memmove+0x20>
 8017584:	1e43      	subs	r3, r0, #1
 8017586:	42a1      	cmp	r1, r4
 8017588:	d008      	beq.n	801759c <memmove+0x28>
 801758a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801758e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017592:	e7f8      	b.n	8017586 <memmove+0x12>
 8017594:	4402      	add	r2, r0
 8017596:	4601      	mov	r1, r0
 8017598:	428a      	cmp	r2, r1
 801759a:	d100      	bne.n	801759e <memmove+0x2a>
 801759c:	bd10      	pop	{r4, pc}
 801759e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80175a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80175a6:	e7f7      	b.n	8017598 <memmove+0x24>

080175a8 <memset>:
 80175a8:	4402      	add	r2, r0
 80175aa:	4603      	mov	r3, r0
 80175ac:	4293      	cmp	r3, r2
 80175ae:	d100      	bne.n	80175b2 <memset+0xa>
 80175b0:	4770      	bx	lr
 80175b2:	f803 1b01 	strb.w	r1, [r3], #1
 80175b6:	e7f9      	b.n	80175ac <memset+0x4>

080175b8 <iprintf>:
 80175b8:	b40f      	push	{r0, r1, r2, r3}
 80175ba:	4b0a      	ldr	r3, [pc, #40]	; (80175e4 <iprintf+0x2c>)
 80175bc:	b513      	push	{r0, r1, r4, lr}
 80175be:	681c      	ldr	r4, [r3, #0]
 80175c0:	b124      	cbz	r4, 80175cc <iprintf+0x14>
 80175c2:	69a3      	ldr	r3, [r4, #24]
 80175c4:	b913      	cbnz	r3, 80175cc <iprintf+0x14>
 80175c6:	4620      	mov	r0, r4
 80175c8:	f000 f8e4 	bl	8017794 <__sinit>
 80175cc:	ab05      	add	r3, sp, #20
 80175ce:	9a04      	ldr	r2, [sp, #16]
 80175d0:	68a1      	ldr	r1, [r4, #8]
 80175d2:	9301      	str	r3, [sp, #4]
 80175d4:	4620      	mov	r0, r4
 80175d6:	f000 fbc7 	bl	8017d68 <_vfiprintf_r>
 80175da:	b002      	add	sp, #8
 80175dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175e0:	b004      	add	sp, #16
 80175e2:	4770      	bx	lr
 80175e4:	20000198 	.word	0x20000198

080175e8 <rand>:
 80175e8:	4b17      	ldr	r3, [pc, #92]	; (8017648 <rand+0x60>)
 80175ea:	b510      	push	{r4, lr}
 80175ec:	681c      	ldr	r4, [r3, #0]
 80175ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80175f0:	b9b3      	cbnz	r3, 8017620 <rand+0x38>
 80175f2:	2018      	movs	r0, #24
 80175f4:	f000 f980 	bl	80178f8 <malloc>
 80175f8:	63a0      	str	r0, [r4, #56]	; 0x38
 80175fa:	b928      	cbnz	r0, 8017608 <rand+0x20>
 80175fc:	4602      	mov	r2, r0
 80175fe:	4b13      	ldr	r3, [pc, #76]	; (801764c <rand+0x64>)
 8017600:	4813      	ldr	r0, [pc, #76]	; (8017650 <rand+0x68>)
 8017602:	214e      	movs	r1, #78	; 0x4e
 8017604:	f000 f850 	bl	80176a8 <__assert_func>
 8017608:	4a12      	ldr	r2, [pc, #72]	; (8017654 <rand+0x6c>)
 801760a:	4b13      	ldr	r3, [pc, #76]	; (8017658 <rand+0x70>)
 801760c:	e9c0 2300 	strd	r2, r3, [r0]
 8017610:	4b12      	ldr	r3, [pc, #72]	; (801765c <rand+0x74>)
 8017612:	6083      	str	r3, [r0, #8]
 8017614:	230b      	movs	r3, #11
 8017616:	8183      	strh	r3, [r0, #12]
 8017618:	2201      	movs	r2, #1
 801761a:	2300      	movs	r3, #0
 801761c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017620:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017622:	480f      	ldr	r0, [pc, #60]	; (8017660 <rand+0x78>)
 8017624:	690a      	ldr	r2, [r1, #16]
 8017626:	694b      	ldr	r3, [r1, #20]
 8017628:	4c0e      	ldr	r4, [pc, #56]	; (8017664 <rand+0x7c>)
 801762a:	4350      	muls	r0, r2
 801762c:	fb04 0003 	mla	r0, r4, r3, r0
 8017630:	fba2 3404 	umull	r3, r4, r2, r4
 8017634:	1c5a      	adds	r2, r3, #1
 8017636:	4404      	add	r4, r0
 8017638:	f144 0000 	adc.w	r0, r4, #0
 801763c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017640:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017644:	bd10      	pop	{r4, pc}
 8017646:	bf00      	nop
 8017648:	20000198 	.word	0x20000198
 801764c:	0801c188 	.word	0x0801c188
 8017650:	0801c19f 	.word	0x0801c19f
 8017654:	abcd330e 	.word	0xabcd330e
 8017658:	e66d1234 	.word	0xe66d1234
 801765c:	0005deec 	.word	0x0005deec
 8017660:	5851f42d 	.word	0x5851f42d
 8017664:	4c957f2d 	.word	0x4c957f2d

08017668 <siprintf>:
 8017668:	b40e      	push	{r1, r2, r3}
 801766a:	b500      	push	{lr}
 801766c:	b09c      	sub	sp, #112	; 0x70
 801766e:	ab1d      	add	r3, sp, #116	; 0x74
 8017670:	9002      	str	r0, [sp, #8]
 8017672:	9006      	str	r0, [sp, #24]
 8017674:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017678:	4809      	ldr	r0, [pc, #36]	; (80176a0 <siprintf+0x38>)
 801767a:	9107      	str	r1, [sp, #28]
 801767c:	9104      	str	r1, [sp, #16]
 801767e:	4909      	ldr	r1, [pc, #36]	; (80176a4 <siprintf+0x3c>)
 8017680:	f853 2b04 	ldr.w	r2, [r3], #4
 8017684:	9105      	str	r1, [sp, #20]
 8017686:	6800      	ldr	r0, [r0, #0]
 8017688:	9301      	str	r3, [sp, #4]
 801768a:	a902      	add	r1, sp, #8
 801768c:	f000 fa42 	bl	8017b14 <_svfiprintf_r>
 8017690:	9b02      	ldr	r3, [sp, #8]
 8017692:	2200      	movs	r2, #0
 8017694:	701a      	strb	r2, [r3, #0]
 8017696:	b01c      	add	sp, #112	; 0x70
 8017698:	f85d eb04 	ldr.w	lr, [sp], #4
 801769c:	b003      	add	sp, #12
 801769e:	4770      	bx	lr
 80176a0:	20000198 	.word	0x20000198
 80176a4:	ffff0208 	.word	0xffff0208

080176a8 <__assert_func>:
 80176a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80176aa:	4614      	mov	r4, r2
 80176ac:	461a      	mov	r2, r3
 80176ae:	4b09      	ldr	r3, [pc, #36]	; (80176d4 <__assert_func+0x2c>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	4605      	mov	r5, r0
 80176b4:	68d8      	ldr	r0, [r3, #12]
 80176b6:	b14c      	cbz	r4, 80176cc <__assert_func+0x24>
 80176b8:	4b07      	ldr	r3, [pc, #28]	; (80176d8 <__assert_func+0x30>)
 80176ba:	9100      	str	r1, [sp, #0]
 80176bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80176c0:	4906      	ldr	r1, [pc, #24]	; (80176dc <__assert_func+0x34>)
 80176c2:	462b      	mov	r3, r5
 80176c4:	f000 f8e4 	bl	8017890 <fiprintf>
 80176c8:	f000 ff38 	bl	801853c <abort>
 80176cc:	4b04      	ldr	r3, [pc, #16]	; (80176e0 <__assert_func+0x38>)
 80176ce:	461c      	mov	r4, r3
 80176d0:	e7f3      	b.n	80176ba <__assert_func+0x12>
 80176d2:	bf00      	nop
 80176d4:	20000198 	.word	0x20000198
 80176d8:	0801c1fe 	.word	0x0801c1fe
 80176dc:	0801c20b 	.word	0x0801c20b
 80176e0:	0801c239 	.word	0x0801c239

080176e4 <std>:
 80176e4:	2300      	movs	r3, #0
 80176e6:	b510      	push	{r4, lr}
 80176e8:	4604      	mov	r4, r0
 80176ea:	e9c0 3300 	strd	r3, r3, [r0]
 80176ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80176f2:	6083      	str	r3, [r0, #8]
 80176f4:	8181      	strh	r1, [r0, #12]
 80176f6:	6643      	str	r3, [r0, #100]	; 0x64
 80176f8:	81c2      	strh	r2, [r0, #14]
 80176fa:	6183      	str	r3, [r0, #24]
 80176fc:	4619      	mov	r1, r3
 80176fe:	2208      	movs	r2, #8
 8017700:	305c      	adds	r0, #92	; 0x5c
 8017702:	f7ff ff51 	bl	80175a8 <memset>
 8017706:	4b05      	ldr	r3, [pc, #20]	; (801771c <std+0x38>)
 8017708:	6263      	str	r3, [r4, #36]	; 0x24
 801770a:	4b05      	ldr	r3, [pc, #20]	; (8017720 <std+0x3c>)
 801770c:	62a3      	str	r3, [r4, #40]	; 0x28
 801770e:	4b05      	ldr	r3, [pc, #20]	; (8017724 <std+0x40>)
 8017710:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017712:	4b05      	ldr	r3, [pc, #20]	; (8017728 <std+0x44>)
 8017714:	6224      	str	r4, [r4, #32]
 8017716:	6323      	str	r3, [r4, #48]	; 0x30
 8017718:	bd10      	pop	{r4, pc}
 801771a:	bf00      	nop
 801771c:	08018311 	.word	0x08018311
 8017720:	08018333 	.word	0x08018333
 8017724:	0801836b 	.word	0x0801836b
 8017728:	0801838f 	.word	0x0801838f

0801772c <_cleanup_r>:
 801772c:	4901      	ldr	r1, [pc, #4]	; (8017734 <_cleanup_r+0x8>)
 801772e:	f000 b8c1 	b.w	80178b4 <_fwalk_reent>
 8017732:	bf00      	nop
 8017734:	08018679 	.word	0x08018679

08017738 <__sfmoreglue>:
 8017738:	b570      	push	{r4, r5, r6, lr}
 801773a:	1e4a      	subs	r2, r1, #1
 801773c:	2568      	movs	r5, #104	; 0x68
 801773e:	4355      	muls	r5, r2
 8017740:	460e      	mov	r6, r1
 8017742:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017746:	f000 f92f 	bl	80179a8 <_malloc_r>
 801774a:	4604      	mov	r4, r0
 801774c:	b140      	cbz	r0, 8017760 <__sfmoreglue+0x28>
 801774e:	2100      	movs	r1, #0
 8017750:	e9c0 1600 	strd	r1, r6, [r0]
 8017754:	300c      	adds	r0, #12
 8017756:	60a0      	str	r0, [r4, #8]
 8017758:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801775c:	f7ff ff24 	bl	80175a8 <memset>
 8017760:	4620      	mov	r0, r4
 8017762:	bd70      	pop	{r4, r5, r6, pc}

08017764 <__sfp_lock_acquire>:
 8017764:	4801      	ldr	r0, [pc, #4]	; (801776c <__sfp_lock_acquire+0x8>)
 8017766:	f000 b8c5 	b.w	80178f4 <__retarget_lock_acquire_recursive>
 801776a:	bf00      	nop
 801776c:	20008634 	.word	0x20008634

08017770 <__sfp_lock_release>:
 8017770:	4801      	ldr	r0, [pc, #4]	; (8017778 <__sfp_lock_release+0x8>)
 8017772:	f000 b8c0 	b.w	80178f6 <__retarget_lock_release_recursive>
 8017776:	bf00      	nop
 8017778:	20008634 	.word	0x20008634

0801777c <__sinit_lock_acquire>:
 801777c:	4801      	ldr	r0, [pc, #4]	; (8017784 <__sinit_lock_acquire+0x8>)
 801777e:	f000 b8b9 	b.w	80178f4 <__retarget_lock_acquire_recursive>
 8017782:	bf00      	nop
 8017784:	2000862f 	.word	0x2000862f

08017788 <__sinit_lock_release>:
 8017788:	4801      	ldr	r0, [pc, #4]	; (8017790 <__sinit_lock_release+0x8>)
 801778a:	f000 b8b4 	b.w	80178f6 <__retarget_lock_release_recursive>
 801778e:	bf00      	nop
 8017790:	2000862f 	.word	0x2000862f

08017794 <__sinit>:
 8017794:	b510      	push	{r4, lr}
 8017796:	4604      	mov	r4, r0
 8017798:	f7ff fff0 	bl	801777c <__sinit_lock_acquire>
 801779c:	69a3      	ldr	r3, [r4, #24]
 801779e:	b11b      	cbz	r3, 80177a8 <__sinit+0x14>
 80177a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177a4:	f7ff bff0 	b.w	8017788 <__sinit_lock_release>
 80177a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80177ac:	6523      	str	r3, [r4, #80]	; 0x50
 80177ae:	4b13      	ldr	r3, [pc, #76]	; (80177fc <__sinit+0x68>)
 80177b0:	4a13      	ldr	r2, [pc, #76]	; (8017800 <__sinit+0x6c>)
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80177b6:	42a3      	cmp	r3, r4
 80177b8:	bf04      	itt	eq
 80177ba:	2301      	moveq	r3, #1
 80177bc:	61a3      	streq	r3, [r4, #24]
 80177be:	4620      	mov	r0, r4
 80177c0:	f000 f820 	bl	8017804 <__sfp>
 80177c4:	6060      	str	r0, [r4, #4]
 80177c6:	4620      	mov	r0, r4
 80177c8:	f000 f81c 	bl	8017804 <__sfp>
 80177cc:	60a0      	str	r0, [r4, #8]
 80177ce:	4620      	mov	r0, r4
 80177d0:	f000 f818 	bl	8017804 <__sfp>
 80177d4:	2200      	movs	r2, #0
 80177d6:	60e0      	str	r0, [r4, #12]
 80177d8:	2104      	movs	r1, #4
 80177da:	6860      	ldr	r0, [r4, #4]
 80177dc:	f7ff ff82 	bl	80176e4 <std>
 80177e0:	68a0      	ldr	r0, [r4, #8]
 80177e2:	2201      	movs	r2, #1
 80177e4:	2109      	movs	r1, #9
 80177e6:	f7ff ff7d 	bl	80176e4 <std>
 80177ea:	68e0      	ldr	r0, [r4, #12]
 80177ec:	2202      	movs	r2, #2
 80177ee:	2112      	movs	r1, #18
 80177f0:	f7ff ff78 	bl	80176e4 <std>
 80177f4:	2301      	movs	r3, #1
 80177f6:	61a3      	str	r3, [r4, #24]
 80177f8:	e7d2      	b.n	80177a0 <__sinit+0xc>
 80177fa:	bf00      	nop
 80177fc:	0801c184 	.word	0x0801c184
 8017800:	0801772d 	.word	0x0801772d

08017804 <__sfp>:
 8017804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017806:	4607      	mov	r7, r0
 8017808:	f7ff ffac 	bl	8017764 <__sfp_lock_acquire>
 801780c:	4b1e      	ldr	r3, [pc, #120]	; (8017888 <__sfp+0x84>)
 801780e:	681e      	ldr	r6, [r3, #0]
 8017810:	69b3      	ldr	r3, [r6, #24]
 8017812:	b913      	cbnz	r3, 801781a <__sfp+0x16>
 8017814:	4630      	mov	r0, r6
 8017816:	f7ff ffbd 	bl	8017794 <__sinit>
 801781a:	3648      	adds	r6, #72	; 0x48
 801781c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017820:	3b01      	subs	r3, #1
 8017822:	d503      	bpl.n	801782c <__sfp+0x28>
 8017824:	6833      	ldr	r3, [r6, #0]
 8017826:	b30b      	cbz	r3, 801786c <__sfp+0x68>
 8017828:	6836      	ldr	r6, [r6, #0]
 801782a:	e7f7      	b.n	801781c <__sfp+0x18>
 801782c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017830:	b9d5      	cbnz	r5, 8017868 <__sfp+0x64>
 8017832:	4b16      	ldr	r3, [pc, #88]	; (801788c <__sfp+0x88>)
 8017834:	60e3      	str	r3, [r4, #12]
 8017836:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801783a:	6665      	str	r5, [r4, #100]	; 0x64
 801783c:	f000 f859 	bl	80178f2 <__retarget_lock_init_recursive>
 8017840:	f7ff ff96 	bl	8017770 <__sfp_lock_release>
 8017844:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017848:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801784c:	6025      	str	r5, [r4, #0]
 801784e:	61a5      	str	r5, [r4, #24]
 8017850:	2208      	movs	r2, #8
 8017852:	4629      	mov	r1, r5
 8017854:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017858:	f7ff fea6 	bl	80175a8 <memset>
 801785c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017860:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017864:	4620      	mov	r0, r4
 8017866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017868:	3468      	adds	r4, #104	; 0x68
 801786a:	e7d9      	b.n	8017820 <__sfp+0x1c>
 801786c:	2104      	movs	r1, #4
 801786e:	4638      	mov	r0, r7
 8017870:	f7ff ff62 	bl	8017738 <__sfmoreglue>
 8017874:	4604      	mov	r4, r0
 8017876:	6030      	str	r0, [r6, #0]
 8017878:	2800      	cmp	r0, #0
 801787a:	d1d5      	bne.n	8017828 <__sfp+0x24>
 801787c:	f7ff ff78 	bl	8017770 <__sfp_lock_release>
 8017880:	230c      	movs	r3, #12
 8017882:	603b      	str	r3, [r7, #0]
 8017884:	e7ee      	b.n	8017864 <__sfp+0x60>
 8017886:	bf00      	nop
 8017888:	0801c184 	.word	0x0801c184
 801788c:	ffff0001 	.word	0xffff0001

08017890 <fiprintf>:
 8017890:	b40e      	push	{r1, r2, r3}
 8017892:	b503      	push	{r0, r1, lr}
 8017894:	4601      	mov	r1, r0
 8017896:	ab03      	add	r3, sp, #12
 8017898:	4805      	ldr	r0, [pc, #20]	; (80178b0 <fiprintf+0x20>)
 801789a:	f853 2b04 	ldr.w	r2, [r3], #4
 801789e:	6800      	ldr	r0, [r0, #0]
 80178a0:	9301      	str	r3, [sp, #4]
 80178a2:	f000 fa61 	bl	8017d68 <_vfiprintf_r>
 80178a6:	b002      	add	sp, #8
 80178a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80178ac:	b003      	add	sp, #12
 80178ae:	4770      	bx	lr
 80178b0:	20000198 	.word	0x20000198

080178b4 <_fwalk_reent>:
 80178b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178b8:	4606      	mov	r6, r0
 80178ba:	4688      	mov	r8, r1
 80178bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80178c0:	2700      	movs	r7, #0
 80178c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80178c6:	f1b9 0901 	subs.w	r9, r9, #1
 80178ca:	d505      	bpl.n	80178d8 <_fwalk_reent+0x24>
 80178cc:	6824      	ldr	r4, [r4, #0]
 80178ce:	2c00      	cmp	r4, #0
 80178d0:	d1f7      	bne.n	80178c2 <_fwalk_reent+0xe>
 80178d2:	4638      	mov	r0, r7
 80178d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178d8:	89ab      	ldrh	r3, [r5, #12]
 80178da:	2b01      	cmp	r3, #1
 80178dc:	d907      	bls.n	80178ee <_fwalk_reent+0x3a>
 80178de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80178e2:	3301      	adds	r3, #1
 80178e4:	d003      	beq.n	80178ee <_fwalk_reent+0x3a>
 80178e6:	4629      	mov	r1, r5
 80178e8:	4630      	mov	r0, r6
 80178ea:	47c0      	blx	r8
 80178ec:	4307      	orrs	r7, r0
 80178ee:	3568      	adds	r5, #104	; 0x68
 80178f0:	e7e9      	b.n	80178c6 <_fwalk_reent+0x12>

080178f2 <__retarget_lock_init_recursive>:
 80178f2:	4770      	bx	lr

080178f4 <__retarget_lock_acquire_recursive>:
 80178f4:	4770      	bx	lr

080178f6 <__retarget_lock_release_recursive>:
 80178f6:	4770      	bx	lr

080178f8 <malloc>:
 80178f8:	4b02      	ldr	r3, [pc, #8]	; (8017904 <malloc+0xc>)
 80178fa:	4601      	mov	r1, r0
 80178fc:	6818      	ldr	r0, [r3, #0]
 80178fe:	f000 b853 	b.w	80179a8 <_malloc_r>
 8017902:	bf00      	nop
 8017904:	20000198 	.word	0x20000198

08017908 <_free_r>:
 8017908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801790a:	2900      	cmp	r1, #0
 801790c:	d048      	beq.n	80179a0 <_free_r+0x98>
 801790e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017912:	9001      	str	r0, [sp, #4]
 8017914:	2b00      	cmp	r3, #0
 8017916:	f1a1 0404 	sub.w	r4, r1, #4
 801791a:	bfb8      	it	lt
 801791c:	18e4      	addlt	r4, r4, r3
 801791e:	f000 ff5d 	bl	80187dc <__malloc_lock>
 8017922:	4a20      	ldr	r2, [pc, #128]	; (80179a4 <_free_r+0x9c>)
 8017924:	9801      	ldr	r0, [sp, #4]
 8017926:	6813      	ldr	r3, [r2, #0]
 8017928:	4615      	mov	r5, r2
 801792a:	b933      	cbnz	r3, 801793a <_free_r+0x32>
 801792c:	6063      	str	r3, [r4, #4]
 801792e:	6014      	str	r4, [r2, #0]
 8017930:	b003      	add	sp, #12
 8017932:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017936:	f000 bf57 	b.w	80187e8 <__malloc_unlock>
 801793a:	42a3      	cmp	r3, r4
 801793c:	d90b      	bls.n	8017956 <_free_r+0x4e>
 801793e:	6821      	ldr	r1, [r4, #0]
 8017940:	1862      	adds	r2, r4, r1
 8017942:	4293      	cmp	r3, r2
 8017944:	bf04      	itt	eq
 8017946:	681a      	ldreq	r2, [r3, #0]
 8017948:	685b      	ldreq	r3, [r3, #4]
 801794a:	6063      	str	r3, [r4, #4]
 801794c:	bf04      	itt	eq
 801794e:	1852      	addeq	r2, r2, r1
 8017950:	6022      	streq	r2, [r4, #0]
 8017952:	602c      	str	r4, [r5, #0]
 8017954:	e7ec      	b.n	8017930 <_free_r+0x28>
 8017956:	461a      	mov	r2, r3
 8017958:	685b      	ldr	r3, [r3, #4]
 801795a:	b10b      	cbz	r3, 8017960 <_free_r+0x58>
 801795c:	42a3      	cmp	r3, r4
 801795e:	d9fa      	bls.n	8017956 <_free_r+0x4e>
 8017960:	6811      	ldr	r1, [r2, #0]
 8017962:	1855      	adds	r5, r2, r1
 8017964:	42a5      	cmp	r5, r4
 8017966:	d10b      	bne.n	8017980 <_free_r+0x78>
 8017968:	6824      	ldr	r4, [r4, #0]
 801796a:	4421      	add	r1, r4
 801796c:	1854      	adds	r4, r2, r1
 801796e:	42a3      	cmp	r3, r4
 8017970:	6011      	str	r1, [r2, #0]
 8017972:	d1dd      	bne.n	8017930 <_free_r+0x28>
 8017974:	681c      	ldr	r4, [r3, #0]
 8017976:	685b      	ldr	r3, [r3, #4]
 8017978:	6053      	str	r3, [r2, #4]
 801797a:	4421      	add	r1, r4
 801797c:	6011      	str	r1, [r2, #0]
 801797e:	e7d7      	b.n	8017930 <_free_r+0x28>
 8017980:	d902      	bls.n	8017988 <_free_r+0x80>
 8017982:	230c      	movs	r3, #12
 8017984:	6003      	str	r3, [r0, #0]
 8017986:	e7d3      	b.n	8017930 <_free_r+0x28>
 8017988:	6825      	ldr	r5, [r4, #0]
 801798a:	1961      	adds	r1, r4, r5
 801798c:	428b      	cmp	r3, r1
 801798e:	bf04      	itt	eq
 8017990:	6819      	ldreq	r1, [r3, #0]
 8017992:	685b      	ldreq	r3, [r3, #4]
 8017994:	6063      	str	r3, [r4, #4]
 8017996:	bf04      	itt	eq
 8017998:	1949      	addeq	r1, r1, r5
 801799a:	6021      	streq	r1, [r4, #0]
 801799c:	6054      	str	r4, [r2, #4]
 801799e:	e7c7      	b.n	8017930 <_free_r+0x28>
 80179a0:	b003      	add	sp, #12
 80179a2:	bd30      	pop	{r4, r5, pc}
 80179a4:	200005c0 	.word	0x200005c0

080179a8 <_malloc_r>:
 80179a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179aa:	1ccd      	adds	r5, r1, #3
 80179ac:	f025 0503 	bic.w	r5, r5, #3
 80179b0:	3508      	adds	r5, #8
 80179b2:	2d0c      	cmp	r5, #12
 80179b4:	bf38      	it	cc
 80179b6:	250c      	movcc	r5, #12
 80179b8:	2d00      	cmp	r5, #0
 80179ba:	4606      	mov	r6, r0
 80179bc:	db01      	blt.n	80179c2 <_malloc_r+0x1a>
 80179be:	42a9      	cmp	r1, r5
 80179c0:	d903      	bls.n	80179ca <_malloc_r+0x22>
 80179c2:	230c      	movs	r3, #12
 80179c4:	6033      	str	r3, [r6, #0]
 80179c6:	2000      	movs	r0, #0
 80179c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179ca:	f000 ff07 	bl	80187dc <__malloc_lock>
 80179ce:	4921      	ldr	r1, [pc, #132]	; (8017a54 <_malloc_r+0xac>)
 80179d0:	680a      	ldr	r2, [r1, #0]
 80179d2:	4614      	mov	r4, r2
 80179d4:	b99c      	cbnz	r4, 80179fe <_malloc_r+0x56>
 80179d6:	4f20      	ldr	r7, [pc, #128]	; (8017a58 <_malloc_r+0xb0>)
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	b923      	cbnz	r3, 80179e6 <_malloc_r+0x3e>
 80179dc:	4621      	mov	r1, r4
 80179de:	4630      	mov	r0, r6
 80179e0:	f000 fc86 	bl	80182f0 <_sbrk_r>
 80179e4:	6038      	str	r0, [r7, #0]
 80179e6:	4629      	mov	r1, r5
 80179e8:	4630      	mov	r0, r6
 80179ea:	f000 fc81 	bl	80182f0 <_sbrk_r>
 80179ee:	1c43      	adds	r3, r0, #1
 80179f0:	d123      	bne.n	8017a3a <_malloc_r+0x92>
 80179f2:	230c      	movs	r3, #12
 80179f4:	6033      	str	r3, [r6, #0]
 80179f6:	4630      	mov	r0, r6
 80179f8:	f000 fef6 	bl	80187e8 <__malloc_unlock>
 80179fc:	e7e3      	b.n	80179c6 <_malloc_r+0x1e>
 80179fe:	6823      	ldr	r3, [r4, #0]
 8017a00:	1b5b      	subs	r3, r3, r5
 8017a02:	d417      	bmi.n	8017a34 <_malloc_r+0x8c>
 8017a04:	2b0b      	cmp	r3, #11
 8017a06:	d903      	bls.n	8017a10 <_malloc_r+0x68>
 8017a08:	6023      	str	r3, [r4, #0]
 8017a0a:	441c      	add	r4, r3
 8017a0c:	6025      	str	r5, [r4, #0]
 8017a0e:	e004      	b.n	8017a1a <_malloc_r+0x72>
 8017a10:	6863      	ldr	r3, [r4, #4]
 8017a12:	42a2      	cmp	r2, r4
 8017a14:	bf0c      	ite	eq
 8017a16:	600b      	streq	r3, [r1, #0]
 8017a18:	6053      	strne	r3, [r2, #4]
 8017a1a:	4630      	mov	r0, r6
 8017a1c:	f000 fee4 	bl	80187e8 <__malloc_unlock>
 8017a20:	f104 000b 	add.w	r0, r4, #11
 8017a24:	1d23      	adds	r3, r4, #4
 8017a26:	f020 0007 	bic.w	r0, r0, #7
 8017a2a:	1ac2      	subs	r2, r0, r3
 8017a2c:	d0cc      	beq.n	80179c8 <_malloc_r+0x20>
 8017a2e:	1a1b      	subs	r3, r3, r0
 8017a30:	50a3      	str	r3, [r4, r2]
 8017a32:	e7c9      	b.n	80179c8 <_malloc_r+0x20>
 8017a34:	4622      	mov	r2, r4
 8017a36:	6864      	ldr	r4, [r4, #4]
 8017a38:	e7cc      	b.n	80179d4 <_malloc_r+0x2c>
 8017a3a:	1cc4      	adds	r4, r0, #3
 8017a3c:	f024 0403 	bic.w	r4, r4, #3
 8017a40:	42a0      	cmp	r0, r4
 8017a42:	d0e3      	beq.n	8017a0c <_malloc_r+0x64>
 8017a44:	1a21      	subs	r1, r4, r0
 8017a46:	4630      	mov	r0, r6
 8017a48:	f000 fc52 	bl	80182f0 <_sbrk_r>
 8017a4c:	3001      	adds	r0, #1
 8017a4e:	d1dd      	bne.n	8017a0c <_malloc_r+0x64>
 8017a50:	e7cf      	b.n	80179f2 <_malloc_r+0x4a>
 8017a52:	bf00      	nop
 8017a54:	200005c0 	.word	0x200005c0
 8017a58:	200005c4 	.word	0x200005c4

08017a5c <__ssputs_r>:
 8017a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a60:	688e      	ldr	r6, [r1, #8]
 8017a62:	429e      	cmp	r6, r3
 8017a64:	4682      	mov	sl, r0
 8017a66:	460c      	mov	r4, r1
 8017a68:	4690      	mov	r8, r2
 8017a6a:	461f      	mov	r7, r3
 8017a6c:	d838      	bhi.n	8017ae0 <__ssputs_r+0x84>
 8017a6e:	898a      	ldrh	r2, [r1, #12]
 8017a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017a74:	d032      	beq.n	8017adc <__ssputs_r+0x80>
 8017a76:	6825      	ldr	r5, [r4, #0]
 8017a78:	6909      	ldr	r1, [r1, #16]
 8017a7a:	eba5 0901 	sub.w	r9, r5, r1
 8017a7e:	6965      	ldr	r5, [r4, #20]
 8017a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017a88:	3301      	adds	r3, #1
 8017a8a:	444b      	add	r3, r9
 8017a8c:	106d      	asrs	r5, r5, #1
 8017a8e:	429d      	cmp	r5, r3
 8017a90:	bf38      	it	cc
 8017a92:	461d      	movcc	r5, r3
 8017a94:	0553      	lsls	r3, r2, #21
 8017a96:	d531      	bpl.n	8017afc <__ssputs_r+0xa0>
 8017a98:	4629      	mov	r1, r5
 8017a9a:	f7ff ff85 	bl	80179a8 <_malloc_r>
 8017a9e:	4606      	mov	r6, r0
 8017aa0:	b950      	cbnz	r0, 8017ab8 <__ssputs_r+0x5c>
 8017aa2:	230c      	movs	r3, #12
 8017aa4:	f8ca 3000 	str.w	r3, [sl]
 8017aa8:	89a3      	ldrh	r3, [r4, #12]
 8017aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017aae:	81a3      	strh	r3, [r4, #12]
 8017ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ab8:	6921      	ldr	r1, [r4, #16]
 8017aba:	464a      	mov	r2, r9
 8017abc:	f7ff fd4c 	bl	8017558 <memcpy>
 8017ac0:	89a3      	ldrh	r3, [r4, #12]
 8017ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017aca:	81a3      	strh	r3, [r4, #12]
 8017acc:	6126      	str	r6, [r4, #16]
 8017ace:	6165      	str	r5, [r4, #20]
 8017ad0:	444e      	add	r6, r9
 8017ad2:	eba5 0509 	sub.w	r5, r5, r9
 8017ad6:	6026      	str	r6, [r4, #0]
 8017ad8:	60a5      	str	r5, [r4, #8]
 8017ada:	463e      	mov	r6, r7
 8017adc:	42be      	cmp	r6, r7
 8017ade:	d900      	bls.n	8017ae2 <__ssputs_r+0x86>
 8017ae0:	463e      	mov	r6, r7
 8017ae2:	4632      	mov	r2, r6
 8017ae4:	6820      	ldr	r0, [r4, #0]
 8017ae6:	4641      	mov	r1, r8
 8017ae8:	f7ff fd44 	bl	8017574 <memmove>
 8017aec:	68a3      	ldr	r3, [r4, #8]
 8017aee:	6822      	ldr	r2, [r4, #0]
 8017af0:	1b9b      	subs	r3, r3, r6
 8017af2:	4432      	add	r2, r6
 8017af4:	60a3      	str	r3, [r4, #8]
 8017af6:	6022      	str	r2, [r4, #0]
 8017af8:	2000      	movs	r0, #0
 8017afa:	e7db      	b.n	8017ab4 <__ssputs_r+0x58>
 8017afc:	462a      	mov	r2, r5
 8017afe:	f000 fe79 	bl	80187f4 <_realloc_r>
 8017b02:	4606      	mov	r6, r0
 8017b04:	2800      	cmp	r0, #0
 8017b06:	d1e1      	bne.n	8017acc <__ssputs_r+0x70>
 8017b08:	6921      	ldr	r1, [r4, #16]
 8017b0a:	4650      	mov	r0, sl
 8017b0c:	f7ff fefc 	bl	8017908 <_free_r>
 8017b10:	e7c7      	b.n	8017aa2 <__ssputs_r+0x46>
	...

08017b14 <_svfiprintf_r>:
 8017b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b18:	4698      	mov	r8, r3
 8017b1a:	898b      	ldrh	r3, [r1, #12]
 8017b1c:	061b      	lsls	r3, r3, #24
 8017b1e:	b09d      	sub	sp, #116	; 0x74
 8017b20:	4607      	mov	r7, r0
 8017b22:	460d      	mov	r5, r1
 8017b24:	4614      	mov	r4, r2
 8017b26:	d50e      	bpl.n	8017b46 <_svfiprintf_r+0x32>
 8017b28:	690b      	ldr	r3, [r1, #16]
 8017b2a:	b963      	cbnz	r3, 8017b46 <_svfiprintf_r+0x32>
 8017b2c:	2140      	movs	r1, #64	; 0x40
 8017b2e:	f7ff ff3b 	bl	80179a8 <_malloc_r>
 8017b32:	6028      	str	r0, [r5, #0]
 8017b34:	6128      	str	r0, [r5, #16]
 8017b36:	b920      	cbnz	r0, 8017b42 <_svfiprintf_r+0x2e>
 8017b38:	230c      	movs	r3, #12
 8017b3a:	603b      	str	r3, [r7, #0]
 8017b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b40:	e0d1      	b.n	8017ce6 <_svfiprintf_r+0x1d2>
 8017b42:	2340      	movs	r3, #64	; 0x40
 8017b44:	616b      	str	r3, [r5, #20]
 8017b46:	2300      	movs	r3, #0
 8017b48:	9309      	str	r3, [sp, #36]	; 0x24
 8017b4a:	2320      	movs	r3, #32
 8017b4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b54:	2330      	movs	r3, #48	; 0x30
 8017b56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017d00 <_svfiprintf_r+0x1ec>
 8017b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b5e:	f04f 0901 	mov.w	r9, #1
 8017b62:	4623      	mov	r3, r4
 8017b64:	469a      	mov	sl, r3
 8017b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b6a:	b10a      	cbz	r2, 8017b70 <_svfiprintf_r+0x5c>
 8017b6c:	2a25      	cmp	r2, #37	; 0x25
 8017b6e:	d1f9      	bne.n	8017b64 <_svfiprintf_r+0x50>
 8017b70:	ebba 0b04 	subs.w	fp, sl, r4
 8017b74:	d00b      	beq.n	8017b8e <_svfiprintf_r+0x7a>
 8017b76:	465b      	mov	r3, fp
 8017b78:	4622      	mov	r2, r4
 8017b7a:	4629      	mov	r1, r5
 8017b7c:	4638      	mov	r0, r7
 8017b7e:	f7ff ff6d 	bl	8017a5c <__ssputs_r>
 8017b82:	3001      	adds	r0, #1
 8017b84:	f000 80aa 	beq.w	8017cdc <_svfiprintf_r+0x1c8>
 8017b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b8a:	445a      	add	r2, fp
 8017b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8017b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	f000 80a2 	beq.w	8017cdc <_svfiprintf_r+0x1c8>
 8017b98:	2300      	movs	r3, #0
 8017b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8017b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ba2:	f10a 0a01 	add.w	sl, sl, #1
 8017ba6:	9304      	str	r3, [sp, #16]
 8017ba8:	9307      	str	r3, [sp, #28]
 8017baa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017bae:	931a      	str	r3, [sp, #104]	; 0x68
 8017bb0:	4654      	mov	r4, sl
 8017bb2:	2205      	movs	r2, #5
 8017bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bb8:	4851      	ldr	r0, [pc, #324]	; (8017d00 <_svfiprintf_r+0x1ec>)
 8017bba:	f7e8 fb21 	bl	8000200 <memchr>
 8017bbe:	9a04      	ldr	r2, [sp, #16]
 8017bc0:	b9d8      	cbnz	r0, 8017bfa <_svfiprintf_r+0xe6>
 8017bc2:	06d0      	lsls	r0, r2, #27
 8017bc4:	bf44      	itt	mi
 8017bc6:	2320      	movmi	r3, #32
 8017bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017bcc:	0711      	lsls	r1, r2, #28
 8017bce:	bf44      	itt	mi
 8017bd0:	232b      	movmi	r3, #43	; 0x2b
 8017bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8017bda:	2b2a      	cmp	r3, #42	; 0x2a
 8017bdc:	d015      	beq.n	8017c0a <_svfiprintf_r+0xf6>
 8017bde:	9a07      	ldr	r2, [sp, #28]
 8017be0:	4654      	mov	r4, sl
 8017be2:	2000      	movs	r0, #0
 8017be4:	f04f 0c0a 	mov.w	ip, #10
 8017be8:	4621      	mov	r1, r4
 8017bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017bee:	3b30      	subs	r3, #48	; 0x30
 8017bf0:	2b09      	cmp	r3, #9
 8017bf2:	d94e      	bls.n	8017c92 <_svfiprintf_r+0x17e>
 8017bf4:	b1b0      	cbz	r0, 8017c24 <_svfiprintf_r+0x110>
 8017bf6:	9207      	str	r2, [sp, #28]
 8017bf8:	e014      	b.n	8017c24 <_svfiprintf_r+0x110>
 8017bfa:	eba0 0308 	sub.w	r3, r0, r8
 8017bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8017c02:	4313      	orrs	r3, r2
 8017c04:	9304      	str	r3, [sp, #16]
 8017c06:	46a2      	mov	sl, r4
 8017c08:	e7d2      	b.n	8017bb0 <_svfiprintf_r+0x9c>
 8017c0a:	9b03      	ldr	r3, [sp, #12]
 8017c0c:	1d19      	adds	r1, r3, #4
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	9103      	str	r1, [sp, #12]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	bfbb      	ittet	lt
 8017c16:	425b      	neglt	r3, r3
 8017c18:	f042 0202 	orrlt.w	r2, r2, #2
 8017c1c:	9307      	strge	r3, [sp, #28]
 8017c1e:	9307      	strlt	r3, [sp, #28]
 8017c20:	bfb8      	it	lt
 8017c22:	9204      	strlt	r2, [sp, #16]
 8017c24:	7823      	ldrb	r3, [r4, #0]
 8017c26:	2b2e      	cmp	r3, #46	; 0x2e
 8017c28:	d10c      	bne.n	8017c44 <_svfiprintf_r+0x130>
 8017c2a:	7863      	ldrb	r3, [r4, #1]
 8017c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8017c2e:	d135      	bne.n	8017c9c <_svfiprintf_r+0x188>
 8017c30:	9b03      	ldr	r3, [sp, #12]
 8017c32:	1d1a      	adds	r2, r3, #4
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	9203      	str	r2, [sp, #12]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	bfb8      	it	lt
 8017c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c40:	3402      	adds	r4, #2
 8017c42:	9305      	str	r3, [sp, #20]
 8017c44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017d10 <_svfiprintf_r+0x1fc>
 8017c48:	7821      	ldrb	r1, [r4, #0]
 8017c4a:	2203      	movs	r2, #3
 8017c4c:	4650      	mov	r0, sl
 8017c4e:	f7e8 fad7 	bl	8000200 <memchr>
 8017c52:	b140      	cbz	r0, 8017c66 <_svfiprintf_r+0x152>
 8017c54:	2340      	movs	r3, #64	; 0x40
 8017c56:	eba0 000a 	sub.w	r0, r0, sl
 8017c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8017c5e:	9b04      	ldr	r3, [sp, #16]
 8017c60:	4303      	orrs	r3, r0
 8017c62:	3401      	adds	r4, #1
 8017c64:	9304      	str	r3, [sp, #16]
 8017c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c6a:	4826      	ldr	r0, [pc, #152]	; (8017d04 <_svfiprintf_r+0x1f0>)
 8017c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c70:	2206      	movs	r2, #6
 8017c72:	f7e8 fac5 	bl	8000200 <memchr>
 8017c76:	2800      	cmp	r0, #0
 8017c78:	d038      	beq.n	8017cec <_svfiprintf_r+0x1d8>
 8017c7a:	4b23      	ldr	r3, [pc, #140]	; (8017d08 <_svfiprintf_r+0x1f4>)
 8017c7c:	bb1b      	cbnz	r3, 8017cc6 <_svfiprintf_r+0x1b2>
 8017c7e:	9b03      	ldr	r3, [sp, #12]
 8017c80:	3307      	adds	r3, #7
 8017c82:	f023 0307 	bic.w	r3, r3, #7
 8017c86:	3308      	adds	r3, #8
 8017c88:	9303      	str	r3, [sp, #12]
 8017c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c8c:	4433      	add	r3, r6
 8017c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8017c90:	e767      	b.n	8017b62 <_svfiprintf_r+0x4e>
 8017c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c96:	460c      	mov	r4, r1
 8017c98:	2001      	movs	r0, #1
 8017c9a:	e7a5      	b.n	8017be8 <_svfiprintf_r+0xd4>
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	3401      	adds	r4, #1
 8017ca0:	9305      	str	r3, [sp, #20]
 8017ca2:	4619      	mov	r1, r3
 8017ca4:	f04f 0c0a 	mov.w	ip, #10
 8017ca8:	4620      	mov	r0, r4
 8017caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017cae:	3a30      	subs	r2, #48	; 0x30
 8017cb0:	2a09      	cmp	r2, #9
 8017cb2:	d903      	bls.n	8017cbc <_svfiprintf_r+0x1a8>
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d0c5      	beq.n	8017c44 <_svfiprintf_r+0x130>
 8017cb8:	9105      	str	r1, [sp, #20]
 8017cba:	e7c3      	b.n	8017c44 <_svfiprintf_r+0x130>
 8017cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8017cc0:	4604      	mov	r4, r0
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	e7f0      	b.n	8017ca8 <_svfiprintf_r+0x194>
 8017cc6:	ab03      	add	r3, sp, #12
 8017cc8:	9300      	str	r3, [sp, #0]
 8017cca:	462a      	mov	r2, r5
 8017ccc:	4b0f      	ldr	r3, [pc, #60]	; (8017d0c <_svfiprintf_r+0x1f8>)
 8017cce:	a904      	add	r1, sp, #16
 8017cd0:	4638      	mov	r0, r7
 8017cd2:	f3af 8000 	nop.w
 8017cd6:	1c42      	adds	r2, r0, #1
 8017cd8:	4606      	mov	r6, r0
 8017cda:	d1d6      	bne.n	8017c8a <_svfiprintf_r+0x176>
 8017cdc:	89ab      	ldrh	r3, [r5, #12]
 8017cde:	065b      	lsls	r3, r3, #25
 8017ce0:	f53f af2c 	bmi.w	8017b3c <_svfiprintf_r+0x28>
 8017ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ce6:	b01d      	add	sp, #116	; 0x74
 8017ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cec:	ab03      	add	r3, sp, #12
 8017cee:	9300      	str	r3, [sp, #0]
 8017cf0:	462a      	mov	r2, r5
 8017cf2:	4b06      	ldr	r3, [pc, #24]	; (8017d0c <_svfiprintf_r+0x1f8>)
 8017cf4:	a904      	add	r1, sp, #16
 8017cf6:	4638      	mov	r0, r7
 8017cf8:	f000 f9d4 	bl	80180a4 <_printf_i>
 8017cfc:	e7eb      	b.n	8017cd6 <_svfiprintf_r+0x1c2>
 8017cfe:	bf00      	nop
 8017d00:	0801c29c 	.word	0x0801c29c
 8017d04:	0801c2a6 	.word	0x0801c2a6
 8017d08:	00000000 	.word	0x00000000
 8017d0c:	08017a5d 	.word	0x08017a5d
 8017d10:	0801c2a2 	.word	0x0801c2a2

08017d14 <__sfputc_r>:
 8017d14:	6893      	ldr	r3, [r2, #8]
 8017d16:	3b01      	subs	r3, #1
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	b410      	push	{r4}
 8017d1c:	6093      	str	r3, [r2, #8]
 8017d1e:	da08      	bge.n	8017d32 <__sfputc_r+0x1e>
 8017d20:	6994      	ldr	r4, [r2, #24]
 8017d22:	42a3      	cmp	r3, r4
 8017d24:	db01      	blt.n	8017d2a <__sfputc_r+0x16>
 8017d26:	290a      	cmp	r1, #10
 8017d28:	d103      	bne.n	8017d32 <__sfputc_r+0x1e>
 8017d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d2e:	f000 bb33 	b.w	8018398 <__swbuf_r>
 8017d32:	6813      	ldr	r3, [r2, #0]
 8017d34:	1c58      	adds	r0, r3, #1
 8017d36:	6010      	str	r0, [r2, #0]
 8017d38:	7019      	strb	r1, [r3, #0]
 8017d3a:	4608      	mov	r0, r1
 8017d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d40:	4770      	bx	lr

08017d42 <__sfputs_r>:
 8017d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d44:	4606      	mov	r6, r0
 8017d46:	460f      	mov	r7, r1
 8017d48:	4614      	mov	r4, r2
 8017d4a:	18d5      	adds	r5, r2, r3
 8017d4c:	42ac      	cmp	r4, r5
 8017d4e:	d101      	bne.n	8017d54 <__sfputs_r+0x12>
 8017d50:	2000      	movs	r0, #0
 8017d52:	e007      	b.n	8017d64 <__sfputs_r+0x22>
 8017d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d58:	463a      	mov	r2, r7
 8017d5a:	4630      	mov	r0, r6
 8017d5c:	f7ff ffda 	bl	8017d14 <__sfputc_r>
 8017d60:	1c43      	adds	r3, r0, #1
 8017d62:	d1f3      	bne.n	8017d4c <__sfputs_r+0xa>
 8017d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017d68 <_vfiprintf_r>:
 8017d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d6c:	460d      	mov	r5, r1
 8017d6e:	b09d      	sub	sp, #116	; 0x74
 8017d70:	4614      	mov	r4, r2
 8017d72:	4698      	mov	r8, r3
 8017d74:	4606      	mov	r6, r0
 8017d76:	b118      	cbz	r0, 8017d80 <_vfiprintf_r+0x18>
 8017d78:	6983      	ldr	r3, [r0, #24]
 8017d7a:	b90b      	cbnz	r3, 8017d80 <_vfiprintf_r+0x18>
 8017d7c:	f7ff fd0a 	bl	8017794 <__sinit>
 8017d80:	4b89      	ldr	r3, [pc, #548]	; (8017fa8 <_vfiprintf_r+0x240>)
 8017d82:	429d      	cmp	r5, r3
 8017d84:	d11b      	bne.n	8017dbe <_vfiprintf_r+0x56>
 8017d86:	6875      	ldr	r5, [r6, #4]
 8017d88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d8a:	07d9      	lsls	r1, r3, #31
 8017d8c:	d405      	bmi.n	8017d9a <_vfiprintf_r+0x32>
 8017d8e:	89ab      	ldrh	r3, [r5, #12]
 8017d90:	059a      	lsls	r2, r3, #22
 8017d92:	d402      	bmi.n	8017d9a <_vfiprintf_r+0x32>
 8017d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d96:	f7ff fdad 	bl	80178f4 <__retarget_lock_acquire_recursive>
 8017d9a:	89ab      	ldrh	r3, [r5, #12]
 8017d9c:	071b      	lsls	r3, r3, #28
 8017d9e:	d501      	bpl.n	8017da4 <_vfiprintf_r+0x3c>
 8017da0:	692b      	ldr	r3, [r5, #16]
 8017da2:	b9eb      	cbnz	r3, 8017de0 <_vfiprintf_r+0x78>
 8017da4:	4629      	mov	r1, r5
 8017da6:	4630      	mov	r0, r6
 8017da8:	f000 fb5a 	bl	8018460 <__swsetup_r>
 8017dac:	b1c0      	cbz	r0, 8017de0 <_vfiprintf_r+0x78>
 8017dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017db0:	07dc      	lsls	r4, r3, #31
 8017db2:	d50e      	bpl.n	8017dd2 <_vfiprintf_r+0x6a>
 8017db4:	f04f 30ff 	mov.w	r0, #4294967295
 8017db8:	b01d      	add	sp, #116	; 0x74
 8017dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dbe:	4b7b      	ldr	r3, [pc, #492]	; (8017fac <_vfiprintf_r+0x244>)
 8017dc0:	429d      	cmp	r5, r3
 8017dc2:	d101      	bne.n	8017dc8 <_vfiprintf_r+0x60>
 8017dc4:	68b5      	ldr	r5, [r6, #8]
 8017dc6:	e7df      	b.n	8017d88 <_vfiprintf_r+0x20>
 8017dc8:	4b79      	ldr	r3, [pc, #484]	; (8017fb0 <_vfiprintf_r+0x248>)
 8017dca:	429d      	cmp	r5, r3
 8017dcc:	bf08      	it	eq
 8017dce:	68f5      	ldreq	r5, [r6, #12]
 8017dd0:	e7da      	b.n	8017d88 <_vfiprintf_r+0x20>
 8017dd2:	89ab      	ldrh	r3, [r5, #12]
 8017dd4:	0598      	lsls	r0, r3, #22
 8017dd6:	d4ed      	bmi.n	8017db4 <_vfiprintf_r+0x4c>
 8017dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017dda:	f7ff fd8c 	bl	80178f6 <__retarget_lock_release_recursive>
 8017dde:	e7e9      	b.n	8017db4 <_vfiprintf_r+0x4c>
 8017de0:	2300      	movs	r3, #0
 8017de2:	9309      	str	r3, [sp, #36]	; 0x24
 8017de4:	2320      	movs	r3, #32
 8017de6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017dea:	f8cd 800c 	str.w	r8, [sp, #12]
 8017dee:	2330      	movs	r3, #48	; 0x30
 8017df0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017fb4 <_vfiprintf_r+0x24c>
 8017df4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017df8:	f04f 0901 	mov.w	r9, #1
 8017dfc:	4623      	mov	r3, r4
 8017dfe:	469a      	mov	sl, r3
 8017e00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e04:	b10a      	cbz	r2, 8017e0a <_vfiprintf_r+0xa2>
 8017e06:	2a25      	cmp	r2, #37	; 0x25
 8017e08:	d1f9      	bne.n	8017dfe <_vfiprintf_r+0x96>
 8017e0a:	ebba 0b04 	subs.w	fp, sl, r4
 8017e0e:	d00b      	beq.n	8017e28 <_vfiprintf_r+0xc0>
 8017e10:	465b      	mov	r3, fp
 8017e12:	4622      	mov	r2, r4
 8017e14:	4629      	mov	r1, r5
 8017e16:	4630      	mov	r0, r6
 8017e18:	f7ff ff93 	bl	8017d42 <__sfputs_r>
 8017e1c:	3001      	adds	r0, #1
 8017e1e:	f000 80aa 	beq.w	8017f76 <_vfiprintf_r+0x20e>
 8017e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e24:	445a      	add	r2, fp
 8017e26:	9209      	str	r2, [sp, #36]	; 0x24
 8017e28:	f89a 3000 	ldrb.w	r3, [sl]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	f000 80a2 	beq.w	8017f76 <_vfiprintf_r+0x20e>
 8017e32:	2300      	movs	r3, #0
 8017e34:	f04f 32ff 	mov.w	r2, #4294967295
 8017e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e3c:	f10a 0a01 	add.w	sl, sl, #1
 8017e40:	9304      	str	r3, [sp, #16]
 8017e42:	9307      	str	r3, [sp, #28]
 8017e44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017e48:	931a      	str	r3, [sp, #104]	; 0x68
 8017e4a:	4654      	mov	r4, sl
 8017e4c:	2205      	movs	r2, #5
 8017e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e52:	4858      	ldr	r0, [pc, #352]	; (8017fb4 <_vfiprintf_r+0x24c>)
 8017e54:	f7e8 f9d4 	bl	8000200 <memchr>
 8017e58:	9a04      	ldr	r2, [sp, #16]
 8017e5a:	b9d8      	cbnz	r0, 8017e94 <_vfiprintf_r+0x12c>
 8017e5c:	06d1      	lsls	r1, r2, #27
 8017e5e:	bf44      	itt	mi
 8017e60:	2320      	movmi	r3, #32
 8017e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e66:	0713      	lsls	r3, r2, #28
 8017e68:	bf44      	itt	mi
 8017e6a:	232b      	movmi	r3, #43	; 0x2b
 8017e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e70:	f89a 3000 	ldrb.w	r3, [sl]
 8017e74:	2b2a      	cmp	r3, #42	; 0x2a
 8017e76:	d015      	beq.n	8017ea4 <_vfiprintf_r+0x13c>
 8017e78:	9a07      	ldr	r2, [sp, #28]
 8017e7a:	4654      	mov	r4, sl
 8017e7c:	2000      	movs	r0, #0
 8017e7e:	f04f 0c0a 	mov.w	ip, #10
 8017e82:	4621      	mov	r1, r4
 8017e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e88:	3b30      	subs	r3, #48	; 0x30
 8017e8a:	2b09      	cmp	r3, #9
 8017e8c:	d94e      	bls.n	8017f2c <_vfiprintf_r+0x1c4>
 8017e8e:	b1b0      	cbz	r0, 8017ebe <_vfiprintf_r+0x156>
 8017e90:	9207      	str	r2, [sp, #28]
 8017e92:	e014      	b.n	8017ebe <_vfiprintf_r+0x156>
 8017e94:	eba0 0308 	sub.w	r3, r0, r8
 8017e98:	fa09 f303 	lsl.w	r3, r9, r3
 8017e9c:	4313      	orrs	r3, r2
 8017e9e:	9304      	str	r3, [sp, #16]
 8017ea0:	46a2      	mov	sl, r4
 8017ea2:	e7d2      	b.n	8017e4a <_vfiprintf_r+0xe2>
 8017ea4:	9b03      	ldr	r3, [sp, #12]
 8017ea6:	1d19      	adds	r1, r3, #4
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	9103      	str	r1, [sp, #12]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	bfbb      	ittet	lt
 8017eb0:	425b      	neglt	r3, r3
 8017eb2:	f042 0202 	orrlt.w	r2, r2, #2
 8017eb6:	9307      	strge	r3, [sp, #28]
 8017eb8:	9307      	strlt	r3, [sp, #28]
 8017eba:	bfb8      	it	lt
 8017ebc:	9204      	strlt	r2, [sp, #16]
 8017ebe:	7823      	ldrb	r3, [r4, #0]
 8017ec0:	2b2e      	cmp	r3, #46	; 0x2e
 8017ec2:	d10c      	bne.n	8017ede <_vfiprintf_r+0x176>
 8017ec4:	7863      	ldrb	r3, [r4, #1]
 8017ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8017ec8:	d135      	bne.n	8017f36 <_vfiprintf_r+0x1ce>
 8017eca:	9b03      	ldr	r3, [sp, #12]
 8017ecc:	1d1a      	adds	r2, r3, #4
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	9203      	str	r2, [sp, #12]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	bfb8      	it	lt
 8017ed6:	f04f 33ff 	movlt.w	r3, #4294967295
 8017eda:	3402      	adds	r4, #2
 8017edc:	9305      	str	r3, [sp, #20]
 8017ede:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017fc4 <_vfiprintf_r+0x25c>
 8017ee2:	7821      	ldrb	r1, [r4, #0]
 8017ee4:	2203      	movs	r2, #3
 8017ee6:	4650      	mov	r0, sl
 8017ee8:	f7e8 f98a 	bl	8000200 <memchr>
 8017eec:	b140      	cbz	r0, 8017f00 <_vfiprintf_r+0x198>
 8017eee:	2340      	movs	r3, #64	; 0x40
 8017ef0:	eba0 000a 	sub.w	r0, r0, sl
 8017ef4:	fa03 f000 	lsl.w	r0, r3, r0
 8017ef8:	9b04      	ldr	r3, [sp, #16]
 8017efa:	4303      	orrs	r3, r0
 8017efc:	3401      	adds	r4, #1
 8017efe:	9304      	str	r3, [sp, #16]
 8017f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f04:	482c      	ldr	r0, [pc, #176]	; (8017fb8 <_vfiprintf_r+0x250>)
 8017f06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017f0a:	2206      	movs	r2, #6
 8017f0c:	f7e8 f978 	bl	8000200 <memchr>
 8017f10:	2800      	cmp	r0, #0
 8017f12:	d03f      	beq.n	8017f94 <_vfiprintf_r+0x22c>
 8017f14:	4b29      	ldr	r3, [pc, #164]	; (8017fbc <_vfiprintf_r+0x254>)
 8017f16:	bb1b      	cbnz	r3, 8017f60 <_vfiprintf_r+0x1f8>
 8017f18:	9b03      	ldr	r3, [sp, #12]
 8017f1a:	3307      	adds	r3, #7
 8017f1c:	f023 0307 	bic.w	r3, r3, #7
 8017f20:	3308      	adds	r3, #8
 8017f22:	9303      	str	r3, [sp, #12]
 8017f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f26:	443b      	add	r3, r7
 8017f28:	9309      	str	r3, [sp, #36]	; 0x24
 8017f2a:	e767      	b.n	8017dfc <_vfiprintf_r+0x94>
 8017f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f30:	460c      	mov	r4, r1
 8017f32:	2001      	movs	r0, #1
 8017f34:	e7a5      	b.n	8017e82 <_vfiprintf_r+0x11a>
 8017f36:	2300      	movs	r3, #0
 8017f38:	3401      	adds	r4, #1
 8017f3a:	9305      	str	r3, [sp, #20]
 8017f3c:	4619      	mov	r1, r3
 8017f3e:	f04f 0c0a 	mov.w	ip, #10
 8017f42:	4620      	mov	r0, r4
 8017f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f48:	3a30      	subs	r2, #48	; 0x30
 8017f4a:	2a09      	cmp	r2, #9
 8017f4c:	d903      	bls.n	8017f56 <_vfiprintf_r+0x1ee>
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d0c5      	beq.n	8017ede <_vfiprintf_r+0x176>
 8017f52:	9105      	str	r1, [sp, #20]
 8017f54:	e7c3      	b.n	8017ede <_vfiprintf_r+0x176>
 8017f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f5a:	4604      	mov	r4, r0
 8017f5c:	2301      	movs	r3, #1
 8017f5e:	e7f0      	b.n	8017f42 <_vfiprintf_r+0x1da>
 8017f60:	ab03      	add	r3, sp, #12
 8017f62:	9300      	str	r3, [sp, #0]
 8017f64:	462a      	mov	r2, r5
 8017f66:	4b16      	ldr	r3, [pc, #88]	; (8017fc0 <_vfiprintf_r+0x258>)
 8017f68:	a904      	add	r1, sp, #16
 8017f6a:	4630      	mov	r0, r6
 8017f6c:	f3af 8000 	nop.w
 8017f70:	4607      	mov	r7, r0
 8017f72:	1c78      	adds	r0, r7, #1
 8017f74:	d1d6      	bne.n	8017f24 <_vfiprintf_r+0x1bc>
 8017f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f78:	07d9      	lsls	r1, r3, #31
 8017f7a:	d405      	bmi.n	8017f88 <_vfiprintf_r+0x220>
 8017f7c:	89ab      	ldrh	r3, [r5, #12]
 8017f7e:	059a      	lsls	r2, r3, #22
 8017f80:	d402      	bmi.n	8017f88 <_vfiprintf_r+0x220>
 8017f82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f84:	f7ff fcb7 	bl	80178f6 <__retarget_lock_release_recursive>
 8017f88:	89ab      	ldrh	r3, [r5, #12]
 8017f8a:	065b      	lsls	r3, r3, #25
 8017f8c:	f53f af12 	bmi.w	8017db4 <_vfiprintf_r+0x4c>
 8017f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f92:	e711      	b.n	8017db8 <_vfiprintf_r+0x50>
 8017f94:	ab03      	add	r3, sp, #12
 8017f96:	9300      	str	r3, [sp, #0]
 8017f98:	462a      	mov	r2, r5
 8017f9a:	4b09      	ldr	r3, [pc, #36]	; (8017fc0 <_vfiprintf_r+0x258>)
 8017f9c:	a904      	add	r1, sp, #16
 8017f9e:	4630      	mov	r0, r6
 8017fa0:	f000 f880 	bl	80180a4 <_printf_i>
 8017fa4:	e7e4      	b.n	8017f70 <_vfiprintf_r+0x208>
 8017fa6:	bf00      	nop
 8017fa8:	0801c25c 	.word	0x0801c25c
 8017fac:	0801c27c 	.word	0x0801c27c
 8017fb0:	0801c23c 	.word	0x0801c23c
 8017fb4:	0801c29c 	.word	0x0801c29c
 8017fb8:	0801c2a6 	.word	0x0801c2a6
 8017fbc:	00000000 	.word	0x00000000
 8017fc0:	08017d43 	.word	0x08017d43
 8017fc4:	0801c2a2 	.word	0x0801c2a2

08017fc8 <_printf_common>:
 8017fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fcc:	4616      	mov	r6, r2
 8017fce:	4699      	mov	r9, r3
 8017fd0:	688a      	ldr	r2, [r1, #8]
 8017fd2:	690b      	ldr	r3, [r1, #16]
 8017fd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017fd8:	4293      	cmp	r3, r2
 8017fda:	bfb8      	it	lt
 8017fdc:	4613      	movlt	r3, r2
 8017fde:	6033      	str	r3, [r6, #0]
 8017fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017fe4:	4607      	mov	r7, r0
 8017fe6:	460c      	mov	r4, r1
 8017fe8:	b10a      	cbz	r2, 8017fee <_printf_common+0x26>
 8017fea:	3301      	adds	r3, #1
 8017fec:	6033      	str	r3, [r6, #0]
 8017fee:	6823      	ldr	r3, [r4, #0]
 8017ff0:	0699      	lsls	r1, r3, #26
 8017ff2:	bf42      	ittt	mi
 8017ff4:	6833      	ldrmi	r3, [r6, #0]
 8017ff6:	3302      	addmi	r3, #2
 8017ff8:	6033      	strmi	r3, [r6, #0]
 8017ffa:	6825      	ldr	r5, [r4, #0]
 8017ffc:	f015 0506 	ands.w	r5, r5, #6
 8018000:	d106      	bne.n	8018010 <_printf_common+0x48>
 8018002:	f104 0a19 	add.w	sl, r4, #25
 8018006:	68e3      	ldr	r3, [r4, #12]
 8018008:	6832      	ldr	r2, [r6, #0]
 801800a:	1a9b      	subs	r3, r3, r2
 801800c:	42ab      	cmp	r3, r5
 801800e:	dc26      	bgt.n	801805e <_printf_common+0x96>
 8018010:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018014:	1e13      	subs	r3, r2, #0
 8018016:	6822      	ldr	r2, [r4, #0]
 8018018:	bf18      	it	ne
 801801a:	2301      	movne	r3, #1
 801801c:	0692      	lsls	r2, r2, #26
 801801e:	d42b      	bmi.n	8018078 <_printf_common+0xb0>
 8018020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018024:	4649      	mov	r1, r9
 8018026:	4638      	mov	r0, r7
 8018028:	47c0      	blx	r8
 801802a:	3001      	adds	r0, #1
 801802c:	d01e      	beq.n	801806c <_printf_common+0xa4>
 801802e:	6823      	ldr	r3, [r4, #0]
 8018030:	68e5      	ldr	r5, [r4, #12]
 8018032:	6832      	ldr	r2, [r6, #0]
 8018034:	f003 0306 	and.w	r3, r3, #6
 8018038:	2b04      	cmp	r3, #4
 801803a:	bf08      	it	eq
 801803c:	1aad      	subeq	r5, r5, r2
 801803e:	68a3      	ldr	r3, [r4, #8]
 8018040:	6922      	ldr	r2, [r4, #16]
 8018042:	bf0c      	ite	eq
 8018044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018048:	2500      	movne	r5, #0
 801804a:	4293      	cmp	r3, r2
 801804c:	bfc4      	itt	gt
 801804e:	1a9b      	subgt	r3, r3, r2
 8018050:	18ed      	addgt	r5, r5, r3
 8018052:	2600      	movs	r6, #0
 8018054:	341a      	adds	r4, #26
 8018056:	42b5      	cmp	r5, r6
 8018058:	d11a      	bne.n	8018090 <_printf_common+0xc8>
 801805a:	2000      	movs	r0, #0
 801805c:	e008      	b.n	8018070 <_printf_common+0xa8>
 801805e:	2301      	movs	r3, #1
 8018060:	4652      	mov	r2, sl
 8018062:	4649      	mov	r1, r9
 8018064:	4638      	mov	r0, r7
 8018066:	47c0      	blx	r8
 8018068:	3001      	adds	r0, #1
 801806a:	d103      	bne.n	8018074 <_printf_common+0xac>
 801806c:	f04f 30ff 	mov.w	r0, #4294967295
 8018070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018074:	3501      	adds	r5, #1
 8018076:	e7c6      	b.n	8018006 <_printf_common+0x3e>
 8018078:	18e1      	adds	r1, r4, r3
 801807a:	1c5a      	adds	r2, r3, #1
 801807c:	2030      	movs	r0, #48	; 0x30
 801807e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018082:	4422      	add	r2, r4
 8018084:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018088:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801808c:	3302      	adds	r3, #2
 801808e:	e7c7      	b.n	8018020 <_printf_common+0x58>
 8018090:	2301      	movs	r3, #1
 8018092:	4622      	mov	r2, r4
 8018094:	4649      	mov	r1, r9
 8018096:	4638      	mov	r0, r7
 8018098:	47c0      	blx	r8
 801809a:	3001      	adds	r0, #1
 801809c:	d0e6      	beq.n	801806c <_printf_common+0xa4>
 801809e:	3601      	adds	r6, #1
 80180a0:	e7d9      	b.n	8018056 <_printf_common+0x8e>
	...

080180a4 <_printf_i>:
 80180a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80180a8:	460c      	mov	r4, r1
 80180aa:	4691      	mov	r9, r2
 80180ac:	7e27      	ldrb	r7, [r4, #24]
 80180ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80180b0:	2f78      	cmp	r7, #120	; 0x78
 80180b2:	4680      	mov	r8, r0
 80180b4:	469a      	mov	sl, r3
 80180b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80180ba:	d807      	bhi.n	80180cc <_printf_i+0x28>
 80180bc:	2f62      	cmp	r7, #98	; 0x62
 80180be:	d80a      	bhi.n	80180d6 <_printf_i+0x32>
 80180c0:	2f00      	cmp	r7, #0
 80180c2:	f000 80d8 	beq.w	8018276 <_printf_i+0x1d2>
 80180c6:	2f58      	cmp	r7, #88	; 0x58
 80180c8:	f000 80a3 	beq.w	8018212 <_printf_i+0x16e>
 80180cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80180d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80180d4:	e03a      	b.n	801814c <_printf_i+0xa8>
 80180d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80180da:	2b15      	cmp	r3, #21
 80180dc:	d8f6      	bhi.n	80180cc <_printf_i+0x28>
 80180de:	a001      	add	r0, pc, #4	; (adr r0, 80180e4 <_printf_i+0x40>)
 80180e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80180e4:	0801813d 	.word	0x0801813d
 80180e8:	08018151 	.word	0x08018151
 80180ec:	080180cd 	.word	0x080180cd
 80180f0:	080180cd 	.word	0x080180cd
 80180f4:	080180cd 	.word	0x080180cd
 80180f8:	080180cd 	.word	0x080180cd
 80180fc:	08018151 	.word	0x08018151
 8018100:	080180cd 	.word	0x080180cd
 8018104:	080180cd 	.word	0x080180cd
 8018108:	080180cd 	.word	0x080180cd
 801810c:	080180cd 	.word	0x080180cd
 8018110:	0801825d 	.word	0x0801825d
 8018114:	08018181 	.word	0x08018181
 8018118:	0801823f 	.word	0x0801823f
 801811c:	080180cd 	.word	0x080180cd
 8018120:	080180cd 	.word	0x080180cd
 8018124:	0801827f 	.word	0x0801827f
 8018128:	080180cd 	.word	0x080180cd
 801812c:	08018181 	.word	0x08018181
 8018130:	080180cd 	.word	0x080180cd
 8018134:	080180cd 	.word	0x080180cd
 8018138:	08018247 	.word	0x08018247
 801813c:	680b      	ldr	r3, [r1, #0]
 801813e:	1d1a      	adds	r2, r3, #4
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	600a      	str	r2, [r1, #0]
 8018144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801814c:	2301      	movs	r3, #1
 801814e:	e0a3      	b.n	8018298 <_printf_i+0x1f4>
 8018150:	6825      	ldr	r5, [r4, #0]
 8018152:	6808      	ldr	r0, [r1, #0]
 8018154:	062e      	lsls	r6, r5, #24
 8018156:	f100 0304 	add.w	r3, r0, #4
 801815a:	d50a      	bpl.n	8018172 <_printf_i+0xce>
 801815c:	6805      	ldr	r5, [r0, #0]
 801815e:	600b      	str	r3, [r1, #0]
 8018160:	2d00      	cmp	r5, #0
 8018162:	da03      	bge.n	801816c <_printf_i+0xc8>
 8018164:	232d      	movs	r3, #45	; 0x2d
 8018166:	426d      	negs	r5, r5
 8018168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801816c:	485e      	ldr	r0, [pc, #376]	; (80182e8 <_printf_i+0x244>)
 801816e:	230a      	movs	r3, #10
 8018170:	e019      	b.n	80181a6 <_printf_i+0x102>
 8018172:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018176:	6805      	ldr	r5, [r0, #0]
 8018178:	600b      	str	r3, [r1, #0]
 801817a:	bf18      	it	ne
 801817c:	b22d      	sxthne	r5, r5
 801817e:	e7ef      	b.n	8018160 <_printf_i+0xbc>
 8018180:	680b      	ldr	r3, [r1, #0]
 8018182:	6825      	ldr	r5, [r4, #0]
 8018184:	1d18      	adds	r0, r3, #4
 8018186:	6008      	str	r0, [r1, #0]
 8018188:	0628      	lsls	r0, r5, #24
 801818a:	d501      	bpl.n	8018190 <_printf_i+0xec>
 801818c:	681d      	ldr	r5, [r3, #0]
 801818e:	e002      	b.n	8018196 <_printf_i+0xf2>
 8018190:	0669      	lsls	r1, r5, #25
 8018192:	d5fb      	bpl.n	801818c <_printf_i+0xe8>
 8018194:	881d      	ldrh	r5, [r3, #0]
 8018196:	4854      	ldr	r0, [pc, #336]	; (80182e8 <_printf_i+0x244>)
 8018198:	2f6f      	cmp	r7, #111	; 0x6f
 801819a:	bf0c      	ite	eq
 801819c:	2308      	moveq	r3, #8
 801819e:	230a      	movne	r3, #10
 80181a0:	2100      	movs	r1, #0
 80181a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80181a6:	6866      	ldr	r6, [r4, #4]
 80181a8:	60a6      	str	r6, [r4, #8]
 80181aa:	2e00      	cmp	r6, #0
 80181ac:	bfa2      	ittt	ge
 80181ae:	6821      	ldrge	r1, [r4, #0]
 80181b0:	f021 0104 	bicge.w	r1, r1, #4
 80181b4:	6021      	strge	r1, [r4, #0]
 80181b6:	b90d      	cbnz	r5, 80181bc <_printf_i+0x118>
 80181b8:	2e00      	cmp	r6, #0
 80181ba:	d04d      	beq.n	8018258 <_printf_i+0x1b4>
 80181bc:	4616      	mov	r6, r2
 80181be:	fbb5 f1f3 	udiv	r1, r5, r3
 80181c2:	fb03 5711 	mls	r7, r3, r1, r5
 80181c6:	5dc7      	ldrb	r7, [r0, r7]
 80181c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80181cc:	462f      	mov	r7, r5
 80181ce:	42bb      	cmp	r3, r7
 80181d0:	460d      	mov	r5, r1
 80181d2:	d9f4      	bls.n	80181be <_printf_i+0x11a>
 80181d4:	2b08      	cmp	r3, #8
 80181d6:	d10b      	bne.n	80181f0 <_printf_i+0x14c>
 80181d8:	6823      	ldr	r3, [r4, #0]
 80181da:	07df      	lsls	r7, r3, #31
 80181dc:	d508      	bpl.n	80181f0 <_printf_i+0x14c>
 80181de:	6923      	ldr	r3, [r4, #16]
 80181e0:	6861      	ldr	r1, [r4, #4]
 80181e2:	4299      	cmp	r1, r3
 80181e4:	bfde      	ittt	le
 80181e6:	2330      	movle	r3, #48	; 0x30
 80181e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80181ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80181f0:	1b92      	subs	r2, r2, r6
 80181f2:	6122      	str	r2, [r4, #16]
 80181f4:	f8cd a000 	str.w	sl, [sp]
 80181f8:	464b      	mov	r3, r9
 80181fa:	aa03      	add	r2, sp, #12
 80181fc:	4621      	mov	r1, r4
 80181fe:	4640      	mov	r0, r8
 8018200:	f7ff fee2 	bl	8017fc8 <_printf_common>
 8018204:	3001      	adds	r0, #1
 8018206:	d14c      	bne.n	80182a2 <_printf_i+0x1fe>
 8018208:	f04f 30ff 	mov.w	r0, #4294967295
 801820c:	b004      	add	sp, #16
 801820e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018212:	4835      	ldr	r0, [pc, #212]	; (80182e8 <_printf_i+0x244>)
 8018214:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018218:	6823      	ldr	r3, [r4, #0]
 801821a:	680e      	ldr	r6, [r1, #0]
 801821c:	061f      	lsls	r7, r3, #24
 801821e:	f856 5b04 	ldr.w	r5, [r6], #4
 8018222:	600e      	str	r6, [r1, #0]
 8018224:	d514      	bpl.n	8018250 <_printf_i+0x1ac>
 8018226:	07d9      	lsls	r1, r3, #31
 8018228:	bf44      	itt	mi
 801822a:	f043 0320 	orrmi.w	r3, r3, #32
 801822e:	6023      	strmi	r3, [r4, #0]
 8018230:	b91d      	cbnz	r5, 801823a <_printf_i+0x196>
 8018232:	6823      	ldr	r3, [r4, #0]
 8018234:	f023 0320 	bic.w	r3, r3, #32
 8018238:	6023      	str	r3, [r4, #0]
 801823a:	2310      	movs	r3, #16
 801823c:	e7b0      	b.n	80181a0 <_printf_i+0xfc>
 801823e:	6823      	ldr	r3, [r4, #0]
 8018240:	f043 0320 	orr.w	r3, r3, #32
 8018244:	6023      	str	r3, [r4, #0]
 8018246:	2378      	movs	r3, #120	; 0x78
 8018248:	4828      	ldr	r0, [pc, #160]	; (80182ec <_printf_i+0x248>)
 801824a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801824e:	e7e3      	b.n	8018218 <_printf_i+0x174>
 8018250:	065e      	lsls	r6, r3, #25
 8018252:	bf48      	it	mi
 8018254:	b2ad      	uxthmi	r5, r5
 8018256:	e7e6      	b.n	8018226 <_printf_i+0x182>
 8018258:	4616      	mov	r6, r2
 801825a:	e7bb      	b.n	80181d4 <_printf_i+0x130>
 801825c:	680b      	ldr	r3, [r1, #0]
 801825e:	6826      	ldr	r6, [r4, #0]
 8018260:	6960      	ldr	r0, [r4, #20]
 8018262:	1d1d      	adds	r5, r3, #4
 8018264:	600d      	str	r5, [r1, #0]
 8018266:	0635      	lsls	r5, r6, #24
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	d501      	bpl.n	8018270 <_printf_i+0x1cc>
 801826c:	6018      	str	r0, [r3, #0]
 801826e:	e002      	b.n	8018276 <_printf_i+0x1d2>
 8018270:	0671      	lsls	r1, r6, #25
 8018272:	d5fb      	bpl.n	801826c <_printf_i+0x1c8>
 8018274:	8018      	strh	r0, [r3, #0]
 8018276:	2300      	movs	r3, #0
 8018278:	6123      	str	r3, [r4, #16]
 801827a:	4616      	mov	r6, r2
 801827c:	e7ba      	b.n	80181f4 <_printf_i+0x150>
 801827e:	680b      	ldr	r3, [r1, #0]
 8018280:	1d1a      	adds	r2, r3, #4
 8018282:	600a      	str	r2, [r1, #0]
 8018284:	681e      	ldr	r6, [r3, #0]
 8018286:	6862      	ldr	r2, [r4, #4]
 8018288:	2100      	movs	r1, #0
 801828a:	4630      	mov	r0, r6
 801828c:	f7e7 ffb8 	bl	8000200 <memchr>
 8018290:	b108      	cbz	r0, 8018296 <_printf_i+0x1f2>
 8018292:	1b80      	subs	r0, r0, r6
 8018294:	6060      	str	r0, [r4, #4]
 8018296:	6863      	ldr	r3, [r4, #4]
 8018298:	6123      	str	r3, [r4, #16]
 801829a:	2300      	movs	r3, #0
 801829c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80182a0:	e7a8      	b.n	80181f4 <_printf_i+0x150>
 80182a2:	6923      	ldr	r3, [r4, #16]
 80182a4:	4632      	mov	r2, r6
 80182a6:	4649      	mov	r1, r9
 80182a8:	4640      	mov	r0, r8
 80182aa:	47d0      	blx	sl
 80182ac:	3001      	adds	r0, #1
 80182ae:	d0ab      	beq.n	8018208 <_printf_i+0x164>
 80182b0:	6823      	ldr	r3, [r4, #0]
 80182b2:	079b      	lsls	r3, r3, #30
 80182b4:	d413      	bmi.n	80182de <_printf_i+0x23a>
 80182b6:	68e0      	ldr	r0, [r4, #12]
 80182b8:	9b03      	ldr	r3, [sp, #12]
 80182ba:	4298      	cmp	r0, r3
 80182bc:	bfb8      	it	lt
 80182be:	4618      	movlt	r0, r3
 80182c0:	e7a4      	b.n	801820c <_printf_i+0x168>
 80182c2:	2301      	movs	r3, #1
 80182c4:	4632      	mov	r2, r6
 80182c6:	4649      	mov	r1, r9
 80182c8:	4640      	mov	r0, r8
 80182ca:	47d0      	blx	sl
 80182cc:	3001      	adds	r0, #1
 80182ce:	d09b      	beq.n	8018208 <_printf_i+0x164>
 80182d0:	3501      	adds	r5, #1
 80182d2:	68e3      	ldr	r3, [r4, #12]
 80182d4:	9903      	ldr	r1, [sp, #12]
 80182d6:	1a5b      	subs	r3, r3, r1
 80182d8:	42ab      	cmp	r3, r5
 80182da:	dcf2      	bgt.n	80182c2 <_printf_i+0x21e>
 80182dc:	e7eb      	b.n	80182b6 <_printf_i+0x212>
 80182de:	2500      	movs	r5, #0
 80182e0:	f104 0619 	add.w	r6, r4, #25
 80182e4:	e7f5      	b.n	80182d2 <_printf_i+0x22e>
 80182e6:	bf00      	nop
 80182e8:	0801c2ad 	.word	0x0801c2ad
 80182ec:	0801c2be 	.word	0x0801c2be

080182f0 <_sbrk_r>:
 80182f0:	b538      	push	{r3, r4, r5, lr}
 80182f2:	4d06      	ldr	r5, [pc, #24]	; (801830c <_sbrk_r+0x1c>)
 80182f4:	2300      	movs	r3, #0
 80182f6:	4604      	mov	r4, r0
 80182f8:	4608      	mov	r0, r1
 80182fa:	602b      	str	r3, [r5, #0]
 80182fc:	f7e8 fd9a 	bl	8000e34 <_sbrk>
 8018300:	1c43      	adds	r3, r0, #1
 8018302:	d102      	bne.n	801830a <_sbrk_r+0x1a>
 8018304:	682b      	ldr	r3, [r5, #0]
 8018306:	b103      	cbz	r3, 801830a <_sbrk_r+0x1a>
 8018308:	6023      	str	r3, [r4, #0]
 801830a:	bd38      	pop	{r3, r4, r5, pc}
 801830c:	20008628 	.word	0x20008628

08018310 <__sread>:
 8018310:	b510      	push	{r4, lr}
 8018312:	460c      	mov	r4, r1
 8018314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018318:	f000 fa92 	bl	8018840 <_read_r>
 801831c:	2800      	cmp	r0, #0
 801831e:	bfab      	itete	ge
 8018320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018322:	89a3      	ldrhlt	r3, [r4, #12]
 8018324:	181b      	addge	r3, r3, r0
 8018326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801832a:	bfac      	ite	ge
 801832c:	6563      	strge	r3, [r4, #84]	; 0x54
 801832e:	81a3      	strhlt	r3, [r4, #12]
 8018330:	bd10      	pop	{r4, pc}

08018332 <__swrite>:
 8018332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018336:	461f      	mov	r7, r3
 8018338:	898b      	ldrh	r3, [r1, #12]
 801833a:	05db      	lsls	r3, r3, #23
 801833c:	4605      	mov	r5, r0
 801833e:	460c      	mov	r4, r1
 8018340:	4616      	mov	r6, r2
 8018342:	d505      	bpl.n	8018350 <__swrite+0x1e>
 8018344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018348:	2302      	movs	r3, #2
 801834a:	2200      	movs	r2, #0
 801834c:	f000 f9d0 	bl	80186f0 <_lseek_r>
 8018350:	89a3      	ldrh	r3, [r4, #12]
 8018352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801835a:	81a3      	strh	r3, [r4, #12]
 801835c:	4632      	mov	r2, r6
 801835e:	463b      	mov	r3, r7
 8018360:	4628      	mov	r0, r5
 8018362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018366:	f000 b869 	b.w	801843c <_write_r>

0801836a <__sseek>:
 801836a:	b510      	push	{r4, lr}
 801836c:	460c      	mov	r4, r1
 801836e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018372:	f000 f9bd 	bl	80186f0 <_lseek_r>
 8018376:	1c43      	adds	r3, r0, #1
 8018378:	89a3      	ldrh	r3, [r4, #12]
 801837a:	bf15      	itete	ne
 801837c:	6560      	strne	r0, [r4, #84]	; 0x54
 801837e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018386:	81a3      	strheq	r3, [r4, #12]
 8018388:	bf18      	it	ne
 801838a:	81a3      	strhne	r3, [r4, #12]
 801838c:	bd10      	pop	{r4, pc}

0801838e <__sclose>:
 801838e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018392:	f000 b8db 	b.w	801854c <_close_r>
	...

08018398 <__swbuf_r>:
 8018398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801839a:	460e      	mov	r6, r1
 801839c:	4614      	mov	r4, r2
 801839e:	4605      	mov	r5, r0
 80183a0:	b118      	cbz	r0, 80183aa <__swbuf_r+0x12>
 80183a2:	6983      	ldr	r3, [r0, #24]
 80183a4:	b90b      	cbnz	r3, 80183aa <__swbuf_r+0x12>
 80183a6:	f7ff f9f5 	bl	8017794 <__sinit>
 80183aa:	4b21      	ldr	r3, [pc, #132]	; (8018430 <__swbuf_r+0x98>)
 80183ac:	429c      	cmp	r4, r3
 80183ae:	d12b      	bne.n	8018408 <__swbuf_r+0x70>
 80183b0:	686c      	ldr	r4, [r5, #4]
 80183b2:	69a3      	ldr	r3, [r4, #24]
 80183b4:	60a3      	str	r3, [r4, #8]
 80183b6:	89a3      	ldrh	r3, [r4, #12]
 80183b8:	071a      	lsls	r2, r3, #28
 80183ba:	d52f      	bpl.n	801841c <__swbuf_r+0x84>
 80183bc:	6923      	ldr	r3, [r4, #16]
 80183be:	b36b      	cbz	r3, 801841c <__swbuf_r+0x84>
 80183c0:	6923      	ldr	r3, [r4, #16]
 80183c2:	6820      	ldr	r0, [r4, #0]
 80183c4:	1ac0      	subs	r0, r0, r3
 80183c6:	6963      	ldr	r3, [r4, #20]
 80183c8:	b2f6      	uxtb	r6, r6
 80183ca:	4283      	cmp	r3, r0
 80183cc:	4637      	mov	r7, r6
 80183ce:	dc04      	bgt.n	80183da <__swbuf_r+0x42>
 80183d0:	4621      	mov	r1, r4
 80183d2:	4628      	mov	r0, r5
 80183d4:	f000 f950 	bl	8018678 <_fflush_r>
 80183d8:	bb30      	cbnz	r0, 8018428 <__swbuf_r+0x90>
 80183da:	68a3      	ldr	r3, [r4, #8]
 80183dc:	3b01      	subs	r3, #1
 80183de:	60a3      	str	r3, [r4, #8]
 80183e0:	6823      	ldr	r3, [r4, #0]
 80183e2:	1c5a      	adds	r2, r3, #1
 80183e4:	6022      	str	r2, [r4, #0]
 80183e6:	701e      	strb	r6, [r3, #0]
 80183e8:	6963      	ldr	r3, [r4, #20]
 80183ea:	3001      	adds	r0, #1
 80183ec:	4283      	cmp	r3, r0
 80183ee:	d004      	beq.n	80183fa <__swbuf_r+0x62>
 80183f0:	89a3      	ldrh	r3, [r4, #12]
 80183f2:	07db      	lsls	r3, r3, #31
 80183f4:	d506      	bpl.n	8018404 <__swbuf_r+0x6c>
 80183f6:	2e0a      	cmp	r6, #10
 80183f8:	d104      	bne.n	8018404 <__swbuf_r+0x6c>
 80183fa:	4621      	mov	r1, r4
 80183fc:	4628      	mov	r0, r5
 80183fe:	f000 f93b 	bl	8018678 <_fflush_r>
 8018402:	b988      	cbnz	r0, 8018428 <__swbuf_r+0x90>
 8018404:	4638      	mov	r0, r7
 8018406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018408:	4b0a      	ldr	r3, [pc, #40]	; (8018434 <__swbuf_r+0x9c>)
 801840a:	429c      	cmp	r4, r3
 801840c:	d101      	bne.n	8018412 <__swbuf_r+0x7a>
 801840e:	68ac      	ldr	r4, [r5, #8]
 8018410:	e7cf      	b.n	80183b2 <__swbuf_r+0x1a>
 8018412:	4b09      	ldr	r3, [pc, #36]	; (8018438 <__swbuf_r+0xa0>)
 8018414:	429c      	cmp	r4, r3
 8018416:	bf08      	it	eq
 8018418:	68ec      	ldreq	r4, [r5, #12]
 801841a:	e7ca      	b.n	80183b2 <__swbuf_r+0x1a>
 801841c:	4621      	mov	r1, r4
 801841e:	4628      	mov	r0, r5
 8018420:	f000 f81e 	bl	8018460 <__swsetup_r>
 8018424:	2800      	cmp	r0, #0
 8018426:	d0cb      	beq.n	80183c0 <__swbuf_r+0x28>
 8018428:	f04f 37ff 	mov.w	r7, #4294967295
 801842c:	e7ea      	b.n	8018404 <__swbuf_r+0x6c>
 801842e:	bf00      	nop
 8018430:	0801c25c 	.word	0x0801c25c
 8018434:	0801c27c 	.word	0x0801c27c
 8018438:	0801c23c 	.word	0x0801c23c

0801843c <_write_r>:
 801843c:	b538      	push	{r3, r4, r5, lr}
 801843e:	4d07      	ldr	r5, [pc, #28]	; (801845c <_write_r+0x20>)
 8018440:	4604      	mov	r4, r0
 8018442:	4608      	mov	r0, r1
 8018444:	4611      	mov	r1, r2
 8018446:	2200      	movs	r2, #0
 8018448:	602a      	str	r2, [r5, #0]
 801844a:	461a      	mov	r2, r3
 801844c:	f7e8 fca1 	bl	8000d92 <_write>
 8018450:	1c43      	adds	r3, r0, #1
 8018452:	d102      	bne.n	801845a <_write_r+0x1e>
 8018454:	682b      	ldr	r3, [r5, #0]
 8018456:	b103      	cbz	r3, 801845a <_write_r+0x1e>
 8018458:	6023      	str	r3, [r4, #0]
 801845a:	bd38      	pop	{r3, r4, r5, pc}
 801845c:	20008628 	.word	0x20008628

08018460 <__swsetup_r>:
 8018460:	4b32      	ldr	r3, [pc, #200]	; (801852c <__swsetup_r+0xcc>)
 8018462:	b570      	push	{r4, r5, r6, lr}
 8018464:	681d      	ldr	r5, [r3, #0]
 8018466:	4606      	mov	r6, r0
 8018468:	460c      	mov	r4, r1
 801846a:	b125      	cbz	r5, 8018476 <__swsetup_r+0x16>
 801846c:	69ab      	ldr	r3, [r5, #24]
 801846e:	b913      	cbnz	r3, 8018476 <__swsetup_r+0x16>
 8018470:	4628      	mov	r0, r5
 8018472:	f7ff f98f 	bl	8017794 <__sinit>
 8018476:	4b2e      	ldr	r3, [pc, #184]	; (8018530 <__swsetup_r+0xd0>)
 8018478:	429c      	cmp	r4, r3
 801847a:	d10f      	bne.n	801849c <__swsetup_r+0x3c>
 801847c:	686c      	ldr	r4, [r5, #4]
 801847e:	89a3      	ldrh	r3, [r4, #12]
 8018480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018484:	0719      	lsls	r1, r3, #28
 8018486:	d42c      	bmi.n	80184e2 <__swsetup_r+0x82>
 8018488:	06dd      	lsls	r5, r3, #27
 801848a:	d411      	bmi.n	80184b0 <__swsetup_r+0x50>
 801848c:	2309      	movs	r3, #9
 801848e:	6033      	str	r3, [r6, #0]
 8018490:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018494:	81a3      	strh	r3, [r4, #12]
 8018496:	f04f 30ff 	mov.w	r0, #4294967295
 801849a:	e03e      	b.n	801851a <__swsetup_r+0xba>
 801849c:	4b25      	ldr	r3, [pc, #148]	; (8018534 <__swsetup_r+0xd4>)
 801849e:	429c      	cmp	r4, r3
 80184a0:	d101      	bne.n	80184a6 <__swsetup_r+0x46>
 80184a2:	68ac      	ldr	r4, [r5, #8]
 80184a4:	e7eb      	b.n	801847e <__swsetup_r+0x1e>
 80184a6:	4b24      	ldr	r3, [pc, #144]	; (8018538 <__swsetup_r+0xd8>)
 80184a8:	429c      	cmp	r4, r3
 80184aa:	bf08      	it	eq
 80184ac:	68ec      	ldreq	r4, [r5, #12]
 80184ae:	e7e6      	b.n	801847e <__swsetup_r+0x1e>
 80184b0:	0758      	lsls	r0, r3, #29
 80184b2:	d512      	bpl.n	80184da <__swsetup_r+0x7a>
 80184b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80184b6:	b141      	cbz	r1, 80184ca <__swsetup_r+0x6a>
 80184b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80184bc:	4299      	cmp	r1, r3
 80184be:	d002      	beq.n	80184c6 <__swsetup_r+0x66>
 80184c0:	4630      	mov	r0, r6
 80184c2:	f7ff fa21 	bl	8017908 <_free_r>
 80184c6:	2300      	movs	r3, #0
 80184c8:	6363      	str	r3, [r4, #52]	; 0x34
 80184ca:	89a3      	ldrh	r3, [r4, #12]
 80184cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80184d0:	81a3      	strh	r3, [r4, #12]
 80184d2:	2300      	movs	r3, #0
 80184d4:	6063      	str	r3, [r4, #4]
 80184d6:	6923      	ldr	r3, [r4, #16]
 80184d8:	6023      	str	r3, [r4, #0]
 80184da:	89a3      	ldrh	r3, [r4, #12]
 80184dc:	f043 0308 	orr.w	r3, r3, #8
 80184e0:	81a3      	strh	r3, [r4, #12]
 80184e2:	6923      	ldr	r3, [r4, #16]
 80184e4:	b94b      	cbnz	r3, 80184fa <__swsetup_r+0x9a>
 80184e6:	89a3      	ldrh	r3, [r4, #12]
 80184e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80184ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80184f0:	d003      	beq.n	80184fa <__swsetup_r+0x9a>
 80184f2:	4621      	mov	r1, r4
 80184f4:	4630      	mov	r0, r6
 80184f6:	f000 f931 	bl	801875c <__smakebuf_r>
 80184fa:	89a0      	ldrh	r0, [r4, #12]
 80184fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018500:	f010 0301 	ands.w	r3, r0, #1
 8018504:	d00a      	beq.n	801851c <__swsetup_r+0xbc>
 8018506:	2300      	movs	r3, #0
 8018508:	60a3      	str	r3, [r4, #8]
 801850a:	6963      	ldr	r3, [r4, #20]
 801850c:	425b      	negs	r3, r3
 801850e:	61a3      	str	r3, [r4, #24]
 8018510:	6923      	ldr	r3, [r4, #16]
 8018512:	b943      	cbnz	r3, 8018526 <__swsetup_r+0xc6>
 8018514:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018518:	d1ba      	bne.n	8018490 <__swsetup_r+0x30>
 801851a:	bd70      	pop	{r4, r5, r6, pc}
 801851c:	0781      	lsls	r1, r0, #30
 801851e:	bf58      	it	pl
 8018520:	6963      	ldrpl	r3, [r4, #20]
 8018522:	60a3      	str	r3, [r4, #8]
 8018524:	e7f4      	b.n	8018510 <__swsetup_r+0xb0>
 8018526:	2000      	movs	r0, #0
 8018528:	e7f7      	b.n	801851a <__swsetup_r+0xba>
 801852a:	bf00      	nop
 801852c:	20000198 	.word	0x20000198
 8018530:	0801c25c 	.word	0x0801c25c
 8018534:	0801c27c 	.word	0x0801c27c
 8018538:	0801c23c 	.word	0x0801c23c

0801853c <abort>:
 801853c:	b508      	push	{r3, lr}
 801853e:	2006      	movs	r0, #6
 8018540:	f000 f9b8 	bl	80188b4 <raise>
 8018544:	2001      	movs	r0, #1
 8018546:	f7e8 fbfd 	bl	8000d44 <_exit>
	...

0801854c <_close_r>:
 801854c:	b538      	push	{r3, r4, r5, lr}
 801854e:	4d06      	ldr	r5, [pc, #24]	; (8018568 <_close_r+0x1c>)
 8018550:	2300      	movs	r3, #0
 8018552:	4604      	mov	r4, r0
 8018554:	4608      	mov	r0, r1
 8018556:	602b      	str	r3, [r5, #0]
 8018558:	f7e8 fc37 	bl	8000dca <_close>
 801855c:	1c43      	adds	r3, r0, #1
 801855e:	d102      	bne.n	8018566 <_close_r+0x1a>
 8018560:	682b      	ldr	r3, [r5, #0]
 8018562:	b103      	cbz	r3, 8018566 <_close_r+0x1a>
 8018564:	6023      	str	r3, [r4, #0]
 8018566:	bd38      	pop	{r3, r4, r5, pc}
 8018568:	20008628 	.word	0x20008628

0801856c <__sflush_r>:
 801856c:	898a      	ldrh	r2, [r1, #12]
 801856e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018572:	4605      	mov	r5, r0
 8018574:	0710      	lsls	r0, r2, #28
 8018576:	460c      	mov	r4, r1
 8018578:	d458      	bmi.n	801862c <__sflush_r+0xc0>
 801857a:	684b      	ldr	r3, [r1, #4]
 801857c:	2b00      	cmp	r3, #0
 801857e:	dc05      	bgt.n	801858c <__sflush_r+0x20>
 8018580:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018582:	2b00      	cmp	r3, #0
 8018584:	dc02      	bgt.n	801858c <__sflush_r+0x20>
 8018586:	2000      	movs	r0, #0
 8018588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801858c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801858e:	2e00      	cmp	r6, #0
 8018590:	d0f9      	beq.n	8018586 <__sflush_r+0x1a>
 8018592:	2300      	movs	r3, #0
 8018594:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018598:	682f      	ldr	r7, [r5, #0]
 801859a:	602b      	str	r3, [r5, #0]
 801859c:	d032      	beq.n	8018604 <__sflush_r+0x98>
 801859e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80185a0:	89a3      	ldrh	r3, [r4, #12]
 80185a2:	075a      	lsls	r2, r3, #29
 80185a4:	d505      	bpl.n	80185b2 <__sflush_r+0x46>
 80185a6:	6863      	ldr	r3, [r4, #4]
 80185a8:	1ac0      	subs	r0, r0, r3
 80185aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80185ac:	b10b      	cbz	r3, 80185b2 <__sflush_r+0x46>
 80185ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80185b0:	1ac0      	subs	r0, r0, r3
 80185b2:	2300      	movs	r3, #0
 80185b4:	4602      	mov	r2, r0
 80185b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80185b8:	6a21      	ldr	r1, [r4, #32]
 80185ba:	4628      	mov	r0, r5
 80185bc:	47b0      	blx	r6
 80185be:	1c43      	adds	r3, r0, #1
 80185c0:	89a3      	ldrh	r3, [r4, #12]
 80185c2:	d106      	bne.n	80185d2 <__sflush_r+0x66>
 80185c4:	6829      	ldr	r1, [r5, #0]
 80185c6:	291d      	cmp	r1, #29
 80185c8:	d82c      	bhi.n	8018624 <__sflush_r+0xb8>
 80185ca:	4a2a      	ldr	r2, [pc, #168]	; (8018674 <__sflush_r+0x108>)
 80185cc:	40ca      	lsrs	r2, r1
 80185ce:	07d6      	lsls	r6, r2, #31
 80185d0:	d528      	bpl.n	8018624 <__sflush_r+0xb8>
 80185d2:	2200      	movs	r2, #0
 80185d4:	6062      	str	r2, [r4, #4]
 80185d6:	04d9      	lsls	r1, r3, #19
 80185d8:	6922      	ldr	r2, [r4, #16]
 80185da:	6022      	str	r2, [r4, #0]
 80185dc:	d504      	bpl.n	80185e8 <__sflush_r+0x7c>
 80185de:	1c42      	adds	r2, r0, #1
 80185e0:	d101      	bne.n	80185e6 <__sflush_r+0x7a>
 80185e2:	682b      	ldr	r3, [r5, #0]
 80185e4:	b903      	cbnz	r3, 80185e8 <__sflush_r+0x7c>
 80185e6:	6560      	str	r0, [r4, #84]	; 0x54
 80185e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80185ea:	602f      	str	r7, [r5, #0]
 80185ec:	2900      	cmp	r1, #0
 80185ee:	d0ca      	beq.n	8018586 <__sflush_r+0x1a>
 80185f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80185f4:	4299      	cmp	r1, r3
 80185f6:	d002      	beq.n	80185fe <__sflush_r+0x92>
 80185f8:	4628      	mov	r0, r5
 80185fa:	f7ff f985 	bl	8017908 <_free_r>
 80185fe:	2000      	movs	r0, #0
 8018600:	6360      	str	r0, [r4, #52]	; 0x34
 8018602:	e7c1      	b.n	8018588 <__sflush_r+0x1c>
 8018604:	6a21      	ldr	r1, [r4, #32]
 8018606:	2301      	movs	r3, #1
 8018608:	4628      	mov	r0, r5
 801860a:	47b0      	blx	r6
 801860c:	1c41      	adds	r1, r0, #1
 801860e:	d1c7      	bne.n	80185a0 <__sflush_r+0x34>
 8018610:	682b      	ldr	r3, [r5, #0]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d0c4      	beq.n	80185a0 <__sflush_r+0x34>
 8018616:	2b1d      	cmp	r3, #29
 8018618:	d001      	beq.n	801861e <__sflush_r+0xb2>
 801861a:	2b16      	cmp	r3, #22
 801861c:	d101      	bne.n	8018622 <__sflush_r+0xb6>
 801861e:	602f      	str	r7, [r5, #0]
 8018620:	e7b1      	b.n	8018586 <__sflush_r+0x1a>
 8018622:	89a3      	ldrh	r3, [r4, #12]
 8018624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018628:	81a3      	strh	r3, [r4, #12]
 801862a:	e7ad      	b.n	8018588 <__sflush_r+0x1c>
 801862c:	690f      	ldr	r7, [r1, #16]
 801862e:	2f00      	cmp	r7, #0
 8018630:	d0a9      	beq.n	8018586 <__sflush_r+0x1a>
 8018632:	0793      	lsls	r3, r2, #30
 8018634:	680e      	ldr	r6, [r1, #0]
 8018636:	bf08      	it	eq
 8018638:	694b      	ldreq	r3, [r1, #20]
 801863a:	600f      	str	r7, [r1, #0]
 801863c:	bf18      	it	ne
 801863e:	2300      	movne	r3, #0
 8018640:	eba6 0807 	sub.w	r8, r6, r7
 8018644:	608b      	str	r3, [r1, #8]
 8018646:	f1b8 0f00 	cmp.w	r8, #0
 801864a:	dd9c      	ble.n	8018586 <__sflush_r+0x1a>
 801864c:	6a21      	ldr	r1, [r4, #32]
 801864e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018650:	4643      	mov	r3, r8
 8018652:	463a      	mov	r2, r7
 8018654:	4628      	mov	r0, r5
 8018656:	47b0      	blx	r6
 8018658:	2800      	cmp	r0, #0
 801865a:	dc06      	bgt.n	801866a <__sflush_r+0xfe>
 801865c:	89a3      	ldrh	r3, [r4, #12]
 801865e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018662:	81a3      	strh	r3, [r4, #12]
 8018664:	f04f 30ff 	mov.w	r0, #4294967295
 8018668:	e78e      	b.n	8018588 <__sflush_r+0x1c>
 801866a:	4407      	add	r7, r0
 801866c:	eba8 0800 	sub.w	r8, r8, r0
 8018670:	e7e9      	b.n	8018646 <__sflush_r+0xda>
 8018672:	bf00      	nop
 8018674:	20400001 	.word	0x20400001

08018678 <_fflush_r>:
 8018678:	b538      	push	{r3, r4, r5, lr}
 801867a:	690b      	ldr	r3, [r1, #16]
 801867c:	4605      	mov	r5, r0
 801867e:	460c      	mov	r4, r1
 8018680:	b913      	cbnz	r3, 8018688 <_fflush_r+0x10>
 8018682:	2500      	movs	r5, #0
 8018684:	4628      	mov	r0, r5
 8018686:	bd38      	pop	{r3, r4, r5, pc}
 8018688:	b118      	cbz	r0, 8018692 <_fflush_r+0x1a>
 801868a:	6983      	ldr	r3, [r0, #24]
 801868c:	b90b      	cbnz	r3, 8018692 <_fflush_r+0x1a>
 801868e:	f7ff f881 	bl	8017794 <__sinit>
 8018692:	4b14      	ldr	r3, [pc, #80]	; (80186e4 <_fflush_r+0x6c>)
 8018694:	429c      	cmp	r4, r3
 8018696:	d11b      	bne.n	80186d0 <_fflush_r+0x58>
 8018698:	686c      	ldr	r4, [r5, #4]
 801869a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d0ef      	beq.n	8018682 <_fflush_r+0xa>
 80186a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80186a4:	07d0      	lsls	r0, r2, #31
 80186a6:	d404      	bmi.n	80186b2 <_fflush_r+0x3a>
 80186a8:	0599      	lsls	r1, r3, #22
 80186aa:	d402      	bmi.n	80186b2 <_fflush_r+0x3a>
 80186ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80186ae:	f7ff f921 	bl	80178f4 <__retarget_lock_acquire_recursive>
 80186b2:	4628      	mov	r0, r5
 80186b4:	4621      	mov	r1, r4
 80186b6:	f7ff ff59 	bl	801856c <__sflush_r>
 80186ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80186bc:	07da      	lsls	r2, r3, #31
 80186be:	4605      	mov	r5, r0
 80186c0:	d4e0      	bmi.n	8018684 <_fflush_r+0xc>
 80186c2:	89a3      	ldrh	r3, [r4, #12]
 80186c4:	059b      	lsls	r3, r3, #22
 80186c6:	d4dd      	bmi.n	8018684 <_fflush_r+0xc>
 80186c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80186ca:	f7ff f914 	bl	80178f6 <__retarget_lock_release_recursive>
 80186ce:	e7d9      	b.n	8018684 <_fflush_r+0xc>
 80186d0:	4b05      	ldr	r3, [pc, #20]	; (80186e8 <_fflush_r+0x70>)
 80186d2:	429c      	cmp	r4, r3
 80186d4:	d101      	bne.n	80186da <_fflush_r+0x62>
 80186d6:	68ac      	ldr	r4, [r5, #8]
 80186d8:	e7df      	b.n	801869a <_fflush_r+0x22>
 80186da:	4b04      	ldr	r3, [pc, #16]	; (80186ec <_fflush_r+0x74>)
 80186dc:	429c      	cmp	r4, r3
 80186de:	bf08      	it	eq
 80186e0:	68ec      	ldreq	r4, [r5, #12]
 80186e2:	e7da      	b.n	801869a <_fflush_r+0x22>
 80186e4:	0801c25c 	.word	0x0801c25c
 80186e8:	0801c27c 	.word	0x0801c27c
 80186ec:	0801c23c 	.word	0x0801c23c

080186f0 <_lseek_r>:
 80186f0:	b538      	push	{r3, r4, r5, lr}
 80186f2:	4d07      	ldr	r5, [pc, #28]	; (8018710 <_lseek_r+0x20>)
 80186f4:	4604      	mov	r4, r0
 80186f6:	4608      	mov	r0, r1
 80186f8:	4611      	mov	r1, r2
 80186fa:	2200      	movs	r2, #0
 80186fc:	602a      	str	r2, [r5, #0]
 80186fe:	461a      	mov	r2, r3
 8018700:	f7e8 fb8a 	bl	8000e18 <_lseek>
 8018704:	1c43      	adds	r3, r0, #1
 8018706:	d102      	bne.n	801870e <_lseek_r+0x1e>
 8018708:	682b      	ldr	r3, [r5, #0]
 801870a:	b103      	cbz	r3, 801870e <_lseek_r+0x1e>
 801870c:	6023      	str	r3, [r4, #0]
 801870e:	bd38      	pop	{r3, r4, r5, pc}
 8018710:	20008628 	.word	0x20008628

08018714 <__swhatbuf_r>:
 8018714:	b570      	push	{r4, r5, r6, lr}
 8018716:	460e      	mov	r6, r1
 8018718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801871c:	2900      	cmp	r1, #0
 801871e:	b096      	sub	sp, #88	; 0x58
 8018720:	4614      	mov	r4, r2
 8018722:	461d      	mov	r5, r3
 8018724:	da07      	bge.n	8018736 <__swhatbuf_r+0x22>
 8018726:	2300      	movs	r3, #0
 8018728:	602b      	str	r3, [r5, #0]
 801872a:	89b3      	ldrh	r3, [r6, #12]
 801872c:	061a      	lsls	r2, r3, #24
 801872e:	d410      	bmi.n	8018752 <__swhatbuf_r+0x3e>
 8018730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018734:	e00e      	b.n	8018754 <__swhatbuf_r+0x40>
 8018736:	466a      	mov	r2, sp
 8018738:	f000 f8d8 	bl	80188ec <_fstat_r>
 801873c:	2800      	cmp	r0, #0
 801873e:	dbf2      	blt.n	8018726 <__swhatbuf_r+0x12>
 8018740:	9a01      	ldr	r2, [sp, #4]
 8018742:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018746:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801874a:	425a      	negs	r2, r3
 801874c:	415a      	adcs	r2, r3
 801874e:	602a      	str	r2, [r5, #0]
 8018750:	e7ee      	b.n	8018730 <__swhatbuf_r+0x1c>
 8018752:	2340      	movs	r3, #64	; 0x40
 8018754:	2000      	movs	r0, #0
 8018756:	6023      	str	r3, [r4, #0]
 8018758:	b016      	add	sp, #88	; 0x58
 801875a:	bd70      	pop	{r4, r5, r6, pc}

0801875c <__smakebuf_r>:
 801875c:	898b      	ldrh	r3, [r1, #12]
 801875e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018760:	079d      	lsls	r5, r3, #30
 8018762:	4606      	mov	r6, r0
 8018764:	460c      	mov	r4, r1
 8018766:	d507      	bpl.n	8018778 <__smakebuf_r+0x1c>
 8018768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801876c:	6023      	str	r3, [r4, #0]
 801876e:	6123      	str	r3, [r4, #16]
 8018770:	2301      	movs	r3, #1
 8018772:	6163      	str	r3, [r4, #20]
 8018774:	b002      	add	sp, #8
 8018776:	bd70      	pop	{r4, r5, r6, pc}
 8018778:	ab01      	add	r3, sp, #4
 801877a:	466a      	mov	r2, sp
 801877c:	f7ff ffca 	bl	8018714 <__swhatbuf_r>
 8018780:	9900      	ldr	r1, [sp, #0]
 8018782:	4605      	mov	r5, r0
 8018784:	4630      	mov	r0, r6
 8018786:	f7ff f90f 	bl	80179a8 <_malloc_r>
 801878a:	b948      	cbnz	r0, 80187a0 <__smakebuf_r+0x44>
 801878c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018790:	059a      	lsls	r2, r3, #22
 8018792:	d4ef      	bmi.n	8018774 <__smakebuf_r+0x18>
 8018794:	f023 0303 	bic.w	r3, r3, #3
 8018798:	f043 0302 	orr.w	r3, r3, #2
 801879c:	81a3      	strh	r3, [r4, #12]
 801879e:	e7e3      	b.n	8018768 <__smakebuf_r+0xc>
 80187a0:	4b0d      	ldr	r3, [pc, #52]	; (80187d8 <__smakebuf_r+0x7c>)
 80187a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80187a4:	89a3      	ldrh	r3, [r4, #12]
 80187a6:	6020      	str	r0, [r4, #0]
 80187a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187ac:	81a3      	strh	r3, [r4, #12]
 80187ae:	9b00      	ldr	r3, [sp, #0]
 80187b0:	6163      	str	r3, [r4, #20]
 80187b2:	9b01      	ldr	r3, [sp, #4]
 80187b4:	6120      	str	r0, [r4, #16]
 80187b6:	b15b      	cbz	r3, 80187d0 <__smakebuf_r+0x74>
 80187b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80187bc:	4630      	mov	r0, r6
 80187be:	f000 f8a7 	bl	8018910 <_isatty_r>
 80187c2:	b128      	cbz	r0, 80187d0 <__smakebuf_r+0x74>
 80187c4:	89a3      	ldrh	r3, [r4, #12]
 80187c6:	f023 0303 	bic.w	r3, r3, #3
 80187ca:	f043 0301 	orr.w	r3, r3, #1
 80187ce:	81a3      	strh	r3, [r4, #12]
 80187d0:	89a0      	ldrh	r0, [r4, #12]
 80187d2:	4305      	orrs	r5, r0
 80187d4:	81a5      	strh	r5, [r4, #12]
 80187d6:	e7cd      	b.n	8018774 <__smakebuf_r+0x18>
 80187d8:	0801772d 	.word	0x0801772d

080187dc <__malloc_lock>:
 80187dc:	4801      	ldr	r0, [pc, #4]	; (80187e4 <__malloc_lock+0x8>)
 80187de:	f7ff b889 	b.w	80178f4 <__retarget_lock_acquire_recursive>
 80187e2:	bf00      	nop
 80187e4:	20008630 	.word	0x20008630

080187e8 <__malloc_unlock>:
 80187e8:	4801      	ldr	r0, [pc, #4]	; (80187f0 <__malloc_unlock+0x8>)
 80187ea:	f7ff b884 	b.w	80178f6 <__retarget_lock_release_recursive>
 80187ee:	bf00      	nop
 80187f0:	20008630 	.word	0x20008630

080187f4 <_realloc_r>:
 80187f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187f6:	4607      	mov	r7, r0
 80187f8:	4614      	mov	r4, r2
 80187fa:	460e      	mov	r6, r1
 80187fc:	b921      	cbnz	r1, 8018808 <_realloc_r+0x14>
 80187fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018802:	4611      	mov	r1, r2
 8018804:	f7ff b8d0 	b.w	80179a8 <_malloc_r>
 8018808:	b922      	cbnz	r2, 8018814 <_realloc_r+0x20>
 801880a:	f7ff f87d 	bl	8017908 <_free_r>
 801880e:	4625      	mov	r5, r4
 8018810:	4628      	mov	r0, r5
 8018812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018814:	f000 f88c 	bl	8018930 <_malloc_usable_size_r>
 8018818:	42a0      	cmp	r0, r4
 801881a:	d20f      	bcs.n	801883c <_realloc_r+0x48>
 801881c:	4621      	mov	r1, r4
 801881e:	4638      	mov	r0, r7
 8018820:	f7ff f8c2 	bl	80179a8 <_malloc_r>
 8018824:	4605      	mov	r5, r0
 8018826:	2800      	cmp	r0, #0
 8018828:	d0f2      	beq.n	8018810 <_realloc_r+0x1c>
 801882a:	4631      	mov	r1, r6
 801882c:	4622      	mov	r2, r4
 801882e:	f7fe fe93 	bl	8017558 <memcpy>
 8018832:	4631      	mov	r1, r6
 8018834:	4638      	mov	r0, r7
 8018836:	f7ff f867 	bl	8017908 <_free_r>
 801883a:	e7e9      	b.n	8018810 <_realloc_r+0x1c>
 801883c:	4635      	mov	r5, r6
 801883e:	e7e7      	b.n	8018810 <_realloc_r+0x1c>

08018840 <_read_r>:
 8018840:	b538      	push	{r3, r4, r5, lr}
 8018842:	4d07      	ldr	r5, [pc, #28]	; (8018860 <_read_r+0x20>)
 8018844:	4604      	mov	r4, r0
 8018846:	4608      	mov	r0, r1
 8018848:	4611      	mov	r1, r2
 801884a:	2200      	movs	r2, #0
 801884c:	602a      	str	r2, [r5, #0]
 801884e:	461a      	mov	r2, r3
 8018850:	f7e8 fa82 	bl	8000d58 <_read>
 8018854:	1c43      	adds	r3, r0, #1
 8018856:	d102      	bne.n	801885e <_read_r+0x1e>
 8018858:	682b      	ldr	r3, [r5, #0]
 801885a:	b103      	cbz	r3, 801885e <_read_r+0x1e>
 801885c:	6023      	str	r3, [r4, #0]
 801885e:	bd38      	pop	{r3, r4, r5, pc}
 8018860:	20008628 	.word	0x20008628

08018864 <_raise_r>:
 8018864:	291f      	cmp	r1, #31
 8018866:	b538      	push	{r3, r4, r5, lr}
 8018868:	4604      	mov	r4, r0
 801886a:	460d      	mov	r5, r1
 801886c:	d904      	bls.n	8018878 <_raise_r+0x14>
 801886e:	2316      	movs	r3, #22
 8018870:	6003      	str	r3, [r0, #0]
 8018872:	f04f 30ff 	mov.w	r0, #4294967295
 8018876:	bd38      	pop	{r3, r4, r5, pc}
 8018878:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801887a:	b112      	cbz	r2, 8018882 <_raise_r+0x1e>
 801887c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018880:	b94b      	cbnz	r3, 8018896 <_raise_r+0x32>
 8018882:	4620      	mov	r0, r4
 8018884:	f000 f830 	bl	80188e8 <_getpid_r>
 8018888:	462a      	mov	r2, r5
 801888a:	4601      	mov	r1, r0
 801888c:	4620      	mov	r0, r4
 801888e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018892:	f000 b817 	b.w	80188c4 <_kill_r>
 8018896:	2b01      	cmp	r3, #1
 8018898:	d00a      	beq.n	80188b0 <_raise_r+0x4c>
 801889a:	1c59      	adds	r1, r3, #1
 801889c:	d103      	bne.n	80188a6 <_raise_r+0x42>
 801889e:	2316      	movs	r3, #22
 80188a0:	6003      	str	r3, [r0, #0]
 80188a2:	2001      	movs	r0, #1
 80188a4:	e7e7      	b.n	8018876 <_raise_r+0x12>
 80188a6:	2400      	movs	r4, #0
 80188a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80188ac:	4628      	mov	r0, r5
 80188ae:	4798      	blx	r3
 80188b0:	2000      	movs	r0, #0
 80188b2:	e7e0      	b.n	8018876 <_raise_r+0x12>

080188b4 <raise>:
 80188b4:	4b02      	ldr	r3, [pc, #8]	; (80188c0 <raise+0xc>)
 80188b6:	4601      	mov	r1, r0
 80188b8:	6818      	ldr	r0, [r3, #0]
 80188ba:	f7ff bfd3 	b.w	8018864 <_raise_r>
 80188be:	bf00      	nop
 80188c0:	20000198 	.word	0x20000198

080188c4 <_kill_r>:
 80188c4:	b538      	push	{r3, r4, r5, lr}
 80188c6:	4d07      	ldr	r5, [pc, #28]	; (80188e4 <_kill_r+0x20>)
 80188c8:	2300      	movs	r3, #0
 80188ca:	4604      	mov	r4, r0
 80188cc:	4608      	mov	r0, r1
 80188ce:	4611      	mov	r1, r2
 80188d0:	602b      	str	r3, [r5, #0]
 80188d2:	f7e8 fa25 	bl	8000d20 <_kill>
 80188d6:	1c43      	adds	r3, r0, #1
 80188d8:	d102      	bne.n	80188e0 <_kill_r+0x1c>
 80188da:	682b      	ldr	r3, [r5, #0]
 80188dc:	b103      	cbz	r3, 80188e0 <_kill_r+0x1c>
 80188de:	6023      	str	r3, [r4, #0]
 80188e0:	bd38      	pop	{r3, r4, r5, pc}
 80188e2:	bf00      	nop
 80188e4:	20008628 	.word	0x20008628

080188e8 <_getpid_r>:
 80188e8:	f7e8 ba12 	b.w	8000d10 <_getpid>

080188ec <_fstat_r>:
 80188ec:	b538      	push	{r3, r4, r5, lr}
 80188ee:	4d07      	ldr	r5, [pc, #28]	; (801890c <_fstat_r+0x20>)
 80188f0:	2300      	movs	r3, #0
 80188f2:	4604      	mov	r4, r0
 80188f4:	4608      	mov	r0, r1
 80188f6:	4611      	mov	r1, r2
 80188f8:	602b      	str	r3, [r5, #0]
 80188fa:	f7e8 fa72 	bl	8000de2 <_fstat>
 80188fe:	1c43      	adds	r3, r0, #1
 8018900:	d102      	bne.n	8018908 <_fstat_r+0x1c>
 8018902:	682b      	ldr	r3, [r5, #0]
 8018904:	b103      	cbz	r3, 8018908 <_fstat_r+0x1c>
 8018906:	6023      	str	r3, [r4, #0]
 8018908:	bd38      	pop	{r3, r4, r5, pc}
 801890a:	bf00      	nop
 801890c:	20008628 	.word	0x20008628

08018910 <_isatty_r>:
 8018910:	b538      	push	{r3, r4, r5, lr}
 8018912:	4d06      	ldr	r5, [pc, #24]	; (801892c <_isatty_r+0x1c>)
 8018914:	2300      	movs	r3, #0
 8018916:	4604      	mov	r4, r0
 8018918:	4608      	mov	r0, r1
 801891a:	602b      	str	r3, [r5, #0]
 801891c:	f7e8 fa71 	bl	8000e02 <_isatty>
 8018920:	1c43      	adds	r3, r0, #1
 8018922:	d102      	bne.n	801892a <_isatty_r+0x1a>
 8018924:	682b      	ldr	r3, [r5, #0]
 8018926:	b103      	cbz	r3, 801892a <_isatty_r+0x1a>
 8018928:	6023      	str	r3, [r4, #0]
 801892a:	bd38      	pop	{r3, r4, r5, pc}
 801892c:	20008628 	.word	0x20008628

08018930 <_malloc_usable_size_r>:
 8018930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018934:	1f18      	subs	r0, r3, #4
 8018936:	2b00      	cmp	r3, #0
 8018938:	bfbc      	itt	lt
 801893a:	580b      	ldrlt	r3, [r1, r0]
 801893c:	18c0      	addlt	r0, r0, r3
 801893e:	4770      	bx	lr

08018940 <_init>:
 8018940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018942:	bf00      	nop
 8018944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018946:	bc08      	pop	{r3}
 8018948:	469e      	mov	lr, r3
 801894a:	4770      	bx	lr

0801894c <_fini>:
 801894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801894e:	bf00      	nop
 8018950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018952:	bc08      	pop	{r3}
 8018954:	469e      	mov	lr, r3
 8018956:	4770      	bx	lr
